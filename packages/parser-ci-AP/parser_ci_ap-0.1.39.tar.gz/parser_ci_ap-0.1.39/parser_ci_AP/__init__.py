from .project import Project
from .project_file import AbstractProjectFile
from .type_info import BaseTypeInfo, FieldInfo, CompositeTypeInfo, StructInfo, UnionInfo, EnumInfo, TypedefInfo
from .function_info import FunctionInfo
from .variable_info import VariableInfo
from .define_info import DefineInfo
from .errors_info import DiagnosticInfo

__all__ = [
    "Project",
    "AbstractProjectFile",
    "BaseTypeInfo",
    "FieldInfo",
    "CompositeTypeInfo",
    "StructInfo",
    "UnionInfo",
    "EnumInfo",
    "TypedefInfo",
    "FunctionInfo",
    "VariableInfo",
    "DefineInfo",
    "DiagnosticInfo"
]



# Что может парсер

# На уровне проекта:
# 1) Перечислить все пользовательские типы данных (структуры, перечисления, typedef и т.д.);
# 2) Перечислить все файлы проекта;
# 3) Подсчитать количество строк (всего / без комментариев / только функциональных);
# 4) Перечислить все define-ы (макросы) проекта;
# 5) Перечислить все глобальные переменные проекта;
# 6) Перечислить все статические переменные проекта;
# 7) Перечислить все extern-переменные проекта;
# 8) Перечислить все функции проекта (глобальные и static отдельно);
# 9) Разделить все define-ы на системные и пользовательские;

# На уровне файла:
# 1) Перечислить все функции в файле (включая static и обычные);
# 2) Перечислить все зависимости (файлы, подключённые через #include);
# 3) Перечислить все переменные в файле (глобальные, static, extern);
# 4) Перечислить все define-ы в файле;
# 5) Перечислить все пользовательские типы данных в файле;
# 6) Подсчитать количество строк (всего / только функциональных);
# 7) Диагностика кода клангом

# На уровне функции:
# 1) Перечислить аргументы функции;
# 2) Перечислить локальные переменные;
# 3) Имя функции;
# 4) Получить шапку функции (прототип или полное объявление);
# 5) Извлечь из проекта весь контекст функции, чтобы можно было запустить её изолированно;
# 6) Перечислить глобальные переменные, используемые внутри функции;
# 7) Найти вызовы других функций внутри тела;
# 8) Определить тип возвращаемого значения;
# 9) Получить выражение, возвращаемое из функции (например: return x + 1 → "x + 1");
# 10) Число строк кода


