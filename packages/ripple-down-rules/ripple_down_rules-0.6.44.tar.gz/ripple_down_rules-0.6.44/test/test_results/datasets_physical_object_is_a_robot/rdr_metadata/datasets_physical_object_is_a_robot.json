{
    "_type": "ripple_down_rules.rdr.GeneralRDR",
    "start_rules": {
        "output_": {
            "_type": "ripple_down_rules.rdr.SingleClassRDR",
            "start_rule": {
                "_type": "ripple_down_rules.rules.SingleClassRule",
                "conditions": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def conditions_for_physical_object_is_a_robot(self_: PhysicalObject, output_: bool) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for PhysicalObject_is_a_robot.output_  of type .\"\"\"\n        return True\n    return conditions_for_physical_object_is_a_robot(**case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "PhysicalObject": "test.datasets.PhysicalObject"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "conclusion": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def physical_object_is_a_robot(self_: PhysicalObject, output_: bool) -> bool:\n        \"\"\"Get possible value(s) for PhysicalObject_is_a_robot.output_  of type .\"\"\"\n        return isinstance(self_, Robot)\n    return physical_object_is_a_robot(**case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "Robot": "test.datasets.Robot",
                        "PhysicalObject": "test.datasets.PhysicalObject"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "parent": null,
                "conclusion_name": "output_",
                "weight": "",
                "uid": "226969243620390858682731042391766665817",
                "refinement": null,
                "alternative": null
            },
            "generated_python_file_name": "physical_object_is_a_robot_output__scrdr",
            "name": "output_",
            "case_type": "typing.Dict",
            "case_name": "PhysicalObject_is_a_robot"
        }
    },
    "generated_python_file_name": "physical_object_is_a_robot_rdr",
    "name": "output_",
    "case_type": "typing.Dict",
    "case_name": "PhysicalObject_is_a_robot"
}