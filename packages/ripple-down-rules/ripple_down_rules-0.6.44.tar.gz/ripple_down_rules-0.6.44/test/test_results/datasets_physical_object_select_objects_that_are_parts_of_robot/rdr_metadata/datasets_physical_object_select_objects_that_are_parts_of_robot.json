{
    "_type": "ripple_down_rules.rdr.GeneralRDR",
    "start_rules": {
        "output_": {
            "_type": "ripple_down_rules.rdr.MultiClassRDR",
            "start_rule": {
                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                "conditions": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def conditions_for_physical_object_select_objects_that_are_parts_of_robot(self_: PhysicalObject, objects: List[PhysicalObject], robot: Robot, output_: PhysicalObject) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for PhysicalObject_select_objects_that_are_parts_of_robot.output_  of type PhysicalObject.\"\"\"\n        return robot is not None\n    return conditions_for_physical_object_select_objects_that_are_parts_of_robot(**case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "Robot": "test.datasets.Robot",
                        "List": "typing.List",
                        "PhysicalObject": "test.datasets.PhysicalObject"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "conclusion": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def physical_object_select_objects_that_are_parts_of_robot(self_: PhysicalObject, objects: List[PhysicalObject], robot: Robot, output_: PhysicalObject) -> List[PhysicalObject]:\n        \"\"\"Get possible value(s) for PhysicalObject_select_objects_that_are_parts_of_robot.output_  of type PhysicalObject.\"\"\"\n        robot_parts = [obj for obj in objects if obj in robot.parts]\n        return robot_parts\n    return physical_object_select_objects_that_are_parts_of_robot(**case)\n    ",
                    "conclusion_type": [
                        "test.datasets.PhysicalObject"
                    ],
                    "scope": {
                        "Robot": "test.datasets.Robot",
                        "List": "typing.List",
                        "PhysicalObject": "test.datasets.PhysicalObject"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": false
                },
                "parent": null,
                "conclusion_name": "output_",
                "weight": "",
                "uid": "164855806603893754507167918997373216146",
                "refinement": null,
                "alternative": null
            },
            "generated_python_file_name": "physical_object_select_objects_that_are_parts_of_robot_output__mcrdr",
            "name": "output_",
            "case_type": "typing.Dict",
            "case_name": "PhysicalObject_select_objects_that_are_parts_of_robot"
        }
    },
    "generated_python_file_name": "physical_object_select_objects_that_are_parts_of_robot_rdr",
    "name": "output_",
    "case_type": "typing.Dict",
    "case_name": "PhysicalObject_select_objects_that_are_parts_of_robot"
}