"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/building_a_plugin/guides.html#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget
from skimage.util import img_as_float
from magicgui.widgets import Container, create_widget, PushButton, FileEdit
from AutomaticRange.smooth import predict_range
import torch
import numpy as np
from AutomaticRange.models import AutomaticRangeNet
from AutomaticRange.smooth import predict_range

if TYPE_CHECKING:
    import napari
import requests
from pathlib import Path

@magic_factory(auto_call=True)
def automatic_range_magic_widget(
    dapi_layer: "napari.layers.Image", marker_layer: "napari.layers.Image"
) -> None:
    pass
class AutomaticRangeWidget(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer

        self._dapi_layer = create_widget(
            label="DAPI Image", annotation="napari.layers.Image"
        )
        self._marker_layer = create_widget(
            label="Marker Image", annotation="napari.layers.Image"
        )

        # Define the URL to download the default checkpoint file
        checkpoint_url = "https://raw.githubusercontent.com/Pacomito/AutomaticRange/main/checkpoints/training_set_processed_CD4_nsamp_20_ntile_5_07102025_automatic_range.pt"
        default_checkpoint_path = Path.home() / "checkpoint.pt"

        # Load the last used checkpoint path from a settings file
        settings_file = Path.home() / ".automatic_range_settings"
        if settings_file.exists():
            with open(settings_file, "r") as f:
                last_checkpoint_path = f.read().strip()
        else:
            last_checkpoint_path = str(default_checkpoint_path)
            with open(settings_file, "w") as f:
                f.write(str(default_checkpoint_path))


        # Download the default checkpoint file if it doesn't exist
        if not default_checkpoint_path.exists():
            try:
                response = requests.get(checkpoint_url, stream=True)
                response.raise_for_status()
                with open(default_checkpoint_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
            except requests.RequestException as e:
                print(f"Failed to download checkpoint: {e}")

        # Set the initial value of the checkpoint file widget
        self._checkpoint_file = FileEdit(
            label="Checkpoint Path",
            value=last_checkpoint_path
        )

        # Save the selected checkpoint path to the settings file when changed
        def save_checkpoint_path(event):
            with open(settings_file, "w") as f:
                f.write(str(self._checkpoint_file.value))

        self._checkpoint_file.changed.connect(save_checkpoint_path)

        self._run_button = PushButton(label="Run Automatic Range")

        self._run_button.clicked.connect(self._run_predict_range)

        self.extend([self._dapi_layer, self._marker_layer, self._checkpoint_file, self._run_button])

    def _run_predict_range(self):
        dapi_layer = self._dapi_layer.value
        marker_layer = self._marker_layer.value
        checkpoint_path = self._checkpoint_file.value
        if dapi_layer is None or marker_layer is None or not checkpoint_path:
            return

        # Load trained model
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model = AutomaticRangeNet().to(device)
        model.load_state_dict(torch.load(checkpoint_path, map_location=device))
        model.eval()

        dapi = dapi_layer.data.astype(np.float16)
        marker = marker_layer.data.astype(np.float16)
        normalized_marker, min_interp, max_interp  = predict_range(dapi=dapi, marker=marker, model=model, device = device) 

        name = marker_layer.name + "_normalized"
        self._viewer.add_image(normalized_marker, name=name, blending='additive')


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.
def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float",
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold


# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold


# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")



