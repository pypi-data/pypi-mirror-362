# SPDX-FileCopyrightText: 2025-present Mike Boyle <michael.oliver.boyle@gmail.com>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches:
      - main
    tags: ["*"]
  pull_request:

concurrency:
  group: test-${{ github.head_ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
      contents: write
    # Provide an output so the next job knows whether to release
    outputs:
      RUN_RELEASE: ${{ steps.release_check.outputs.run_release }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install dependencies
        run: pip install --upgrade pip hatch

      - name: Run tests
        run: hatch run tests:test

      - name: Check marimo
        if: "!contains(github.event.head_commit.message, '[skip marimo check]')"
        run: hatch run marimo:check

      - name: Export notebook
        run: hatch run marimo:convert

      - name: Determine bump type
        id: version
        run: |
          OLD_VERSION="$(hatch version)"
          BUMP_TYPE="patch"
          if [[ "$OLD_VERSION" == *"a"* ]]; then
              BUMP_TYPE="a"
          elif [[ "$OLD_VERSION" == *"b"* ]]; then
              BUMP_TYPE="b"
          fi
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          if [[ "$COMMIT_MSG" == *"#major"* ]]; then
              BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
              BUMP_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"#patch"* ]]; then
              BUMP_TYPE="patch"
          elif [[ "$COMMIT_MSG" == *"#alpha"* ]]; then
              BUMP_TYPE="a"
          elif [[ "$COMMIT_MSG" == *"#beta"* ]]; then
              BUMP_TYPE="b"
          elif [[ "$COMMIT_MSG" == *"#release"* ]]; then
              BUMP_TYPE="release"
          fi
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          export NO_COLOR=1  # To turn off formatting in `hatch version`
          hatch version ${{ steps.version.outputs.BUMP_TYPE }}
          NEW_VERSION="$(hatch version | tr -d '\n')"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV
          prerelease="false"
          if [[ "$NEW_VERSION" == *"a"* ]]; then
              prerelease="true"
          elif [[ "$NEW_VERSION" == *"b"* ]]; then
              prerelease="true"
          fi
          echo "prerelease=${prerelease}" >> $GITHUB_ENV

      - name: Copy version to catalog_notebook.py dependencies
        run: |
          sed -i "s/sxscatalog==.*\"/sxscatalog==${{ env.new_version }}\"/" scripts/catalog_notebook.py

      - name: Determine if release steps should run
        id: release_check
        run: |
          # Default to skipping release steps
          echo "run_release=false" >> $GITHUB_OUTPUT

          # If the ref is main, check the commit message for [skip release]
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            COMMIT_MSG="$(git log -1 --pretty=%B)"
            if [[ "$COMMIT_MSG" != *"[skip release]"* ]]; then
              echo "run_release=true" >> $GITHUB_OUTPUT
              echo "run_release=true"
            fi
          fi

      - name: Commit version bump
        if: ${{ steps.release_check.outputs.run_release == 'true' && github.ref == 'refs/heads/main' }}
        run: |
          # Note that we need to set read and write permissions under
          # "Settings" > "Actions" > "General" > "Workflow permissions"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add src/sxscatalog/__about__.py scripts/catalog_notebook.py
          git commit -m "Bump version to v${new_version}"
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      - name: Create GitHub Release
        if: ${{ steps.release_check.outputs.run_release == 'true' && github.ref == 'refs/heads/main' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Publish to PyPI
        if: ${{ steps.release_check.outputs.run_release == 'true' && github.ref == 'refs/heads/main' }}
        env:
          # 1) Get key from https://pypi.org/manage/account/token/
          # 2) Copy it to Github > repo > Settings > Secrets > Actions > New repository secret
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_TOKEN }}
        shell: bash
        run: |
          hatch build
          hatch publish
  
      - name: Upload Pages Artifact
        if: ${{ steps.release_check.outputs.run_release == 'true' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: scripts/catalog_notebook_output

      - name: Deploy to GitHub Pages
        # Be sure to allow this under Settings > Pages > Build and deployment > Source > Github Actions
        if: ${{ steps.release_check.outputs.run_release == 'true' && github.ref == 'refs/heads/main' }}
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
