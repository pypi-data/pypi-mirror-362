"use strict";(self.webpackChunksagemaker_sparkmonitor=self.webpackChunksagemaker_sparkmonitor||[]).push([[159],{3195:(e,t,s)=>{s.d(t,{t:()=>n});var a=s(3345),o=s.n(a);class n extends o().Component{constructor(e){super(e),this.state={hasError:!1}}static getDerivedStateFromError(e){return{hasError:!0}}componentDidCatch(e,t){console.log("SparkMonitor: Caught react error:",e,t)}render(){return this.state.hasError?o().createElement("div",null,"Error: Something went wrong displaying this data."):this.props.children}}},3159:(e,t,s)=>{s.r(t),s.d(t,{PLUGIN_ID:()=>Z,default:()=>X});var a=s(6341),o=s(5828),n=s(3345),i=s.n(n),l=s(7262);class r{constructor(e){this.notebookPanel=e,this.isReady=new l.PromiseDelegate,this.cellSlotMap={},this.cellReexecuted=!1,this.numCellsExecuted=0,this.lastBusySignal="",this.init()}async init(){await this.notebookPanel.revealed,this.notebook=this.notebookPanel.content,this.notebook.notebookConfig.recordTiming=!0,this.registerCells(),this.isReady.resolve(void 0),this.lastExecutedCell="dummy"}registerMetadataChanges(e){if(!(e.id in this.cellSlotMap)){const t=()=>this.cellMetadataChanged(e);this.cellSlotMap[e.id]=t,e.metadataChanged.connect(t),this.cellMetadataChanged(e)}}deregisterMetadataChanges(e){const t=this.cellSlotMap[e.id];t&&e.metadataChanged.disconnect(t),delete this.cellSlotMap[e.id]}getCodeCellFromModel(e){return"code"===e.type?this.notebookPanel.content.widgets.find((t=>t.model===e)):null}cellMetadataChanged(e){const t=this.getCodeCellFromModel(e);if(t){const e=t.model.metadata.execution;e&&e["iopub.status.busy"]&&this.lastBusySignal!==e["iopub.status.busy"]&&(this.lastExecutedCell=this.activeCell,this.activeCell=t,this.cellReexecuted=this.lastExecutedCell===t,this.numCellsExecuted+=1,this.lastBusySignal=e["iopub.status.busy"])}}registerCells(){const e=this.notebookPanel.context.model.cells;e.changed.connect(((e,t)=>{t.oldValues.forEach(this.deregisterMetadataChanges.bind(this)),t.newValues.forEach(this.registerMetadataChanges.bind(this))}));for(let t=0;t<e.length;t+=1)this.registerMetadataChanges(e.get(t))}getActiveCell(){return this.activeCell}getCellReexecuted(){return this.cellReexecuted}getNumCellsExecuted(){return this.numCellsExecuted}ready(){return this.isReady.promise}}var c=s(4943),d=s(7339);const u=(0,c.observer)((()=>{const e=(0,d.Gx)(),t=(0,d.Xp)(),s=e=>t.isCollapsed||t.view!==e?"":"tabbuttonactive",a="jobtabletabbuttonicon tabbutton "+s("jobs"),o="taskviewtabbuttonicon tabbutton "+s("taskchart"),n="timelinetabbuttonicon tabbutton "+s("timeline"),l=e.trans,r=l.__(" Apache Spark "),c=l.__("EXECUTORS"),u=l.__("CORES"),m=l.__("Jobs"),h=l.__("STARTING"),p=l.__("ERROR"),g=l.__("RUNNING"),k=l.__("COMPLETED"),b=l.__("FAILED"),S=l.__("Tasks"),T=l.__("Event Timeline"),E=l.__("Close Display");return i().createElement("div",{className:"title"},i().createElement("div",{className:"titleleft"},i().createElement("span",{className:"tbitem titlecollapse ",onClick:()=>{t.toggleCollapseCellDisplay()}},i().createElement("svg",{className:"headericon "+(t.isCollapsed?"headericoncollapsed":""),width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},i().createElement("path",{d:"M19.376 12.4154L8.77735 19.4811C8.54759 19.6343 8.23715 19.5722 8.08397 19.3425C8.02922 19.2603 8 19.1638 8 19.0651V4.93359C8 4.65744 8.22386 4.43359 8.5 4.43359C8.59871 4.43359 8.69522 4.46281 8.77735 4.51756L19.376 11.5833C19.6057 11.7365 19.6678 12.047 19.5146 12.2767C19.478 12.3316 19.4309 12.3788 19.376 12.4154Z",fill:"var(--jp-inverse-layout-color0)"})),i().createElement("span",null)),i().createElement("span",{className:"tbitem badgecontainer"},i().createElement("b",null,r),i().createElement("span",{className:"badgeexecutor"},i().createElement("span",{className:"badgeexecutorcount"},e.numExecutors)," ",c),i().createElement("span",{className:"badgeexecutorcores"},i().createElement("span",{className:"badgeexecutorcorescount"},e.numTotalCores)," ",u),i().createElement("b",null," ",m," "),i().createElement("span",{className:"badges"},t.isStarting?i().createElement("span",{className:"badgerunning"},i().createElement("span",{className:"badgerunningcount"},"1")," ",h):"",t.isError?i().createElement("span",{className:"badgefailed"},i().createElement("span",{className:"badgefailedcount"},"1")," ",p):"",t.numActiveJobs?i().createElement("span",{className:"badgerunning"},i().createElement("span",{className:"badgerunningcount"},t.numActiveJobs)," ",g):"",t.numCompletedJobs?i().createElement("span",{className:"badgecompleted"},i().createElement("span",{className:"badgecompletedcount"},t.numCompletedJobs)," ",k):"",t.numFailedJobs?i().createElement("span",{className:"badgefailed"},i().createElement("span",{className:"badgefailedcount"},t.numFailedJobs)," ",b):""))),i().createElement("div",{className:"titleright"},i().createElement("div",{className:"tabbuttons"},i().createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",id:"jobtable",className:a,onClick:()=>{t.setView("jobs")}},i().createElement("title",null,m),i().createElement("path",{d:"M4 8H20V5H4V8ZM14 19V10H10V19H14ZM16 19H20V10H16V19ZM8 19V10H4V19H8ZM3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3Z",fill:"var(--jp-inverse-layout-color0)"})),i().createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",id:"chart",className:o,onClick:()=>{t.setView("taskchart")}},i().createElement("title",null,S),i().createElement("path",{d:"M3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3ZM7 13V17H9V13H7ZM11 7V17H13V7H11ZM15 10V17H17V10H15Z",fill:"var(--jp-inverse-layout-color0)"})),i().createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",id:"timeline",className:n,onClick:()=>{t.setView("timeline")}},i().createElement("title",null,T),i().createElement("path",{d:"M3 3C2.44772 3 2 3.44772 2 4V20C2 20.5523 2.44772 21 3 21H21C21.5523 21 22 20.5523 22 20V4C22 3.44772 21.5523 3 21 3H3ZM4 19V5H20V19H4ZM14 7H6V9H14V7ZM18 15V17H10V15H18ZM16 11H8V13H16V11Z",fill:"var(--jp-inverse-layout-color0)"})),i().createElement("svg",{width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:"closebuttonicon tabbutton",onClick:()=>{t.toggleHideCellDisplay()}},i().createElement("title",null,E),i().createElement("path",{d:"M11.9997 10.5865L16.9495 5.63672L18.3637 7.05093L13.4139 12.0007L18.3637 16.9504L16.9495 18.3646L11.9997 13.4149L7.04996 18.3646L5.63574 16.9504L10.5855 12.0007L5.63574 7.05093L7.04996 5.63672L11.9997 10.5865Z",fill:"var(--jp-inverse-layout-color0)"})))))}));var m=s(7289),h=s.n(m);const p=e=>i().createElement("div",{className:"tdjobitemprogress cssprogress"},i().createElement("div",{className:"data"},e.completed,"/",e.total,e.running>0?` (${e.running})`:""),i().createElement("span",{className:"val1",style:{width:1*e.completed/e.total*100+"%"}}),i().createElement("span",{className:"val2",style:{width:1*e.running/e.total*100+"%"}}));var g=s(9069),k=s.n(g),b=s(3195);const S=(0,c.observer)((e=>{const t=(0,d.Gx)().stages[e.stageId];return i().createElement("tr",{className:"stagerow"},i().createElement("td",{className:"tdstageid"},t.stageId),i().createElement("td",{className:"tdstagename"},t.name),i().createElement("td",{className:"tdstagestatus"},i().createElement("span",{className:t.status},t.status)),i().createElement("td",{className:"tdtasks"},i().createElement(p,{total:t.numTasks,running:t.numActiveTasks,completed:t.numCompletedTasks})),i().createElement("td",{className:"tdstagestarttime"},i().createElement(h(),{date:t.submissionTime,minPeriod:10})),i().createElement("td",{className:"tdstageduration"},t.completionTime?k()(t.completionTime?.getTime()-t.submissionTime.getTime()):"-"))})),T=(0,c.observer)((e=>{const t=(0,d.Gx)(),s=t.jobs[e.jobId].uniqueStageIds.map((e=>i().createElement(S,{stageId:e,key:e}))),a=t.trans,o=a.__("ID"),n=a.__("Stage"),l=a.__("Status"),r=a.__("Tasks"),c=a.__("Submission Time"),u=a.__("Duration");return i().createElement("table",{className:"stagetable"},i().createElement("thead",null,i().createElement("tr",null,i().createElement("th",{className:"thstageid"},o),i().createElement("th",{className:"thstagename"},n),i().createElement("th",{className:"thstagestatus"},l),i().createElement("th",{className:"thstagetasks"},r),i().createElement("th",{className:"thstagestart"},c),i().createElement("th",{className:"thstageduration"},u))),i().createElement("tbody",null,s))})),E=(0,c.observer)((e=>{const t=(0,d.Gx)(),s=t?.jobs[e.jobId],[a,o]=i().useState(!0);return i().createElement(i().Fragment,null,i().createElement("tr",{className:"jobrow"},i().createElement("td",{className:"tdstagebutton",onClick:()=>{o((e=>!e))}},i().createElement("svg",{className:"tdstageicon "+(a?"":"tdstageiconcollapsed"),width:"24",height:"24",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg"},i().createElement("path",{d:"M19.376 12.4154L8.77735 19.4811C8.54759 19.6343 8.23715 19.5722 8.08397 19.3425C8.02922 19.2603 8 19.1638 8 19.0651V4.93359C8 4.65744 8.22386 4.43359 8.5 4.43359C8.59871 4.43359 8.69522 4.46281 8.77735 4.51756L19.376 11.5833C19.6057 11.7365 19.6678 12.047 19.5146 12.2767C19.478 12.3316 19.4309 12.3788 19.376 12.4154Z",fill:"var(--jp-inverse-layout-color0)"}))),i().createElement("td",{className:"tdjobid"},s.jobId),i().createElement("td",{className:"tdjobname"},s.name),i().createElement("td",{className:"tdjobstatus"},i().createElement("span",{className:"tditemjobstatus "+s.status},s.status)),i().createElement("td",{className:"tdjobstages"},s.numCompletedStages,"/",s.numStages,s.numSkippedStages>0?`(${s.numSkippedStages} skipped)`:"",s.numActiveStages>0?`(${s.numActiveStages} active)`:""),i().createElement("td",{className:"tdtasks"},i().createElement(p,{total:s.numTasks,running:s.numActiveTasks,completed:s.numCompletedTasks})),i().createElement("td",{className:"tdjobstarttime"},i().createElement(h(),{date:s.startTime})),i().createElement("td",{className:"tdjobduration"},s.endTime?k()(s.endTime?.getTime()-s.startTime.getTime()):"-")),!a&&i().createElement("tr",{className:"jobstagedatarow"},i().createElement("td",{className:"stagetableoffset"}),i().createElement("td",{colSpan:7,className:"stagedata"},i().createElement(T,{jobId:e.jobId}))))})),C=(0,c.observer)((()=>{const e=(0,d.Xp)(),t=(0,d.Gx)().trans,s=t.__("ID"),a=t.__("Job"),o=t.__("Status"),n=t.__("Stages"),l=t.__("Tasks"),r=t.__("Submission Time"),c=t.__("Duration");return i().createElement(b.t,null,i().createElement("div",{className:"tabcontent"},i().createElement("table",{className:"jobtable"},i().createElement("thead",null,i().createElement("tr",null,i().createElement("th",{className:"thbutton"}),i().createElement("th",{className:"thjobid"},s),i().createElement("th",{className:"thjobname"},a),i().createElement("th",{className:"thjobstatus"},o),i().createElement("th",{className:"thjobstages"},n),i().createElement("th",{className:"thjobtasks"},l),i().createElement("th",{className:"thjobstart"},r),i().createElement("th",{className:"thjobtime"},c))),i().createElement("tbody",{className:"jobtablebody"},e.uniqueJobIds.map((e=>i().createElement(E,{jobId:e,key:e})))))))})),v=i().lazy((()=>Promise.all([s.e(20),s.e(165)]).then(s.bind(s,8331)))),I=()=>i().createElement(n.Suspense,{fallback:i().createElement("div",null,"loading")},i().createElement(v,null)),w=i().lazy((()=>s.e(909).then(s.bind(s,5036)))),f=()=>i().createElement(n.Suspense,{fallback:i().createElement("div",null,"loading")},i().createElement(w,null)),x=(0,c.observer)((()=>{const e=(0,d.Gx)(),t=(0,d.Xp)();if(!t||t?.uniqueJobIds?.length<=0||t.isRemoved||e?.hideAllDisplays)return i().createElement("div",{className:"sparkMonitorCellRoot"});let s=i().createElement(i().Fragment,null);return t.isCollapsed||"jobs"!==t?.view?t.isCollapsed||"taskchart"!==t?.view?t.isCollapsed||"timeline"!==t?.view||(s=i().createElement(I,null)):s=i().createElement(f,null):s=i().createElement(C,null),i().createElement("div",{className:"sparkMonitorCellRoot CellMonitor pm"},i().createElement(u,null),i().createElement("div",{className:"content"},s))})),_=(0,c.observer)((e=>i().createElement(d.Uh.Provider,{value:d.M_.notebooks[e.notebookId]},i().createElement(d.DT.Provider,{value:d.M_.notebooks[e.notebookId].cells[e.cellId]},i().createElement(x,null)))));var D=s(8805);const N="project.iam",A="%%pyspark",y="%%scalaspark",M="--name";let j={};async function J(e=!1){if(t=j,0===Object.keys(t).length||e){j={};const e=await fetch("/jupyterlab/default/api/aws/datazone/connections");(await e.json()).items.forEach((e=>{"IAM"==e.type||"REDSHIFT"==e.type||"ATHENA"==e.type?j[e.name]=e.type:"SPARK"==e.type&&("sparkGlueProperties"in e.props?j[e.name]="SPARK_GLUE":"sparkEmrProperties"in e.props&&"computeArn"in e.props.sparkEmrProperties&&(e.props.sparkEmrProperties.computeArn.includes("cluster")?j[e.name]="SPARK_EMR_EC2":e.props.sparkEmrProperties.computeArn.includes("applications")&&(j[e.name]="SPARK_EMR_SERVERLESS")))}))}var t;return j}function R(e){let t=j[e];return t||(J(!0),t=j[e]),!!t.startsWith("SPARK")}const P={dummy_application_data:JSON.parse('[{"id":"application_id","name":"loading","attempts":[{"attemptId":"1"}]}]'),dummy_executor_data:JSON.parse('[{"id":"1","hostPort":"ip-10-0-216-105.us-west-2.compute.internal:41307","isActive":false,"rddBlocks":0,"memoryUsed":0,"diskUsed":0,"totalCores":2,"maxTasks":2,"activeTasks":0,"failedTasks":0,"completedTasks":0,"totalTasks":0,"totalDuration":0,"totalGCTime":0,"totalInputBytes":0,"totalShuffleRead":0,"totalShuffleWrite":0,"isBlacklisted":false,"maxMemory":2463419596,"addTime":"2024-10-03T19:01:20.557GMT","removeTime":"2024-10-03T19:02:23.840GMT","removeReason":"Executor killed by driver.","executorLogs":{"stderr":"/logs/containers/application_1727905989283_0002/container_1727905989283_0002_01_000002/stderr.gz","stdout":"/logs/containers/application_1727905989283_0002/container_1727905989283_0002_01_000002/stdout.gz"},"memoryMetrics":{"usedOnHeapStorageMemory":0,"usedOffHeapStorageMemory":0,"totalOnHeapStorageMemory":2463419596,"totalOffHeapStorageMemory":0},"blacklistedInStages":[],"attributes":{"NM_HTTP_ADDRESS":"ip-10-0-216-105.us-west-2.compute.internal:8042","USER":"livy","LOG_FILES":"stderr,stdout","NM_HTTP_PORT":"8042","CLUSTER_ID":"","NM_PORT":"8041","HTTP_SCHEME":"http://","NM_HOST":"ip-10-0-216-105.us-west-2.compute.internal","CONTAINER_ID":"container_1727905989283_0002_01_000002"},"resources":{},"resourceProfileId":0,"isExcluded":false,"excludedInStages":[]},{"id":"driver","hostPort":"ip-10-0-216-105.us-west-2.compute.internal:34951","isActive":true,"rddBlocks":0,"memoryUsed":0,"diskUsed":0,"totalCores":0,"maxTasks":0,"activeTasks":0,"failedTasks":0,"completedTasks":0,"totalTasks":0,"totalDuration":4500458,"totalGCTime":0,"totalInputBytes":0,"totalShuffleRead":0,"totalShuffleWrite":0,"isBlacklisted":false,"maxMemory":1099746508,"addTime":"2024-10-03T19:01:12.053GMT","executorLogs":{"stderr":"/logs/containers/application_1727905989283_0002/container_1727905989283_0002_01_000001/stderr.gz","stdout":"/logs/containers/application_1727905989283_0002/container_1727905989283_0002_01_000001/stdout.gz"},"memoryMetrics":{"usedOnHeapStorageMemory":0,"usedOffHeapStorageMemory":0,"totalOnHeapStorageMemory":1099746508,"totalOffHeapStorageMemory":0},"blacklistedInStages":[],"attributes":{"NM_HTTP_ADDRESS":"ip-10-0-216-105.us-west-2.compute.internal:8042","USER":"livy","LOG_FILES":"stderr,stdout","NM_HTTP_PORT":"8042","CLUSTER_ID":"","NM_PORT":"8041","HTTP_SCHEME":"http://","NM_HOST":"ip-10-0-216-105.us-west-2.compute.internal","CONTAINER_ID":"container_1727905989283_0002_01_000001"},"resources":{},"resourceProfileId":0,"isExcluded":false,"excludedInStages":[]}]'),dummy_job_data:JSON.parse('[{"jobId":0,"name":"loading","description":"Job group for statement 1","submissionTime":"2024-10-08T05:38:56.957GMT","completionTime":"","stageIds":[],"jobGroup":"1","jobTags":[],"status":"STARTING","numTasks":1,"numActiveTasks":0,"numCompletedTasks":0,"numSkippedTasks":0,"numFailedTasks":0,"numKilledTasks":0,"numCompletedIndices":2,"numActiveStages":1,"numCompletedStages":0,"numSkippedStages":0,"numFailedStages":0,"killedTasksSummary":{}}]')};class q{constructor(e,t,s,o){this.notebookPanel=e,this.notebookStore=t,this.stateDb=s,this.notebooks=o,this.cellExecCountSinceSparkJobStart=0,this.createCellReactElements(),this.currentCellTracker=new r(e),this.kernel=e.session?this.notebookPanel.session.kernel:this.notebookPanel.sessionContext.session?.kernel,this.startComm(),J(),this.kernel?.statusChanged.connect(((e,t)=>{"restarting"===t&&(this.currentCellTracker.cellReexecuted=!1,this.startComm())})),this.notebookPanel.content.model?.cells.changed.connect(((e,s)=>{"remove"===s.type&&s.oldValues.forEach((e=>{t.onCellRemoved(e.id)}))})),a.NotebookActions.executionScheduled.connect((async(e,t)=>{let s;s=t.cell;const a=s.model,o=a?.sharedModel.source;if(null!=o&&!function(e){if(void 0===e)return!1;const t=e.model.sharedModel.source.trim().split("\n");if(t.length>0){let e=N;const s=t[0];if(s.includes("%%connect"))return e=s.split(M)[1].split(" ")[1],!(t.length>1&&t[1].startsWith("%"))&&R(e);if(s.includes("%%spark")||s.includes(A)||s.includes(y))return!(t.length>1&&t[1].startsWith("%"));if(s.includes("%%sql"))return R(s.split(" ")[1])}return!1}(s))return;this.notebookStore.clearAllData(),this.lastExecutedCellModel=a;const n=function(e){if(void 0===e)return!1;const t=e.model.sharedModel.source.trim().split("\n");if(t.length>0){let e=N;const s=t[0];return s.includes(M)?e=s.split(M)[1].split(" ")[1]:(s.includes(A)||s.includes(y))&&(e=s.split(" ")[1]),e}}(s);this.comm&&s&&n&&this.comm.send({msgtype:"newExecution",content:{cell_id:a.id,connection_name:n}})})),a.NotebookActions.executed.connect(((e,t)=>{let s;s=t.cell,this.comm&&s&&this.comm.send({msgtype:"executed",content:{}})}))}getNoteBookPanel(){return this.notebookPanel}async executeCode(e){const t=this.kernel;if(!t)throw new Error("Session has no kernel.");return new Promise(((s,a)=>{t.requestExecute(e,!1,void 0).onIOPub=e=>{console.log(`onIOPub : ${e}`);const t=e.header.msg_type;if("execute_result"===t){const t=e.content.data["text/plain"];s(t)}else"error"===t&&(console.error("Kernel operation failed",e.content),a(e.content))}}))}async createCellReactElements(){const e=async e=>{if("code"===e.type){const t=this.notebookPanel.content.widgets.find((t=>t.model===e));if(t&&!t.node.querySelector(".sparkMonitorCellRoot")){await t.ready;const s=D.ReactWidget.create(i().createElement(_,{notebookId:this.notebookPanel.id,cellId:e.id}));s.addClass("spark-monitor-cell-widget"),t.layout.addWidget(s),t.update()}}},t=this.notebookPanel.context.model.cells;t.changed.connect((async(t,s)=>{"add"==s.type&&e(t.get(s.newIndex))}));for(let s=0;s<t.length;s+=1)e(t.get(s))}wait(e){return new Promise((t=>setTimeout(t,e)))}toggleAll(){this.notebookStore.toggleHideAllDisplays()}startComm(){console.log("SparkMonitor: Starting Comm with kernel."),this.currentCellTracker.ready().then((()=>{this.comm="createComm"in(this.kernel||{})?this.kernel?.createComm("SparkMonitor"):this.kernel.connectToComm("SparkMonitor"),this.comm?(this.comm.open({msgtype:"openfromfrontend"}),this.comm.onMsg=e=>{this.handleMessage(e)},this.comm.onClose=e=>{},console.log("SparkMonitor: Connection with comms established")):console.warn("SparkMonitor: Unable to connect to comm")}))}getLastExecutedCellModel(){return this.lastExecutedCellModel}getActiveCell(){return this.notebooks.activeCell}setLastExecutedCellModelWithId(e){const t=this.notebookPanel.content.widgets.find((t=>t.model.id===e));t?this.setLastExecutedCellModel(t.model):console.error(`sparkmonitor: cannot find last executed cell with id ${e}`)}setLastExecutedCellModel(e){this.lastExecutedCellModel=e}onSparkJobStart(e){const t=this.currentCellTracker.getActiveCell();t?(this.currentCellTracker.getNumCellsExecuted()>this.cellExecCountSinceSparkJobStart&&(this.cellExecCountSinceSparkJobStart=this.currentCellTracker.getNumCellsExecuted(),this.notebookStore.onCellExecutedAgain(t.model.id)),this.notebookStore.onSparkJobStart(t.model.id,e)):console.warn("SparkMonitor: Job started with no running cell.")}onSparkStageSubmitted(e){const t=this.currentCellTracker.getActiveCell();t?this.notebookStore.onSparkStageSubmitted(t.model.id,e):console.warn("SparkMonitor: Stage started with no running cell.")}async handleMessage(e){if(e.content.data.msgtype||console.warn("SparkMonitor: Unknown message"),"fromscala"===e.content.data.msgtype){const t=e.content.data.msg;switch(t.msgtype){case"sparkJobStart":this.onSparkJobStart(t);break;case"sparkJobEnd":this.notebookStore.onSparkJobEnd(t);break;case"sparkStageSubmitted":this.onSparkStageSubmitted(t);break;case"sparkStageCompleted":this.notebookStore.onSparkStageCompleted(t);break;case"sparkStageActive":this.notebookStore.onSparkStageActive(t);break;case"sparkTaskStart":this.notebookStore.onSparkTaskStart(t);break;case"sparkTaskEnd":this.notebookStore.onSparkTaskEnd(t);break;case"sparkApplicationStart":this.notebookStore.onSparkApplicationStart(t);break;case"sparkApplicationEnd":break;case"sparkExecutorAdded":this.notebookStore.onSparkExecutorAdded(t);break;case"sparkExecutorRemoved":this.notebookStore.onSparkExecutorRemoved(t);break;case"clean":console.info("clean sparkmonitor data"),this.clearAllData();break;case"log":console.info(`SparkMonitor: log msg: ${JSON.stringify(t?.msg)}`);break;case"error":this.onHandleError(JSON.stringify(t?.msg));break;case"sparkData":await this.stateDb.save(Z,{data:t,lastExecutedCellId:this.getLastExecutedCellId()}),this.onHandleSparkData(t);break;default:console.warn("SparkMonitor: Unknown message")}}}onHandleError(e){console.log(e)}async clearAllData(){this.notebookStore.clearAllData(),await this.stateDb.remove(Z)}onHandleSparkData(e,t=void 0){t&&this.setLastExecutedCellModelWithId(t),this.notebookStore.clearAllData(),this.notebookStore.onSparkJobStarted(this.getLastExecutedCellId()),this.onGetSparkApplicationStatus(e.sparkApplicationStatus),this.onGetSparkExecutorStatus(e.sparkExecutorStatus),this.onGetSparkJobStatus(e.sparkJobStatus),this.onGetSparkStageStatus(e.sparkStageStatus),this.onGetSparkTaskStatus(e.sparkTaskStatus)}onGetSparkApplicationStatus(e){this.notebookStore.onSparkApplicationStart({appId:e?.id,appName:e?.name,appAttemptId:Object.keys(e?.attempts).length})}onGetSparkExecutorStatus(e){let t=0,s=0;const a=this.getLastExecutedCellModel();if(a){for(const a of e)a.isActive&&(t+=a.totalCores,s+=1);this.notebookStore.onSparkExecutorUpdated(a.id,{numTotalCores:t,numExecutors:s,rawData:e})}else console.warn("SparkMonitor: Job started with no running cell.")}onGetSparkJobStatus(e){const t=this.getLastExecutedCellModel();t?this.notebookStore.onSparkJobStatusUpdate(t.id,e):console.warn("SparkMonitor: Job started with no running cell.")}onGetSparkStageStatus(e){const t=this.getLastExecutedCellModel();t?this.notebookStore.onSparkStageStatusUpdate(t.id,e):console.warn("SparkMonitor: Job started with no running cell.")}onGetSparkTaskStatus(e){this.notebookStore.onSparkTaskStatusUpdate(e)}getLastExecutedCellId(){const e=this.getLastExecutedCellModel();if(e)return e.id;console.warn("SparkMonitor: Job started with no running cell.")}loadDummyData(e=!1){this.notebookStore.onSparkJobStarting(this.getLastExecutedCellId());const t=new Date;P.dummy_job_data[0].submissionTime=t.toISOString().replace("Z","GMT"),!0===e?(P.dummy_job_data[0].status="SPARK API ERROR",this.notebookStore.onSparkJobError(this.getLastExecutedCellId())):P.dummy_job_data[0].status="STARTING",this.onGetSparkApplicationStatus(P.dummy_application_data[0]),this.onGetSparkExecutorStatus(P.dummy_executor_data),this.onGetSparkJobStatus(P.dummy_job_data)}}var H=s(4259);class L{constructor(){this.numActiveTasks=0,this.numCompletedTasks=0,this.numFailedTasks=0,(0,H.makeAutoObservable)(this)}}class U{get numTasks(){return this.numActiveTasks+this.numCompletedTasks+this.numFailedTasks}get numStages(){return this.uniqueStageIds.length-this.numSkippedStages}get numActiveStages(){return this.uniqueStageIds.filter((e=>"PENDING"===this.notebookStore.stages[e].status)).length}get numCompletedStages(){return this.uniqueStageIds.filter((e=>"COMPLETE"===this.notebookStore.stages[e].status)).length}get numFailedStages(){return this.uniqueStageIds.filter((e=>"FAILED"===this.notebookStore.stages[e].status)).length}get numSkippedStages(){return this.uniqueStageIds.filter((e=>"SKIPPED"===this.notebookStore.stages[e].status)).length}constructor(e){this.notebookStore=e,this.status="RUNNING",this.name="unnamed",this.stageIds=[],this.uniqueStageIds=[],this.numActiveTasks=0,this.numCompletedTasks=0,this.numFailedTasks=0,this.numSkippedTasks=0,(0,H.makeAutoObservable)(this)}}class G{constructor(){this.date=0,this.val=0,this.text=""}}class ${constructor(e){this.notebookStore=e,this.jobDataX=[],this.jobDataY=[],this.jobDataText=[],this.executorDataX=[],this.executorDataY=[],this.taskDataX=[],this.taskDataY=[],this.numActiveTasks=0}addExecutorData(e,t){this.executorDataX.push(e),this.executorDataY.push(t)}addTaskData(e,t){this.taskDataX.push(new Date(e).getTime()),this.taskDataY.push(t),this.addExecutorData(new Date(e).getTime(),this.notebookStore.numTotalCores||0)}onSparkJobStart(e){const t=new Date(e.submissionTime).getTime();this.jobDataX.push(t),this.jobDataY.push(0),this.jobDataText.push(`Job ${e.jobId} started`),this.addExecutorData(t,e.totalCores)}onSparkJobEnd(e){const t=new Date(e.completionTime).getTime();this.jobDataX.push(t),this.jobDataY.push(0),this.jobDataText.push(`Job ${e.jobId} ended`)}onSparkTaskStart(e){this.addTaskData(e.launchTime,this.numActiveTasks),this.numActiveTasks+=1,this.addTaskData(e.launchTime,this.numActiveTasks)}onSparkTaskEnd(e){this.addTaskData(e.finishTime,this.numActiveTasks),this.numActiveTasks-=1,this.addTaskData(e.finishTime,this.numActiveTasks)}createDateAsUTC(e){return new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds()))}onSparkExecutorDataUpdate(e){const t=[];for(const s of e){const e=new Date(s.addTime.substring(0,s.addTime.length-3)),a=new G;if(a.date=this.createDateAsUTC(e).getTime(),a.val=1,t.push(a),s.removeTime){const e=new Date(s.removeTime.substring(0,s.addTime.length-3)),a=new G;a.date=this.createDateAsUTC(e).getTime(),a.val=-1,t.push(a)}}const s=t.sort(((e,t)=>e.date-t.date)),a=[],o=[];let n=0;for(const e of s)a.push(e.date),n+=e.val,o.push(n||0);this.executorDataX=a,this.executorDataY=o}onSparkJobDataUpdate(e){const t=[];for(const s of e){const e=new Date(s.submissionTime.substring(0,s.submissionTime.length-3)),a=new G;if(a.date=this.createDateAsUTC(e).getTime(),a.val=0,a.text=`Job ${s.jobId} started`,t.push(a),s.completionTime){const e=new G,a=new Date(s.completionTime.substring(0,s.completionTime.length-3));e.date=this.createDateAsUTC(a).getTime(),e.val=0,e.text=`Job ${s.jobId} ended`,t.push(e)}}const s=t.sort(((e,t)=>e.date-t.date)),a=[],o=[],n=[];for(const e of s)a.push(e.date),o.push(e.val),n.push(e.text);this.jobDataX=a,this.jobDataY=o,this.jobDataText=n}onSparkTaskDataUpdate(e){const t=[];for(const s of e)for(const e of s){const s=new Date(e.launchTime.substring(0,e.launchTime.length-3)),a=new G;if(a.date=this.createDateAsUTC(s).getTime(),a.val=1,t.push(a),"SUCCESS"==e.status){const s=new Date(e.launchTime.substring(0,e.launchTime.length-3)),a=new G;a.date=this.createDateAsUTC(s).getTime()+e.duration,a.val=-1,t.push(a)}}const s=t.sort(((e,t)=>e.date-t.date)),a=[],o=[];let n=0;for(const e of s)a.push(e.date),n+=e.val,o.push(n||0);this.taskDataX=a,this.taskDataY=o}}class O{constructor(e,t){this.cellId=e,this.notebookStore=t,this.view="jobs",this.isCollapsed=!1,this.isRemoved=!1,this.uniqueJobIds=[],this.isStarting=!1,this.isError=!1,(0,H.makeAutoObservable)(this),this.taskChartStore=new $(this.notebookStore)}toggleCollapseCellDisplay(){this.isCollapsed=!this.isCollapsed}toggleHideCellDisplay(){this.isRemoved=!this.isRemoved}setView(e){this.view=e,this.isCollapsed=!1,this.isRemoved=!1}get jobs(){return this.uniqueJobIds.map((e=>this.notebookStore.jobs[e]))}get numActiveJobs(){return this.jobs.filter((e=>"RUNNING"===e.status)).length}get numFailedJobs(){return this.jobs.filter((e=>"FAILED"===e.status)).length}get numCompletedJobs(){return this.jobs.filter((e=>"SUCCEEDED"===e.status)).length}get numTotalJobs(){return this.uniqueJobIds.length}}class V{constructor(e,t){this.notebookPanelId=e,this.uniqueId="default-key",this.hideAllDisplays=!1,this.cells={},this.jobs={},this.stages={},this.numJobsToShow=20,(0,H.makeAutoObservable)(this),this.trans=t.load(Z)}clearAllData(){this.cells={},this.jobs={},this.stages={}}toggleHideAllDisplays(){this.hideAllDisplays=!this.hideAllDisplays}onSparkApplicationStart(e){this.applicationId=e.appId,this.applicationName=e.appName,this.applicationAttemptId=e.appAttemptId,this.uniqueId=`app${this.applicationId}-attempt${this.applicationAttemptId}`}deleteCellData(e){const t=this.cells[e];t&&(t.uniqueJobIds.forEach((e=>{const t=this.jobs[e];t&&(t.uniqueStageIds.forEach((e=>{this.stages[e]&&delete this.stages[e]})),delete this.jobs[e])})),delete this.cells[e])}onCellRemoved(e){e&&this.deleteCellData(e)}onCellExecutedAgain(e){this.deleteCellData(e),this.cells[e]=new O(e,this)}onSparkJobStart(e,t){this.numTotalCores=t.totalCores,this.numExecutors=t.numExecutors;const s=new U(this);if(s.uniqueId=`${this.uniqueId}-job-${t.jobId}`,s.jobId=t.jobId,s.status=t.status,s.cellId=e,s.name=String(t.name).split(" ")[0],s.startTime=new Date(t.submissionTime),s.stageIds=t.stageIds,t.stageIds.forEach((e=>{const a=`${this.uniqueId}-stage-${e}`;let o=this.stages[a];o||(o=new L,o.status="PENDING",this.stages[a]=o),o.uniqueJobId=s.uniqueId,o.numTasks=t.stageInfos[e].numTasks,o.name=t.stageInfos[e].name,s.uniqueStageIds.push(a)})),s.uniqueStageIds.sort(((e,t)=>e.localeCompare(t,void 0,{numeric:!0}))),"null"===s.name){const e=Math.max.apply(null,t.stageIds);s.name=this.stages[`${this.uniqueId}-stage-${e}`].name}this.cells[e]||(this.cells[e]=new O(e,this)),this.cells[e].uniqueJobIds.push(s.uniqueId),s.cell=this.cells[e],s.cell.taskChartStore.onSparkJobStart(t),this.jobs[s.uniqueId]=s}onSparkJobEnd(e){const t=`${this.uniqueId}-job-${e.jobId}`,s=this.jobs[t];s?(s.status=e.status,s.endTime=new Date(e.completionTime),s.uniqueStageIds.forEach((e=>{"PENDING"===this.stages[e]?.status&&(this.stages[e].status="SKIPPED")})),s.cell?.taskChartStore.onSparkJobEnd(e)):console.warn("SparkMonitor: Could not identify job")}onSparkStageSubmitted(e,t){const s=-1===t.submissionTime?new Date:new Date(t.submissionTime),a=`${this.uniqueId}-stage-${t.stageId}`;this.stages[a]||(this.stages[a]=new L,this.stages[a].uniqueId=a);const o=this.stages[a];o.cellId=e,o.stageId=t.stageId,o.status="RUNNING",o.name=String(t.name).split(" ")[0],o.submissionTime=s,o.numTasks=t.numTasks}onSparkStageCompleted(e){const t=`${this.uniqueId}-stage-${e.stageId}`,s=this.stages[t];if(s){s.status=e.status,s.completionTime=new Date(e.completionTime),s.submissionTime=new Date(e.submissionTime),s.numActiveTasks=0,s.numCompletedTasks=e.numCompletedTasks,s.numFailedTasks=e.numFailedTasks,s.numTasks=e.numTasks;const t=this.jobs[s.uniqueJobId];t&&(t.numActiveTasks=0,t.numCompletedTasks=0,t.numFailedTasks=0,t.uniqueStageIds.forEach((e=>{t.numActiveTasks+=this.stages[e]?.numActiveTasks||0,t.numCompletedTasks+=this.stages[e]?.numCompletedTasks||0,t.numFailedTasks+=this.stages[e]?.numFailedTasks||0})))}else console.warn("SparkMonitor: Unable to identify stage")}onSparkExecutorAdded(e){this.numTotalCores=e.totalCores,this.numExecutors||(this.numExecutors=0),this.numExecutors+=1}onSparkExecutorRemoved(e){this.numTotalCores=e.totalCores,this.numExecutors||(this.numExecutors=0),this.numExecutors-=1}onSparkTaskStart(e){const t=`${this.uniqueId}-stage-${e.stageId}`,s=this.stages[t];if(s){const t=s.uniqueJobId,a=this.jobs[t];a&&a.cell?.taskChartStore.onSparkTaskStart(e)}}onSparkTaskEnd(e){const t=`${this.uniqueId}-stage-${e.stageId}`,s=this.stages[t];if(s){const t=s.uniqueJobId,a=this.jobs[t];a&&a.cell?.taskChartStore.onSparkTaskEnd(e)}}onSparkStageActive(e){const t=`${this.uniqueId}-stage-${e.stageId}`,s=this.stages[t];if(s&&"RUNNING"===s.status){s.numActiveTasks=e.numActiveTasks,s.numCompletedTasks=e.numCompletedTasks,s.numFailedTasks=e.numFailedTasks;const t=this.jobs[s.uniqueJobId];t&&(t.numActiveTasks=0,t.numCompletedTasks=0,t.numFailedTasks=0,t.uniqueStageIds.forEach((e=>{t.numActiveTasks+=this.stages[e]?.numActiveTasks||0,t.numCompletedTasks+=this.stages[e]?.numCompletedTasks||0,t.numFailedTasks+=this.stages[e]?.numFailedTasks||0})))}}onSparkJobStatusUpdate(e,t){let s=0,a=[];this.cells[e].uniqueJobIds=[],this.cells[e]||(this.cells[e]=new O(e,this));for(const o of t){const t=new U(this);t.uniqueId=`${this.uniqueId}-job-${o.jobId}`,t.jobId=o.jobId,t.status=o.status,t.cellId=e,t.name=String(o.name).split(" ")[0],o.submissionTime&&(t.startTime=this.transformDate(e,o.submissionTime)),o.completionTime&&(t.endTime=this.transformDate(e,o.completionTime)),t.stageIds=o.stageIds,t.numActiveTasks=o.numActiveTasks,t.numCompletedTasks=o.numCompletedTasks,t.numFailedTasks=o.numFailedTasks,t.numSkippedTasks=o.numSkippedTasks,s+=t.numActiveTasks;const n=[];if(o.stageIds.forEach((e=>{const s=`${this.uniqueId}-stage-${e}`;let a=this.stages[s];a||(a=new L,a.status="PENDING",a.uniqueJobId=t.uniqueId,this.stages[s]=a,this.stages[s].uniqueId=s),n.push(s)})),t.uniqueStageIds=n,t.uniqueStageIds.sort(((e,t)=>e.localeCompare(t,void 0,{numeric:!0}))),"null"===t.name){const e=Math.max.apply(null,o.stageIds);t.name=this.stages[`${this.uniqueId}-stage-${e}`].name}a.push(t.uniqueId),a.sort(((e,t)=>t.localeCompare(e,void 0,{numeric:!0}))),t.cell=this.cells[e],this.jobs[t.uniqueId]=t}this.cells[e].uniqueJobIds=a.slice(0,this.numJobsToShow),this.cells[e].taskChartStore.onSparkJobDataUpdate(t),this.cells[e].taskChartStore.numActiveTasks=s}transformDate(e,t){return this.cells[e].taskChartStore.createDateAsUTC(new Date(t.substring(0,t.length-3)))}onSparkStageStatusUpdate(e,t){for(const s of t){const t=`${this.uniqueId}-stage-${s.stageId}`,a=this.stages[t];a.cellId=e,s.submissionTime&&(a.submissionTime=this.transformDate(e,s.submissionTime)),this.stages[t]||(this.stages[t]=new L,this.stages[t].uniqueId=t),a.stageId=s.stageId,a.status=s.status,a.name=String(s.name).split(" ")[0],s.completionTime&&(a.completionTime=this.transformDate(e,s.completionTime)),a.numTasks=s.numTasks,a.numActiveTasks=s.numActiveTasks,a.numCompletedTasks=s.numCompleteTasks,a.numFailedTasks=s.numFailedTasks}}onSparkExecutorUpdated(e,t){this.numTotalCores=t.numTotalCores,this.numExecutors||(this.numExecutors=0),this.numExecutors=t.numExecutors,this.cells[e]||(this.cells[e]=new O(e,this)),this.cells[e].taskChartStore.onSparkExecutorDataUpdate(t.rawData)}onSparkTaskStatusUpdate(e){if(!e||!e[0]||!e[0][0])return;const t=`${this.uniqueId}-stage-${e[0][0].stageId}`,s=this.stages[t];if(s){const t=s.uniqueJobId,a=this.jobs[t];a&&a.cell?.taskChartStore.onSparkTaskDataUpdate(e)}}onSparkJobStarting(e){e&&(this.cells[e]||(this.cells[e]=new O(e,this)),this.cells[e].isStarting=!0,this.cells[e].isError=!1)}onSparkJobStarted(e){e&&(this.cells[e]||(this.cells[e]=new O(e,this)),this.cells[e].isStarting=!1,this.cells[e].isError=!1)}onSparkJobError(e){e&&(this.cells[e]||(this.cells[e]=new O(e,this)),this.cells[e].isStarting=!1,this.cells[e].isError=!0)}}var F=s(4947),B=s(4503);const Z="jupyterlab_sparkmonitor",X={id:Z,autoStart:!0,requires:[a.INotebookTracker,o.IMainMenu,F.IStateDB],optional:[B.ITranslator],activate(e,t,s,a,o){let n;console.log("JupyterLab SparkMonitor is activated!"),t.widgetAdded.connect((async(e,s)=>{let i,l,r=d.M_.notebooks[s.id];if(r||(r=new V(s.id,o||B.nullTranslator),d.M_.notebooks[s.id]=r),s.session)await s.session.ready,i=s.session.kernel,await i.ready,l=i.info;else{const{sessionContext:e}=s;await e.ready,i=e.session?.kernel,l=await(i?.info)}"python"!==l.language_info.name&&"PySpark"!==l.implementation||(n=new q(s,r,a,t),console.log("Notebook kernel ready"),n.startComm());try{const e=await a.fetch(Z);if(e){const t=e.data,s=e.lastExecutedCellId;if(!n.getNoteBookPanel().content.widgets.find((e=>e.model.id===s)))return void console.warn("SparkMonitor: last cell saved in state not exist.");n.onHandleSparkData(t,s)}}catch(e){console.error(`Something went wrong when reading the state for ${Z}.\n${e}`)}})),e.commands.commandExecuted.connect(((e,t)=>{"notebook:clear-all-cell-outputs"===t.id&&n.clearAllData();const s=n.getActiveCell();"notebook:clear-cell-output"===t.id&&s&&s.model.id===n.getLastExecutedCellId()&&n.clearAllData()}))}}},7339:(e,t,s)=>{s.d(t,{DT:()=>r,Gx:()=>c,M_:()=>i,Uh:()=>l,Xp:()=>d});var a=s(3345),o=s.n(a),n=s(4259);const i=new class{constructor(){this.notebooks={},(0,n.makeAutoObservable)(this)}},l=(o().createContext(i),o().createContext(void 0)),r=o().createContext(void 0),c=()=>o().useContext(l),d=()=>o().useContext(r)}}]);