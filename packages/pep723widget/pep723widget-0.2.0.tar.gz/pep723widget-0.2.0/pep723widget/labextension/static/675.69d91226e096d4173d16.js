"use strict";(self.webpackChunkpep723widget=self.webpackChunkpep723widget||[]).push([[675],{675:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var o=n(679),a=n(805),s=n(480),d=n(256),r=n(708),c=n(955);async function i(e="",t={}){const n=c.ServerConnection.makeSettings(),o=r.URLExt.join(n.baseUrl,"pep723widget",e);let a;try{a=await c.ServerConnection.makeRequest(o,t,n)}catch(e){throw new c.ServerConnection.NetworkError(e)}let s=await a.text();if(s.length>0)try{s=JSON.parse(s)}catch(e){console.log("Not a JSON response body.",a)}if(!a.ok)throw new c.ServerConnection.ResponseError(a,s.message||s);return s}class l extends d.Widget{constructor(e){super(),this._context=e,this.addClass("pep723-notebook-widget"),this.title.label="PEP 723 Viewer",this.title.closable=!0,this.title.iconClass="jp-NotebookIcon",this._createContent(),this._context.model.contentChanged.connect(this._onContentChanged,this)}_createContent(){const e=document.createElement("div");e.className="pep723-container";const t=document.createElement("h2");t.textContent="PEP 723 Dependency Manager",e.appendChild(t);const n=this._validateNotebook();if(!n.valid)return this._createErrorPage(e,n.error),void this.node.appendChild(e);this._createMainInterface(e),this.node.appendChild(e)}_createErrorPage(e,t){const n=document.createElement("div");n.className="pep723-error",n.innerHTML=`\n      <div class="error-icon">⚠️</div>\n      <h3>Configuration Error</h3>\n      <p>${t}</p>\n      <div class="error-help">\n        <h4>Requirements:</h4>\n        <ul>\n          <li>PEP 723 metadata must be in the first cell of the notebook</li>\n          <li>The cell must contain only PEP 723 metadata and whitespace</li>\n          <li>No other code or comments should be present in the cell</li>\n        </ul>\n      </div>\n    `,e.appendChild(n)}_createMainInterface(e){const t=document.createElement("div");t.className="notebook-info",t.innerHTML=`\n      <p><strong>Notebook:</strong> ${this._context.path}</p>\n      <p><strong>Status:</strong> Ready for dependency management</p>\n    `,e.appendChild(t);const n=document.createElement("div");n.className="metadata-section",this._updateMetadataContent(n),e.appendChild(n);const o=document.createElement("div");o.className="dependency-form",this._createDependencyForm(o),e.appendChild(o)}_createDependencyForm(e){const t=document.createElement("h3");t.textContent="Add New Dependency",e.appendChild(t);const n=document.createElement("div");n.className="form-group";const o=document.createElement("input");o.type="text",o.id="dependency-input",o.placeholder="e.g., requests, pandas>=2.0.0, numpy[dev]",o.className="dependency-input";const a=document.createElement("button");a.textContent="Add Dependency",a.className="add-dependency-btn",a.onclick=()=>this._addDependency();const s=document.createElement("div");s.id="status-message",s.className="status-message",n.appendChild(o),n.appendChild(a),n.appendChild(s),e.appendChild(n)}_validateNotebook(){const e=this._context.model.cells;if(0===e.length)return{valid:!1,error:"Notebook has no cells."};const t=e.get(0);if("code"!==t.type)return{valid:!1,error:"First cell must be a code cell."};const n=t.sharedModel.getSource();if(!/^# \/\/\/ [a-zA-Z0-9-]+$\s(^#( .*)?$\s)+^# \/\/\/$/m.test(n))return{valid:!1,error:"First cell must contain valid PEP 723 script metadata."};const o=n.split("\n");for(const e of o){const t=e.trim();if(""!==t&&!t.match(/^# \/\/\/ [a-zA-Z0-9-]+$/)&&!t.match(/^#( .*)?$/)&&!t.match(/^# \/\/\/$/))return{valid:!1,error:"First cell must contain only PEP 723 metadata and whitespace. Found non-metadata content."}}const a=/^# \/\/\/ [a-zA-Z0-9-]+$/m;for(let t=1;t<e.length;t++){const n=e.get(t);if("code"===n.type){const e=n.sharedModel.getSource();if(a.test(e))return{valid:!1,error:`PEP 723 metadata found in cell ${t+1}. Metadata must only be in the first cell.`}}}return{valid:!0}}_updateMetadataContent(e){e.innerHTML="<h3>Current Script Metadata</h3>";const t=this._context.model.cells.get(0).sharedModel.getSource(),n=document.createElement("div");n.className="current-metadata",n.innerHTML=`<pre>${t}</pre>`,e.appendChild(n)}async _addDependency(){const e=this.node.querySelector("#dependency-input"),t=this.node.querySelector(".add-dependency-btn"),n=this.node.querySelector("#status-message"),o=e.value.trim();if(o){e.disabled=!0,t.disabled=!0,this._showStatus(n,"Adding dependency...","loading");try{const t=this._context.model.cells.get(0),a=t.sharedModel.getSource(),s=await i("add-dependency",{method:"POST",body:JSON.stringify({script_metadata:a,dependency:o})});t.sharedModel.setSource(s.updated_metadata),this._updateMetadataContent(this.node.querySelector(".metadata-section")),e.value="",this._showStatus(n,`Successfully added "${o}"`,"success")}catch(e){console.error("Error adding dependency:",e);const t=e instanceof Error?e.message:"Failed to add dependency";this._showStatus(n,`Error: ${t}`,"error")}finally{e.disabled=!1,t.disabled=!1}}else this._showStatus(n,"Please enter a dependency name.","error")}_showStatus(e,t,n){e.textContent=t,e.className=`status-message ${n}`,"loading"!==n&&setTimeout(()=>{e.textContent="",e.className="status-message"},3e3)}_onContentChanged(){this.node.innerHTML="",this._createContent()}dispose(){this._context.model.contentChanged.disconnect(this._onContentChanged,this),super.dispose()}}class p extends s.ABCWidgetFactory{createNewWidget(e){const t=new l(e),n=new s.DocumentWidget({content:t,context:e});return n.title.label=`PEP 723: ${e.localPath}`,n}}const h={id:"pep723widget:plugin",description:"A JupyterLab extension to edit pep723 inline script metadata in notebooks.",autoStart:!0,requires:[a.IDocumentManager],optional:[o.ISettingRegistry],activate:(e,t,n)=>{console.log("JupyterLab extension pep723widget is activated!");const o=new p({name:"pep723-notebook-viewer",label:"PEP 723 Viewer",fileTypes:["notebook"],defaultFor:[],canStartKernel:!1,shutdownOnClose:!1,modelName:"notebook"});t.registry.addWidgetFactory(o),n&&n.load(h.id).then(e=>{console.log("pep723widget settings loaded:",e.composite)}).catch(e=>{console.error("Failed to load settings for pep723widget.",e)}),i("get-example").then(e=>{console.log(e)}).catch(e=>{console.error(`The pep723widget server extension appears to be missing.\n${e}`)})}},m=h}}]);