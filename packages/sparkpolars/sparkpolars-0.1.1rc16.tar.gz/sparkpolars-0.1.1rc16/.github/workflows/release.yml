name: package_release

on:
    push:
        tags:
        - '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

jobs:
#   gitleaks:
#     uses: ./.github/workflows/gitleaks.yml

#   linting:
#     uses: ./.github/workflows/linting.yml
#     needs: gitleaks

#   test:
#     uses: ./.github/workflows/test.yml
#     needs: linting

  release-python:
    runs-on: ubuntu-latest
    # needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for setuptools_scm
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          pip install build twine setuptools setuptools_scm[toml] wheel
      - name: Prepare Environment
        run: |
          echo "The ref name is ${{ github.ref_name }}"
          rm -rf dist
          mkdir -p dist
      - name: Build PyPi Package
        run: |
          python -m build
          python -m twine check dist/*
          set -e
          {
            twine upload -p ${{ secrets.TWINE_API_KEY }} dist/*
            echo "upload successful"
          } || {
            echo "upload failed"
          }
      - name: Push file to GitHub Release
        run: |
          # List all files to see what was actually built
          echo "Built files:"
          ls -la dist/
          
          # Upload Python package files
          if [ -f "dist/sparkpolars-"*".tar.gz" ]; then
            gh release upload ${{github.ref_name}} dist/sparkpolars-*.tar.gz
          fi
          
          if [ -f "dist/sparkpolars-"*"-py3-none-any.whl" ]; then
            gh release upload ${{github.ref_name}} dist/sparkpolars-*-py3-none-any.whl
          fi
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release-conda:
      runs-on: ubuntu-latest
      needs: release-python
      # needs: test
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0  # Fetch full history for setuptools_scm
        - name: Set up Miniconda
          uses: conda-incubator/setup-miniconda@v3
          with:
              python-version: "3.11"
              activate-environment: build-env
              environment-file: ""
        - name: Installing conda build
          run: conda install -y conda-build anaconda-client
          shell: bash -el {0}
        - name: Install dependencies
          run: |
            pip install anaconda-auth anaconda setuptools_scm[toml]
          shell: bash -el {0}
        - name: Prepare Environment
          run: |
            echo "The ref name is ${{ github.ref_name }}"
            rm -rf dist
            mkdir -p dist
            python -c "import setuptools_scm; setuptools_scm.get_version(write_to='src/sparkpolars/_version.py')"
          shell: bash -el {0}
        - name: Build Conda Package
          run: |
            conda config --set anaconda_upload no
            # Create a temporary work directory outside the project
            mkdir -p /tmp/conda-build-work
            conda-build conda_receip/ --package-format=tar.bz2 --output-folder dist --croot /tmp/conda-build-work --no-test --no-include-recipe
            
            # Upload to anaconda with proper authentication
            echo "Uploading to anaconda.org..."
            anaconda -t ${{ secrets.ANACONDA_AUTH_API_KEY }} upload dist/noarch/sparkpolars-${{ github.ref_name }}-py_0.tar.bz2 --force
          shell: bash -el {0}
          env:
            ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_AUTH_API_KEY }}
        - name: Push file to GitHub Release
          run: |
            # Upload conda package if it exists
            if [ -f "dist/noarch/sparkpolars-"*".tar.bz2" ]; then
              gh release upload ${{github.ref_name}} dist/noarch/sparkpolars-*.tar.bz2
            fi
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    