[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fast-dag"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Felix Geilert"},
]
maintainers = [
    {name = "Felix Geilert"},
]
url = "https://github.com/felixnext/fast-dag"
keywords = ["dag", "workflow", "workflow-engine"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.12.3",
    "mypy>=1.17.0",
    "pre-commit>=3.0.0",
    "twine>=6.1.0",
]
serialize = [
    "msgspec>=0.19.0",
    "pyyaml>=6.0",
]
viz = [
    "graphviz>=0.20.0",
]
all = [
    "msgspec>=0.19.0",
    "pyyaml>=6.0",
    "graphviz>=0.20.0",
]


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=fast_dag",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["fast_dag"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by ruff format)
    "B008",   # do not perform function calls in argument defaults
    "B905",   # `zip()` without an explicit `strict=` parameter
    "ARG001", # unused function argument
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["fast_dag"]
combine-as-imports = true
split-on-trailing-comma = true
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.hatch.build.targets.wheel]
packages = ["fast_dag"]

[dependency-groups]
dev = [
    "build>=1.2.2.post1",
    "twine>=6.1.0",
]
