{"version":3,"file":"lib_index_js.c8c6fb427891d5bf6312.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAC+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,kEAAgB;AACrC,uBAAuB,yDAAM;AAC7B,6DAA6D,WAAW;AACxE,gDAAgD,iBAAiB;AACjE;AACA,2BAA2B,kEAAgB;AAC3C;AACA;AACA,KAAK;AACL,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA,2EAA2E,gBAAgB,IAAI,QAAQ;AACvG,0DAA0D,gBAAgB,IAAI,QAAQ;AACtF;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACjCiD;AACsB;AAC7B;AACD;AACzC;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB,aAAa,mBAAmB;AACvF,kCAAkC,kBAAkB;AACpD,mCAAmC;AACnC,wCAAwC,mBAAmB,cAAc,aAAa,qCAAqC;AAC3H,kDAAkD,oDAAoD;AACtG,uCAAuC,IAAI;AAC3C,wCAAwC;AACxC,mFAAmF,oBAAoB,aAAa,aAAa,mBAAmB,eAAe;AACnK;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB,cAAc,mBAAmB,YAAY;AACxG;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uBAAuB,YAAY;AACjE;AACA,gCAAgC,oBAAoB,aAAa,SAAS,oBAAoB,gCAAgC;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB,0BAA0B,mBAAmB,eAAe;AACvG;AACA;AACA,+DAA+D,oBAAoB,aAAa,aAAa,mBAAmB,eAAe;AAC/I,mDAAmD,aAAa,aAAa;AAC7E;AACA,iEAAiE;AACjE;AACA;AACA;AACA,mCAAmC,EAAE,iDAAiD,gCAAgC,yBAAyB,gCAAgC,GAAG,eAAe;AACjM,UAAU,yCAAyC,EAAE,6BAA6B,IAAI;AACtF;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB,eAAe,IAAI;AACnB,2BAA2B,QAAQ,YAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,iEAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uDAAU,aAAa,gBAAgB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,eAAe;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAc,GAAG,SAAS;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,SAAS,EAAC","sources":["webpack://jupyterlab-firefox-launcher/./lib/handler.js","webpack://jupyterlab-firefox-launcher/./lib/index.js"],"sourcesContent":["// src/handler.ts\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Make a request to the backend of the JupyterLab Firefox launcher extension.\n *\n * This helper wraps a `fetch` call to a Jupyter server extension API endpoint.\n *\n * @param endpoint - The endpoint to call (e.g., 'launch')\n * @param init - The fetch initialization parameters\n * @returns A promise resolving to the response JSON\n */\nexport async function requestAPI(endpoint = '', init = {}) {\n    // Use JupyterLab's built-in utilities to construct the correct URL\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-firefox-launcher', endpoint);\n    console.log(`[Firefox Launcher] Making API request to: ${requestUrl}`);\n    console.log(`[Firefox Launcher] Base URL: ${settings.baseUrl}`);\n    console.log(`[Firefox Launcher] Request init:`, init);\n    const response = await ServerConnection.makeRequest(requestUrl, {\n        method: 'POST',\n        ...init\n    }, settings);\n    console.log(`[Firefox Launcher] Response status: ${response.status}`);\n    console.log(`[Firefox Launcher] Response headers:`, response.headers);\n    if (!response.ok) {\n        const message = await response.text();\n        console.error(`[Firefox Launcher] API request failed with status ${response.status}: ${message}`);\n        throw new Error(`API request failed with status ${response.status}: ${message}`);\n    }\n    const result = response.json();\n    console.log(`[Firefox Launcher] Response data:`, result);\n    return result;\n}\n","import { ILauncher } from '@jupyterlab/launcher';\nimport { ICommandPalette, MainAreaWidget } from '@jupyterlab/apputils';\nimport { requestAPI } from './handler.js';\nimport { Widget } from '@lumino/widgets';\nconst buildFirefoxHTML = (iframeId, url, status = '') => {\n    // If there's an error or the URL is blank, show a status page\n    if (url === 'about:blank' || status.includes('error')) {\n        return `\n      <div style=\"display:flex; flex-direction:column; height:100%; background:#f8f9fa;\">\n        <div style=\"padding:20px; text-align:center;\">\n          <h2 style=\"color:#dc3545;\">🔧 Firefox Launcher Status</h2>\n          <div style=\"background:white; border-radius:8px; padding:20px; margin:20px; box-shadow:0 2px 4px rgba(0,0,0,0.1);\">\n            <p><strong>Current Status:</strong> ${status || 'Attempting to connect to VNC service...'}</p>\n            <p><strong>URL:</strong> ${url}</p>\n            <div style=\"margin-top:20px;\">\n              <button onclick=\"window.location.reload()\" style=\"padding:10px 20px; background:#007bff; color:white; border:none; border-radius:4px; cursor:pointer;\">\n                🔄 Retry Connection\n              </button>\n            </div>\n          </div>\n          <div style=\"text-align:left; background:#f8f9fa; padding:15px; border-radius:5px; margin:20px;\">\n            <h4>Troubleshooting:</h4>\n            <ul style=\"margin:10px 0;\">\n              <li>Check that the Firefox launcher backend is running</li>\n              <li>Verify VNC services are active on the server</li>\n              <li>Ensure proper network connectivity to VNC ports</li>\n              <li>Try refreshing this tab after a few seconds</li>\n            </ul>\n          </div>\n        </div>\n      </div>`;\n    }\n    // Normal Firefox interface with working URL\n    return `\n    <div style=\"display:flex; flex-direction:column; height:100%;\">\n      <!-- URL Navigation Bar -->\n      <div style=\"display:flex; align-items:center; padding:8px; gap:8px; background:#f8f9fa; border-bottom:1px solid #dee2e6;\">\n        <button id=\"ff-back\" title=\"Back\">⬅️</button>\n        <button id=\"ff-forward\" title=\"Forward\">➡️</button>\n        <button id=\"ff-refresh\" title=\"Refresh\">🔄</button>\n        <button id=\"ff-home\" title=\"Home\">🏠</button>\n        <input \n          id=\"ff-url-bar\" \n          type=\"text\" \n          placeholder=\"Enter URL (e.g., https://google.com)\" \n          style=\"flex:1; padding:6px 12px; border:1px solid #ced4da; border-radius:4px; font-size:14px;\"\n          value=\"\"\n        />\n        <button id=\"ff-go\" title=\"Go\" style=\"padding:6px 12px; background:#007bff; color:white; border:none; border-radius:4px; cursor:pointer;\">Go</button>\n        <div style=\"border-left:1px solid #dee2e6; height:24px; margin:0 8px;\"></div>\n        <button id=\"ff-fullscreen\" title=\"Fullscreen\">⛶</button>\n        <button id=\"ff-close\" title=\"Close\" style=\"color:#dc3545;\">❌</button>\n      </div>\n      \n      <!-- Status indicator -->\n      <div style=\"padding:4px 8px; ${status.includes('failed') ? 'background:#fff3cd; border-bottom:1px solid #ffeaa7;' : 'background:#d4edda; border-bottom:1px solid #c3e6cb;'} font-size:12px;\">\n        ${status.includes('failed') ? '🟡' : '🟢'} ${status || 'Connected to VNC'}: ${url}\n      </div>\n      \n      <!-- Firefox VNC Iframe -->\n      <iframe \n        id=\"${iframeId}\"\n        src=\"${url}\" \n        style=\"width:100%; flex:1; border:none;\"\n        allowfullscreen\n      ></iframe>\n    </div>`;\n};\nconst requestFullscreen = (element) => {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n    }\n    else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n    }\n    else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n    }\n};\nconst handleFullscreenChange = () => {\n    if (!document.fullscreenElement &&\n        !document.webkitFullscreenElement &&\n        !document.mozFullScreenElement &&\n        !document.msFullscreenElement) {\n        console.log('Exited fullscreen mode');\n    }\n};\nconst extension = {\n    id: 'jupyterlab-firefox-launcher:plugin',\n    description: 'JupyterLab extension to launch Firefox in a tab',\n    autoStart: true,\n    requires: [ILauncher, ICommandPalette],\n    activate: async (app, launcher, palette) => {\n        const command = 'firefox:open';\n        const label = 'Firefox Browser';\n        app.commands.addCommand(command, {\n            label,\n            execute: async () => {\n                var _a, _b, _c;\n                console.log('[Firefox Launcher] Command executed');\n                // Request the backend to launch Firefox and get the VNC URL\n                let vncUrl = '';\n                let isBackendWorking = false;\n                try {\n                    console.log('[Firefox Launcher] Making launch request to backend...');\n                    const response = await requestAPI('launch', { method: 'POST' });\n                    console.log('[Firefox Launcher] Backend response:', response);\n                    if (response && response.url) {\n                        vncUrl = response.url;\n                        isBackendWorking = true;\n                        console.log('[Firefox Launcher] ✅ Backend URL received:', vncUrl);\n                    }\n                    else {\n                        console.warn('[Firefox Launcher] ❌ Backend response missing URL:', response);\n                    }\n                }\n                catch (e) {\n                    console.error('[Firefox Launcher] ❌ Backend API call failed:', e);\n                }\n                // If backend failed, construct JupyterHub proxy URL for direct Firefox access\n                if (!isBackendWorking) {\n                    console.log('[Firefox Launcher] 🔧 Constructing JupyterHub Firefox proxy URL...');\n                    // Try to detect JupyterHub environment and build URL\n                    const currentUrl = window.location.href;\n                    console.log('[Firefox Launcher] Current URL:', currentUrl);\n                    if (currentUrl.includes('/user/')) {\n                        // Extract JupyterHub base and user info  \n                        const match = currentUrl.match(/(https?:\\/\\/[^\\/]+\\/user\\/[^\\/]+)/);\n                        if (match) {\n                            const jupyterHubBase = match[1];\n                            // Construct direct Firefox debugging URL through JupyterHub proxy\n                            vncUrl = `${jupyterHubBase}/proxy/9222/`;\n                            console.log('[Firefox Launcher] 🎯 Using direct Firefox URL:', vncUrl);\n                        }\n                    }\n                    // Final fallback\n                    if (!vncUrl) {\n                        vncUrl = 'about:blank';\n                        console.warn('[Firefox Launcher] ⚠️ Could not construct Firefox URL');\n                    }\n                }\n                const content = new Widget();\n                content.node.style.height = '100%';\n                content.node.style.width = '100%';\n                content.node.style.overflow = 'hidden';\n                const iframeId = 'firefox-iframe';\n                let statusMessage = '';\n                if (!isBackendWorking) {\n                    statusMessage = 'Direct Firefox access via JupyterHub proxy (no VNC)';\n                }\n                else {\n                    statusMessage = 'Connected successfully via backend API';\n                }\n                content.node.innerHTML = buildFirefoxHTML(iframeId, vncUrl, statusMessage);\n                const widget = new MainAreaWidget({ content });\n                widget.id = 'firefox-browser';\n                widget.title.label = label;\n                widget.title.closable = true;\n                widget.node.style.height = '100%';\n                app.shell.add(widget, 'main');\n                app.shell.activateById(widget.id);\n                const iframe = content.node.querySelector(`#${iframeId}`);\n                if (!iframe) {\n                    console.error('Firefox iframe not found');\n                    return;\n                }\n                (_a = content.node.querySelector('#ff-refresh')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\n                    iframe.src = iframe.src;\n                });\n                (_b = content.node.querySelector('#ff-close')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n                    widget.close();\n                });\n                (_c = content.node.querySelector('#ff-fullscreen')) === null || _c === void 0 ? void 0 : _c.addEventListener('click', () => {\n                    requestFullscreen(iframe);\n                });\n                // Auto exit fullscreen on ESC key\n                document.addEventListener('fullscreenchange', handleFullscreenChange);\n                document.addEventListener('webkitfullscreenchange', handleFullscreenChange);\n                document.addEventListener('mozfullscreenchange', handleFullscreenChange);\n                document.addEventListener('MSFullscreenChange', handleFullscreenChange);\n            }\n        });\n        launcher.add({\n            command,\n            category: 'Other',\n            rank: 1\n        });\n        palette.addItem({\n            command,\n            category: 'Firefox'\n        });\n    }\n};\nexport default extension;\n"],"names":[],"sourceRoot":""}