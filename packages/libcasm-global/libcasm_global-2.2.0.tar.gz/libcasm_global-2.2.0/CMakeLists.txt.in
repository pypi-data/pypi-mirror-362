cmake_minimum_required(VERSION 3.20)
set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum OS X deployment version")

project(CASMcode_global VERSION 2.2.0 LANGUAGES CXX)

# set CMAKE_INSTALL_X variables
include(GNUInstallDirs)

# specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# try to use ccache
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set(CMAKE_CXX_COMPILER_LAUNCHER "${CCACHE_PROGRAM}")
endif()

##############################################
## Find dependencies

# Should find ZLIB::ZLIB
find_package(ZLIB)

# if no user CMAKE_INSTALL_PREFIX, use CASM_PREFIX if it exists
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if(DEFINED CASM_PREFIX)
    message(STATUS "CMAKE_INSTALL_PREFIX initialized to default, so updating CMAKE_INSTALL_PREFIX to CASM_PREFIX")
    set(CMAKE_INSTALL_PREFIX ${CASM_PREFIX} CACHE PATH "set CMAKE_INSTALL_PREFIX to CASM_PREFIX" FORCE)
    message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
  endif()
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)


##############################################
## Build libcasm_global

# create libcasm_global
set(
  libcasm_global_HEADERS
@header_files@)
set(
  libcasm_global_SOURCES
@source_files@)
add_library(casm_global SHARED ${libcasm_global_SOURCES})
target_include_directories(casm_global
  PUBLIC
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/casm/external>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/casm/external/gzstream>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/casm/external>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/casm/external/gzstream>
)
target_compile_options(casm_global
  PUBLIC
    "-DTXT_VERSION=\"${CMAKE_PROJECT_VERSION}\""
    -DEIGEN_DEFAULT_DENSE_INDEX_TYPE=long
    -DGZSTREAM_NAMESPACE=gz
)
target_link_libraries(casm_global
  ZLIB::ZLIB
  ${CMAKE_DL_LIBS}
)


##############################################
## Install libcasm_global

# install header files in <prefix>/libcasm/include/,
# while preserving directory structure
foreach ( filevar ${libcasm_global_HEADERS} )
  file(RELATIVE_PATH relfile ${PROJECT_SOURCE_DIR}/include/ ${filevar})
  get_filename_component( reldir ${relfile} DIRECTORY )
  install( FILES ${filevar} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${reldir} )
endforeach()

# install libcasm_global in <prefix>/libcasm/lib/
install(
  TARGETS casm_global
  EXPORT CASMcode_globalTargets
  DESTINATION lib)

##############################################
## Python extensions

# The CMake package config and target files are installed under the Python
# package root. This is necessary to ensure that all the relative paths in the
# helloTargets.cmake resolve correctly. It also provides encapsulation.
#
# The actual path used must be selected so that consuming projects can locate it
# via `find_package`. To support finding CMake packages in the Python package
# prefix, using `find_package`s default search path of
# `<prefix>/<name>/share/<name>*/cmake/` is reasonable. Adding the Python
# package installation prefix to CMAKE_PREFIX_PATH in combination with this path
# will allow `find_package` to find this package and any other package installed
# via a Python package if the CMake and Python packages are named the same.
set(CASM_GLOBAL_CMAKE_PACKAGE_INSTALL_SUBDIR "share/CASMcode_global/cmake")

# configure and install libcasm.casmglobal.__main__.py
# this allows getting configuration information of the installed package using:
# - python -m libcasm.casmglobal --cmakelists
# - python -m libcasm.casmglobal --prefix
configure_file("${PROJECT_SOURCE_DIR}/python/libcasm/casmglobal/__main__.py.in"
  "${PROJECT_BINARY_DIR}/python/libcasm/casmglobal/__main__.py")
install(
  FILES "${PROJECT_BINARY_DIR}/python/libcasm/casmglobal/__main__.py"
  DESTINATION casmglobal)

install(
  EXPORT CASMcode_globalTargets
  NAMESPACE CASM::
  DESTINATION ${CASM_GLOBAL_CMAKE_PACKAGE_INSTALL_SUBDIR})

include(CMakePackageConfigHelpers)

write_basic_package_version_file(
  CASMcode_globalConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY SameMinorVersion)

configure_package_config_file(
  "${PROJECT_SOURCE_DIR}/cmake/CASMcode_globalConfig.cmake.in" CASMcode_globalConfig.cmake
  INSTALL_DESTINATION ${CASM_GLOBAL_CMAKE_PACKAGE_INSTALL_SUBDIR})

install(FILES "${PROJECT_BINARY_DIR}/CASMcode_globalConfig.cmake"
              "${PROJECT_BINARY_DIR}/CASMcode_globalConfigVersion.cmake"
        DESTINATION ${CASM_GLOBAL_CMAKE_PACKAGE_INSTALL_SUBDIR})

# We are using the SKBUILD variable, which is defined when scikit-build is
# running the CMake build, to control building the Python wrapper. This allows
# the C++ project to be installed, standalone, when using the standard CMake
# build flow.
if(DEFINED SKBUILD)

  # call pybind11-config to obtain the root of the cmake package
  execute_process(COMMAND ${PYTHON_EXECUTABLE} -m pybind11 --cmakedir
                  OUTPUT_VARIABLE pybind11_ROOT_RAW)
  string(STRIP ${pybind11_ROOT_RAW} pybind11_ROOT)
  find_package(pybind11)

  # The extension modules must load the casm_global library as a dependency when the
  # extension module is loaded. The easiest way to locate the casm_global library is
  # via RPATH. Absolute RPATHs are possible, but they make the resulting
  # binaries not redistributable to other Python installations (conda is broke,
  # wheel reuse is broke, and more!).
  #
  # Placing the casm_global library in the package and using relative RPATHs that
  # doesn't point outside of the package means that the built package is
  # relocatable. This allows for safe binary redistribution.

  ### libcasm.casmglobal._casmglobal ###
  pybind11_add_module(_casmglobal MODULE
                      "${PROJECT_SOURCE_DIR}/python/src/casmglobal.cpp")
  target_link_libraries(_casmglobal PRIVATE casm_global)
  install(TARGETS _casmglobal DESTINATION casmglobal)
  if(APPLE)
    set_target_properties(
      _casmglobal PROPERTIES INSTALL_RPATH "@loader_path/../lib")
  else()
    set_target_properties(
      _casmglobal PROPERTIES INSTALL_RPATH "$ORIGIN/../lib")
  endif()

  ### libcasm.counter._counter ###
  pybind11_add_module(_counter MODULE
                      "${PROJECT_SOURCE_DIR}/python/src/counter.cpp")
  target_link_libraries(_counter PRIVATE casm_global)
  install(TARGETS _counter DESTINATION counter)
  if(APPLE)
    set_target_properties(
      _counter PROPERTIES INSTALL_RPATH "@loader_path/../lib")
  else()
    set_target_properties(
      _counter PROPERTIES INSTALL_RPATH "$ORIGIN/../lib")
  endif()

endif()
