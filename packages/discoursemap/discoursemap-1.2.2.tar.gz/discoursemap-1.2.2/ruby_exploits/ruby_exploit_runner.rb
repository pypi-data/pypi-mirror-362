#!/usr/bin/env ruby

# Ruby Exploit Runner
# Standardized interface for running Discourse Ruby exploits from Python
# Author: ibrahimsql
# Date: 2025

require 'optparse'
require 'json'
require 'fileutils'

class RubyExploitRunner
  def initialize
    @options = {
      target: nil,
      output: nil,
      timeout: 10,
      proxy: nil,
      verbose: false,
      exploit: nil
    }
    @results = {
      cve: 'UNKNOWN',
      vulnerable: false,
      severity: 'medium',
      description: 'Ruby exploit execution',
      details: [],
      payloads: [],
      rce_evidence: [],
      scan_time: 0,
      target: nil
    }
  end

  def parse_options
    OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options]"

      opts.on('-t', '--target URL', 'Target Discourse URL') do |url|
        @options[:target] = url
      end

      opts.on('-o', '--output FILE', 'Output JSON file') do |file|
        @options[:output] = file
      end

      opts.on('--timeout SECONDS', Integer, 'Request timeout') do |timeout|
        @options[:timeout] = timeout
      end

      opts.on('--proxy PROXY', 'HTTP proxy (host:port)') do |proxy|
        @options[:proxy] = proxy
      end

      opts.on('-v', '--verbose', 'Verbose output') do
        @options[:verbose] = true
      end

      opts.on('-e', '--exploit EXPLOIT', 'Specific exploit to run') do |exploit|
        @options[:exploit] = exploit
      end

      opts.on('-h', '--help', 'Show this help') do
        puts opts
        exit
      end
    end.parse!
  end

  def run
    parse_options

    unless @options[:target]
      puts "Error: Target URL is required"
      exit 1
    end

    @results[:target] = @options[:target]
    start_time = Time.now

    begin
      # Determine which exploit to run based on the script name or explicit option
      exploit_name = @options[:exploit] || File.basename($0, '.rb')
      
      case exploit_name
      when 'CVE-2023-37467', 'cve_2023_37467'
        run_cve_2023_37467
      when 'CVE-2023-45131', 'cve_2023_45131'
        run_cve_2023_4513
      when 'CVE-2021-41163', 'cve_2021_41163'
        run_cve_2021_41163
      when 'CVE-2019-11479', 'cve_2019_11479'
        run_cve_2019_11479
      when 'CVE-2022-31053', 'cve_2022_31053'
        run_cve_2022_31053
      when 'discourse_cve_exploits'
        run_discourse_cve_collection
      when 'discourse_xss'
        run_discourse_xss
      when 'discourse_ssrf'
        run_discourse_ssrf
      when 'discourse_rce'
        run_discourse_rce
      when 'discourse_auth_bypass'
        run_discourse_auth_bypass
      when 'discourse_file_upload'
        run_discourse_file_upload
      when 'discourse_info_disclosure'
        run_discourse_info_disclosure
      else
        # Try to load and run the specific exploit file
        run_generic_exploit(exploit_name)
      end

    rescue => e
      @results[:details] << "Error: #{e.message}"
      puts "[!] Error running exploit: #{e.message}" if @options[:verbose]
    ensure
      @results[:scan_time] = Time.now - start_time
      save_results
    end
  end

  private

  def run_cve_2021_41163
    @results[:cve] = 'CVE-2021-41163'
    @results[:description] = 'Discourse Theme Import RCE Vulnerability'
    @results[:severity] = 'critical'
    
    # Load and run the specific CVE exploit
    begin
      require_relative 'CVE-2021-41163'
      exploit = CVE_2021_41163.new(@options[:target], @options)
      result = exploit.run_exploit
      merge_exploit_results(result)
    rescue LoadError => e
      @results[:details] << "CVE-2021-41163 exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "CVE-2021-41163 execution error: #{e.message}"
    end
  end

  def run_cve_2023_37467
    @results[:cve] = 'CVE-2023-37467'
    @results[:description] = 'Discourse CSP Nonce Reuse XSS Bypass'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'CVE-2023-37467'
      exploit = CVE202337467Exploit.new(@options[:target], @options)
      result = exploit.exploit
      merge_exploit_results(result)
    rescue LoadError => e
      @results[:details] << "CVE-2023-37467 exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "CVE-2023-37467 execution error: #{e.message}"
    end
  end

  def run_cve_2023_45131
    @results[:cve] = 'CVE-2023-45131'
    @results[:description] = 'Discourse Unauthenticated Chat Message Access'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'CVE-2023-45131'
      exploit = CVE202345131Exploit.new(@options[:target], @options)
      result = exploit.exploit
      merge_exploit_results(result)
    rescue LoadError => e
      @results[:details] << "CVE-2023-45131 exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "CVE-2023-45131 execution error: #{e.message}"
    end
  end



  def run_cve_2019_11479
    @results[:cve] = 'CVE-2019-11479'
    @results[:description] = 'Discourse Vulnerability'
    @results[:severity] = 'high'
    
    begin
      require_relative 'CVE-2019-11479'
      # Implement CVE-2019-11479 specific logic
      @results[:details] << "CVE-2019-11479 test executed"
    rescue LoadError => e
      @results[:details] << "CVE-2019-11479 exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "CVE-2019-11479 execution error: #{e.message}"
    end
  end

  def run_cve_2022_31053
    @results[:cve] = 'CVE-2022-31053'
    @results[:description] = 'Discourse Vulnerability'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'CVE-2022-31053'
      # Implement CVE-2022-31053 specific logic
      @results[:details] << "CVE-2022-31053 test executed"
    rescue LoadError => e
      @results[:details] << "CVE-2022-31053 exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "CVE-2022-31053 execution error: #{e.message}"
    end
  end

  def run_discourse_cve_collection
    @results[:cve] = 'DISCOURSE-CVE-COLLECTION'
    @results[:description] = 'Multiple Discourse CVE Tests'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'discourse_cve_exploits'
      exploit = DiscourseCVEExploits.new(@options[:target], @options)
      exploit.run_all_exploits
      @results[:details] << "Discourse CVE collection executed"
    rescue LoadError => e
      @results[:details] << "Discourse CVE collection file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse CVE collection execution error: #{e.message}"
    end
  end

  def run_discourse_xss
    @results[:cve] = 'DISCOURSE-XSS'
    @results[:description] = 'Discourse XSS Vulnerabilities'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'discourse_xss'
      # Implement XSS testing logic
      @results[:details] << "Discourse XSS tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse XSS exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse XSS execution error: #{e.message}"
    end
  end

  def run_discourse_ssrf
    @results[:cve] = 'DISCOURSE-SSRF'
    @results[:description] = 'Discourse SSRF Vulnerabilities'
    @results[:severity] = 'high'
    
    begin
      require_relative 'discourse_ssrf'
      # Implement SSRF testing logic
      @results[:details] << "Discourse SSRF tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse SSRF exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse SSRF execution error: #{e.message}"
    end
  end

  def run_discourse_rce
    @results[:cve] = 'DISCOURSE-RCE'
    @results[:description] = 'Discourse RCE Vulnerabilities'
    @results[:severity] = 'critical'
    
    begin
      require_relative 'discourse_rce'
      # Implement RCE testing logic
      @results[:details] << "Discourse RCE tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse RCE exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse RCE execution error: #{e.message}"
    end
  end

  def run_discourse_auth_bypass
    @results[:cve] = 'DISCOURSE-AUTH-BYPASS'
    @results[:description] = 'Discourse Authentication Bypass'
    @results[:severity] = 'high'
    
    begin
      require_relative 'discourse_auth_bypass'
      # Implement auth bypass testing logic
      @results[:details] << "Discourse auth bypass tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse auth bypass exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse auth bypass execution error: #{e.message}"
    end
  end

  def run_discourse_file_upload
    @results[:cve] = 'DISCOURSE-FILE-UPLOAD'
    @results[:description] = 'Discourse File Upload Vulnerabilities'
    @results[:severity] = 'high'
    
    begin
      require_relative 'discourse_file_upload'
      # Implement file upload testing logic
      @results[:details] << "Discourse file upload tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse file upload exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse file upload execution error: #{e.message}"
    end
  end

  def run_discourse_info_disclosure
    @results[:cve] = 'DISCOURSE-INFO-DISCLOSURE'
    @results[:description] = 'Discourse Information Disclosure'
    @results[:severity] = 'medium'
    
    begin
      require_relative 'discourse_info_disclosure'
      # Implement info disclosure testing logic
      @results[:details] << "Discourse info disclosure tests executed"
    rescue LoadError => e
      @results[:details] << "Discourse info disclosure exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Discourse info disclosure execution error: #{e.message}"
    end
  end

  def run_generic_exploit(exploit_name)
    @results[:cve] = exploit_name.upcase
    @results[:description] = "Generic exploit: #{exploit_name}"
    
    begin
      require_relative exploit_name
      @results[:details] << "Generic exploit #{exploit_name} executed"
    rescue LoadError => e
      @results[:details] << "Generic exploit file not found: #{e.message}"
    rescue => e
      @results[:details] << "Generic exploit execution error: #{e.message}"
    end
  end

  def merge_exploit_results(exploit_results)
    if exploit_results.is_a?(Hash)
      @results[:vulnerable] = exploit_results[:vulnerable] if exploit_results.key?(:vulnerable)
      @results[:details].concat(exploit_results[:details]) if exploit_results[:details]
      @results[:payloads].concat(exploit_results[:payloads]) if exploit_results[:payloads]
      @results[:rce_evidence].concat(exploit_results[:rce_evidence]) if exploit_results[:rce_evidence]
    end
  end

  def save_results
    if @options[:output]
      begin
        File.write(@options[:output], JSON.pretty_generate(@results))
        puts "[+] Results saved to #{@options[:output]}" if @options[:verbose]
      rescue => e
        puts "[!] Error saving results: #{e.message}" if @options[:verbose]
      end
    else
      puts JSON.pretty_generate(@results) if @options[:verbose]
    end
  end
end

# Run the exploit runner if this file is executed directly
if __FILE__ == $0
  runner = RubyExploitRunner.new
  runner.run
end