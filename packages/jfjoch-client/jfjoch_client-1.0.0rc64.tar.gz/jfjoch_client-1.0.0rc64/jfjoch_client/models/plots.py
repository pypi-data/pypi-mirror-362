# coding: utf-8

"""
    Jungfraujoch

    API to control Jungfraujoch developed by the Paul Scherrer Institute (Switzerland). Jungfraujoch is a data acquisition and analysis system for pixel array detectors, primarly PSI JUNGFRAU. Jungfraujoch uses FPGA boards to acquire data at high data rates. 

    The version of the OpenAPI document: 1.0.0-rc.64
    Contact: filip.leonarski@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from jfjoch_client.models.plot import Plot
from jfjoch_client.models.plot_unit_x import PlotUnitX
from typing import Optional, Set
from typing_extensions import Self

class Plots(BaseModel):
    """
    Plots
    """ # noqa: E501
    title: Optional[StrictStr] = None
    unit_x: PlotUnitX
    size_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max X range of the plot")
    size_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max Y range of the plot")
    plot: List[Plot]
    __properties: ClassVar[List[str]] = ["title", "unit_x", "size_x", "size_y", "plot"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Plots from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plot (list)
        _items = []
        if self.plot:
            for _item_plot in self.plot:
                if _item_plot:
                    _items.append(_item_plot.to_dict())
            _dict['plot'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Plots from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "unit_x": obj.get("unit_x") if obj.get("unit_x") is not None else PlotUnitX.IMAGE_NUMBER,
            "size_x": obj.get("size_x"),
            "size_y": obj.get("size_y"),
            "plot": [Plot.from_dict(_item) for _item in obj["plot"]] if obj.get("plot") is not None else None
        })
        return _obj


