name: Release to PyPI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      skip_testpypi:
        description: 'Skip TestPyPI publish (useful for re-tagging)'
        type: boolean
        default: false
        required: false

# No global env variables needed since we directly access inputs

jobs:
  build-and-publish-test:
    name: Build and Publish to TestPyPI
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.skip_testpypi != 'true' }}
    steps:
      - name: Checkout code with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed so setuptools_scm can see the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: "3.11"

      - name: Install dependencies
        run: |
          uv pip install build setuptools_scm twine

      - name: Extract version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build the package
        run: python -m build

      - name: Verify built package works
        run: |
          echo "Installing built package..."
          uv pip install dist/*.whl

          echo "Running basic import test..."
          python -c "import pipebio; print('Imported pipebio:', pipebio.__version__)"

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "Publishing to TestPyPI..."
          twine upload --verbose --repository-url https://test.pypi.org/legacy/ -u __token__ -p $TWINE_PASSWORD dist/*

      - name: Verify install from TestPyPI
        run: |
          uv pip uninstall -y pipebio || true
          
          echo "Installing from TestPyPI with PyPI fallback..."
          uv pip install --no-cache-dir \
            --index-url https://test.pypi.org/simple/ \
            --extra-index-url https://pypi.org/simple \
            pipebio==${{ steps.get_version.outputs.version }}
          
          python -c "import pipebio; print('Imported from TestPyPI:', pipebio.__version__)"

      - name: Set verification instructions
        run: |
          echo "## TestPyPI Release Ready for Verification" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Package published to TestPyPI as version ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "### Verify by running:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple pipebio==${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### If everything looks good, approve the next workflow step to publish to PyPI" >> $GITHUB_STEP_SUMMARY

  # Job to build the package when skipping TestPyPI
  build-package:
    name: Build Package
    if: ${{ github.event.inputs.skip_testpypi == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed so setuptools_scm can see the tags

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: "3.11"

      - name: Install dependencies
        run: |
          uv pip install build setuptools_scm twine

      - name: Extract version from tag
        id: get_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build the package
        run: python -m build

      - name: Verify built package works
        run: |
          echo "Installing built package..."
          uv pip install dist/*.whl

          echo "Running basic import test..."
          python -c "import pipebio; print('Imported pipebio:', pipebio.__version__)"

      - name: Store build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Set verification instructions
        run: |
          echo "## Package Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Package built as version ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "### Skipping TestPyPI publish (as requested)" >> $GITHUB_STEP_SUMMARY
          echo "### Please approve the next workflow step to publish to PyPI" >> $GITHUB_STEP_SUMMARY
          
  publish-production:
    name: Publish to PyPI
    needs: [build-and-publish-test, build-package]
    if: |
      always() &&
      (needs.build-and-publish-test.result == 'success' || needs.build-package.result == 'success')
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://pypi.org/project/pipebio/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: true
          python-version: "3.11"
          
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing to production PyPI..."
          uv pip install twine
          twine upload --verbose -u __token__ -p $TWINE_PASSWORD dist/*

      - name: Set completion message
        run: |
          echo "## ðŸŽ‰ Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "Package successfully published to PyPI" >> $GITHUB_STEP_SUMMARY