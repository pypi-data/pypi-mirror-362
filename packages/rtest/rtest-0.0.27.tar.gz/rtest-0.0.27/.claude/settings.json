{
  "projectContext": {
    "name": "rtest",
    "description": "Python test runner built in Rust",
    "type": "hybrid-rust-python",
    "version": "0.0.4",
    "languages": ["rust", "python"],
    "frameworks": ["pytest", "pyo3", "maturin"],
    "testFrameworks": ["cargo test", "pytest"],
    "architecture": "CLI tool with Python bindings"
  },

  "codebaseStructure": {
    "rootDir": ".",
    "sourcePatterns": [
      "src/**/*.rs",
      "rtest/src/**/*.rs", 
      "python/rtest/**/*.py",
      "tests/**/*.rs",
      "tests/**/*.py"
    ],
    "testPatterns": [
      "tests/**/*.rs",
      "rtest/src/**/*.rs",
      "**/test_*.py",
      "**/*_test.py"
    ],
    "configFiles": [
      "Cargo.toml",
      "rtest/Cargo.toml",
      "pyproject.toml",
      ".github/workflows/*.yml",
      "CONTRIBUTING.rst"
    ],
    "documentationFiles": [
      "README.md",
      "CHANGELOG.md",
      "CONTRIBUTING.rst",
      "docs/**/*.md"
    ]
  },

  "developmentWorkflow": {
    "buildCommands": {
      "rust": {
        "build": "cargo build",
        "test": "cargo test",
        "check": "cargo check",
        "lint": "cargo clippy -- -D warnings",
        "format": "cargo fmt",
        "buildCore": "cd rtest && cargo build",
        "testCore": "cd rtest && cargo test"
      },
      "python": {
        "setup": "uv sync --dev",
        "build": "uv run maturin develop",
        "buildRelease": "uv run maturin build --release",
        "test": "uv run pytest tests/",
        "lint": "uv run ruff check .",
        "format": "uv run ruff format .",
        "typeCheck": "uv run mypy python/rtest/",
        "install": "uv sync"
      },
      "combined": {
        "setup": "git submodule update --init --recursive && uv sync --dev",
        "fullBuild": "uv run maturin develop && cargo test && uv run pytest tests/",
        "quickCheck": "cargo check && uv run ruff check .",
        "ci": "cargo test && cargo clippy -- -D warnings && uv run ruff check . && uv run mypy python/rtest/ && uv run pytest tests/"
      }
    },

    "testingStrategy": {
      "unitTests": {
        "rust": "cargo test --lib",
        "python": "uv run pytest tests/ -k 'not integration'"
      },
      "integrationTests": {
        "rust": "cargo test --test cli_integration",
        "python": "uv run pytest tests/test_*_integration.py"
      },
      "benchmarks": "./benchmark.sh"
    },

    "qualityGates": {
      "beforeCommit": [
        "cargo check",
        "cargo clippy -- -D warnings", 
        "cargo fmt --check",
        "uv run ruff check .",
        "uv run ruff format --check .",
        "cargo test",
        "uv run pytest tests/ --tb=short"
      ],
      "beforePush": [
        "cargo test --release",
        "uv run maturin build",
        "uv run pytest tests/ -v"
      ]
    }
  },

  "codingStandards": {
    "rust": {
      "edition": "2021",
      "style": "Standard Rust formatting with rustfmt",
      "linting": "cargo clippy with deny warnings",
      "errorHandling": "Prefer Result<T, E> over panics, use proper error propagation",
      "memoryManagement": "Use Rc/Arc for shared ownership, avoid raw pointers",
      "testing": "Unit tests in same file, integration tests in tests/ directory",
      "documentation": "/// for public APIs, // for implementation details",
      "patterns": [
        "Use builder pattern for complex constructors",
        "Implement Display and Debug for custom types",
        "Use From/Into traits for conversions",
        "Prefer iterators over manual loops"
      ]
    },
    "python": {
      "version": "3.9+",
      "style": "ruff formatting with line length 120",
      "typing": "Strict mypy configuration, type all function signatures",
      "imports": "isort with known-first-party rtest",
      "testing": "pytest with descriptive test names",
      "docstrings": "Google style docstrings for public APIs",
      "patterns": [
        "Use pathlib.Path over os.path",
        "Prefer f-strings over .format()",
        "Use typing for all public interfaces",
        "Handle exceptions explicitly"
      ]
    }
  },

  "fileTemplates": {
    "rustModule": {
      "path": "templates/rust_module.rs",
      "content": "//! Brief module description.\n//!\n//! More detailed module documentation here.\n\nuse std::collections::HashMap;\n\n/// Public struct documentation\n#[derive(Debug, Clone)]\npub struct NewStruct {\n    field: String,\n}\n\nimpl NewStruct {\n    /// Constructor documentation\n    pub fn new(field: String) -> Self {\n        Self { field }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_new_struct_creation() {\n        let instance = NewStruct::new(\"test\".into());\n        assert_eq!(instance.field, \"test\");\n    }\n}"
    },
    "pythonModule": {
      "path": "templates/python_module.py",
      "content": "\"\"\"Brief module description.\n\nMore detailed module documentation here.\n\"\"\"\n\nfrom __future__ import annotations\n\nfrom typing import Any, Dict, List, Optional\n\n\nclass NewClass:\n    \"\"\"Brief class description.\n    \n    Args:\n        param: Parameter description.\n    \"\"\"\n    \n    def __init__(self, param: str) -> None:\n        self._param = param\n    \n    def method(self) -> str:\n        \"\"\"Brief method description.\n        \n        Returns:\n            Description of return value.\n        \"\"\"\n        return self._param\n\n\ndef function(arg: str) -> str:\n    \"\"\"Brief function description.\n    \n    Args:\n        arg: Argument description.\n        \n    Returns:\n        Description of return value.\n    \"\"\"\n    return arg\n"
    }
  },

  "commonTasks": {
    "newFeature": {
      "description": "Start working on a new feature",
      "steps": [
        "git checkout -b feature/feature-name",
        "Create rust module in rtest/src/ if needed",
        "Add python bindings in src/lib.rs if needed", 
        "Write tests first (TDD approach)",
        "Implement feature with proper error handling",
        "Add integration tests",
        "Update documentation",
        "Run full CI pipeline locally"
      ]
    },
    "bugFix": {
      "description": "Fix a reported bug",
      "steps": [
        "git checkout -b fix/bug-description",
        "Write failing test that reproduces the bug",
        "Fix the bug with minimal changes",
        "Ensure all tests pass",
        "Add regression test if not covered",
        "Update CHANGELOG.md"
      ]
    },
    "refactor": {
      "description": "Refactor existing code",
      "steps": [
        "git checkout -b refactor/component-name",
        "Ensure all tests pass before starting",
        "Refactor in small, atomic commits",
        "Run tests after each change",
        "Update documentation if APIs changed",
        "Consider performance implications"
      ]
    },
    "release": {
      "description": "Prepare a new release",
      "steps": [
        "Update version in Cargo.toml and pyproject.toml",
        "Update CHANGELOG.md with new features and fixes",
        "Run full test suite: cargo test && uv run pytest",
        "Build release: maturin build --release",
        "Test installation: pip install dist/*.whl",
        "Create release PR",
        "Tag release after merge"
      ]
    }
  },

  "debugging": {
    "rust": {
      "tools": ["cargo test", "cargo clippy", "rust-analyzer"],
      "debugging": "Use #[cfg(test)] modules, dbg!() macro for quick debugging",
      "logging": "Use log crate with env_logger for structured logging",
      "profiling": "cargo flamegraph for performance analysis"
    },
    "python": {
      "tools": ["pytest", "mypy", "ruff"],
      "debugging": "Use pytest -s for print debugging, pdb for interactive debugging",
      "logging": "Use logging module with appropriate levels",
      "profiling": "cProfile for performance analysis"
    }
  },

  "ci_cd": {
    "githubActions": {
      "triggers": ["push", "pull_request"],
      "matrix": {
        "os": ["ubuntu-latest", "macos-latest", "windows-latest"],
        "python": ["3.9", "3.10", "3.11", "3.12"],
        "rust": ["stable"]
      },
      "steps": [
        "Setup Rust toolchain",
        "Setup Python environment", 
        "Install dependencies",
        "Run Rust tests",
        "Run Python tests",
        "Build wheels with maturin",
        "Upload artifacts"
      ]
    }
  },

  "performance": {
    "benchmarks": {
      "command": "./benchmark.sh",
      "comparison": "hyperfine for timing comparisons against pytest",
      "metrics": ["execution_time", "memory_usage", "collection_speed"]
    },
    "optimization": {
      "rust": [
        "Use --release builds for benchmarks",
        "Profile with cargo flamegraph",
        "Consider SIMD for hot paths",
        "Minimize allocations in loops"
      ],
      "python": [
        "Use maturin build --release",
        "Profile Python bindings overhead",
        "Minimize Python/Rust boundary crossings"
      ]
    }
  },

  "documentation": {
    "api": {
      "rust": "cargo doc --open for API documentation",
      "python": "Use docstrings with examples for public APIs"
    },
    "user": {
      "readme": "Keep README.md updated with examples",
      "changelog": "Maintain CHANGELOG.md following conventional commits",
      "contributing": "Update CONTRIBUTING.rst for development setup"
    }
  },

  "troubleshooting": {
    "common_issues": {
      "build_failures": {
        "maturin_issues": "Check Python environment and maturin version",
        "rust_compilation": "Ensure Rust toolchain is up to date",
        "linking_errors": "Check PyO3 version compatibility"
      },
      "test_failures": {
        "rust_tests": "Use cargo test --verbose for detailed output",
        "python_tests": "Use pytest -vvv for maximum verbosity",
        "integration_tests": "Check test environment setup"
      }
    }
  },

  "aiAssistancePreferences": {
    "codeGeneration": {
      "style": "Follow project conventions strictly",
      "testing": "Always include tests for new functionality",
      "documentation": "Include docstrings for public APIs",
      "errorHandling": "Use proper Result types in Rust, explicit exception handling in Python"
    },
    "codeReview": {
      "focus": ["safety", "performance", "maintainability", "test_coverage"],
      "standards": "Enforce clippy warnings, mypy strict mode",
      "patterns": "Suggest idiomatic Rust and Python patterns"
    },
    "refactoring": {
      "approach": "Small, incremental changes with tests",
      "safety": "Ensure no behavioral changes unless explicitly requested",
      "performance": "Profile before and after significant changes"
    }
  }
}