# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import typing
from motrixsim import SceneModel

class Color:
    r"""
    A color in RGBA format, where each component is a float in the range [0.0, 1.0].
    """
    r: builtins.float
    r"""
    float: The red component of the color.
    """
    g: builtins.float
    r"""
    float: The green component of the color.
    """
    b: builtins.float
    r"""
    float: The blue component of the color.
    """
    a: builtins.float
    r"""
    float: The alpha component of the color, representing transparency.
    """
    @staticmethod
    def rgb(r:builtins.float, g:builtins.float, b:builtins.float) -> Color:
        r"""
        Create a color with red, green, blue. Each value should be in the range [0.0, 1.0].
        
        Args:
            r (float): Red component.
            g (float): Green component.
            b (float): Blue component.
        Returns:
            Color: The created color.
        """

class Input:
    r"""
    The Input object represents the input events of the render app.
    
    This class provides access to the input events of the render app.
    It allows you to check if a key or mouse button is pressed, and get the mouse ray.
    """
    def is_key_just_pressed(self, key:builtins.str) -> builtins.bool:
        r"""
        Check if a key is just pressed.
        
        Args:
            key (str): The key to check.
        
        Returns:
            bool: True if the key is pressed, False otherwise.
        """
    def is_key_pressed(self, key:builtins.str) -> builtins.bool:
        r"""
        Check if a key is pressed.
        
        Args:
            key (str): The key to check.
        
        Returns:
            bool: True if the key is pressed, False otherwise.
        """
    def is_mouse_just_pressed(self, mouse:builtins.str) -> builtins.bool:
        r"""
        Check if a mouse button is just pressed.
        
        Args:
            mouse (str): The mouse button to check.
        
        Returns:
            bool: True if the mouse button is pressed, False otherwise.
        """
    def mouse_ray(self) -> builtins.list[builtins.float]:
        r"""
        Returns a ray from camera to mouse click position.
        
        Returns:
            List[float]: The ray from camera to mouse click position.
            It is a 6-element array:
            - Origin : (array[0],array[1],array[2])
            - Direction : (array[3],array[4],array[5])
        """
    def is_ctrl_clicked(self, ctrl_id:builtins.int) -> builtins.bool:
        r"""
        Check whether a control with the given ID is clicked.
        
        Args:
            ctrl_id (int): The ID of the control.
        
        Returns:
            bool: True if the control is clicked, False otherwise.
        """

class RenderApp:
    r"""
    The RenderApp class is responsible for rendering the simulation scene.
    
    This class provides functionality to load models, update their transformations, and render the
    scene. It also handles the creation and management of the render application.
    """
    opt: RenderOpt
    r"""
    RenderOpt: The options of the render app.
    
    Return the options of the render app, which can be used to configure various settings.
    """
    input: Input
    r"""
    Input: The input module of the render app.
    
    Return the input module for handling user input events.
    """
    ui: RenderUI
    r"""
    RenderUI: The UI module of the render app.
    """
    gizmos: RenderGizmos
    r"""
    RenderGizmos: The gizmos module of the render app.
    
    Return the gizmos module for rendering simple shapes in immediate mode.
    """
    def __new__(cls, log_level:builtins.str='WARN') -> RenderApp:
        r"""
        Create a new RenderApp instance.
        
        Args:
            log_level (str): The log level for the render app. Default is "WARN".
        """
    def launch(self, model:SceneModel, repeat:builtins.int=1, render_offset:typing.Optional[typing.Sequence[typing.Sequence[builtins.float]]]=None) -> None:
        r"""
        Load a model into the render app.
        
        Args:
            model (SceneModel): The scene model to load into the render app.
            repeat (int, optional): The number of instances to create. Default is 1.
            render_offset (Optional[List[List[float]]], optional): The offset of each instance in
            render space. Default is None.
        
        Raises:
            RenderClosedError: If the render app is closed.
            InvalidArgumentError: If the file is invalid.
            InvalidFileError: If there are issues with file operations.
            OtherRenderError: For other unexpected errors.
        """
    def sync(self, data:typing.Any) -> None:
        r"""
        Synchronize the render app backend with python data.
        
        Args:
            data (SceneData | List[SceneData] | NDArray): The scene data to synchronize with the
        render. This argument accept three types:
               - `SceneData`: A single instance of SceneData. Same to list[SceneData] with length of
                 1.
               - `List[SceneData]`: A list of SceneData instances. The length must match the
                 `repeat` argument specified in `load_model`.
               - `NDArray`: A 3D numpy array with shape `(num_instances, num_links, 7)`, where the
                 last dimension represents the pose of each link in the format `[x, y, z, qx, qy,
                 qz, qw]`.
        
        Raises:
            RenderClosedError: If the render app is closed.
            InvalidArgumentError: If neither datas nor poses is provided correctly.
            InvalidFileError: If there are issues with file operations.
            OtherRenderError: Not launched with model file.
        """

class RenderGizmos:
    r"""
    Gizmos module for rendering simple shapes in immediate mode.
    """
    def draw_sphere(self, radius:builtins.float, pos:typing.Any, color:Color) -> None:
        r"""
        Draw a sphere at the given position with the specified radius and color.
        
        Args:
            radius (float): The radius of the sphere.
            pos (list[float] | NDArray): The position of the sphere in 3D space.
            color (Color): The color of the sphere.
        """
    def draw_cuboid(self, size:typing.Any, pos:typing.Any, rot:typing.Any, color:Color) -> None:
        r"""
        Draw a cuboid.
        
        Args:
            size (list[float] | NDArray): Size of the cuboid in 3D space.
            pos (list[float] | NDArray): Position of the cuboid in 3D space.
            rot (list[float] | NDArray): Rotation of the cuboid as a quaternion (x, y, z, w).
            color (Color): Color of the cuboid.
        """

class RenderOpt:
    r"""
    The RenderOpt object represents the options of the render app.
    """
    def is_left_panel_vis(self) -> builtins.bool:
        r"""
        Check if the left panel is visible.
        
        Returns:
            bool: True if the left panel is visible, False otherwise.
        """
    def set_left_panel_vis(self, enabled:builtins.bool) -> None:
        r"""
        Set the visibility of the left panel.
        
        Args:
            enabled (bool): True to show the left panel, False to hide it.
        """

class RenderUI:
    r"""
    The RenderUI object represents the user interface of the render app.
    
    This class provides access to the user interface of the render app.
    It allows you to add buttons, toggles, and other UI elements to the render app.
    """
    def add_button(self, label:builtins.str, on_click:typing.Any) -> builtins.int:
        r"""
        Add a button to the user interface.
        
        Args:
            label (str): The label of the button.
            on_click (PyAny): The callback function to be called when the button is clicked.
        
        Returns:
            int: The ID of the button.
        """
    def add_toggle(self, label:builtins.str, default:builtins.bool, on_changed:typing.Any) -> builtins.int:
        r"""
        Add a toggle to the user interface.
        
        Args:
            label (str): The label of the toggle.
            default (bool): The default state of the toggle.
            on_changed (PyAny): The callback function to be called when the toggle is changed.
        """

class InvalidArgumentError(RenderError): ...

class InvalidFileError(RenderError): ...

class OtherRenderError(RenderError): ...

class RenderClosedError(RenderError): ...

class RenderError(Exception): ...

