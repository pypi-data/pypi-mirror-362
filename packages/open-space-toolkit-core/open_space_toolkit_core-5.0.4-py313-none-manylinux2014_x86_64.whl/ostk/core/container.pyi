from __future__ import annotations
import ostk.core.filesystem
import ostk.core.type
import typing
__all__ = ['Dictionary', 'Object', 'get_double_array', 'get_int_array', 'get_integer_array', 'get_real_array', 'get_string_array', 'set_double_array', 'set_int_array', 'set_integer_array', 'set_real_array', 'set_string_array']
class Dictionary:
    class ConstIterator:
        __hash__: typing.ClassVar[None] = None
        def __eq__(self, arg0: Dictionary.ConstIterator) -> bool:
            ...
        def __ne__(self, arg0: Dictionary.ConstIterator) -> bool:
            ...
        def access_key(self) -> ostk.core.type.String:
            ...
        def access_value(self) -> Object:
            ...
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def empty() -> Dictionary:
        ...
    @staticmethod
    def parse(string: ostk.core.type.String, format: Object.Format) -> Dictionary:
        ...
    def __bool__(self) -> bool:
        ...
    def __contains__(self, arg0: ostk.core.type.String) -> bool:
        ...
    def __eq__(self, arg0: Dictionary) -> bool:
        ...
    def __getitem__(self, arg0: ostk.core.type.String) -> Object:
        ...
    def __init__(self, arg0: dict) -> None:
        ...
    def __iter__(self) -> typing.Iterator[...]:
        ...
    def __len__(self) -> int:
        ...
    def __ne__(self, arg0: Dictionary) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def add_value_for_key(self, value: Object, key: ostk.core.type.String) -> None:
        ...
    def get_size(self) -> int:
        ...
    def has_value_for_key(self, key: ostk.core.type.String) -> bool:
        ...
    def is_empty(self) -> bool:
        ...
class Object:
    class Format:
        """
        Members:
        
          Undefined
        
          JSON
        
          YAML
        """
        JSON: typing.ClassVar[Object.Format]  # value = <Format.JSON: 1>
        Undefined: typing.ClassVar[Object.Format]  # value = <Format.Undefined: 0>
        YAML: typing.ClassVar[Object.Format]  # value = <Format.YAML: 2>
        __members__: typing.ClassVar[dict[str, Object.Format]]  # value = {'Undefined': <Format.Undefined: 0>, 'JSON': <Format.JSON: 1>, 'YAML': <Format.YAML: 2>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    class Type:
        """
        Members:
        
          Undefined
        
          Boolean
        
          Integer
        
          Real
        
          String
        
          Dictionary
        
          Array
        """
        Array: typing.ClassVar[Object.Type]  # value = <Type.Array: 6>
        Boolean: typing.ClassVar[Object.Type]  # value = <Type.Boolean: 1>
        Dictionary: typing.ClassVar[Object.Type]  # value = <Type.Dictionary: 5>
        Integer: typing.ClassVar[Object.Type]  # value = <Type.Integer: 2>
        Real: typing.ClassVar[Object.Type]  # value = <Type.Real: 3>
        String: typing.ClassVar[Object.Type]  # value = <Type.String: 4>
        Undefined: typing.ClassVar[Object.Type]  # value = <Type.Undefined: 0>
        __members__: typing.ClassVar[dict[str, Object.Type]]  # value = {'Undefined': <Type.Undefined: 0>, 'Boolean': <Type.Boolean: 1>, 'Integer': <Type.Integer: 2>, 'Real': <Type.Real: 3>, 'String': <Type.String: 4>, 'Dictionary': <Type.Dictionary: 5>, 'Array': <Type.Array: 6>}
        def __eq__(self, other: typing.Any) -> bool:
            ...
        def __getstate__(self) -> int:
            ...
        def __hash__(self) -> int:
            ...
        def __index__(self) -> int:
            ...
        def __init__(self, value: int) -> None:
            ...
        def __int__(self) -> int:
            ...
        def __ne__(self, other: typing.Any) -> bool:
            ...
        def __repr__(self) -> str:
            ...
        def __setstate__(self, state: int) -> None:
            ...
        def __str__(self) -> str:
            ...
        @property
        def name(self) -> str:
            ...
        @property
        def value(self) -> int:
            ...
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def array(array: list[Object]) -> Object:
        ...
    @staticmethod
    def boolean(boolean: bool) -> Object:
        ...
    @staticmethod
    def dictionary(dictionary: Dictionary) -> Object:
        ...
    @staticmethod
    def integer(integer: ostk.core.type.Integer) -> Object:
        ...
    @staticmethod
    def load(file: ostk.core.filesystem.File, format: Object.Format) -> Object:
        ...
    @staticmethod
    def parse(string: ostk.core.type.String, format: Object.Format) -> Object:
        ...
    @staticmethod
    def real(real: ostk.core.type.Real) -> Object:
        ...
    @staticmethod
    def string(string: ostk.core.type.String) -> Object:
        ...
    @staticmethod
    def string_from_type(type: Object.Type) -> ostk.core.type.String:
        ...
    @staticmethod
    def type_from_string(string: ostk.core.type.String) -> Object.Type:
        ...
    @staticmethod
    def undefined() -> Object:
        ...
    def __eq__(self, arg0: Object) -> bool:
        ...
    @typing.overload
    def __getitem__(self, arg0: ostk.core.type.String) -> Object:
        ...
    @typing.overload
    def __getitem__(self, arg0: int) -> Object:
        ...
    def __ne__(self, arg0: Object) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def get_array(self) -> list[Object]:
        ...
    def get_boolean(self) -> bool:
        ...
    def get_dictionary(self) -> Dictionary:
        ...
    def get_integer(self) -> ostk.core.type.Integer:
        ...
    def get_real(self) -> ostk.core.type.Real:
        ...
    def get_string(self) -> ostk.core.type.String:
        ...
    def get_type(self) -> Object.Type:
        ...
    def is_array(self) -> bool:
        ...
    def is_boolean(self) -> bool:
        ...
    def is_defined(self) -> bool:
        ...
    def is_dictionary(self) -> bool:
        ...
    def is_integer(self) -> bool:
        ...
    def is_real(self) -> bool:
        ...
    def is_string(self) -> bool:
        ...
    def to_string(self, arg0: Object.Format) -> ostk.core.type.String:
        ...
def get_double_array() -> list[float]:
    ...
def get_int_array() -> list[int]:
    ...
def get_integer_array() -> list[ostk.core.type.Integer]:
    ...
def get_real_array() -> list[ostk.core.type.Real]:
    ...
def get_string_array() -> list[ostk.core.type.String]:
    ...
def set_double_array(arg0: list[float]) -> None:
    ...
def set_int_array(arg0: list[int]) -> None:
    ...
def set_integer_array(arg0: list[ostk.core.type.Integer]) -> None:
    ...
def set_real_array(arg0: list[ostk.core.type.Real]) -> None:
    ...
def set_string_array(arg0: list[ostk.core.type.String]) -> None:
    ...
