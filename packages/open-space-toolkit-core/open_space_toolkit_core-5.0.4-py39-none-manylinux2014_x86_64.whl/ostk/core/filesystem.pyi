from __future__ import annotations
import ostk.core.type
import typing
__all__ = ['Directory', 'File', 'Path', 'PermissionSet']
class Directory:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def path(arg0: Path) -> Directory:
        ...
    @staticmethod
    def root() -> Directory:
        ...
    @staticmethod
    def undefined() -> Directory:
        ...
    def __eq__(self, arg0: Directory) -> bool:
        ...
    def __ne__(self, arg0: Directory) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def contains_file_with_name(self, arg0: ostk.core.type.String) -> bool:
        ...
    def create(self, arg0: PermissionSet, arg1: PermissionSet, arg2: PermissionSet) -> None:
        ...
    def exists(self) -> bool:
        ...
    def get_directories(self) -> list[Directory]:
        ...
    def get_name(self) -> ostk.core.type.String:
        ...
    def get_parent_directory(self) -> Directory:
        ...
    def get_path(self) -> Path:
        ...
    def is_defined(self) -> bool:
        ...
    def is_empty(self) -> bool:
        ...
    def remove(self) -> None:
        ...
    def to_string(self) -> ostk.core.type.String:
        ...
class File:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def path(arg0: Path) -> File:
        ...
    @staticmethod
    def undefined() -> File:
        ...
    def __eq__(self, arg0: File) -> bool:
        ...
    def __ne__(self, arg0: File) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def create(self, arg0: PermissionSet, arg1: PermissionSet, arg2: PermissionSet) -> None:
        ...
    def exists(self) -> bool:
        ...
    def get_contents(self) -> ostk.core.type.String:
        ...
    def get_extension(self) -> ostk.core.type.String:
        ...
    def get_name(self, withExtension: bool = True) -> ostk.core.type.String:
        ...
    def get_parent_directory(self) -> Directory:
        ...
    def get_path(self) -> Path:
        ...
    def get_permissions(self) -> PermissionSet:
        ...
    def is_defined(self) -> bool:
        ...
    def move_to_directory(self, arg0: Directory) -> None:
        ...
    def remove(self) -> None:
        ...
    def to_string(self) -> ostk.core.type.String:
        ...
class Path:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def current() -> Path:
        ...
    @staticmethod
    def parse(arg0: ostk.core.type.String) -> Path:
        ...
    @staticmethod
    def root() -> Path:
        ...
    @staticmethod
    def undefined() -> Path:
        ...
    def __add__(self, arg0: Path) -> Path:
        ...
    def __eq__(self, arg0: Path) -> bool:
        ...
    def __iadd__(self, arg0: Path) -> Path:
        ...
    def __ne__(self, arg0: Path) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def get_absolute_path(self, base_path: Path = ...) -> Path:
        ...
    def get_last_element(self) -> ostk.core.type.String:
        ...
    def get_normalized_path(self) -> Path:
        ...
    def get_parent_path(self) -> Path:
        ...
    def is_absolute(self) -> bool:
        ...
    def is_defined(self) -> bool:
        ...
    def is_relative(self) -> bool:
        ...
    def to_string(self) -> ostk.core.type.String:
        ...
class PermissionSet:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def none() -> PermissionSet:
        ...
    @staticmethod
    def r() -> PermissionSet:
        ...
    @staticmethod
    def rw() -> PermissionSet:
        ...
    @staticmethod
    def rwx() -> PermissionSet:
        ...
    @staticmethod
    def rx() -> PermissionSet:
        ...
    @staticmethod
    def w() -> PermissionSet:
        ...
    @staticmethod
    def x() -> PermissionSet:
        ...
    def __add__(self, arg0: PermissionSet) -> PermissionSet:
        ...
    def __eq__(self, arg0: PermissionSet) -> bool:
        ...
    def __init__(self, arg0: bool, arg1: bool, arg2: bool) -> None:
        ...
    def __ne__(self, arg0: PermissionSet) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def __sub__(self, arg0: PermissionSet) -> PermissionSet:
        ...
    def can_execute(self) -> bool:
        ...
    def can_read(self) -> bool:
        ...
    def can_write(self) -> bool:
        ...
    def is_all(self) -> bool:
        ...
    def is_none(self) -> bool:
        ...
