from __future__ import annotations
import typing
__all__ = ['Integer', 'Negative', 'NoSign', 'Positive', 'Real', 'Sign', 'String', 'Undefined']
class Integer:
    @staticmethod
    def can_parse(arg0: String) -> bool:
        ...
    @staticmethod
    def index(arg0: int) -> Integer:
        ...
    @staticmethod
    def int16(arg0: int) -> Integer:
        ...
    @staticmethod
    def int32(arg0: int) -> Integer:
        ...
    @staticmethod
    def int64(arg0: int) -> Integer:
        ...
    @staticmethod
    def int8(arg0: int) -> Integer:
        ...
    @staticmethod
    def negative_infinity() -> Integer:
        ...
    @staticmethod
    def parse(arg0: String) -> Integer:
        ...
    @staticmethod
    def positive_infinity() -> Integer:
        ...
    @staticmethod
    def size(arg0: int) -> Integer:
        ...
    @staticmethod
    def uint16(arg0: int) -> Integer:
        ...
    @staticmethod
    def uint32(arg0: int) -> Integer:
        ...
    @staticmethod
    def uint64(arg0: int) -> Integer:
        ...
    @staticmethod
    def uint8(arg0: int) -> Integer:
        ...
    @staticmethod
    def undefined() -> Integer:
        ...
    @staticmethod
    def zero() -> Integer:
        ...
    @typing.overload
    def __add__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __add__(self, arg0: int) -> Integer:
        ...
    def __eq__(self, arg0: Integer) -> bool:
        ...
    def __ge__(self, arg0: Integer) -> bool:
        ...
    def __gt__(self, arg0: Integer) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    @typing.overload
    def __iadd__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __iadd__(self, arg0: int) -> Integer:
        ...
    @typing.overload
    def __imul__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __imul__(self, arg0: int) -> Integer:
        ...
    def __init__(self, arg0: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    @typing.overload
    def __isub__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __isub__(self, arg0: int) -> Integer:
        ...
    @typing.overload
    def __itruediv__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __itruediv__(self, arg0: int) -> Integer:
        ...
    def __le__(self, arg0: Integer) -> bool:
        ...
    def __lt__(self, arg0: Integer) -> bool:
        ...
    @typing.overload
    def __mul__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __mul__(self, arg0: int) -> Integer:
        ...
    def __ne__(self, arg0: Integer) -> bool:
        ...
    def __radd__(self, arg0: int) -> Integer:
        ...
    def __repr__(self) -> str:
        ...
    def __rmul__(self, arg0: int) -> Integer:
        ...
    def __rsub__(self, arg0: int) -> Integer:
        ...
    def __rtruediv__(self, arg0: int) -> Integer:
        ...
    def __str__(self) -> str:
        ...
    @typing.overload
    def __sub__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __sub__(self, arg0: int) -> Integer:
        ...
    @typing.overload
    def __truediv__(self, arg0: Integer) -> Integer:
        ...
    @typing.overload
    def __truediv__(self, arg0: int) -> Integer:
        ...
    def get_sign(self) -> Sign:
        ...
    def is_defined(self) -> bool:
        ...
    def is_even(self) -> bool:
        ...
    def is_finite(self) -> bool:
        ...
    def is_infinity(self) -> bool:
        ...
    def is_negative(self) -> bool:
        ...
    def is_negative_infinity(self) -> bool:
        ...
    def is_odd(self) -> bool:
        ...
    def is_positive(self) -> bool:
        ...
    def is_positive_infinity(self) -> bool:
        ...
    def is_strictly_negative(self) -> bool:
        ...
    def is_strictly_positive(self) -> bool:
        ...
    def is_zero(self) -> bool:
        ...
    def to_string(self) -> String:
        ...
class Real:
    @staticmethod
    def can_parse(arg0: String) -> Real:
        ...
    @staticmethod
    def epsilon() -> Real:
        ...
    @staticmethod
    def half_pi() -> Real:
        ...
    @staticmethod
    def integer(arg0: Integer) -> Real:
        ...
    @staticmethod
    def negative_infinity() -> Real:
        ...
    @staticmethod
    def parse(arg0: String) -> Real:
        ...
    @staticmethod
    def pi() -> Real:
        ...
    @staticmethod
    def positive_infinity() -> Real:
        ...
    @staticmethod
    def two_pi() -> Real:
        ...
    @staticmethod
    def undefined() -> Real:
        ...
    @staticmethod
    def zero() -> Real:
        ...
    @typing.overload
    def __add__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __add__(self, arg0: float) -> Real:
        ...
    def __eq__(self, arg0: Real) -> bool:
        ...
    def __float__(self) -> float:
        ...
    def __ge__(self, arg0: Real) -> bool:
        ...
    def __gt__(self, arg0: Real) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    @typing.overload
    def __iadd__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __iadd__(self, arg0: float) -> Real:
        ...
    @typing.overload
    def __imul__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __imul__(self, arg0: float) -> Real:
        ...
    def __init__(self, arg0: float) -> None:
        ...
    @typing.overload
    def __isub__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __isub__(self, arg0: float) -> Real:
        ...
    @typing.overload
    def __itruediv__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __itruediv__(self, arg0: float) -> Real:
        ...
    def __le__(self, arg0: Real) -> bool:
        ...
    def __lt__(self, arg0: Real) -> bool:
        ...
    @typing.overload
    def __mul__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __mul__(self, arg0: float) -> Real:
        ...
    def __ne__(self, arg0: Real) -> bool:
        ...
    def __radd__(self, arg0: float) -> Real:
        ...
    def __repr__(self) -> str:
        ...
    def __rmul__(self, arg0: float) -> Real:
        ...
    def __rsub__(self, arg0: float) -> Real:
        ...
    def __rtruediv__(self, arg0: float) -> Real:
        ...
    def __str__(self) -> str:
        ...
    @typing.overload
    def __sub__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __sub__(self, arg0: float) -> Real:
        ...
    @typing.overload
    def __truediv__(self, arg0: Real) -> Real:
        ...
    @typing.overload
    def __truediv__(self, arg0: float) -> Real:
        ...
    def abs(self) -> Real:
        ...
    def floor(self) -> Integer:
        ...
    def get_sign(self) -> Sign:
        ...
    def is_defined(self) -> bool:
        ...
    def is_finite(self) -> bool:
        ...
    def is_infinity(self) -> bool:
        ...
    def is_integer(self) -> bool:
        ...
    def is_near(self, arg0: Real, arg1: Real) -> bool:
        ...
    def is_negative(self) -> bool:
        ...
    def is_negative_infinity(self) -> bool:
        ...
    def is_positive(self) -> bool:
        ...
    def is_positive_infinity(self) -> bool:
        ...
    def is_strictly_negative(self) -> bool:
        ...
    def is_strictly_positive(self) -> bool:
        ...
    def is_zero(self) -> bool:
        ...
    def sqrt(self) -> Real:
        ...
    def to_integer(self) -> Integer:
        ...
class Sign:
    """
    Members:
    
      Undefined
    
      Positive
    
      Negative
    
      NoSign
    """
    Negative: typing.ClassVar[Sign]  # value = <Sign.Negative: 2>
    NoSign: typing.ClassVar[Sign]  # value = <Sign.NoSign: 3>
    Positive: typing.ClassVar[Sign]  # value = <Sign.Positive: 1>
    Undefined: typing.ClassVar[Sign]  # value = <Sign.Undefined: 0>
    __members__: typing.ClassVar[dict[str, Sign]]  # value = {'Undefined': <Sign.Undefined: 0>, 'Positive': <Sign.Positive: 1>, 'Negative': <Sign.Negative: 2>, 'NoSign': <Sign.NoSign: 3>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class String:
    @staticmethod
    def boolean(arg0: bool) -> String:
        ...
    @staticmethod
    def char(arg0: str) -> String:
        ...
    @staticmethod
    def empty() -> String:
        ...
    @staticmethod
    def replicate(arg0: String, arg1: int) -> String:
        ...
    @typing.overload
    def __add__(self, arg0: String) -> str:
        ...
    @typing.overload
    def __add__(self, arg0: String) -> str:
        ...
    def __eq__(self, arg0: String) -> bool:
        ...
    def __hash__(self) -> int:
        ...
    @typing.overload
    def __iadd__(self, arg0: String) -> str:
        ...
    @typing.overload
    def __iadd__(self, arg0: str) -> str:
        ...
    def __init__(self, arg0: str) -> None:
        ...
    def __ne__(self, arg0: String) -> bool:
        ...
    def __radd__(self, arg0: str) -> str:
        ...
    def __repr__(self) -> str:
        ...
    def __str__(self) -> str:
        ...
    def get_first(self) -> str:
        ...
    def get_head(self, arg0: int) -> String:
        ...
    def get_last(self) -> str:
        ...
    def get_length(self) -> int:
        ...
    def get_substring(self, arg0: int, arg1: int) -> String:
        ...
    def get_tail(self, arg0: int) -> String:
        ...
    def is_empty(self) -> bool:
        ...
    def is_lowercase(self) -> bool:
        ...
    def is_uppercase(self) -> bool:
        ...
    def match(self, arg0: typing.Any, std: typing.Any) -> bool:
        ...
Negative: Sign  # value = <Sign.Negative: 2>
NoSign: Sign  # value = <Sign.NoSign: 3>
Positive: Sign  # value = <Sign.Positive: 1>
Undefined: Sign  # value = <Sign.Undefined: 0>
