# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from digitalkin_proto.digitalkin.filesystem.v1 import filesystem_pb2 as digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2

GRPC_GENERATED_VERSION = '1.71.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in digitalkin/filesystem/v1/filesystem_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FilesystemServiceStub(object):
    """FilesystemService: Service for managing files and file operations

    This service provides comprehensive file management capabilities including
    upload, retrieval, update, and deletion operations with rich metadata support,
    filtering, and pagination.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFiles = channel.unary_unary(
                '/digitalkin.filesystem.v1.FilesystemService/UploadFiles',
                request_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesRequest.SerializeToString,
                response_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesResponse.FromString,
                _registered_method=True)
        self.GetFile = channel.unary_unary(
                '/digitalkin.filesystem.v1.FilesystemService/GetFile',
                request_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileRequest.SerializeToString,
                response_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileResponse.FromString,
                _registered_method=True)
        self.GetFiles = channel.unary_unary(
                '/digitalkin.filesystem.v1.FilesystemService/GetFiles',
                request_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesRequest.SerializeToString,
                response_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesResponse.FromString,
                _registered_method=True)
        self.UpdateFile = channel.unary_unary(
                '/digitalkin.filesystem.v1.FilesystemService/UpdateFile',
                request_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileRequest.SerializeToString,
                response_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileResponse.FromString,
                _registered_method=True)
        self.DeleteFiles = channel.unary_unary(
                '/digitalkin.filesystem.v1.FilesystemService/DeleteFiles',
                request_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesRequest.SerializeToString,
                response_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesResponse.FromString,
                _registered_method=True)


class FilesystemServiceServicer(object):
    """FilesystemService: Service for managing files and file operations

    This service provides comprehensive file management capabilities including
    upload, retrieval, update, and deletion operations with rich metadata support,
    filtering, and pagination.
    """

    def UploadFiles(self, request, context):
        """UploadFiles: Upload multiple files to the system

        This method allows batch uploading of files with validation and 
        error handling for each individual file. Files are processed
        atomically - if one fails, others may still succeed.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFile(self, request, context):
        """GetFile: Retrieve a specific file by ID or name

        This method fetches detailed information about a single file,
        with optional content inclusion. Supports lookup by either
        unique ID or name within a kin_context.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFiles(self, request, context):
        """GetFiles: Retrieve multiple files by various criteria

        This method provides efficient retrieval of multiple files using:
        - File IDs
        - File names
        - Path prefix
        With support for:
        - Pagination for large result sets
        - Optional content inclusion
        - Total count of matching files

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFile(self, request, context):
        """UpdateFile: Update file metadata, content, or both

        This method allows updating various aspects of a file:
        - Rename files
        - Update content and content type
        - Modify metadata
        - Create new versions

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFiles(self, request, context):
        """DeleteFiles: Delete multiple files

        This method supports batch deletion of files with options for:
        - Soft deletion (marking as deleted)
        - Permanent deletion
        - Force deletion of files in use
        - Individual error reporting per file

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilesystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFiles,
                    request_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesRequest.FromString,
                    response_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesResponse.SerializeToString,
            ),
            'GetFile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFile,
                    request_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileRequest.FromString,
                    response_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileResponse.SerializeToString,
            ),
            'GetFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFiles,
                    request_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesRequest.FromString,
                    response_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesResponse.SerializeToString,
            ),
            'UpdateFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFile,
                    request_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileRequest.FromString,
                    response_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileResponse.SerializeToString,
            ),
            'DeleteFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFiles,
                    request_deserializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesRequest.FromString,
                    response_serializer=digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'digitalkin.filesystem.v1.FilesystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('digitalkin.filesystem.v1.FilesystemService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FilesystemService(object):
    """FilesystemService: Service for managing files and file operations

    This service provides comprehensive file management capabilities including
    upload, retrieval, update, and deletion operations with rich metadata support,
    filtering, and pagination.
    """

    @staticmethod
    def UploadFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/digitalkin.filesystem.v1.FilesystemService/UploadFiles',
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesRequest.SerializeToString,
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UploadFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/digitalkin.filesystem.v1.FilesystemService/GetFile',
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileRequest.SerializeToString,
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/digitalkin.filesystem.v1.FilesystemService/GetFiles',
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesRequest.SerializeToString,
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.GetFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/digitalkin.filesystem.v1.FilesystemService/UpdateFile',
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileRequest.SerializeToString,
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.UpdateFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/digitalkin.filesystem.v1.FilesystemService/DeleteFiles',
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesRequest.SerializeToString,
            digitalkin_dot_filesystem_dot_v1_dot_filesystem__pb2.DeleteFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
