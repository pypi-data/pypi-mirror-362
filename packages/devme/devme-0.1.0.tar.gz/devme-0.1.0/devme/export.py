"""
DevMe Export - Export functionality for sharing project status
"""

from pathlib import Path
from typing import Dict, Any
from datetime import datetime
from .core import DevMe


def export_markdown(devme: DevMe, output_path: str = "DEVME.md") -> None:
    """Export project status to markdown format"""
    status = devme.get_status()
    
    markdown_content = _generate_markdown(status)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(markdown_content)


def export_html(devme: DevMe, output_path: str = "devme.html") -> None:
    """Export project status to HTML format"""
    status = devme.get_status()
    
    html_content = _generate_html(status)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_content)


def _generate_markdown(status: Dict[str, Any]) -> str:
    """Generate markdown content from status"""
    content = []
    
    # Header
    content.append(f"# DevMe - {status['project_name']}")
    content.append(f"*Generated on {status['last_updated']}*")
    content.append("")
    
    # Git Status
    content.append("## üìÅ Git Repository")
    git_info = status.get('git', {})
    if git_info:
        content.append(f"- **Branch**: `{git_info.get('current_branch', 'Unknown')}`")
        content.append(f"- **Status**: {_status_icon(not git_info.get('is_dirty', True))} {'Clean' if not git_info.get('is_dirty', True) else 'Dirty'}")
        content.append(f"- **Branches**: {git_info.get('total_branches', 0)}")
        content.append(f"- **Untracked files**: {git_info.get('untracked_files', 0)}")
        
        if git_info.get('latest_commit'):
            commit = git_info['latest_commit']
            content.append(f"- **Latest commit**: `{commit['hash']}` - {commit['message']}")
            content.append(f"  - **Author**: {commit['author']}")
            content.append(f"  - **Date**: {commit['date']}")
    else:
        content.append("- No git repository found")
    
    content.append("")
    
    # File Status
    content.append("## üìÑ Project Files")
    files = status.get('files', {})
    content.append(f"- **README**: {_status_icon(files.get('readme', False))}")
    content.append(f"- **Tests**: {_status_icon(files.get('tests', False))}")
    content.append(f"- **Package config**: {_status_icon(files.get('package_config', False))}")
    content.append(f"- **Environment files**: {_status_icon(files.get('env_files', False))}")
    content.append(f"- **CI/CD config**: {_status_icon(files.get('ci_config', False))}")
    content.append(f"- **Documentation**: {_status_icon(files.get('documentation', False))}")
    content.append("")
    
    # Environment
    content.append("## üîß Environment")
    env = status.get('environment', {})
    content.append(f"- **Python version**: {env.get('python_version', 'Unknown')}")
    content.append(f"- **Virtual environment**: {_status_icon(env.get('virtual_env', False))}")
    
    git_config = env.get('git_config', {})
    if git_config:
        content.append(f"- **Git user**: {git_config.get('user_name', 'Not set')}")
        content.append(f"- **Git email**: {git_config.get('user_email', 'Not set')}")
    
    content.append("")
    
    # Project Stats
    content.append("## üìä Project Stats")
    content.append(f"- **Total files**: {status.get('file_count', 0)}")
    content.append(f"- **Project path**: `{status.get('path', 'Unknown')}`")
    content.append("")
    
    # Footer
    content.append("---")
    content.append("*Generated by [DevMe](https://pypi.org/project/devme/) - Developer Dashboard Tool*")
    
    return "\n".join(content)


def _generate_html(status: Dict[str, Any]) -> str:
    """Generate HTML content from status"""
    
    # Convert markdown to HTML-like structure
    markdown_content = _generate_markdown(status)
    
    # Simple HTML wrapper
    html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <title>DevMe - {status['project_name']}</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }}
        h1, h2 {{ color: #2c3e50; }}
        code {{
            background: #f4f4f4;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', monospace;
        }}
        ul {{ list-style-type: none; padding-left: 0; }}
        li {{ margin: 8px 0; }}
        .timestamp {{ color: #666; font-style: italic; }}
        .footer {{
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 0.9em;
        }}
    </style>
</head>
<body>
    <div class="content">
        {_markdown_to_html(markdown_content)}
    </div>
</body>
</html>
    """
    
    return html_template


def _markdown_to_html(markdown: str) -> str:
    """Simple markdown to HTML conversion"""
    lines = markdown.split('\n')
    html_lines = []
    
    for line in lines:
        if line.startswith('# '):
            html_lines.append(f'<h1>{line[2:]}</h1>')
        elif line.startswith('## '):
            html_lines.append(f'<h2>{line[3:]}</h2>')
        elif line.startswith('- '):
            html_lines.append(f'<li>{line[2:]}</li>')
        elif line.startswith('*') and line.endswith('*'):
            html_lines.append(f'<p class="timestamp">{line[1:-1]}</p>')
        elif line.startswith('---'):
            html_lines.append('<hr>')
        elif line.strip():
            html_lines.append(f'<p>{line}</p>')
        else:
            html_lines.append('<br>')
    
    return '\n'.join(html_lines)


def _status_icon(status: bool) -> str:
    """Return appropriate icon for status"""
    return "‚úÖ" if status else "‚ùå"