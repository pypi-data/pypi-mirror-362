Metadata-Version: 2.4
Name: verifikio-sdk
Version: 1.1.0
Summary: Official Python SDK for Verifik.io trust infrastructure platform
Home-page: https://github.com/verifik-io/verifikio-python
Author: Verifik.io
Author-email: "Verifik.io" <support@verifik.io>
Maintainer-email: "Verifik.io" <support@verifik.io>
License-Expression: MIT
Project-URL: Homepage, https://verifik.io
Project-URL: Documentation, https://docs.verifik.io/sdk/python
Project-URL: Repository, https://github.com/verifik-io/verifikio-python
Project-URL: Bug Tracker, https://github.com/verifik-io/verifikio-python/issues
Project-URL: API Reference, https://docs.verifik.io/api
Keywords: audit,logging,security,ai,agents,blockchain,verification,trust,infrastructure
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Logging
Classifier: Topic :: Security
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: build>=0.10.0
Requires-Dist: requests>=2.25.0
Requires-Dist: setuptools>=68.0.0
Requires-Dist: twine>=4.0.2
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Requires-Dist: mypy>=0.812; extra == "dev"
Provides-Extra: crewai
Requires-Dist: crewai>=0.1.0; extra == "crewai"
Provides-Extra: langchain
Requires-Dist: langchain>=0.0.200; extra == "langchain"
Provides-Extra: all
Requires-Dist: crewai>=0.1.0; extra == "all"
Requires-Dist: langchain>=0.0.200; extra == "all"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Verifik.io Python SDK

[![PyPI version](https://badge.fury.io/py/verifikio-sdk.svg)](https://badge.fury.io/py/verifikio-sdk)
[![Python Support](https://img.shields.io/pypi/pyversions/verifikio-sdk.svg)](https://pypi.org/project/verifikio-sdk/)
[![Downloads](https://img.shields.io/pypi/dm/verifikio-sdk)](https://pypi.org/project/verifikio-sdk/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![](https://img.shields.io/badge/framework-CrewAI-blue)](https://github.com/joaomdmoura/crewAI)
[![](https://img.shields.io/badge/framework-LangChain-blue)](https://github.com/langchain-ai/langchain)

_The official Python SDK for Verifik.io ‚Äì audit logs you can trust._

> **Also available:** [Node.js SDK](https://www.npmjs.com/package/@verifikio/sdk) - `npm install @verifikio/sdk`

üìÑ [Changelog](CHANGELOG.md) | üöÄ [v1.1.0 Release](CHANGELOG.md#110---2025-01-15)

## Installation

To install the official Verifik.io Python SDK:

```bash
pip install verifikio-sdk
```

For framework integrations:

```bash
# For CrewAI integration
pip install verifikio-sdk[crewai]

# For LangChain integration
pip install verifikio-sdk[langchain]

# For all integrations
pip install verifikio-sdk[all]
```

Verifik.io provides secure, immutable audit trails for AI agents using blockchain-style verification. Perfect for teams building with CrewAI, LangChain, AutoGPT, and other AI frameworks who need SOC 2 / ISO27001 compliance.

## Features

- üîê **Secure audit logging** with automatic hash chaining
- üöÄ **Developer-friendly** - Get started in minutes
- üìä **Chain verification** - Ensure data integrity
- üîë **Simple authentication** with API keys
- üêç **Python 3.7+** compatible
- üì¶ **Minimal dependencies** - Only requires `requests`

## Quick Start

```python
from verifikio import VerifikClient

# Initialize client with your API key
client = VerifikClient(api_key="verifik_live_abc123...")

# Log an AI agent event
response = client.log_event(
    agent_name="data_processor",
    action="process_customer_data",
    inputs={"customer_id": "cust_123", "data_type": "profile"},
    outputs={"status": "processed", "record_count": 1},
    metadata={"processing_time": "1.2s"},
    workflow_id="workflow_456",
    status="success"
)

print(f"Audit log created: {response['id']}")
print(f"Hash: {response['hash']}")
```

## Framework Integrations

### CrewAI Integration

Automatically log all CrewAI agent actions and task executions:

```python
from verifikio import VerifikClient
from verifikio.integrations.crewai import VerifikCrewAIHandler
from crewai import Agent, Task, Crew

# Initialize Verifik.io
client = VerifikClient(api_key="verifik_live_xxx")
handler = VerifikCrewAIHandler(client, workflow_id="research-crew-001")

# Create agents with automatic logging
researcher = Agent(
    role="Researcher",
    goal="Research the latest AI trends",
    backstory="You are an expert AI researcher",
    callbacks=[handler]
)

writer = Agent(
    role="Writer", 
    goal="Write engaging content about AI",
    backstory="You are a technical writer",
    callbacks=[handler]
)

# Create tasks - all executions are logged
research_task = Task(
    description="Research GPT-4 capabilities",
    agent=researcher,
    callbacks=[handler]
)

write_task = Task(
    description="Write an article about the findings",
    agent=writer,
    callbacks=[handler]
)

# Run crew - all actions are tracked
crew = Crew(
    agents=[researcher, writer],
    tasks=[research_task, write_task],
    callbacks=[handler]
)

results = crew.kickoff()
```

### LangChain Integration

Automatically log LangChain chains, tools, and LLM calls:

```python
from verifikio import VerifikClient
from verifikio.integrations.langchain import VerifikLangChainHandler
from langchain.chains import LLMChain
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate

# Initialize Verifik.io
client = VerifikClient(api_key="verifik_live_xxx")
handler = VerifikLangChainHandler(
    client, 
    workflow_id="qa-chain-001",
    log_llm_calls=True  # Log individual LLM calls
)

# Create LLM with logging
llm = OpenAI(temperature=0.7, callbacks=[handler])

# Create chain with logging
prompt = PromptTemplate(
    input_variables=["topic"],
    template="Write a short article about {topic}"
)

chain = LLMChain(
    llm=llm, 
    prompt=prompt, 
    callbacks=[handler]
)

# All executions are automatically logged
result = chain.run("artificial intelligence in healthcare")
```

## API Reference

### VerifikClient

#### `__init__(api_key, base_url="https://api.verifik.io", timeout=30)`

Create a new Verifik.io client instance.

**Parameters:**
- `api_key` (str): Your Verifik.io API key (format: `verifik_live_*`)
- `base_url` (str, optional): Base URL for the API
- `timeout` (int, optional): Request timeout in seconds

```python
client = VerifikClient(api_key="verifik_live_abc123...")
```

#### `log_event(agent_name, action, **kwargs)`

Create a new audit log entry.

**Parameters:**
- `agent_name` (str): Name/identifier of the AI agent or service
- `action` (str): The action that was performed
- `inputs` (dict, optional): Input data/parameters for the action
- `outputs` (dict, optional): Output data/results from the action
- `metadata` (dict, optional): Additional metadata about the event
- `workflow_id` (str, optional): Workflow or session identifier
- `status` (str, optional): Status of the action (e.g., "success", "error", "pending")

**Returns:** `dict` - The created audit log entry

```python
response = client.log_event(
    agent_name="email_agent",
    action="send_notification",
    inputs={"recipient": "user@example.com"},
    outputs={"message_id": "msg_123"},
    status="success"
)
```

#### `get_logs(limit=50, offset=0, workflow_id=None)`

Retrieve audit logs with pagination.

**Parameters:**
- `limit` (int, optional): Number of logs to return (max 100)
- `offset` (int, optional): Number of logs to skip
- `workflow_id` (str, optional): Filter by workflow ID

**Returns:** `dict` - Paginated list of audit logs

```python
logs = client.get_logs(limit=20, offset=0)
for log in logs['logs']:
    print(f"Agent: {log['agentId']}, Action: {log['action']}")
```

#### `verify_chain()`

Verify the integrity of the audit log chain.

**Returns:** `dict` - Verification results

```python
verification = client.verify_chain()
print(f"Chain integrity: {verification['isValid']}")
```

#### `get_stats()`

Get account statistics and metrics.

**Returns:** `dict` - Account statistics

```python
stats = client.get_stats()
print(f"Total logs: {stats['totalLogs']}")
print(f"Chain integrity: {stats['chainIntegrity']}%")
```

## Framework Examples

### CrewAI Integration

```python
from verifikio import VerifikClient
from crewai import Agent, Task, Crew

# Initialize Verifik.io client
verifik = VerifikClient(api_key="verifik_live_abc123...")

# Create your CrewAI agents
researcher = Agent(
    role='Research Analyst',
    goal='Analyze market trends',
    backstory='Expert in market analysis'
)

# Custom callback to log CrewAI events
def log_crew_event(agent_name, action, inputs=None, outputs=None, status="success"):
    verifik.log_event(
        agent_name=agent_name,
        action=action,
        inputs=inputs,
        outputs=outputs,
        metadata={"framework": "crewai"},
        status=status
    )

# Log when agent starts task
log_crew_event("research_analyst", "start_analysis", {"topic": "AI market"})

# ... run your CrewAI workflow ...

# Log completion
log_crew_event("research_analyst", "complete_analysis", 
              outputs={"findings": "Market growing 40% YoY"})
```

### LangChain Integration

```python
from verifikio import VerifikClient
from langchain.chains import LLMChain
from langchain.callbacks.base import BaseCallbackHandler

verifik = VerifikClient(api_key="verifik_live_abc123...")

class VerifikCallback(BaseCallbackHandler):
    def on_chain_start(self, serialized, inputs, **kwargs):
        verifik.log_event(
            agent_name="langchain_agent",
            action="chain_start",
            inputs=inputs,
            metadata={"chain_type": serialized.get("name", "unknown")}
        )
    
    def on_chain_end(self, outputs, **kwargs):
        verifik.log_event(
            agent_name="langchain_agent",
            action="chain_end",
            outputs=outputs,
            status="success"
        )

# Use the callback in your LangChain
chain = LLMChain(llm=llm, prompt=prompt, callbacks=[VerifikCallback()])
```

## Error Handling

The SDK includes comprehensive error handling:

```python
from verifikio import VerifikClient, AuthenticationError, ValidationError, APIError

client = VerifikClient(api_key="verifik_live_abc123...")

try:
    response = client.log_event(
        agent_name="test_agent",
        action="test_action"
    )
except AuthenticationError:
    print("Invalid API key")
except ValidationError as e:
    print(f"Invalid parameters: {e}")
except APIError as e:
    print(f"API error: {e}")
```

## Context Manager Support

The client supports context manager protocol for automatic cleanup:

```python
with VerifikClient(api_key="verifik_live_abc123...") as client:
    client.log_event(
        agent_name="context_agent",
        action="test_action"
    )
# Client session automatically closed
```

## Getting Your API Key

1. Sign up at [verifik.io](https://verifik.io)
2. Go to your Settings page
3. Generate a new API key
4. Copy the key (format: `verifik_live_...`)

## Development

### Running Tests

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest tests/

# Run tests with coverage
pytest tests/ --cov=verifikio
```

### Code Quality

```bash
# Format code
black verifikio/

# Lint code
flake8 verifikio/

# Type checking
mypy verifikio/
```

## Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Make your changes and add tests
4. Run the test suite: `pytest`
5. Submit a pull request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

- üìß **Email**: support@verifik.io
- üìñ **Documentation**: https://docs.verifik.io
- üêõ **Bug Reports**: https://github.com/verifik-io/verifikio-python/issues
- üí¨ **Community**: https://discord.gg/verifik

## Changelog

### 1.0.0 (2024-01-14)
- Initial release
- Core audit logging functionality
- Chain verification
- Full API coverage
- Python 3.7+ support
