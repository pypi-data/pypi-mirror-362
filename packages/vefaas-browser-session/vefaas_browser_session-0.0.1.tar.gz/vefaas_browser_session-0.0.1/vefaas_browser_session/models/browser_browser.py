# coding: utf-8

"""
    veFaaS Browser Session Manager API

    API for managing browser sessions in veFaaS platform

    The version of the OpenAPI document: 0.0.1
    Contact: support@vefaas.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from vefaas_browser_session.models.browser_browser_options import BrowserBrowserOptions
from typing import Optional, Set
from typing_extensions import Self

class BrowserBrowser(BaseModel):
    """
    BrowserBrowser
    """ # noqa: E501
    cdp_url: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    deleted_at: Optional[StrictStr] = None
    expiration_time: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    options: Optional[BrowserBrowserOptions] = None
    pod_name: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    status: Optional[StrictStr] = None
    ws_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cdp_url", "created_at", "deleted_at", "expiration_time", "id", "options", "pod_name", "port", "status", "ws_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserBrowser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserBrowser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cdp_url": obj.get("cdp_url"),
            "created_at": obj.get("created_at"),
            "deleted_at": obj.get("deleted_at"),
            "expiration_time": obj.get("expiration_time"),
            "id": obj.get("id"),
            "options": BrowserBrowserOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "pod_name": obj.get("pod_name"),
            "port": obj.get("port"),
            "status": obj.get("status"),
            "ws_url": obj.get("ws_url")
        })
        return _obj


