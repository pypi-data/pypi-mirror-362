"""Color system - needed for most daisyUI components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/colors.ipynb.

# %% auto 0
__all__ = ['TAILWIND_COLORS', 'SPECIAL_COLORS', 'HEX_PATTERN', 'RGB_PATTERN', 'HSL_PATTERN', 'VAR_PATTERN', 'is_valid_color',
           'normalize_color', 'validate_color_value', 'color_with_opacity', 'make_color']

# %% ../nbs/colors.ipynb 3
import re
from typing import Optional, Dict, Set
from functools import lru_cache

from .types import OpacityValue, BaseColor, ColorShade
from .validation import InvalidColorError

# %% ../nbs/colors.ipynb 5
TAILWIND_COLORS = { # Predefined Tailwind color palette
    "slate": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "gray": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "zinc": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "neutral": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "stone": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "red": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "orange": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "amber": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "yellow": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "lime": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "green": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "emerald": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "teal": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "cyan": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "sky": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "blue": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "indigo": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "violet": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "purple": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "fuchsia": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "pink": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
    "rose": {50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950},
} 

# %% ../nbs/colors.ipynb 6
SPECIAL_COLORS = {"transparent", "current", "inherit", "white", "black"} # Special colors that don't have shades

# %% ../nbs/colors.ipynb 7
HEX_PATTERN = re.compile(r'^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$') # CSS Hex color format patterns

# %% ../nbs/colors.ipynb 8
RGB_PATTERN = re.compile(r'^rgba?\s*\([^)]+\)$', re.IGNORECASE) # CSS RGB color format patterns

# %% ../nbs/colors.ipynb 9
HSL_PATTERN = re.compile(r'^hsla?\s*\([^)]+\)$', re.IGNORECASE) # CSS HSL color format patterns

# %% ../nbs/colors.ipynb 10
VAR_PATTERN = re.compile(r'^var\s*\([^)]+\)$') # CSS VAR color format patterns

# %% ../nbs/colors.ipynb 11
@lru_cache(maxsize=512)
def is_valid_color(
    color: str  # Color string to validate
) -> bool:  # True if valid color, False otherwise
    "Validate if a string is a valid color value. Valid colors include: - Tailwind color names (with or without shade) - Special color keywords - Hex colors (#RGB, #RRGGBB, #RRGGBBAA) - RGB/RGBA functions - HSL/HSLA functions - CSS variables"
    if not color:
        return False
        
    # Check special colors
    if color in SPECIAL_COLORS:
        return True
    
    # Check if it's a Tailwind color with shade (e.g., "blue-500")
    if "-" in color and not color.startswith('var('):  # Don't treat var(--foo) as color-shade
        parts = color.split("-", 1)
        if len(parts) == 2:
            base, shade = parts
            try:
                shade_num = int(shade)
                return base in TAILWIND_COLORS and shade_num in TAILWIND_COLORS[base]
            except ValueError:
                return False
    
    # Check if it's just a base color name
    if color in TAILWIND_COLORS:
        return True
    
    # Check CSS color formats - use 'is not None' to check for match objects
    return (
        HEX_PATTERN.match(color) is not None or
        RGB_PATTERN.match(color) is not None or
        HSL_PATTERN.match(color) is not None or
        VAR_PATTERN.match(color) is not None
    )

# %% ../nbs/colors.ipynb 12
@lru_cache(maxsize=256)
def normalize_color(
    color: str  # Color string to normalize
) -> str:  # Normalized color string
    "Normalize color value for use in Tailwind classes. This function handles: - Standard Tailwind colors (returns as-is) - CSS color functions (ensures proper formatting) - CSS variables (ensures proper formatting)"
    if not color:
        return color
    
    # For Tailwind colors and special colors, return as-is
    if color in SPECIAL_COLORS or color in TAILWIND_COLORS:
        return color
    
    # For Tailwind colors with shades, validate and return as-is
    if "-" in color and not color.startswith('var(') and is_valid_color(color):
        return color
    
    # For CSS functions and variables, ensure no extra spaces
    if any(pattern.match(color) is not None for pattern in [RGB_PATTERN, HSL_PATTERN, VAR_PATTERN]):
        # Remove extra spaces around parentheses and commas
        color = re.sub(r'\s*([(),])\s*', r'\1', color)
        # Ensure single space after function name
        color = re.sub(r'^(\w+)\s*\(', r'\1(', color)
    
    return color

# %% ../nbs/colors.ipynb 13
def validate_color_value(
    color: str,  # The color value to validate
    allow_opacity_suffix: bool = False  # Whether to allow opacity suffix like 'white/80'
) -> None:  # TODO: Add return description
    "Validate a color value using the is_valid_color function."
    if not isinstance(color, str):
        raise InvalidColorError(f"Color must be a string, got {type(color).__name__}")
    
    if not color:
        raise InvalidColorError("Color value cannot be empty")
    
    # Check if color has opacity suffix
    if allow_opacity_suffix and "/" in color:
        color_part, opacity_part = color.rsplit("/", 1)
        # Validate the color part
        if not is_valid_color(color_part):
            raise InvalidColorError(
                f"Invalid color in '{color}'. "
                f"Color part '{color_part}' is not valid."
            )
        # Validate the opacity part
        try:
            opacity = int(opacity_part)
            if not 0 <= opacity <= 100:
                raise InvalidColorError(
                    f"Invalid opacity '{opacity_part}' in '{color}'. "
                    f"Opacity must be between 0 and 100."
                )
        except ValueError:
            raise InvalidColorError(
                f"Invalid opacity '{opacity_part}' in '{color}'. "
                f"Opacity must be a number between 0 and 100."
            )
        return
    
    if not is_valid_color(color):
        # Provide helpful error message based on the type of error
        if "-" in color:
            parts = color.split("-", 1)
            if len(parts) == 2:
                base, shade = parts
                if base not in TAILWIND_COLORS:
                    raise InvalidColorError(
                        f"Invalid color base '{base}'. "
                        f"Valid color bases: {', '.join(sorted(TAILWIND_COLORS.keys()))}"
                    )
                try:
                    shade_num = int(shade)
                    valid_shades = sorted(TAILWIND_COLORS.get(base, set()))
                    raise InvalidColorError(
                        f"Invalid shade '{shade}' for color '{base}'. "
                        f"Valid shades: {valid_shades}"
                    )
                except ValueError:
                    raise InvalidColorError(
                        f"Invalid color format '{color}'. "
                        f"Expected format: 'color-shade' (e.g., 'blue-500')"
                    )
        
        raise InvalidColorError(
            f"Invalid color value '{color}'. "
            f"Must be a Tailwind color (e.g., 'blue-500'), "
            f"special color (white, black, transparent, current, inherit), "
            f"hex color (e.g., '#ff0000'), "
            f"RGB/RGBA (e.g., 'rgb(255, 0, 0)'), "
            f"HSL/HSLA (e.g., 'hsl(0, 100%, 50%)'), "
            f"or CSS variable (e.g., 'var(--primary)')"
        )

# %% ../nbs/colors.ipynb 14
def color_with_opacity(
    color: str,  # Base color value
    opacity: Optional[OpacityValue] = None  # Optional opacity value (0-100)
) -> str:  # Color string with opacity modifier if provided
    "Generate color string with optional opacity modifier."
    if opacity is not None:
        return f"{color}/{opacity}"
    return color

# %% ../nbs/colors.ipynb 15
def make_color(
    base: BaseColor,  # Base color name
    shade: ColorShade  # Color shade value
) -> str:  # Complete color string (e.g., "blue-500")
    """Create a color string from base color and shade."""
    return f"{base}-{shade}"
