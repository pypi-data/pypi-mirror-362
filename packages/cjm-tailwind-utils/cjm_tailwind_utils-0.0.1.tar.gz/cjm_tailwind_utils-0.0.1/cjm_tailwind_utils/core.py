"""Essential foundation that's always needed"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/core.ipynb.

# %% auto 0
__all__ = ['tw', 'TailwindBuilder']

# %% ../nbs/core.ipynb 3
from typing import Union, Optional, List, Self, Set
from functools import lru_cache
from fastcore.basics import patch

from .types import SpacingValue, SizeValue
from .validation import should_replace_class, ChainModeError

# %% ../nbs/core.ipynb 5
class TailwindBuilder:
    """Dynamic Tailwind CSS utility class builder with full type safety and chainable API.
    
    This builder provides methods for generating Tailwind utility classes with proper type hints
    and validation. It supports both direct string returns and chainable fluent API.
    
    Usage:
        tw.p(4)  # Returns "p-4" 
        tw.chain().p(4).bg("blue-500")  # Returns chainable builder
    """
    
    def __init__(
        self,
        _chain_mode: bool = False,  # TODO: Add description
        dedupe: bool = True  # TODO: Add description
    ):
        """Initialize builder.
        
        Args:
            _chain_mode: Internal flag for chainable mode
            dedupe: Whether to deduplicate conflicting classes (default: True)
        """
        self._chain_mode = _chain_mode
        self._classes: List[str] = []
        # Use a set for O(1) lookups during deduplication
        self._class_set: Set[str] = set()
        self._dedupe = dedupe
    
    def _add_class(
        self,
        class_str: str  # TODO: Add description
    ) -> None:  # TODO: Add return description
        """Add a class string to the internal list with optional deduplication.
        
        Optimized version using a set for fast lookups and batch operations.
        """
        if not class_str:
            return
            
        if self._dedupe:
            # Fast check for exact duplicates using set
            if class_str in self._class_set:
                return
            
            # Check for conflicting classes
            # Collect indices to remove in a single pass
            indices_to_remove = []
            for i, existing_class in enumerate(self._classes):
                if should_replace_class(existing_class, class_str):
                    indices_to_remove.append(i)
            
            # Remove in reverse order to maintain indices
            for i in reversed(indices_to_remove):
                removed_class = self._classes.pop(i)
                self._class_set.remove(removed_class)
        
        # Add the new class
        self._classes.append(class_str)
        self._class_set.add(class_str)
    
    def _return_value(
        self,
        class_str: str  # TODO: Add description
    ) -> Union[str, Self]:  # TODO: Add return description
        """Return class string directly or add to chain based on mode."""
        if self._chain_mode:
            self._add_class(class_str)
            return self
        return class_str

# %% ../nbs/core.ipynb 7
@patch
def arbitrary(
    self:TailwindBuilder,
    prefix: str,  # CSS utility prefix (e.g., 'p', 'w', 'text')
    value: str,  # Arbitrary value (e.g., '23px', '#1da1f2', 'calc(100%-1rem)')
    suffix: Optional[str] = None  # Optional suffix (e.g., for p-[20px]/50)
) -> Union[str, Self]:  # Arbitrary value utility class string or self for chaining
    """Generate arbitrary value utility class.
    
    Examples:
        tw.arbitrary('w', '23px')  # Returns 'w-[23px]'
        tw.arbitrary('bg', '#1da1f2')  # Returns 'bg-[#1da1f2]'
        tw.arbitrary('p', '20px', '50')  # Returns 'p-[20px]/50'
    """
    class_str = f"{prefix}-[{value}]"
    if suffix:
        class_str += f"/{suffix}"
    return self._return_value(class_str)

# %% ../nbs/core.ipynb 8
@patch
def util(
    self:TailwindBuilder,
    *classes: str  # Raw Tailwind utility classes to add
) -> Union[str, Self]:  # Utility classes string or self for chaining
    """Add raw Tailwind utility classes without validation.
    
    This method allows adding any Tailwind utility classes directly,
    useful for custom utilities, newer Tailwind features, or third-party plugins.
    
    Args:
        *classes: One or more Tailwind utility class strings
        
    Returns:
        Combined utility classes string or self for chaining
        
    Examples:
        tw.util('backdrop-blur-sm')  # Returns 'backdrop-blur-sm'
        tw.util('animate-fade-in', 'will-change-transform')  # Returns 'animate-fade-in will-change-transform'
        tw.chain().util('custom-utility').p(4)  # Chainable
    """
    class_str = " ".join(classes)
    return self._return_value(class_str)

# %% ../nbs/core.ipynb 10
@patch
def add_class(
    self:TailwindBuilder,
    class_str: str  # TODO: Add description
) -> Self:  # TODO: Add return description
    """Add arbitrary class string (only available in chain mode)."""
    if not self._chain_mode:
        raise ChainModeError("add_class() is only available in chain mode. Use chain() first.")
    self._add_class(class_str)
    return self

# %% ../nbs/core.ipynb 11
@patch
def build(
    self:TailwindBuilder
) -> str:  # TODO: Add return description
    """Build and return the final class string (only available in chain mode)."""
    if not self._chain_mode:
        raise ChainModeError("build() is only available in chain mode. Use chain() first.")
    return " ".join(self._classes)

# %% ../nbs/core.ipynb 12
@patch
def __str__(
    self:TailwindBuilder
) -> str:  # TODO: Add return description
    """String representation."""
    if self._chain_mode:
        return self.build()
    return "TailwindBuilder()"

# %% ../nbs/core.ipynb 13
@patch
def __repr__(
    self:TailwindBuilder
) -> str:  # TODO: Add return description
    """Representation."""
    if self._chain_mode:
        return f"TailwindBuilder(chain_mode=True, classes={self._classes})"
    return "TailwindBuilder()"

# %% ../nbs/core.ipynb 14
@patch
def merge(
    self:TailwindBuilder,
    *class_strings: str,
    dedupe: bool = True  # Whether to deduplicate conflicting classes (default: True)
) -> str:  # Merged class string
    "Merge multiple class strings into one, with optional deduplication. This is a utility method that doesn't require chain mode."
    if not class_strings:
        return ""
    
    # Create a temporary chain builder to use deduplication logic
    builder = TailwindBuilder(_chain_mode=True, dedupe=dedupe)
    
    # Add all classes from all strings
    for class_string in class_strings:
        if class_string:
            for cls in class_string.split():
                builder._add_class(cls)
    
    return " ".join(builder._classes)

# %% ../nbs/core.ipynb 16
@patch
def chain(self:TailwindBuilder, *classes: str, dedupe: bool = True) -> Self:  # Chainable TailwindBuilder instance
    """Create a chainable builder instance with optional starting classes.
    
    Args:
        *classes: Optional initial classes to add
        dedupe: Whether to deduplicate conflicting classes (default: True)
        
    Returns:
        A new chainable TailwindBuilder instance
    """
    builder = TailwindBuilder(_chain_mode=True, dedupe=dedupe)
    if classes:
        for cls in classes:
            builder._add_class(cls)
    return builder

# %% ../nbs/core.ipynb 18
@patch
def _spacing_class(
    self:TailwindBuilder,
    prefix: str,  # CSS class prefix (e.g., 'p', 'mx', 'gap')
    value: Union[SpacingValue, str]  # Spacing value to format
) -> str:  # Complete CSS class string
    """Build spacing utility class."""
    formatted_value = _format_spacing_value(value)
    return f"{prefix}-{formatted_value}"

# %% ../nbs/core.ipynb 19
@patch
def _size_class(
    self:TailwindBuilder,
    prefix: str,  # CSS class prefix (e.g., 'w', 'h', 'max-w')
    value: Union[SizeValue, str]  # Size value to format
) -> str:  # Complete CSS class string
    """Build size utility class."""
    if isinstance(value, str) and "/" in value:
        # Handle fractions
        return f"{prefix}-{value}"
    return f"{prefix}-{_format_spacing_value(value)}"

# %% ../nbs/core.ipynb 20
@lru_cache(maxsize=256)
def _format_spacing_value(
    value: SpacingValue  # Spacing value to format (numeric or string)
) -> str:  # Formatted string for CSS class name
    """Format spacing value for class name."""
    if isinstance(value, (int, float)):
        # Handle decimal values like 0.5, 1.5, 2.5, etc.
        return str(value)
    return str(value)

# %% ../nbs/core.ipynb 24
tw = TailwindBuilder() # Global instance of TailwindBuilder for convenience
