"""Tailwind v4+ features including container queries, `:has()` pseudo-class, and `@supports`. Optional module for cutting-edge CSS features."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/modern.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/modern.ipynb 3
from typing import Union, Optional, Self

from .core import TailwindBuilder, patch

# %% ../nbs/modern.ipynb 5
@patch  
def container_query(
    self:TailwindBuilder,
    name: Optional[str] = None  # Optional container name
) -> Union[str, Self]:  # Container query class string or self for chaining
    """Add container query support for container queries.
    
    Examples:
        tw.container_query()  # @container
        tw.container_query('sidebar')  # @container/sidebar
    """
    if name:
        class_str = f"@container/{name}"
    else:
        class_str = "@container"
    return self._return_value(class_str)

# %% ../nbs/modern.ipynb 6
@patch
def cq(
    self:TailwindBuilder,
    size: Union[str, int],  # Container size (e.g., 'sm', 'md', '300px', 20)
    *classes: str  # Classes to apply at container size
) -> Union[str, Self]:  # Container query classes string or self for chaining
    """Add container query size variant to classes.
    
    Examples:
        tw.cq('md', 'flex', 'gap-4')  # @md:flex @md:gap-4
        tw.cq('300px', 'grid-cols-2')  # @[300px]:grid-cols-2
        tw.cq(20, 'text-lg')  # @[20rem]:text-lg (numeric values treated as rem)
    """
    # Handle different size formats
    if isinstance(size, int):
        # Numeric values are treated as rem
        size_str = f"[{size}rem]"
    elif isinstance(size, str) and size not in ['sm', 'md', 'lg', 'xl', '2xl']:
        # Arbitrary sizes need brackets
        size_str = f"[{size}]"
    else:
        # Named sizes
        size_str = size
    
    class_str = " ".join(f"@{size_str}:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/modern.ipynb 7
@patch
def has(
    self:TailwindBuilder,
    selector: str,  # Selector to check for (e.g., 'hover', '[disabled]')
    *classes: str  # Classes to apply when selector matches
) -> Union[str, Self]:  # Has pseudo-class classes string or self for chaining
    """Add :has() pseudo-class support.
    
    Examples:
        tw.has('[disabled]', 'opacity-50')  # has-[[disabled]]:opacity-50
        tw.has('hover', 'shadow-lg')  # has-[hover]:shadow-lg
    """
    # If selector already has brackets, don't add them again
    if selector.startswith('[') and selector.endswith(']'):
        # Add extra brackets for Tailwind's arbitrary value syntax
        selector = f"[{selector}]"
    elif not selector.startswith('['):
        # Wrap selector in brackets if not already
        selector = f"[{selector}]"
    
    class_str = " ".join(f"has-{selector}:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/modern.ipynb 8
@patch
def supports(
    self:TailwindBuilder,
    feature: str,  # CSS feature to check support for
    *classes: str  # Classes to apply when feature is supported
) -> Union[str, Self]:  # Feature query classes string or self for chaining
    """Add @supports feature query support.
    
    Examples:
        tw.supports('grid', 'grid', 'grid-cols-3')  # supports-[grid]:grid supports-[grid]:grid-cols-3
        tw.supports('backdrop-filter', 'backdrop-blur-sm')
    """
    class_str = " ".join(f"supports-[{feature}]:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/modern.ipynb 9
@patch
def data(
    self:TailwindBuilder,
    attribute: str,  # Data attribute to check (without data- prefix)
    value: Optional[str] = None,  # Optional value to match
    *classes: str  # Classes to apply when data attribute matches
) -> Union[str, Self]:  # Data attribute classes string or self for chaining
    """Add data attribute selector support.
    
    Examples:
        tw.data('open', None, 'block')  # data-[open]:block
        tw.data('state', 'active', 'bg-blue-500')  # data-[state=active]:bg-blue-500
    """
    if value:
        selector = f"[{attribute}={value}]"
    else:
        selector = f"[{attribute}]"
    
    class_str = " ".join(f"data-{selector}:{cls}" for cls in classes)
    return self._return_value(class_str)
