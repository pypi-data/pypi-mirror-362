"""State variants (hover, focus), responsive breakpoints (sm, md, lg), dark mode, and modifier utilities. Add interactivity and responsiveness to components."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/variants.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/variants.ipynb 3
from typing import Union, List, Self

from .core import TailwindBuilder, patch

# %% ../nbs/variants.ipynb 5
@patch
def hover(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Hover state classes string or self for chaining
    """Add hover state variant to classes."""
    class_str = " ".join(f"hover:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 6
@patch
def focus(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Focus state classes string or self for chaining
    """Add focus state variant to classes."""
    class_str = " ".join(f"focus:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 7
@patch
def active(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Active state classes string or self for chaining
    """Add active state variant to classes."""
    class_str = " ".join(f"active:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 8
@patch
def disabled(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Disabled state classes string or self for chaining
    """Add disabled state variant to classes."""
    class_str = " ".join(f"disabled:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 10
@patch
def sm(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Small screen responsive classes string or self for chaining
    """Add small screen variant to classes."""
    class_str = " ".join(f"sm:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 11
@patch
def md(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Medium screen responsive classes string or self for chaining
    """Add medium screen variant to classes."""
    class_str = " ".join(f"md:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 12
@patch
def lg(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Large screen responsive classes string or self for chaining
    """Add large screen variant to classes."""
    class_str = " ".join(f"lg:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 13
@patch
def xl(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Extra large screen responsive classes string or self for chaining
    """Add extra large screen variant to classes."""
    class_str = " ".join(f"xl:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 14
@patch
def xxl(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # 2XL screen responsive classes string or self for chaining
    """Add 2xl screen variant to classes."""
    class_str = " ".join(f"2xl:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 16
@patch
def dark(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Dark mode classes string or self for chaining
    """Add dark mode variant to classes."""
    class_str = " ".join(f"dark:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 18
@patch
def group_hover(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Group hover classes string or self for chaining
    """Add group-hover variant to classes."""
    class_str = " ".join(f"group-hover:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 19
@patch
def peer_hover(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Peer hover classes string or self for chaining
    """Add peer-hover variant to classes."""
    class_str = " ".join(f"peer-hover:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 20
@patch
def modifiers(
    self:TailwindBuilder,
    *modifiers: str,
    classes: Union[str, List[str]]
) -> Union[str, Self]:  # Modified classes string or self for chaining
    """Apply multiple modifiers to classes with support for stacking.
    
    Examples:
        tw.modifiers('dark', 'hover', classes='bg-blue-500')  # dark:hover:bg-blue-500
        tw.modifiers('sm', 'dark', classes=['bg-white', 'text-black'])
        tw.modifiers('group-hover', 'lg', classes=tw.bg('blue-500'))
    """
    # Ensure classes is a list
    if isinstance(classes, str):
        class_list = [classes]
    else:
        class_list = list(classes)
    
    # Apply modifiers in order
    modifier_prefix = ":".join(modifiers)
    modified_classes = [f"{modifier_prefix}:{cls}" for cls in class_list]
    
    class_str = " ".join(modified_classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 21
@patch
def first(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # First child classes string or self for chaining
    """Add first-child variant to classes."""
    class_str = " ".join(f"first:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 22
@patch
def last(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Last child classes string or self for chaining
    """Add last-child variant to classes."""
    class_str = " ".join(f"last:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 23
@patch
def even(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Even child classes string or self for chaining
    """Add even-child variant to classes."""
    class_str = " ".join(f"even:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 24
@patch
def odd(
    self:TailwindBuilder,
    *classes: str
) -> Union[str, Self]:  # Odd child classes string or self for chaining
    """Add odd-child variant to classes."""
    class_str = " ".join(f"odd:{cls}" for cls in classes)
    return self._return_value(class_str)

# %% ../nbs/variants.ipynb 25
@patch
def group(
    self:TailwindBuilder
) -> Union[str, Self]:  # Group class string or self for chaining
    """Add group class for group-hover and similar variants."""
    return self._return_value("group")

# %% ../nbs/variants.ipynb 26
@patch
def peer(
    self:TailwindBuilder
) -> Union[str, Self]:  # Peer class string or self for chaining
    """Add peer class for peer-hover and similar variants."""
    return self._return_value("peer")
