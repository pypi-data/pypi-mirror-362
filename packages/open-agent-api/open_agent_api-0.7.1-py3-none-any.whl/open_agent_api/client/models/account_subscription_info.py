# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountSubscriptionInfo(BaseModel):
    """
    AccountSubscriptionInfo
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the subscription")
    user_id: StrictStr = Field(description="ID of the user this subscription belongs to")
    plan_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription plan")
    status: StrictStr = Field(description="Current status of the subscription")
    stripe_customer_id: Optional[StrictStr] = Field(default=None, description="ID of the customer in Stripe")
    stripe_subscription_id: Optional[StrictStr] = Field(default=None, description="ID of the subscription in Stripe")
    current_period_start: Optional[datetime] = Field(default=None, description="Start date of the current billing period")
    current_period_end: Optional[datetime] = Field(default=None, description="End date of the current billing period")
    balance: Optional[StrictInt] = Field(default=None, description="The balance of the subscription")
    usage_quota: Optional[Dict[str, Any]] = Field(default=None, description="Token limits and other usage quotas")
    payment_method_id: Optional[StrictStr] = Field(default=None, description="ID of the payment method")
    cancel_at_period_end: Optional[StrictBool] = Field(default=False, description="Whether the subscription will be canceled at the end of the current period")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the subscription was created")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the subscription was last updated")
    __properties: ClassVar[List[str]] = ["id", "user_id", "plan_id", "status", "stripe_customer_id", "stripe_subscription_id", "current_period_start", "current_period_end", "balance", "usage_quota", "payment_method_id", "cancel_at_period_end", "created_at", "updated_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['trialing', 'active', 'past_due', 'canceled', 'unpaid']):
            raise ValueError("must be one of enum values ('trialing', 'active', 'past_due', 'canceled', 'unpaid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountSubscriptionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountSubscriptionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "plan_id": obj.get("plan_id"),
            "status": obj.get("status"),
            "stripe_customer_id": obj.get("stripe_customer_id"),
            "stripe_subscription_id": obj.get("stripe_subscription_id"),
            "current_period_start": obj.get("current_period_start"),
            "current_period_end": obj.get("current_period_end"),
            "balance": obj.get("balance"),
            "usage_quota": obj.get("usage_quota"),
            "payment_method_id": obj.get("payment_method_id"),
            "cancel_at_period_end": obj.get("cancel_at_period_end") if obj.get("cancel_at_period_end") is not None else False,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


