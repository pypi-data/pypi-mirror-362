# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.tool_call_result_metrics import ToolCallResultMetrics
from typing import Optional, Set
from typing_extensions import Self

class ToolCallResult(BaseModel):
    """
    ToolCallResult
    """ # noqa: E501
    role: Optional[StrictStr] = Field(default=None, description="The role of the tool")
    tool_call_id: StrictStr = Field(description="The unique identifier for the tool call")
    tool_name: StrictStr = Field(description="The name of the tool being called")
    tool_args: Dict[str, Any] = Field(description="The arguments passed to the tool")
    content: Optional[StrictStr] = Field(default=None, description="The content or result returned by the tool")
    tool_call_error: Optional[StrictBool] = Field(default=None, description="Indicates whether the tool call resulted in an error")
    metrics: Optional[ToolCallResultMetrics] = None
    created_at: Optional[StrictInt] = Field(default=None, description="Timestamp when the tool call result was created")
    __properties: ClassVar[List[str]] = ["role", "tool_call_id", "tool_name", "tool_args", "content", "tool_call_error", "metrics", "created_at"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tool']):
            raise ValueError("must be one of enum values ('tool')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolCallResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolCallResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "tool_call_id": obj.get("tool_call_id"),
            "tool_name": obj.get("tool_name"),
            "tool_args": obj.get("tool_args"),
            "content": obj.get("content"),
            "tool_call_error": obj.get("tool_call_error"),
            "metrics": ToolCallResultMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


