# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.agent_message import AgentMessage
from open_agent_api.models.audio import Audio
from open_agent_api.models.file import File
from open_agent_api.models.image import Image
from open_agent_api.models.video import Video
from typing import Optional, Set
from typing_extensions import Self

class TeamRunRequest(BaseModel):
    """
    Request for Team.run() functions
    """ # noqa: E501
    messages: Optional[List[AgentMessage]] = Field(default=None, description="The messages to send to the team, can be a string, list, dict, or Message object ")
    stream: Optional[StrictBool] = Field(default=False, description="Whether to stream the response")
    stream_intermediate_steps: Optional[StrictBool] = Field(default=False, description="Whether to stream intermediate steps")
    retries: Optional[StrictInt] = Field(default=None, description="Number of retries if the run fails")
    audio: Optional[List[Audio]] = Field(default=None, description="Audio files to include with the request")
    images: Optional[List[Image]] = Field(default=None, description="Images to include with the request")
    videos: Optional[List[Video]] = Field(default=None, description="Videos to include with the request")
    files: Optional[List[File]] = Field(default=None, description="Files to include with the request")
    __properties: ClassVar[List[str]] = ["messages", "stream", "stream_intermediate_steps", "retries", "audio", "images", "videos", "files"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamRunRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audio (list)
        _items = []
        if self.audio:
            for _item_audio in self.audio:
                if _item_audio:
                    _items.append(_item_audio.to_dict())
            _dict['audio'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['videos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files (list)
        _items = []
        if self.files:
            for _item_files in self.files:
                if _item_files:
                    _items.append(_item_files.to_dict())
            _dict['files'] = _items
        # set to None if retries (nullable) is None
        # and model_fields_set contains the field
        if self.retries is None and "retries" in self.model_fields_set:
            _dict['retries'] = None

        # set to None if audio (nullable) is None
        # and model_fields_set contains the field
        if self.audio is None and "audio" in self.model_fields_set:
            _dict['audio'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if videos (nullable) is None
        # and model_fields_set contains the field
        if self.videos is None and "videos" in self.model_fields_set:
            _dict['videos'] = None

        # set to None if files (nullable) is None
        # and model_fields_set contains the field
        if self.files is None and "files" in self.model_fields_set:
            _dict['files'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamRunRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messages": [AgentMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "stream_intermediate_steps": obj.get("stream_intermediate_steps") if obj.get("stream_intermediate_steps") is not None else False,
            "retries": obj.get("retries"),
            "audio": [Audio.from_dict(_item) for _item in obj["audio"]] if obj.get("audio") is not None else None,
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "videos": [Video.from_dict(_item) for _item in obj["videos"]] if obj.get("videos") is not None else None,
            "files": [File.from_dict(_item) for _item in obj["files"]] if obj.get("files") is not None else None
        })
        return _obj


