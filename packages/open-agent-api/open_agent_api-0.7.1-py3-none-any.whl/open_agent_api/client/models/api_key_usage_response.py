# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.api_key_usage_response_time_series_inner import ApiKeyUsageResponseTimeSeriesInner
from open_agent_api.models.api_key_usage_response_usage_data import ApiKeyUsageResponseUsageData
from typing import Optional, Set
from typing_extensions import Self

class ApiKeyUsageResponse(BaseModel):
    """
    ApiKeyUsageResponse
    """ # noqa: E501
    usage_data: ApiKeyUsageResponseUsageData
    time_series: Optional[List[ApiKeyUsageResponseTimeSeriesInner]] = Field(default=None, description="Time-series data when group_by parameter is used")
    __properties: ClassVar[List[str]] = ["usage_data", "time_series"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKeyUsageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage_data
        if self.usage_data:
            _dict['usage_data'] = self.usage_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in time_series (list)
        _items = []
        if self.time_series:
            for _item_time_series in self.time_series:
                if _item_time_series:
                    _items.append(_item_time_series.to_dict())
            _dict['time_series'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKeyUsageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usage_data": ApiKeyUsageResponseUsageData.from_dict(obj["usage_data"]) if obj.get("usage_data") is not None else None,
            "time_series": [ApiKeyUsageResponseTimeSeriesInner.from_dict(_item) for _item in obj["time_series"]] if obj.get("time_series") is not None else None
        })
        return _obj


