# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.usage import Usage
from typing import Optional, Set
from typing_extensions import Self

class ApiKeyInfo(BaseModel):
    """
    ApiKeyInfo
    """ # noqa: E501
    id: StrictStr = Field(description="Unique identifier for the API key")
    name: StrictStr = Field(description="The descriptive name of the API key")
    prefix: Optional[StrictStr] = Field(default=None, description="First few characters of the API key for identification")
    created_at: datetime = Field(description="Timestamp when the API key was created")
    expires_at: Optional[datetime] = Field(default=None, description="Timestamp when the API key will expire (null if never expires)")
    is_active: StrictBool = Field(description="Whether the API key is currently active")
    last_used_at: datetime = Field(description="Timestamp when the API key was last used (null if never used)")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="Permission scopes assigned to the API key")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Custom metadata for the API key")
    usage: Optional[Usage] = None
    __properties: ClassVar[List[str]] = ["id", "name", "prefix", "created_at", "expires_at", "is_active", "last_used_at", "scopes", "metadata", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiKeyInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiKeyInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "prefix": obj.get("prefix"),
            "created_at": obj.get("created_at"),
            "expires_at": obj.get("expires_at"),
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else True,
            "last_used_at": obj.get("last_used_at"),
            "scopes": obj.get("scopes"),
            "metadata": obj.get("metadata"),
            "usage": Usage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        return _obj


