# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from open_agent_api.models.agent_message import AgentMessage
from open_agent_api.models.chat_completion_request_stop import ChatCompletionRequestStop
from typing import Optional, Set
from typing_extensions import Self

class ChatCompletionRequest(BaseModel):
    """
    ChatCompletionRequest
    """ # noqa: E501
    model: StrictStr = Field(description="ID of the model to use for completion (e.g., gpt-3.5-turbo).")
    messages: List[AgentMessage]
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, description="Sampling temperature.")
    top_p: Optional[Union[StrictFloat, StrictInt]] = Field(default=1.0, description="Nucleus sampling probability.")
    n: Optional[StrictInt] = Field(default=1, description="Number of completions to generate.")
    stream: Optional[StrictBool] = Field(default=False, description="Whether to stream the response as events. If true, SSE should be used.")
    stop: Optional[ChatCompletionRequestStop] = None
    max_tokens: Optional[StrictInt] = Field(default=None, description="Maximum tokens to generate in the completion.")
    presence_penalty: Optional[Union[StrictFloat, StrictInt]] = 0
    frequency_penalty: Optional[Union[StrictFloat, StrictInt]] = 0
    user: Optional[StrictStr] = Field(default=None, description="Optional user identifier (for auditing or context).")
    __properties: ClassVar[List[str]] = ["model", "messages", "temperature", "top_p", "n", "stream", "stop", "max_tokens", "presence_penalty", "frequency_penalty", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of stop
        if self.stop:
            _dict['stop'] = self.stop.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatCompletionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model": obj.get("model"),
            "messages": [AgentMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "temperature": obj.get("temperature") if obj.get("temperature") is not None else 1.0,
            "top_p": obj.get("top_p") if obj.get("top_p") is not None else 1.0,
            "n": obj.get("n") if obj.get("n") is not None else 1,
            "stream": obj.get("stream") if obj.get("stream") is not None else False,
            "stop": ChatCompletionRequestStop.from_dict(obj["stop"]) if obj.get("stop") is not None else None,
            "max_tokens": obj.get("max_tokens"),
            "presence_penalty": obj.get("presence_penalty") if obj.get("presence_penalty") is not None else 0,
            "frequency_penalty": obj.get("frequency_penalty") if obj.get("frequency_penalty") is not None else 0,
            "user": obj.get("user")
        })
        return _obj


