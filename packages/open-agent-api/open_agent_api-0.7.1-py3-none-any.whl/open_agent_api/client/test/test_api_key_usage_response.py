# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from open_agent_api.models.api_key_usage_response import ApiKeyUsageResponse

class TestApiKeyUsageResponse(unittest.TestCase):
    """ApiKeyUsageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiKeyUsageResponse:
        """Test ApiKeyUsageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiKeyUsageResponse`
        """
        model = ApiKeyUsageResponse()
        if include_optional:
            return ApiKeyUsageResponse(
                usage_data = open_agent_api.models.api_key_usage_response_usage_data.ApiKeyUsageResponse_usage_data(
                    total_requests = 56, 
                    total_tokens = 56, 
                    monthly_requests = 56, 
                    monthly_tokens = 56, 
                    billing_info = open_agent_api.models.api_key_usage_response_usage_data_billing_info.ApiKeyUsageResponse_usage_data_billing_info(
                        stripe_customer_id = '', 
                        stripe_subscription_id = '', 
                        current_period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        cancel_at_period_end = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                time_series = [
                    open_agent_api.models.api_key_usage_response_time_series_inner.ApiKeyUsageResponse_time_series_inner(
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        requests = 56, 
                        tokens = 56, 
                        cost = 1.337, )
                    ]
            )
        else:
            return ApiKeyUsageResponse(
                usage_data = open_agent_api.models.api_key_usage_response_usage_data.ApiKeyUsageResponse_usage_data(
                    total_requests = 56, 
                    total_tokens = 56, 
                    monthly_requests = 56, 
                    monthly_tokens = 56, 
                    billing_info = open_agent_api.models.api_key_usage_response_usage_data_billing_info.ApiKeyUsageResponse_usage_data_billing_info(
                        stripe_customer_id = '', 
                        stripe_subscription_id = '', 
                        current_period_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_period_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        cancel_at_period_end = True, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
        )
        """

    def testApiKeyUsageResponse(self):
        """Test ApiKeyUsageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
