# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from open_agent_api.models.tool_call_completed_event1 import ToolCallCompletedEvent1

class TestToolCallCompletedEvent1(unittest.TestCase):
    """ToolCallCompletedEvent1 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolCallCompletedEvent1:
        """Test ToolCallCompletedEvent1
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolCallCompletedEvent1`
        """
        model = ToolCallCompletedEvent1()
        if include_optional:
            return ToolCallCompletedEvent1(
                run_id = '',
                content = '',
                content_type = '',
                event = 'ToolCallCompleted',
                model = '',
                agent_id = '',
                session_id = '',
                created_at = 56,
                tools = [
                    open_agent_api.models.tool_call_result.ToolCallResult(
                        role = 'tool', 
                        tool_call_id = '', 
                        tool_name = '', 
                        tool_args = open_agent_api.models.tool_args.tool_args(), 
                        content = '', 
                        tool_call_error = True, 
                        metrics = open_agent_api.models.tool_call_result_metrics.ToolCallResult_metrics(
                            input_tokens = 56, 
                            output_tokens = 56, 
                            total_tokens = 56, 
                            prompt_tokens = 56, 
                            completion_tokens = 56, 
                            prompt_tokens_details = open_agent_api.models.prompt_tokens_details.prompt_tokens_details(), 
                            completion_tokens_details = open_agent_api.models.completion_tokens_details.completion_tokens_details(), 
                            additional_metrics = open_agent_api.models.additional_metrics.additional_metrics(), 
                            time = 1.337, 
                            time_to_first_token = 1.337, 
                            timer = open_agent_api.models.timer.timer(), ), 
                        created_at = 56, )
                    ]
            )
        else:
            return ToolCallCompletedEvent1(
                run_id = '',
                content_type = '',
                event = 'ToolCallCompleted',
                session_id = '',
                created_at = 56,
        )
        """

    def testToolCallCompletedEvent1(self):
        """Test ToolCallCompletedEvent1"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
