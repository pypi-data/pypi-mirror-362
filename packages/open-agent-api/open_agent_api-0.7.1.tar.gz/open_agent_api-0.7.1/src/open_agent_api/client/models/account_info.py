# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.account_subscription_info import AccountSubscriptionInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountInfo(BaseModel):
    """
    AccountInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the user account")
    name: Optional[StrictStr] = Field(default=None, description="The name of the user account")
    email: StrictStr
    username: Optional[StrictStr] = Field(default=None, description="The username of the user account")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the user account was created")
    subscriptions: Optional[List[AccountSubscriptionInfo]] = Field(default=None, description="List of subscriptions for the user account")
    __properties: ClassVar[List[str]] = ["id", "name", "email", "username", "created_at", "subscriptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item_subscriptions in self.subscriptions:
                if _item_subscriptions:
                    _items.append(_item_subscriptions.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "created_at": obj.get("created_at"),
            "subscriptions": [AccountSubscriptionInfo.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None
        })
        return _obj


