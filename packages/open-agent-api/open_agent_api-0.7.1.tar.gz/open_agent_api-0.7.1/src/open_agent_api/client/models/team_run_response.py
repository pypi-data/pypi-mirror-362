# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from open_agent_api.models.agent_message import AgentMessage
from open_agent_api.models.audio import Audio
from open_agent_api.models.image import Image
from open_agent_api.models.run_response_event1 import RunResponseEvent1
from open_agent_api.models.video import Video
from typing import Optional, Set
from typing_extensions import Self

class TeamRunResponse(BaseModel):
    """
    Response returned by Team.run() functions
    """ # noqa: E501
    event: Optional[StrictStr] = Field(default=None, description="The event type")
    content: Optional[StrictStr] = Field(default=None, description="The content of the response")
    content_type: Optional[StrictStr] = Field(default='str', description="The type of content")
    thinking: Optional[StrictStr] = Field(default=None, description="Thinking process of the team")
    messages: Optional[List[AgentMessage]] = Field(default=None, description="The messages associated with the run")
    metrics: Optional[Dict[str, Any]] = Field(default=None, description="Metrics related to the team run")
    model: Optional[StrictStr] = Field(default=None, description="The model used for the run")
    member_responses: Optional[List[RunResponseEvent1]] = Field(default=None, description="Responses from individual team members")
    run_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the run")
    team_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the team")
    session_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the session")
    tools: Optional[List[Dict[str, Any]]] = Field(default=None, description="Tools used in the team run")
    formatted_tool_calls: Optional[List[StrictStr]] = Field(default=None, description="Formatted representation of tool calls")
    images: Optional[List[Image]] = Field(default=None, description="Images generated from member runs")
    videos: Optional[List[Video]] = Field(default=None, description="Videos generated from member runs")
    audio: Optional[List[Audio]] = Field(default=None, description="Audio generated from member runs")
    created_at: Optional[StrictInt] = Field(default=None, description="The timestamp when the response was created")
    __properties: ClassVar[List[str]] = ["event", "content", "content_type", "thinking", "messages", "metrics", "model", "member_responses", "run_id", "team_id", "session_id", "tools", "formatted_tool_calls", "images", "videos", "audio", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamRunResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in messages (list)
        _items = []
        if self.messages:
            for _item_messages in self.messages:
                if _item_messages:
                    _items.append(_item_messages.to_dict())
            _dict['messages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in member_responses (list)
        _items = []
        if self.member_responses:
            for _item_member_responses in self.member_responses:
                if _item_member_responses:
                    _items.append(_item_member_responses.to_dict())
            _dict['member_responses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item_videos in self.videos:
                if _item_videos:
                    _items.append(_item_videos.to_dict())
            _dict['videos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audio (list)
        _items = []
        if self.audio:
            for _item_audio in self.audio:
                if _item_audio:
                    _items.append(_item_audio.to_dict())
            _dict['audio'] = _items
        # set to None if thinking (nullable) is None
        # and model_fields_set contains the field
        if self.thinking is None and "thinking" in self.model_fields_set:
            _dict['thinking'] = None

        # set to None if messages (nullable) is None
        # and model_fields_set contains the field
        if self.messages is None and "messages" in self.model_fields_set:
            _dict['messages'] = None

        # set to None if metrics (nullable) is None
        # and model_fields_set contains the field
        if self.metrics is None and "metrics" in self.model_fields_set:
            _dict['metrics'] = None

        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        # set to None if run_id (nullable) is None
        # and model_fields_set contains the field
        if self.run_id is None and "run_id" in self.model_fields_set:
            _dict['run_id'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['team_id'] = None

        # set to None if session_id (nullable) is None
        # and model_fields_set contains the field
        if self.session_id is None and "session_id" in self.model_fields_set:
            _dict['session_id'] = None

        # set to None if tools (nullable) is None
        # and model_fields_set contains the field
        if self.tools is None and "tools" in self.model_fields_set:
            _dict['tools'] = None

        # set to None if formatted_tool_calls (nullable) is None
        # and model_fields_set contains the field
        if self.formatted_tool_calls is None and "formatted_tool_calls" in self.model_fields_set:
            _dict['formatted_tool_calls'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if videos (nullable) is None
        # and model_fields_set contains the field
        if self.videos is None and "videos" in self.model_fields_set:
            _dict['videos'] = None

        # set to None if audio (nullable) is None
        # and model_fields_set contains the field
        if self.audio is None and "audio" in self.model_fields_set:
            _dict['audio'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamRunResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event": obj.get("event"),
            "content": obj.get("content"),
            "content_type": obj.get("content_type") if obj.get("content_type") is not None else 'str',
            "thinking": obj.get("thinking"),
            "messages": [AgentMessage.from_dict(_item) for _item in obj["messages"]] if obj.get("messages") is not None else None,
            "metrics": obj.get("metrics"),
            "model": obj.get("model"),
            "member_responses": [RunResponseEvent1.from_dict(_item) for _item in obj["member_responses"]] if obj.get("member_responses") is not None else None,
            "run_id": obj.get("run_id"),
            "team_id": obj.get("team_id"),
            "session_id": obj.get("session_id"),
            "tools": obj.get("tools"),
            "formatted_tool_calls": obj.get("formatted_tool_calls"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "videos": [Video.from_dict(_item) for _item in obj["videos"]] if obj.get("videos") is not None else None,
            "audio": [Audio.from_dict(_item) for _item in obj["audio"]] if obj.get("audio") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


