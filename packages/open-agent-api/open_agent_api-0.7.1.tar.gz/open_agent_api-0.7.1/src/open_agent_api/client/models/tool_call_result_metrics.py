# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ToolCallResultMetrics(BaseModel):
    """
    Performance metrics for the tool call
    """ # noqa: E501
    input_tokens: Optional[StrictInt] = Field(default=None, description="Number of input tokens used")
    output_tokens: Optional[StrictInt] = Field(default=None, description="Number of output tokens used")
    total_tokens: Optional[StrictInt] = Field(default=None, description="Total number of tokens used")
    prompt_tokens: Optional[StrictInt] = Field(default=None, description="Number of prompt tokens used")
    completion_tokens: Optional[StrictInt] = Field(default=None, description="Number of completion tokens used")
    prompt_tokens_details: Optional[Dict[str, Any]] = Field(default=None, description="Detailed breakdown of prompt tokens")
    completion_tokens_details: Optional[Dict[str, Any]] = Field(default=None, description="Detailed breakdown of completion tokens")
    additional_metrics: Optional[Dict[str, Any]] = Field(default=None, description="Any additional metrics")
    time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time taken for the tool call in seconds")
    time_to_first_token: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Time to first token in seconds")
    timer: Optional[Dict[str, Any]] = Field(default=None, description="Detailed timing information")
    __properties: ClassVar[List[str]] = ["input_tokens", "output_tokens", "total_tokens", "prompt_tokens", "completion_tokens", "prompt_tokens_details", "completion_tokens_details", "additional_metrics", "time", "time_to_first_token", "timer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolCallResultMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if prompt_tokens_details (nullable) is None
        # and model_fields_set contains the field
        if self.prompt_tokens_details is None and "prompt_tokens_details" in self.model_fields_set:
            _dict['prompt_tokens_details'] = None

        # set to None if completion_tokens_details (nullable) is None
        # and model_fields_set contains the field
        if self.completion_tokens_details is None and "completion_tokens_details" in self.model_fields_set:
            _dict['completion_tokens_details'] = None

        # set to None if additional_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.additional_metrics is None and "additional_metrics" in self.model_fields_set:
            _dict['additional_metrics'] = None

        # set to None if time_to_first_token (nullable) is None
        # and model_fields_set contains the field
        if self.time_to_first_token is None and "time_to_first_token" in self.model_fields_set:
            _dict['time_to_first_token'] = None

        # set to None if timer (nullable) is None
        # and model_fields_set contains the field
        if self.timer is None and "timer" in self.model_fields_set:
            _dict['timer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolCallResultMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input_tokens": obj.get("input_tokens"),
            "output_tokens": obj.get("output_tokens"),
            "total_tokens": obj.get("total_tokens"),
            "prompt_tokens": obj.get("prompt_tokens"),
            "completion_tokens": obj.get("completion_tokens"),
            "prompt_tokens_details": obj.get("prompt_tokens_details"),
            "completion_tokens_details": obj.get("completion_tokens_details"),
            "additional_metrics": obj.get("additional_metrics"),
            "time": obj.get("time"),
            "time_to_first_token": obj.get("time_to_first_token"),
            "timer": obj.get("timer")
        })
        return _obj


