# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountUsageInfoItem(BaseModel):
    """
    AccountUsageInfoItem
    """ # noqa: E501
    method: Optional[StrictStr] = None
    endpoint: Optional[StrictStr] = None
    input_tokens: Optional[StrictInt] = 0
    output_tokens: Optional[StrictInt] = 0
    debit_microdollars: Optional[StrictInt] = 0
    credit_microdollars: Optional[StrictInt] = 0
    created_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["method", "endpoint", "input_tokens", "output_tokens", "debit_microdollars", "credit_microdollars", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountUsageInfoItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountUsageInfoItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method": obj.get("method"),
            "endpoint": obj.get("endpoint"),
            "input_tokens": obj.get("input_tokens") if obj.get("input_tokens") is not None else 0,
            "output_tokens": obj.get("output_tokens") if obj.get("output_tokens") is not None else 0,
            "debit_microdollars": obj.get("debit_microdollars") if obj.get("debit_microdollars") is not None else 0,
            "credit_microdollars": obj.get("credit_microdollars") if obj.get("credit_microdollars") is not None else 0,
            "created_at": obj.get("created_at")
        })
        return _obj


