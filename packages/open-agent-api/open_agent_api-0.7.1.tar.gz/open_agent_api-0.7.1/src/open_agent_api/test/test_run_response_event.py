# coding: utf-8

"""
    Open Agent API

    An API for creating and interacting with AI agents, including chat completions, autonomous agents with tool usage, multi-agent teams, knowledge base search, and optional billing integration. Clients can authenticate via magic link or OAuth2 to obtain a token, or use API keys. 

    The version of the OpenAPI document: 0.7.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from open_agent_api.models.run_response_event import RunResponseEvent

class TestRunResponseEvent(unittest.TestCase):
    """RunResponseEvent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RunResponseEvent:
        """Test RunResponseEvent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RunResponseEvent`
        """
        model = RunResponseEvent()
        if include_optional:
            return RunResponseEvent(
                run_id = '',
                content = '',
                content_type = '',
                event = '',
                model = '',
                agent_id = '',
                session_id = '',
                created_at = 56,
                messages = [
                    open_agent_api.models.agent_message.AgentMessage(
                        role = 'system', 
                        content = null, 
                        name = '', 
                        tool_call_id = '', 
                        tool_calls = [
                            open_agent_api.models.agent_message_tool_call.AgentMessageToolCall(
                                id = '', 
                                type = 'function', 
                                function = open_agent_api.models.agent_message_tool_call_function.AgentMessageToolCallFunction(
                                    name = '', 
                                    arguments = '', ), )
                            ], 
                        thinking = '', 
                        redacted_thinking = '', 
                        provider_data = open_agent_api.models.provider_data.Provider Data(), 
                        citations = open_agent_api.models.citations.Citations(
                            raw = open_agent_api.models.raw.raw(), 
                            urls = [
                                open_agent_api.models.url_citation.UrlCitation(
                                    url = '', 
                                    title = '', )
                                ], 
                            documents = [
                                open_agent_api.models.document_citation.DocumentCitation(
                                    document_title = '', 
                                    cited_text = '', 
                                    file_name = '', )
                                ], ), 
                        reasoning_content = '', 
                        tool_name = '', 
                        tool_args = open_agent_api.models.tool_args.Tool Args(), 
                        tool_call_error = True, 
                        stop_after_tool_call = True, 
                        add_to_agent_memory = True, 
                        from_history = True, 
                        metrics = open_agent_api.models.agent_message_metrics.AgentMessageMetrics(
                            input_tokens = 56, 
                            output_tokens = 56, 
                            total_tokens = 56, 
                            prompt_tokens = 56, 
                            completion_tokens = 56, 
                            prompt_tokens_details = open_agent_api.models.prompt_tokens_details.prompt_tokens_details(), 
                            completion_tokens_details = open_agent_api.models.completion_tokens_details.completion_tokens_details(), 
                            additional_metrics = open_agent_api.models.additional_metrics.additional_metrics(), 
                            time = 1.337, 
                            time_to_first_token = 1.337, ), 
                        references = open_agent_api.models.message_references.MessageReferences(
                            query = '', 
                            references = [
                                None
                                ], 
                            time = 1.337, ), 
                        created_at = 56, )
                    ]
            )
        else:
            return RunResponseEvent(
                run_id = '',
                content = '',
                content_type = '',
                event = '',
                session_id = '',
                created_at = 56,
        )
        """

    def testRunResponseEvent(self):
        """Test RunResponseEvent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
