"""Module for parsing Python source files and extracting structured information using AST.

Copyright (c) 2024 Neil Schneider
"""

from pathlib import Path
from typing import Literal

import tiktoken

from slimcontext.parsers.pyparse.pyparser import PyParser
from slimcontext.utils.gitrepo_tools import GitRepository, is_ignore_file
from slimcontext.utils.logger import setup_logger

logger = setup_logger(__name__)


class PyManager:
    """Parses Python source files and extracts structured information using AST."""

    def __init__(
        self,
        ignore_filepatterns: list[str] | None = None,
        repo_dir: Path | None = None,
        repo: GitRepository | None = None,
    ) -> None:
        """Initialize the ASTParser instance.

        Args:
            ignore_filepatterns (list[str]): A list of filenames to ignore when proccessing files.
                Defaults: ['.git', '__init__.py']
            repo_dir (Path, optional): The root path of the Git repository.
            repo (GitRepository, optional): This is a GitRepository object.
        """
        self.ignore_filepatterns = ignore_filepatterns or ['.git', '__init__.py']
        self.pyparser = PyParser()
        self.repo = repo or GitRepository(repo_dir=repo_dir)
        self.python_files = self.repo.get_files_by_suffix(['.py'])

    def extract_repo_info(
        self,
        context_level: Literal['full', 'slim'] = 'slim',
    ) -> list[str]:
        """Extract information from all Python files in the Git repo, ignoring files in .gitignore.

        Args:
            context_level (literal str): Defines the amount of context returned.

        Returns:
            List[Dict[str, Any]]: A list of dictionaries containing information about each Python
                file.
        """
        repo_info: list[str] = []

        for file_path in self.python_files:
            if not is_ignore_file(
                file_path=file_path,
                ignore_files=self.ignore_filepatterns,
            ):
                file_info = self.pyparser.generate_context(
                    file_path,
                    full_text=(context_level == 'full'),
                )
                repo_info.append(file_info)

        logger.info('Extracted information from %d Python files.', len(repo_info))
        return repo_info


if __name__ == '__main__':

    def example_use() -> None:
        """Small example of how to use extract_info_from_classASTParser."""
        logger_ex = setup_logger(f'Example use of {__name__}')
        file_hanlder = PyManager()
        repo_context = file_hanlder.extract_repo_info(context_level='full')
        tokenizer = tiktoken.encoding_for_model('gpt-4o')
        tokens = tokenizer.encode(''.join(repo_context))
        len(tokens)
        logger_ex.info('Example context generated by PyManager: %s', repo_context)
