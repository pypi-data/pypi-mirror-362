"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/endpoint_module.py.jinja

The main changes are:
- Update the API call responses to either return the successful response type or raise an error by:
    - Updating the _parse_response function to raise an error if the response status code is not in the 2xx range
- Inject a client into every method via a context manager
"""

from http import HTTPStatus
from typing import Any, List, Union

import httpx

from ...client import _client_context
from ...errors import get_error_for_response
from ...models.labeled_memory import LabeledMemory
from ...models.scored_memory import ScoredMemory
from ...types import Response


def _get_kwargs(
    name_or_id: str,
) -> dict[str, Any]:
    _kwargs: dict[str, Any] = {
        "method": "get",
        "url": f"/memoryset/{name_or_id}/potential_duplicate_groups",
    }

    return _kwargs


def _parse_response(*, response: httpx.Response) -> Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]:
    if response.status_code == 200:

        def _parse_response_200(data: object) -> Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]:
            try:
                if not isinstance(data, list):
                    raise TypeError()
                response_200_type_0 = []
                _response_200_type_0 = data
                for response_200_type_0_item_data in _response_200_type_0:
                    response_200_type_0_item = []
                    _response_200_type_0_item = response_200_type_0_item_data
                    for response_200_type_0_item_item_data in _response_200_type_0_item:
                        response_200_type_0_item_item = LabeledMemory.from_dict(response_200_type_0_item_item_data)

                        response_200_type_0_item.append(response_200_type_0_item_item)

                    response_200_type_0.append(response_200_type_0_item)

                return response_200_type_0
            except:  # noqa: E722
                pass
            if not isinstance(data, list):
                raise TypeError()
            response_200_type_1 = []
            _response_200_type_1 = data
            for response_200_type_1_item_data in _response_200_type_1:
                response_200_type_1_item = []
                _response_200_type_1_item = response_200_type_1_item_data
                for response_200_type_1_item_item_data in _response_200_type_1_item:
                    response_200_type_1_item_item = ScoredMemory.from_dict(response_200_type_1_item_item_data)

                    response_200_type_1_item.append(response_200_type_1_item_item)

                response_200_type_1.append(response_200_type_1_item)

            return response_200_type_1

        response_200 = _parse_response_200(response.json())

        return response_200
    if response.status_code == 401:
        raise get_error_for_response(response)
    if response.status_code == 500:
        raise get_error_for_response(response)
    if response.status_code == 503:
        raise get_error_for_response(response)
    if response.status_code == 404:
        raise get_error_for_response(response)
    else:
        raise get_error_for_response(response)


def _build_response(
    *, response: httpx.Response
) -> Response[Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]]:
    return Response(
        status_code=HTTPStatus(response.status_code),
        content=response.content,
        headers=response.headers,
        parsed=_parse_response(response=response),
    )


def sync_detailed(
    name_or_id: str,
) -> Response[Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]]:
    """Potential Duplicate Groups

    Args:
        name_or_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[List[List['LabeledMemory']], List[List['ScoredMemory']]]]
    """

    kwargs = _get_kwargs(
        name_or_id=name_or_id,
    )

    with _client_context() as client:
        response = client.get_httpx_client().request(
            **kwargs,
        )

        return _build_response(response=response)


def sync(
    name_or_id: str,
) -> Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]:
    """Potential Duplicate Groups

    Args:
        name_or_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[List[List['LabeledMemory']], List[List['ScoredMemory']]]
    """

    return sync_detailed(
        name_or_id=name_or_id,
    ).parsed


async def asyncio_detailed(
    name_or_id: str,
) -> Response[Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]]:
    """Potential Duplicate Groups

    Args:
        name_or_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Response[Union[List[List['LabeledMemory']], List[List['ScoredMemory']]]]
    """

    kwargs = _get_kwargs(
        name_or_id=name_or_id,
    )

    with _client_context() as client:
        response = await client.get_async_httpx_client().request(**kwargs)

    return _build_response(response=response)


async def asyncio(
    name_or_id: str,
) -> Union[List[List["LabeledMemory"]], List[List["ScoredMemory"]]]:
    """Potential Duplicate Groups

    Args:
        name_or_id (str):

    Raises:
        errors.UnexpectedStatus: If the server returns an undocumented status code and Client.raise_on_unexpected_status is True.
        httpx.TimeoutException: If the request takes longer than Client.timeout.

    Returns:
        Union[List[List['LabeledMemory']], List[List['ScoredMemory']]]
    """

    return (
        await asyncio_detailed(
            name_or_id=name_or_id,
        )
    ).parsed
