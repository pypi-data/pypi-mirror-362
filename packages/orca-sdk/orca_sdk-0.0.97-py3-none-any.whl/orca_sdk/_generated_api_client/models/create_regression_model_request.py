"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/model.py.jinja

The main change is:
- Fix typing issues
"""

# flake8: noqa: C901

from typing import Any, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.rar_head_type import RARHeadType
from ..types import UNSET, Unset

T = TypeVar("T", bound="CreateRegressionModelRequest")


@_attrs_define
class CreateRegressionModelRequest:
    """
    Attributes:
        name (str):
        memoryset_id (str):
        description (Union[None, Unset, str]):
        notes (Union[None, Unset, str]):
        memory_lookup_count (Union[None, Unset, int]):
        head_type (Union[Unset, RARHeadType]):
    """

    name: str
    memoryset_id: str
    description: Union[None, Unset, str] = UNSET
    notes: Union[None, Unset, str] = UNSET
    memory_lookup_count: Union[None, Unset, int] = UNSET
    head_type: Union[Unset, RARHeadType] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        name = self.name

        memoryset_id = self.memoryset_id

        description: Union[None, Unset, str]
        if isinstance(self.description, Unset):
            description = UNSET
        else:
            description = self.description

        notes: Union[None, Unset, str]
        if isinstance(self.notes, Unset):
            notes = UNSET
        else:
            notes = self.notes

        memory_lookup_count: Union[None, Unset, int]
        if isinstance(self.memory_lookup_count, Unset):
            memory_lookup_count = UNSET
        else:
            memory_lookup_count = self.memory_lookup_count

        head_type: Union[Unset, str] = UNSET
        if not isinstance(self.head_type, Unset):
            head_type = self.head_type.value

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "name": name,
                "memoryset_id": memoryset_id,
            }
        )
        if description is not UNSET:
            field_dict["description"] = description
        if notes is not UNSET:
            field_dict["notes"] = notes
        if memory_lookup_count is not UNSET:
            field_dict["memory_lookup_count"] = memory_lookup_count
        if head_type is not UNSET:
            field_dict["head_type"] = head_type

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()
        name = d.pop("name")

        memoryset_id = d.pop("memoryset_id")

        def _parse_description(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        description = _parse_description(d.pop("description", UNSET))

        def _parse_notes(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        notes = _parse_notes(d.pop("notes", UNSET))

        def _parse_memory_lookup_count(data: object) -> Union[None, Unset, int]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, int], data)

        memory_lookup_count = _parse_memory_lookup_count(d.pop("memory_lookup_count", UNSET))

        _head_type = d.pop("head_type", UNSET)
        head_type: Union[Unset, RARHeadType]
        if isinstance(_head_type, Unset):
            head_type = UNSET
        else:
            head_type = RARHeadType(_head_type)

        create_regression_model_request = cls(
            name=name,
            memoryset_id=memoryset_id,
            description=description,
            notes=notes,
            memory_lookup_count=memory_lookup_count,
            head_type=head_type,
        )

        create_regression_model_request.additional_properties = d
        return create_regression_model_request

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
