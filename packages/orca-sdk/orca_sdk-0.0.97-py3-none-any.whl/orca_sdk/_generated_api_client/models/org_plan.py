"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/model.py.jinja

The main change is:
- Fix typing issues
"""

# flake8: noqa: C901

import datetime
from enum import Enum
from typing import Any, Type, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from dateutil.parser import isoparse

from ..models.org_plan_tier import OrgPlanTier

T = TypeVar("T", bound="OrgPlan")


@_attrs_define
class OrgPlan:
    """
    Attributes:
        org_id (str):
        created_at (datetime.datetime):
        updated_at (datetime.datetime):
        tier (OrgPlanTier):
    """

    org_id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    tier: OrgPlanTier
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        org_id = self.org_id

        created_at = self.created_at.isoformat()

        updated_at = self.updated_at.isoformat()

        tier = self.tier.value if isinstance(self.tier, Enum) else self.tier

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "org_id": org_id,
                "created_at": created_at,
                "updated_at": updated_at,
                "tier": tier,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()
        org_id = d.pop("org_id")

        created_at = isoparse(d.pop("created_at"))

        updated_at = isoparse(d.pop("updated_at"))

        tier = OrgPlanTier(d.pop("tier"))

        org_plan = cls(
            org_id=org_id,
            created_at=created_at,
            updated_at=updated_at,
            tier=tier,
        )

        org_plan.additional_properties = d
        return org_plan

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
