"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/model.py.jinja

The main change is:
- Fix typing issues
"""

# flake8: noqa: C901

from typing import Any, List, Type, TypeVar, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

T = TypeVar("T", bound="LookupScoreMetrics")


@_attrs_define
class LookupScoreMetrics:
    """
    Attributes:
        median (float):
        std (float):
        quantiles (List[float]):
        quantile_values (List[float]):
    """

    median: float
    std: float
    quantiles: List[float]
    quantile_values: List[float]
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        median = self.median

        std = self.std

        quantiles = self.quantiles

        quantile_values = self.quantile_values

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "median": median,
                "std": std,
                "quantiles": quantiles,
                "quantile_values": quantile_values,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()
        median = d.pop("median")

        std = d.pop("std")

        quantiles = cast(List[float], d.pop("quantiles"))

        quantile_values = cast(List[float], d.pop("quantile_values"))

        lookup_score_metrics = cls(
            median=median,
            std=std,
            quantiles=quantiles,
            quantile_values=quantile_values,
        )

        lookup_score_metrics.additional_properties = d
        return lookup_score_metrics

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
