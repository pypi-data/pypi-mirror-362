"""
This file is generated by the openapi-python-client tool via the generate_api_client.py script

It is a customized template from the openapi-python-client tool's default template:
https://github.com/openapi-generators/openapi-python-client/blob/861ef5622f10fc96d240dc9becb0edf94e61446c/openapi_python_client/templates/model.py.jinja

The main change is:
- Fix typing issues
"""

# flake8: noqa: C901

from enum import Enum
from typing import Any, List, Type, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.telemetry_field_type_0_item_type_0 import TelemetryFieldType0ItemType0
from ..models.telemetry_field_type_0_item_type_2 import TelemetryFieldType0ItemType2
from ..models.telemetry_field_type_1_item_type_0 import TelemetryFieldType1ItemType0
from ..models.telemetry_field_type_1_item_type_1 import TelemetryFieldType1ItemType1
from ..models.telemetry_filter_item_op import TelemetryFilterItemOp

T = TypeVar("T", bound="TelemetryFilterItem")


@_attrs_define
class TelemetryFilterItem:
    """
    Attributes:
        field (Union[List[Union[TelemetryFieldType0ItemType0, TelemetryFieldType0ItemType2, str]],
            List[Union[TelemetryFieldType1ItemType0, TelemetryFieldType1ItemType1]]]):
        op (TelemetryFilterItemOp):
        value (Union[List[float], List[int], float, int]):
    """

    field: Union[
        List[Union[TelemetryFieldType0ItemType0, TelemetryFieldType0ItemType2, str]],
        List[Union[TelemetryFieldType1ItemType0, TelemetryFieldType1ItemType1]],
    ]
    op: TelemetryFilterItemOp
    value: Union[List[float], List[int], float, int]
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        field: List[str]
        if isinstance(self.field, list):
            field = []
            for componentsschemas_telemetry_field_type_0_item_data in self.field:
                componentsschemas_telemetry_field_type_0_item: str
                if isinstance(componentsschemas_telemetry_field_type_0_item_data, TelemetryFieldType0ItemType0):
                    componentsschemas_telemetry_field_type_0_item = (
                        componentsschemas_telemetry_field_type_0_item_data.value
                        if isinstance(componentsschemas_telemetry_field_type_0_item_data, Enum)
                        else componentsschemas_telemetry_field_type_0_item_data
                    )
                elif isinstance(componentsschemas_telemetry_field_type_0_item_data, TelemetryFieldType0ItemType2):
                    componentsschemas_telemetry_field_type_0_item = (
                        componentsschemas_telemetry_field_type_0_item_data.value
                        if isinstance(componentsschemas_telemetry_field_type_0_item_data, Enum)
                        else componentsschemas_telemetry_field_type_0_item_data
                    )
                else:
                    componentsschemas_telemetry_field_type_0_item = componentsschemas_telemetry_field_type_0_item_data
                field.append(componentsschemas_telemetry_field_type_0_item)

        op = self.op.value if isinstance(self.op, Enum) else self.op

        value: Union[List[float], List[int], float, int]
        if isinstance(self.value, list):
            value = self.value

        else:
            value = self.value

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "field": field,
                "op": op,
                "value": value,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()

        def _parse_field(
            data: object,
        ) -> Union[
            List[Union[TelemetryFieldType0ItemType0, TelemetryFieldType0ItemType2, str]],
            List[Union[TelemetryFieldType1ItemType0, TelemetryFieldType1ItemType1]],
        ]:
            try:
                if not isinstance(data, list):
                    raise TypeError()
                componentsschemas_telemetry_field_type_0 = []
                _componentsschemas_telemetry_field_type_0 = data
                for componentsschemas_telemetry_field_type_0_item_data in _componentsschemas_telemetry_field_type_0:

                    def _parse_componentsschemas_telemetry_field_type_0_item(
                        data: object,
                    ) -> Union[TelemetryFieldType0ItemType0, TelemetryFieldType0ItemType2, str]:
                        try:
                            if not isinstance(data, str):
                                raise TypeError()
                            componentsschemas_telemetry_field_type_0_item_type_0 = TelemetryFieldType0ItemType0(data)

                            return componentsschemas_telemetry_field_type_0_item_type_0
                        except:  # noqa: E722
                            pass
                        try:
                            if not isinstance(data, str):
                                raise TypeError()
                            componentsschemas_telemetry_field_type_0_item_type_2 = TelemetryFieldType0ItemType2(data)

                            return componentsschemas_telemetry_field_type_0_item_type_2
                        except:  # noqa: E722
                            pass
                        return cast(Union[TelemetryFieldType0ItemType0, TelemetryFieldType0ItemType2, str], data)

                    componentsschemas_telemetry_field_type_0_item = (
                        _parse_componentsschemas_telemetry_field_type_0_item(
                            componentsschemas_telemetry_field_type_0_item_data
                        )
                    )

                    componentsschemas_telemetry_field_type_0.append(componentsschemas_telemetry_field_type_0_item)

                return componentsschemas_telemetry_field_type_0
            except:  # noqa: E722
                pass
            if not isinstance(data, list):
                raise TypeError()
            componentsschemas_telemetry_field_type_1 = []
            _componentsschemas_telemetry_field_type_1 = data
            for componentsschemas_telemetry_field_type_1_item_data in _componentsschemas_telemetry_field_type_1:

                def _parse_componentsschemas_telemetry_field_type_1_item(
                    data: object,
                ) -> Union[TelemetryFieldType1ItemType0, TelemetryFieldType1ItemType1]:
                    try:
                        if not isinstance(data, str):
                            raise TypeError()
                        componentsschemas_telemetry_field_type_1_item_type_0 = TelemetryFieldType1ItemType0(data)

                        return componentsschemas_telemetry_field_type_1_item_type_0
                    except:  # noqa: E722
                        pass
                    if not isinstance(data, str):
                        raise TypeError()
                    componentsschemas_telemetry_field_type_1_item_type_1 = TelemetryFieldType1ItemType1(data)

                    return componentsschemas_telemetry_field_type_1_item_type_1

                componentsschemas_telemetry_field_type_1_item = _parse_componentsschemas_telemetry_field_type_1_item(
                    componentsschemas_telemetry_field_type_1_item_data
                )

                componentsschemas_telemetry_field_type_1.append(componentsschemas_telemetry_field_type_1_item)

            return componentsschemas_telemetry_field_type_1

        field = _parse_field(d.pop("field"))

        op = TelemetryFilterItemOp(d.pop("op"))

        def _parse_value(data: object) -> Union[List[float], List[int], float, int]:
            try:
                if not isinstance(data, list):
                    raise TypeError()
                value_type_1 = cast(List[float], data)

                return value_type_1
            except:  # noqa: E722
                pass
            try:
                if not isinstance(data, list):
                    raise TypeError()
                value_type_3 = cast(List[int], data)

                return value_type_3
            except:  # noqa: E722
                pass
            return cast(Union[List[float], List[int], float, int], data)

        value = _parse_value(d.pop("value"))

        telemetry_filter_item = cls(
            field=field,
            op=op,
            value=value,
        )

        telemetry_filter_item.additional_properties = d
        return telemetry_filter_item

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
