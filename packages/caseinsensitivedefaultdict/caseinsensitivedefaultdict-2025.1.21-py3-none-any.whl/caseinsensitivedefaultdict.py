"""
An admittedly small library containing a case-insensitive defaultdict,
a combination of requests.structures.CaseInsensitiveDict with similar
behaviour as collections.defaultdict.
"""
from requests.structures import CaseInsensitiveDict


class CaseInsensitiveDefaultDict(CaseInsensitiveDict):

    def __init__(self, default_factory=None, data=None, **kwargs):
        """
        Initialize the CaseInsensitiveDefaultDict.

        :param default_factory: something callable that returns a new datastructure
        :param data: dict with initial data, keys are converted to lowercase.
        :param kwargs: all other keyword arguments are passed to CaseInsensitiveDict,
                       which treats them as keys in the dictionary
        """
        self.default_factory = default_factory
        super().__init__(data, **kwargs)

    def __missing__(self, key):
        """
        Called by __getitem__ if a key is missing to generate a new entry for the key.
        If default_factory is None a KeyError is raised.

        :param key: key that's looked up in the dict, can be uppercase and lowercase
        :return: entry for that key, or a new one generated by the default_factory
        """
        if self.default_factory is None:
            raise KeyError(key)
        value = self.default_factory()
        self._store[key.lower()] = (key, value)
        return value

    def __getitem__(self, key):
        """
        Get a key from the CaseInsensitiveDefaultDict.

        :param key: key that's looked up in the dict, can be uppercase and lowercase
        :return: entry for that key, or a new one generated by the default_factory
        """
        if key.lower() not in self._store:
            return self.__missing__(key)
        return self._store[key.lower()][1]


if __name__ == '__main__':
    # The code below functions as both tests and example use of the library
    cidd = CaseInsensitiveDefaultDict(int, {'ten': 10})
    assert cidd['eleven'] == 0
    assert cidd['ten'] == 10

    assert repr(dict(cidd)) == "{'ten': 10, 'eleven': 0}"

    cidd['TeN'] += 1
    assert cidd['ten'] == 11
    assert len(cidd) == 2

    cidd = CaseInsensitiveDefaultDict(lambda: CaseInsensitiveDefaultDict(str))
    cidd['tin']['tin'] = 'tintin'
    assert cidd['TIN']['tin'] == 'tintin'

    cidd = CaseInsensitiveDefaultDict(set)
    cidd['test'].add(1)
    cidd['test'].add(2)
    assert repr(cidd) == "{'test': {1, 2}}"
