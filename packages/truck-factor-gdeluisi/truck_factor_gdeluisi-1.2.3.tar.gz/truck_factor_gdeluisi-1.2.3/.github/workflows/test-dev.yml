name: Python application Development Test
on:
  push:
    branches: [ "development","main" ]
  
  
permissions:
  contents: read
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest","windows-latest","macos-latest"]
        p-version: ["3.10","3.11","3.12","3.13"]
    runs-on: ${{matrix.os}}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.p-version}}
    - name: 'Setup jq'
      uses: dcarbone/install-jq-action@v3
      with:
        version: "latest"
        force: false
    - if: runner.os == 'Windows'
      name: Config for Windows
      shell: bash
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        echo "Setting tracking of all branches"
        "C:\Program Files\Git\bin\git.exe" config --global remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" 
        "C:\Program Files\Git\bin\git.exe" -c protocol.version=2 fetch --all -t --unshallow 
        "C:\Program Files\Git\bin\git.exe" -c protocol.version=2 pull --all
        set +e
        for i in $("C:\Program Files\Git\bin\git.exe" branch -a | grep remote | grep -v HEAD); do "C:\Program Files\Git\bin\git.exe" branch --track ${i#remotes/origin/} $i; done
        set -e
    - if: runner.os != 'Windows'
      name: Config for Unix
      shell: bash
      run: |
        echo "Setting tracking of all branches"
        /usr/bin/git config --global remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        /usr/bin/git -c protocol.version=2 fetch --all   -t --unshallow
        /usr/bin/git -c protocol.version=2 pull --all
        set +e
        for i in $(/usr/bin/git branch -a | grep remote | grep -v HEAD); do /usr/bin/git branch --track ${i#remotes/origin/} $i; done
        set -e
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      shell: bash
      run: |
        pytest --cov --cov-report json
    - name: Check coverage reports
      shell: bash
      run: |
        array=($(jq -r '.files | keys | .[]' coverage.json))
        uncovered_files=()
        for key in ${array[@]};do 
          key="$(echo $key |sed 's/\\/\\\\/g')"
          percentage="$(jq -r ".files.\"$key\" | .summary.percent_covered_display" coverage.json)"
          if [[ $percentage -lt "75" ]];then
            >&2 echo "File $key tests have not covered the minimum of policy percentage coverage. Please adjust your files accordingly"
            uncovered_files+=($key)
          fi
        done
        if [ ${#uncovered_files[@]} -gt 0 ];then
          exit 1
        fi
    - if: failure()||cancelled()
      name: Read reports
      shell: bash
      run: |
        jq -s '.[]| select( .level == "ERROR" or .level == "CRITICAL") ' logs/logs.log.jsonl > errors.log
        jq -s '.[]| select( .level == "INFO" or .level == "DEBUG" or .level == "WARNING") |select( .logger != "pydriller.repository" and .logger != "git.cmd")' logs/logs.log.jsonl > infos.log
        jq -s '.[]| select( .logger == "pydriller.repository" or .logger == "git.cmd")' logs/logs.log.jsonl > repo.log
        echo -e "\nERRORS:\n"
        cat errors.log
        echo -e "\nINFO:\n"
        cat infos.log
        echo -e "\nREPO INFO:\n"
        cat repo.log

  create-cov-html:
    needs:
    - test
    strategy:
      fail-fast: false
      matrix:
        p-version: ["3.10","3.11","3.12","3.13"]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: ${{matrix.p-version}}
    - if: runner.os == 'Windows'
      name: Config for Windows
      shell: bash
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
        echo "Setting tracking of all branches"
        "C:\Program Files\Git\bin\git.exe" config --global remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*" 
        "C:\Program Files\Git\bin\git.exe" -c protocol.version=2 fetch --all -t --unshallow 
        "C:\Program Files\Git\bin\git.exe" -c protocol.version=2 pull --all
        set +e
        for i in $("C:\Program Files\Git\bin\git.exe" branch -a | grep remote | grep -v HEAD); do "C:\Program Files\Git\bin\git.exe" branch --track ${i#remotes/origin/} $i; done
        set -e
    - if: runner.os != 'Windows'
      name: Config for Unix
      shell: bash
      run: |
        echo "Setting tracking of all branches"
        /usr/bin/git config --global remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        /usr/bin/git -c protocol.version=2 fetch --all   -t --unshallow
        /usr/bin/git -c protocol.version=2 pull --all
        set +e
        for i in $(/usr/bin/git branch -a | grep remote | grep -v HEAD); do /usr/bin/git branch --track ${i#remotes/origin/} $i; done
        set -e
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      shell: bash
      run: |
        pytest --cov --cov-report html
    - name: Upload html coverage
      uses: actions/upload-artifact@v4
      with:
        name: html_coverage_${{matrix.p-version}}
        path: htmlcov/
        retention-days: 2