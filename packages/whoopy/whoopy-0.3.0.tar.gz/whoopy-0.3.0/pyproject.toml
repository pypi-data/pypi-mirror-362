[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "whoopy"
dynamic = ["version"]
description = "Unofficial Client for the Whoop API"
readme = "readme.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Felix Geilert"},
]
maintainers = [
    {name = "Felix Geilert"},
]
keywords = ["whoop", "api", "fitness", "health", "wearable"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
]

dependencies = [
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.2",
    "requests>=2.28.1",
    "pandas>=1.4.0",
    "numpy>=1.23.0",
    "time-helper>=0.1.4",
    "aiohttp>=3.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "ipython>=8.0.0",
    "pre-commit>=3.0.0",
]

explorer = [
    "streamlit>=1.28.0",
    "plotly>=5.18.0",
    "seaborn>=0.12.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "aioresponses>=0.7.0",
    "responses>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/felixnext/whoopy"
Documentation = "https://github.com/felixnext/whoopy#readme"
Repository = "https://github.com/felixnext/whoopy.git"
Issues = "https://github.com/felixnext/whoopy/issues"
Changelog = "https://github.com/felixnext/whoopy/releases"


[tool.hatch.version]
path = "whoopy/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["whoopy"]

[tool.hatch.build.targets.sdist]
include = [
    "/whoopy",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

[tool.ruff]
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "RUF",    # Ruff-specific rules
    "PT",     # flake8-pytest-style
    "PIE",    # flake8-pie
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "PLR",    # pylint refactor
    "PLW",    # pylint warnings
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "SLF001", "PLR2004", "S101"]
"tools/example.py" = ["T201"]  # Allow print statements in example

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=whoopy",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["whoopy"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandas.*",
    "requests.*",
    "aiohttp.*",
    "time_helper.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 120
target-version = ["py310", "py311", "py312", "py313"]
include = '\.pyi?$'

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "types-python-dateutil>=2.9.0.20250708",
    "types-requests>=2.32.4.20250611",
]
