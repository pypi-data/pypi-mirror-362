[build-system]
requires = ["scikit-build-core>=0.10", "pybind11"]
build-backend = "scikit_build_core.build"


[project]
name = "libcachesim"
version = "0.3.2"
description="Python bindings for libCacheSim"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["performance", "cache", "simulator"]
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
test = ["pytest"]


[tool.scikit-build]
wheel.expand-macos-universal-tags = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
  "error",
  "ignore::pytest.PytestCacheWarning",
]
testpaths = ["tests"]


[tool.cibuildwheel]
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_34_x86_64"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_34_aarch64"

build = ["*-manylinux_x86_64", "*-manylinux_aarch64"]
skip = ["*-win32", "*-manylinux_i686"]

# Install build dependencies. First install yum-utils to get yum-config-manager,
# then enable the CRB repository to find ninja-build, finally install all packages.
before-all = "yum install -y yum-utils && yum-config-manager --set-enabled crb && yum install -y ninja-build cmake libzstd-devel glib2-devel"

# We add 'rm -rf build' to ensure a clean build inside the container.
# The C++ core is built first, then the wheel build will use it.
# Use absolute paths to avoid issues with the working directory.
before-build = "rm -rf {project}/build && cmake -S {project} -B {project}/build -G Ninja && cmake --build {project}/build"

# Set the environment variable for the wheel build step.
environment = { LCS_BUILD_DIR = "{project}/build" }

[tool.cibuildwheel.windows]
before-build = "cmake -S {project} -B {project}/build -G Ninja && cmake --build {project}/build"

[tool.cibuildwheel.macos]
before-build = "brew install zstd && rm -rf {project}/build && cmake -S {project} -B {project}/build -G Ninja && cmake --build {project}/build"

# [tool.cibuildwheel.pyodide]
# build-frontend = {name = "build", args = ["--exports", "whole_archive"]}

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR09",    # Too many X
  "PLR2004",  # Magic comparison
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
