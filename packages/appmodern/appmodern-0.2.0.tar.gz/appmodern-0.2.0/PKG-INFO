Metadata-Version: 2.4
Name: appmodern
Version: 0.2.0
Summary: Uma biblioteca para criar aplica√ß√µes visuais com Python e tecnologias web.
Home-page: https://github.com/GustavoSantiago1227
Author: Gustavo Felipe Felix Santiago
Author-email: gustavosantiago1227@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: User Interfaces
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pywebview
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# AppModern

[![PyPI version](https://badge.fury.io/py/appmodern.svg)](https://badge.fury.io/py/appmodern)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

`AppModern` √© uma biblioteca Python para criar facilmente aplica√ß√µes de desktop com interfaces web (HTML, CSS, JS), utilizando o poder do `pywebview`.

## Vis√£o Geral

A biblioteca abstrai a complexidade da comunica√ß√£o entre Python e JavaScript, permitindo que voc√™ construa a interface do usu√°rio com componentes Python que s√£o renderizados dinamicamente no frontend.

## Instala√ß√£o

Voc√™ pode instalar o `AppModern` via pip:

```bash
pip install appmodern
```

#### Como Usar
Toda aplica√ß√£o possui duas classes principais: App e api.

`App` Respons√°vel por gerar a interface principal com a janela web.

`Api` Respons√°vel pela comunica√ß√£o entre o frontend e o backend Python..


#### App

O `App`  √© o n√∫cleo da aplica√ß√£o. Ele carrega a janela HTML do PyWebView e gerencia o conte√∫do.


```python
from appmodern.app import App

app = App(
    title="My Program",
    width=800,
    height=600,
    full_screen=False,
    debug=False,
    lang='en'
)

# Adiciona filhos extras √† tag <head>
app.head.add_children(
    # Componentes como folhas de estilo ou scripts externos
)

# Inicializa a aplica√ß√£o
app.run()

```


#### Componentes
A manipula√ß√£o do DOM √© feita atrav√©s de componentes Python. Os principais s√£o:

`Tag` (classe gen√©rica para cria√ß√£o de elementos HTML)

`ScriptExternal, StyleExternal, Meta, Title, Head, Body`

```python
from appmodern.components import Tag

# Classe personalizada baseada em uma <div>
class Div(Tag):
    pass

# Estrutura com filhos e atributos
class DivBlock(Tag):
    def __init__(self, parent, *children, **kwargs):
        """
        parent: seletor CSS para o elemento pai (ex: 'body', '#id', '.class')
        children: outros componentes (tags) filhos
        kwargs: atributos HTML (id, class_, style, value, etc.)
        """
        super().__init__(parent, *children, class_="exemplo", **kwargs)
        self.element = 'div'  # Corrige o nome da tag HTML


```
**Observa√ß√£o:** Por padr√£o, o nome da tag `HTML` ser√° o nome da classe. Se necess√°rio, sobrescreva self.element para garantir compatibilidade com o **HTML**




#### üß† API

A `Api` √© a classe respons√°vel pela comunica√ß√£o entre o backend (Python) e o frontend (JavaScript).  
Ela atua com **seis fun√ß√µes principais no Python** e **cinco no JavaScript**, sendo elas:

- `route`
- `call`
- `create`
- `read`
- `update`
- `delete`

---

```python
from appmodern import route, call, create, read, update, delete
from appmodern.components import Tag

# Criando componentes personalizados
class P(Tag): pass
class Button(Tag): pass

# Decorador para registrar uma rota que ser√° chamada pelo frontend
# A fun√ß√£o 'home' ser√° executada automaticamente ao iniciar a aplica√ß√£o
@route('home')
def sua_funcao(*args, **kwargs):
    # Cria um par√°grafo na tag <body>
    create(P("body", "Texto"))

    # L√™ elementos com base em seletores CSS
    # Filtros dispon√≠veis: 'text', 'html', 'value', 'style'
    read('p', filter=['text', 'html', 'value', 'style'])

    # Atualiza o conte√∫do de elementos com base em um seletor
    update(('p', P('body', "Atualiza aqui")))

    # Remove elementos do DOM com base em seletores
    delete('p')

    # Cria um bot√£o com a√ß√£o de clique que chama uma fun√ß√£o Python
    create(Button('body', "Clique", onclick="call('clique')"))

# Rota que ser√° chamada ao clicar no bot√£o
@route('clique')
def uso_do_call(*args, **kwargs):
    # call() √© uma fun√ß√£o de comunica√ß√£o entre front e back.
    # Pode ser usada em ambos os lados para invocar fun√ß√µes.
    # Par√¢metros:
    #   call(nome_da_fun√ß√£o, lista_de_args, dicionario_de_kwargs)

    call('funcao_de_apresentacao', ['arg1', 'arg2'], {"kwarg": 1})
```


### Exemplo pratico

`main.py`
```python
from appmodern.app import App
import exemples.home
app = App(
    title="AppModern Login",
    width=800,
    height=600,
    full_screen=False,
    debug=True,
    lang='pt-BR'
)

# Roda a aplica√ß√£o
app.run()
```
`home.py`

```python
#Componentes
from appmodern.components import Tag

class Div(Tag): pass
class Button(Tag): pass
class Input(Tag): pass
class Label(Tag): pass
class H1(Tag): pass
class P(Tag): pass


#Tela de login
from appmodern.components import Tag
from appmodern import route, create, read, update, delete, call
from time import sleep

# Componentes personalizados
class Div(Tag):
    def __init__(self, parent='body', *children, **kwargs):
        style = kwargs.pop("style", "") + """
            display: flex;
            flex-direction: column;
            align-items: center;
            background: #ffffff;
            padding: 30px;
            margin: 10% auto;
            width: 300px;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            font-family: 'Segoe UI', sans-serif;
        """
        super().__init__(parent, *children, style=style, **kwargs)

class Label(Tag):
    def __init__(self, parent='body', *children, **kwargs):
        style = kwargs.pop("style", "") + "margin-top: 12px; width: 100%; color: #444; font-weight: bold;"
        super().__init__(parent, *children, style=style, **kwargs)

class Input(Tag):
    def __init__(self, parent='body', **kwargs):
        style = kwargs.pop("style", "") + """
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-top: 6px;
        """
        super().__init__(parent, style=style, **kwargs)

class Button(Tag):
    def __init__(self, parent='body', *children, **kwargs):
        style = kwargs.pop("style", "") + """
            background-color: #4facfe;
            color: white;
            border: none;
            padding: 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
            width: 100%;
        """
        super().__init__(parent, *children, style=style, **kwargs)

class H1(Tag): pass
class H2(Tag): pass
class P(Tag): pass

# P√°gina inicial com formul√°rio de login
@route('home')
def home_page():
    create(
        Div('body',
            H1(None, 'Login'),
            Label(None, "Login", Input(None, type="text", id='login')),
            Label(None, "Senha", Input(None, type="password", id='password')),
            Button(None, "Logar", onclick='call("logar")'),
            id='div-login'
        )
    )

# Fun√ß√£o chamada ao clicar em "Logar"
@route('logar')
def logar():
    data = read('input', filter=['value'])
    login, password = data['data']

    if login[0] == 'gustavo' and password[0] == '123':
        call('bem-vindo', [login[0], 5])
    else:
        data = read('p')
        if not data['data']:
            create(P('#div-login', 'Login ou senha incorretos'))

# Simula tela de carregamento com contagem regressiva
@route('bem-vindo')
def bem_vindo(nome, segs):
    if segs == 5:
        delete('#div-login')
        create(
            Div('body',
                H1(None, 'Seja Bem-vindo'),
                P(None, f'{nome}, o programa ficar√° pronto em {segs}s'),
                id="div-bem-vindo"
            )
        )
        bem_vindo(nome, segs - 1)
    elif segs > 0:
        sleep(1)
        update(('p', P(None, f'{nome}, o programa ficar√° pronto em {segs}s')))
        bem_vindo(nome, segs - 1)
    else:
        update(('div#div-bem-vindo',
            Div(None,
                H1(None, "Logado com sucesso"),
                P(None, f"{nome}, seja muito bem-vindo ao novo sistema"),
                id="div-bem-vindo")
        ))
        create(H2('#div-bem-vindo', "AppModern"))

```


## Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.
