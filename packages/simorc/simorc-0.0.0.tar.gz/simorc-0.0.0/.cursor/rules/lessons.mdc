---
description: A growing collection of project-specific lessons learned that should be referenced and updated throughout development
globs: 
alwaysApply: false
---
# Overview

## How To Use This Document
This document maintains project-specific lessons and best practices. It serves as institutional knowledge that evolves over time.

### For AI Agents
- Reference these lessons when relevant to current tasks
- Propose adding new lessons when discovering useful patterns or solutions
- Format new lessons consistently with existing entries
- Include concrete examples with each lesson

### For Users
- Request lesson additions by saying "Add lesson about [topic]"
- Reference specific lessons by saying "Check lessons about [topic]"
- Review and refine lessons periodically as part of maintenance

## Best Practice for Updating This Document
- New lessons should be added at the bottom of the file
- Each lesson should have a clear, descriptive heading
- Format lessons consistently with bullet points for readability
- Include concrete examples from the project when possible
- Link to relevant source code or documentation when helpful
- Add references to external resources that provided the solution

# Lessons

## Git Workflow
- Always check repository status (`git status`) before adding files to commit
- This helps ensure we're only committing the intended changes and nothing else
- It also helps catch any unexpected changes or files that shouldn't be committed

## Testing with pytest
- Use pytest fixtures for test setup and teardown
- Organize test files with clear naming: `test_*.py`
- Use descriptive test function names: `test_*`
- Group related tests using classes
- Use pytest's assert statements for cleaner test code
- Save test results in dedicated directories under `/tests/{test name}/results`
- Use pytest's built-in fixtures (e.g., `tmp_path`) for temporary files
- Leverage pytest's parameterize decorator for testing multiple cases
- Use pytest's markers for categorizing tests
- Document test cases clearly with docstrings

## Key Type Handling in Dictionaries
- When using dictionary keys that could be represented as either strings or integers, ensure consistent key type handling
- In our window text overrides bug, window definitions from symbol_def used string keys ('0', '3'), while window overrides in the rendered symbol used integer keys (0, 3)
- This mismatch caused window overrides to not be applied, even though they were correctly parsed and available
- The solution includes:
  1. Convert string keys to integers when possible for comparison
  2. Always check for both formats when looking up values
  3. Use a clear indicator (like a boolean flag) to track whether an override was found
  4. Use detailed logging to track values through the processing pipeline
- This approach allows for flexible dictionary key handling while maintaining backward compatibility

## Mocking JSON File I/O in Tests
- When testing code that reads JSON files, simple MagicMock objects won't work for json.load() operations
- The TypeError "JSON object must be str, bytes or bytearray, not MagicMock" occurs when passing a mock to json.load()
- Effective approach for mocking JSON files includes:
  1. Create a simplified version of the expected JSON data in the test
  2. Configure the mock file object to return this JSON data as a string when read() is called
  3. Use a side_effect function with builtins.open mock to return the JSON mock only for specific filenames
  4. Ensure mocks are targeting the correct import paths used by the code under test
- This pattern allows tests to run without file system access while providing valid data to json.load()

## Comprehensive Repository Updates
- When making significant documentation or configuration updates, use `git add .` to include all changes
- This approach ensures:
  1. All related changes are committed together (documentation, code, images, etc.)
  2. Moved files are properly tracked (like images relocated to different directories)
  3. Configuration changes are applied consistently across the project
- For improved traceability, still review the full list of changes using `git status` first
- Use descriptive commit messages that summarize the different categories of changes
- This approach is particularly useful for:
  1. Documentation updates that span multiple files
  2. Project reorganization that moves files between directories
  3. Configuration changes that affect multiple aspects of the project
  4. Fixes spanning both code and documentation


