[project]
name = "hdiffpatch"
requires-python = ">=3.9"

[build-system]
requires = [
    "poetry-core>=1.0.0,<2.0.0",
    "poetry-dynamic-versioning>=1.0.1",
    "Cython>=3.0.0",
    "setuptools>=61.0",
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry-dynamic-versioning]
enable = false
vcs = "git"
style = "semver"

[tool.poetry]
name = "hdiffpatch"
version = "0.1.0" # Do not change, let poetry-dynamic-versioning handle it.
homepage = "https://github.com/BrianPugh/hdiffpatch-python"
repository = "https://github.com/BrianPugh/hdiffpatch-python"
license = "Apache-2.0"
description = "Python wrapper around HDiffPatch C++ library for efficient binary diff/patch operations."
authors = ["Brian Pugh"]
readme = "README.md"
keywords = [
    "binary",
    "diff",
    "patch",
    "compression",
    "hdiffpatch",
    "delta",
    "update",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Programming Language :: Cython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Compression",
    "Topic :: Utilities",
]
packages = [{ include = "hdiffpatch" }]
include = ["hdiffpatch/*.so", "hdiffpatch/*.pyd"] # Compiled extensions

[tool.poetry.build]
script = 'build.py'
generate-setup-file = false

[tool.poetry.scripts]

[tool.poetry.dependencies]
# Be as loose as possible if writing a library.
python = "^3.9"
attrs = ">=21.3.0"


[tool.poetry.group.dev.dependencies]
cython = ">=1.0.0"
coverage = { extras = ["toml"], version = ">=5.1" }
pre_commit = ">=2.16.0"
pytest = ">=7.1.2"
pytest-cov = ">=3.0.0"
pytest-mock = ">=3.7.0"

[tool.poetry.group.debug]
optional = true

[tool.poetry.group.debug.dependencies]
ipdb = ">=0.13.9"
line_profiler = ">=3.5.1"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
]

[tool.pyright]
venvPath = "."
venv = ".venv"
extraPaths = ["tests/"]

[tool.ruff]
target-version = 'py39'

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
    "hdiffpatch/_c_src", # External C dependencies
]

line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # Error
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "S",   # bandit
    "SIM", # flake8-simplify
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # Warning
    "YTT", # flake8-2020
]

ignore = [
    "B905",   # zip strict=True; remove once python <3.10 support is dropped.
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
    "TRY003", # Avoid specifying messages outside exception class; overly strict, especially for ValueError
    "UP007",  # Use `X | Y` for type annotations instead of `typing.Union[X, Y]` - not available in Python 3.9
    "UP045",  # Use `X | None` instead of `Optional[X]` - not available in Python 3.9
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["chr", "typer.Argument", "typer.Option"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",   # use of "assert"
    "S102",   # use of "exec"
    "S106",   # possible hardcoded password.
    "PGH001", # use of "eval"
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.codespell]
skip = 'poetry.lock,'

[tool.creosote]
venvs = [".venv"]
paths = ["hdiffpatch"]
deps-file = "pyproject.toml"
sections = ["tool.poetry.dependencies"]
exclude-deps = ["rich", "typing-extensions"]
