[tool.poetry]
name = "mseep-zenml"
version = "0.84.0"
packages = [
    { include = "zenml", from = "src" },
]
description = "ZenML: Write production-ready ML code."
authors = [
    "mseep <support@skydeck.ai>",
]
homepage = "https://zenml.io"
documentation = "https://docs.zenml.io"
repository = "https://github.com/zenml-io/zenml"
license = "Apache-2.0"
keywords = [
    "machine learning",
    "production",
    "pipeline",
    "mlops",
    "devops",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Distributed Computing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
exclude = [
    "tests.*",
    "*.tests",
    "docs",
    "tests",
    "tests",
    "legacy",
    "*.tests.*",
    "examples",
]
include = [
    "src/zenml",
    "*.txt",
    "*.sh",
    "*.md",
]
maintainers = [
    "mseep <support@skydeck.ai>",
]

[tool.poetry.scripts]
zenml = "zenml.cli.cli:cli"

[tool.poetry.dependencies]
click = "^8.0.1,<8.1.8"
cloudpickle = ">=2.0.0,<3"
distro = "^1.6.0"
docker = "~7.1.0"
gitpython = "^3.1.18"
packaging = ">=24.1"
psutil = ">=5.0.0"
pydantic = ">=2.0,<2.11.2"
pydantic-settings = "*"
python = ">=3.9,<3.13"
python-dateutil = "^2.8.1"
pyyaml = ">=6.0.1"
setuptools = ">=70.0.0"
sqlalchemy = "^2.0.0"
sqlalchemy_utils = "*"
sqlmodel = "0.0.18"

[tool.poetry.dependencies.alembic]
version = ">=1.8.1,<=1.15.2"

[tool.poetry.dependencies.bcrypt]
version = "4.0.1"

[tool.poetry.dependencies.passlib]
extras = [
    "bcrypt",
]
version = "~1.7.4"

[tool.poetry.dependencies.pymysql]
version = "~1.1.0,>=1.1.1"

[tool.poetry.dependencies.rich]
extras = [
    "jupyter",
]
version = ">=12.0.0"

[tool.poetry.dependencies.importlib_metadata]
version = "<=7.0.0"
python = "<3.10"

[tool.poetry.dependencies.fastapi]
version = ">=0.100, <=0.115.8"
optional = true

[tool.poetry.dependencies.uvicorn]
extras = [
    "standard",
]
version = ">=0.17.5"
optional = true

[tool.poetry.dependencies.python-multipart]
version = "~0.0.9"
optional = true

[tool.poetry.dependencies.pyjwt]
extras = [
    "crypto",
]
version = "2.7.*"
optional = true

[tool.poetry.dependencies.orjson]
version = "~3.10.0"
optional = true

[tool.poetry.dependencies.Jinja2]
version = "*"
optional = true

[tool.poetry.dependencies.ipinfo]
version = ">=4.4.3"
optional = true

[tool.poetry.dependencies.secure]
version = "~0.3.0"
optional = true

[tool.poetry.dependencies.tldextract]
version = "~5.1.0"
optional = true

[tool.poetry.dependencies.itsdangerous]
version = "~2.2.0"
optional = true

[tool.poetry.dependencies.copier]
version = ">=8.1.0"
optional = true

[tool.poetry.dependencies.pyyaml-include]
version = "<2.0"
optional = true

[tool.poetry.dependencies.jinja2-time]
version = "^0.2.0"
optional = true

[tool.poetry.dependencies.boto3]
version = ">=1.16.0"
optional = true

[tool.poetry.dependencies.google-cloud-secret-manager]
version = ">=2.12.5"
optional = true

[tool.poetry.dependencies.requests]
version = "^2.27.11"
optional = true

[tool.poetry.dependencies.azure-identity]
version = ">=1.4.0"
optional = true

[tool.poetry.dependencies.azure-keyvault-secrets]
version = ">=4.0.0"
optional = true

[tool.poetry.dependencies.hvac]
version = ">=0.11.2"
optional = true

[tool.poetry.dependencies.aws-profile-manager]
version = ">=0.5.0"
optional = true

[tool.poetry.dependencies.kubernetes]
version = ">=18.20.0"
optional = true

[tool.poetry.dependencies.google-cloud-container]
version = ">=2.21.0"
optional = true

[tool.poetry.dependencies.google-cloud-storage]
version = ">=2.9.0"
optional = true

[tool.poetry.dependencies.google-cloud-artifact-registry]
version = ">=1.11.3"
optional = true

[tool.poetry.dependencies.azure-mgmt-containerservice]
version = ">=20.0.0"
optional = true

[tool.poetry.dependencies.azure-mgmt-containerregistry]
version = ">=10.0.0"
optional = true

[tool.poetry.dependencies.azure-mgmt-storage]
version = ">=20.0.0"
optional = true

[tool.poetry.dependencies.azure-storage-blob]
version = ">=12.0.0"
optional = true

[tool.poetry.dependencies.azure-mgmt-resource]
version = ">=21.0.0"
optional = true

[tool.poetry.dependencies.s3fs]
version = ">=2022.11.0,!=2025.3.1"
optional = true

[tool.poetry.dependencies.sagemaker]
version = ">=2.237.3"
optional = true

[tool.poetry.dependencies.gcsfs]
version = ">=2022.11.0"
optional = true

[tool.poetry.dependencies.kfp]
version = ">=2.6.0"
optional = true

[tool.poetry.dependencies.google-cloud-aiplatform]
version = ">=1.34.0"
optional = true

[tool.poetry.dependencies.google-cloud-pipeline-components]
version = ">=2.19.0"
optional = true

[tool.poetry.dependencies.adlfs]
version = ">=2021.10.0"
optional = true

[tool.poetry.dependencies.azure-ai-ml]
version = "1.23.1"
optional = true

[tool.poetry.dependencies.bandit]
version = "^1.7.5"
optional = true

[tool.poetry.dependencies.coverage]
extras = [
    "toml",
]
version = "^5.5"
optional = true

[tool.poetry.dependencies.mypy]
version = "1.7.1"
optional = true

[tool.poetry.dependencies.pyment]
version = "^0.3.3"
optional = true

[tool.poetry.dependencies.tox]
version = "^3.24.3"
optional = true

[tool.poetry.dependencies.hypothesis]
version = "^6.43.1"
optional = true

[tool.poetry.dependencies.typing-extensions]
version = ">=3.7.4"
optional = true

[tool.poetry.dependencies.darglint]
version = "^1.8.1"
optional = true

[tool.poetry.dependencies.ruff]
version = ">=0.1.7"
optional = true

[tool.poetry.dependencies.yamlfix]
version = "^1.16.0"
optional = true

[tool.poetry.dependencies.maison]
version = "<2.0"
optional = true

[tool.poetry.dependencies.pytest]
version = "^7.4.0"
optional = true

[tool.poetry.dependencies.pytest-randomly]
version = "^3.10.1"
optional = true

[tool.poetry.dependencies.pytest-mock]
version = "^3.6.1"
optional = true

[tool.poetry.dependencies.pytest-clarity]
version = "^1.0.1"
optional = true

[tool.poetry.dependencies.pytest-instafail]
version = ">=0.5.0"
optional = true

[tool.poetry.dependencies.pytest-rerunfailures]
version = ">=13.0"
optional = true

[tool.poetry.dependencies.pytest-split]
version = "^0.8.1"
optional = true

[tool.poetry.dependencies.mkdocs]
version = "^1.6.1,<2.0.0"
optional = true

[tool.poetry.dependencies.mkdocs-material]
version = "9.6.8"
optional = true

[tool.poetry.dependencies.mkdocs-awesome-pages-plugin]
version = ">=2.10.1,<3.0.0"
optional = true

[tool.poetry.dependencies.mkdocstrings]
extras = [
    "python",
]
version = "^0.28.1,<1.0.0"
optional = true

[tool.poetry.dependencies.mkdocs-autorefs]
version = ">=1.4.0,<2.0.0"
optional = true

[tool.poetry.dependencies.mike]
version = ">=1.1.2,<2.0.0"
optional = true

[tool.poetry.dependencies.types-certifi]
version = "^2021.10.8.0"
optional = true

[tool.poetry.dependencies.types-croniter]
version = "^1.0.2"
optional = true

[tool.poetry.dependencies.types-futures]
version = "^3.3.1"
optional = true

[tool.poetry.dependencies.types-Markdown]
version = "^3.3.6"
optional = true

[tool.poetry.dependencies.types-paramiko]
version = ">=3.4.0"
optional = true

[tool.poetry.dependencies.types-Pillow]
version = "^9.2.1"
optional = true

[tool.poetry.dependencies.types-protobuf]
version = "^3.18.0"
optional = true

[tool.poetry.dependencies.types-PyMySQL]
version = "^1.0.4"
optional = true

[tool.poetry.dependencies.types-python-dateutil]
version = "^2.8.2"
optional = true

[tool.poetry.dependencies.types-python-slugify]
version = "^5.0.2"
optional = true

[tool.poetry.dependencies.types-PyYAML]
version = "^6.0.0"
optional = true

[tool.poetry.dependencies.types-redis]
version = "^4.1.19"
optional = true

[tool.poetry.dependencies.types-requests]
version = "^2.27.11"
optional = true

[tool.poetry.dependencies.types-setuptools]
version = "^57.4.2"
optional = true

[tool.poetry.dependencies.types-six]
version = "^1.16.2"
optional = true

[tool.poetry.dependencies.types-termcolor]
version = "^1.1.2"
optional = true

[tool.poetry.dependencies.types-psutil]
version = "^5.8.13"
optional = true

[tool.poetry.dependencies.types-passlib]
version = "^1.7.7"
optional = true

[tool.poetry.extras]
server = [
    "fastapi",
    "uvicorn",
    "python-multipart",
    "pyjwt",
    "fastapi-utils",
    "orjson",
    "Jinja2",
    "ipinfo",
    "secure",
    "tldextract",
    "itsdangerous",
]
templates = [
    "copier",
    "jinja2-time",
    "ruff",
    "pyyaml-include",
]
terraform = [
    "python-terraform",
]
secrets-aws = [
    "boto3",
]
secrets-gcp = [
    "google-cloud-secret-manager",
]
secrets-azure = [
    "azure-identity",
    "azure-keyvault-secrets",
]
secrets-hashicorp = [
    "hvac",
]
s3fs = [
    "s3fs",
]
gcsfs = [
    "gcsfs",
]
adlfs = [
    "adlfs",
]
connectors-kubernetes = [
    "kubernetes",
]
connectors-aws = [
    "boto3",
    "kubernetes",
    "aws-profile-manager",
]
connectors-gcp = [
    "google-cloud-container",
    "google-cloud-storage",
    "google-cloud-artifact-registry",
    "kubernetes",
]
connectors-azure = [
    "azure-identity",
    "azure-mgmt-containerservice",
    "azure-mgmt-containerregistry",
    "azure-mgmt-storage",
    "azure-storage-blob",
    "azure-mgmt-resource",
    "kubernetes",
    "requests",
]
sagemaker = [
    "sagemaker",
]
vertex = [
    "google-cloud-aiplatform",
    "kfp",
    "google-cloud-pipeline-components",
]
azureml = [
    "azure-ai-ml",
]
dev = [
    "bandit",
    "ruff",
    "yamlfix",
    "coverage",
    "pytest",
    "mypy",
    "pre-commit",
    "pyment",
    "tox",
    "hypothesis",
    "typing-extensions",
    "darglint",
    "pytest-randomly",
    "pytest-mock",
    "pytest-clarity",
    "pytest-instafail",
    "pytest-rerunfailures",
    "pytest-split",
    "mkdocs",
    "mkdocs-material",
    "mkdocs-awesome-pages-plugin",
    "mkdocstrings",
    "mkdocstrings-python",
    "mkdocs-autorefs",
    "mike",
    "maison",
    "types-certifi",
    "types-croniter",
    "types-futures",
    "types-Markdown",
    "types-paramiko",
    "types-Pillow",
    "types-protobuf",
    "types-PyMySQL",
    "types-python-dateutil",
    "types-python-slugify",
    "types-PyYAML",
    "types-redis",
    "types-requests",
    "types-setuptools",
    "types-six",
    "types-termcolor",
    "types-psutil",
    "types-passlib",
]

[tool.poetry-version-plugin]
source = "init"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
testpaths = "tests"
xfail_strict = true
norecursedirs = [
    "tests/integration/examples/*",
]

[tool.coverage.run]
parallel = true
source = [
    "src/zenml",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    ".test_durations",
    "build",
    "dist",
    "node_modules",
    "venv",
    "__init__.py",
    "src/zenml/cli/version.py",
    "examples/llm_finetuning/evaluate",
    "examples/llm_finetuning/finetune",
    "examples/llm_finetuning/generate",
    "examples/llm_finetuning/lit_gpt",
    "examples/llm_finetuning/scripts",
]
src = [
    "src",
    "test",
]
target-version = "py39"

[tool.ruff.format]
exclude = [
    "*.git",
    "*.hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build]",
]

[tool.ruff.lint]
unfixable = [
    "F401",
]
ignore = [
    "E501",
    "F401",
    "F403",
    "D301",
    "D401",
    "D403",
    "D407",
    "D213",
    "D203",
    "S101",
    "S104",
    "S105",
    "S106",
    "S107",
]
select = [
    "D",
    "E",
    "F",
    "I",
    "I001",
    "Q",
]

[tool.ruff.lint.per-file-ignores]

[tool.ruff.lint.flake8-import-conventions.aliases]
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = [
    "pydantic.mypy",
]
strict = true
namespace_packages = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "google.*",
    "transformers.*",
    "datasets.*",
    "langchain_community.*",
    "IPython.core.*",
]
follow_imports = "skip"

[[tool.mypy.overrides]]
module = [
    "airflow.*",
    "tensorflow.*",
    "apache_beam.*",
    "pandas.*",
    "distro.*",
    "analytics.*",
    "absl.*",
    "gcsfs.*",
    "s3fs.*",
    "adlfs.*",
    "fsspec.*",
    "torch.*",
    "pytorch_lightning.*",
    "sklearn.*",
    "numpy.*",
    "facets_overview.*",
    "IPython.core.*",
    "IPython.display.*",
    "plotly.*",
    "dash.*",
    "dash_bootstrap_components.*",
    "dash_cytoscape",
    "dash.dependencies",
    "docker.*",
    "flask.*",
    "kfp.*",
    "kubernetes.*",
    "urllib3.*",
    "kfp_server_api.*",
    "sagemaker.*",
    "azureml.*",
    "google.*",
    "google_cloud_pipeline_components.*",
    "neuralprophet.*",
    "lightgbm.*",
    "scipy.*",
    "deepchecks.*",
    "boto3.*",
    "botocore.*",
    "jupyter_dash.*",
    "slack_sdk.*",
    "azure-keyvault-keys.*",
    "azure-mgmt-resource.*",
    "azure.mgmt.resource.*",
    "model_archiver.*",
    "kfp_tekton.*",
    "mlflow.*",
    "python_terraform.*",
    "bentoml.*",
    "multipart.*",
    "jose.*",
    "sqlalchemy_utils.*",
    "sky.*",
    "copier.*",
    "datasets.*",
    "pyngrok.*",
    "cloudpickle.*",
    "matplotlib.*",
    "IPython.*",
    "huggingface_hub.*",
    "distutils.*",
    "accelerate.*",
    "label_studio_sdk.*",
    "argilla.*",
    "lightning_sdk.*",
    "peewee.*",
    "prodigy.*",
    "prodigy.components.*",
    "prodigy.components.db.*",
    "transformers.*",
    "vllm.*",
    "numba.*",
    "uvloop.*",
]
ignore_missing_imports = true

[build-system]
requires = [
    "poetry-core",
]
build-backend = "poetry.core.masonry.api"
