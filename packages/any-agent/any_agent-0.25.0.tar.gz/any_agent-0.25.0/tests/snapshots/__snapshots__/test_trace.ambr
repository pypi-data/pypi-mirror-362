# serializer version: 1
# name: test_agent_trace_snapshot[AGNO_trace].219771956564580706934509047402402461169
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "<instructions>\\nUse the available tools to answer.\\n</instructions>\\n\\nProvide your output as a JSON containing the following fields:\\n<json_fields>\\n[\\"steps\\"]\\n</json_fields>\\n\\nHere are the properties for each field:\\n<json_field_properties>\\n{\\n  \\"steps\\": {\\n    \\"items\\": {\\n      \\"$ref\\": \\"#/$defs/Step\\"\\n    },\\n    \\"type\\": \\"array\\"\\n  },\\n  \\"$defs\\": {\\n    \\"Step\\": {\\n      \\"number\\": {\\n        \\"type\\": \\"integer\\"\\n      },\\n      \\"description\\": {\\n        \\"type\\": \\"string\\"\\n      }\\n    }\\n  }\\n}\\n</json_field_properties>\\nStart your response with `{` and end it with `}`.\\nYour output will be passed to json.loads() to convert it to a Python object.\\nMake sure it only contains valid JSON."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.95e-05,
          'gen_ai.usage.input_tokens': 395,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17968686329190176903,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242911026487000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242910626999000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-11T10:08:31-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'LOXXpqWLR',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7167475795660267399,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242911030296000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242911026782000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.79e-05,
          'gen_ai.usage.input_tokens': 479,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9690228892464931147,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242911420762000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242911030531000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'wHXZAFzLO',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17479253798580080999,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242911422549000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242911421001000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.12e-05,
          'gen_ai.usage.input_tokens': 512,
          'gen_ai.usage.output_cost': 1.38e-05,
          'gen_ai.usage.output_tokens': 46,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3335329702840983747,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242912994053000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242911422760000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17327156818494482818,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 219771956564580706934509047402402461169,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242913097077000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242910622963000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[GOOGLE_trace].107677306832222807265048212564020060214
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}\\n\\nYou are an agent. Your internal name is \\"any_agent\\"."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.78e-05,
          'gen_ai.usage.input_tokens': 678,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6937776789198232577,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242904567402000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 11827453946238346927,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242902490831000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"meta=None content=[TextContent(type=\'text\', text=\'{\\\\n  \\"timezone\\": \\"America/New_York\\",\\\\n  \\"datetime\\": \\"2025-07-11T10:08:24-04:00\\",\\\\n  \\"is_dst\\": true\\\\n}\', annotations=None, meta=None)] structuredContent=None isError=False"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.call.id': 'oQbbNUNfu',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5809013157022070971,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242904581664000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 9422929950464788669,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904568117000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.01e-05,
          'gen_ai.usage.input_tokens': 801,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14283073955609320949,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905462356000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 11827453946238346927,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904582592000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.call.id': 'CfCdsTpfR',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7315870120608218972,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905465092000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 18020467926463512655,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905462850000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": {"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.379999999999999e-05,
          'gen_ai.usage.input_tokens': 838,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8686942434787023548,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242908269909000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 11827453946238346927,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905466895000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.call.id': 'SqGASEHmr',
          'gen_ai.tool.description': '''
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
            Args:
                answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                    {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
            Returns:
                A dictionary with the following keys:
                    - success: True if the output is valid, False otherwise.
                    - result: The final output if success is True, otherwise an error message.
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1372959295170162520,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242908273016000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3902117373607053160,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242908270506000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7069803107252385533,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 107677306832222807265048212564020060214,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242908273470000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242902489612000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LANGCHAIN_trace].131093967365972404438237830550089174329
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": {"timezone": "America/New_York"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.41e-05,
          'gen_ai.usage.input_tokens': 241,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16445819183918951958,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242899295043000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242898756011000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-11T10:08:19-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4898156864899607645,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242899305369000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242899298952000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": {"text": "2025"}}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.2699999999999995e-05,
          'gen_ai.usage.input_tokens': 327,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18121907777766445155,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242899674150000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242899307888000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'null',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10119099335448480726,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242899679350000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242899677276000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.5799999999999996e-05,
          'gen_ai.usage.input_tokens': 358,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16505057816550698659,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242901448112000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242899682235000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.3299999999999996e-05,
          'gen_ai.usage.input_tokens': 333,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9584374761311211391,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242902797636000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242901450046000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5687666847307215349,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 131093967365972404438237830550089174329,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242902797797000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242898752228000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[LLAMA_INDEX_trace].335737563852591607814925615264466007552
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.03e-05,
          'gen_ai.usage.input_tokens': 203,
          'gen_ai.usage.output_cost': 1.08e-05,
          'gen_ai.usage.output_tokens': 36,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 17216254485840296036,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242927933950000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242927207235000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-11T10:08:48-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9908690376528398107,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242928202485000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242927934756000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.9599999999999998e-05,
          'gen_ai.usage.input_tokens': 296,
          'gen_ai.usage.output_cost': 9.9e-06,
          'gen_ai.usage.output_tokens': 33,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 14530411577684997266,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242928740095000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242928203658000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '"None"',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': '''
            write_file(text: str) -> None
            write the text to a file in the tmp_path directory
            
            Args:
                text (str): The text to write to the file.
            
            Returns:
                None
  
          ''',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6661550209389713706,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242928743622000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242928741545000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.1899999999999996e-05,
          'gen_ai.usage.input_tokens': 319,
          'gen_ai.usage.output_cost': 2.31e-05,
          'gen_ai.usage.output_tokens': 77,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7866205383466346543,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242929378408000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242928744839000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': "Error calling tool: prepare_final_output.<locals>.final_output_tool() got an unexpected keyword argument 'steps'",
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"steps": [{"number": 1, "description": "Find what year it is in the America/New_York timezone"}, {"number": 2, "description": "Write the value (single number) to a file"}]}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
                Args:
                    answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                        {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                Returns:
                    A dictionary with the following keys:
                        - success: True if the output is valid, False otherwise.
                        - result: The final output if success is True, otherwise an error message.
            
                
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1257878381212250718,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242929380724000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242929379085000,
        'status': dict({
          'description': "Error calling tool: prepare_final_output.<locals>.final_output_tool() got an unexpected keyword argument 'steps'",
          'status_code': <StatusCode.ERROR: 'error'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_output", "tool.args": "{}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.04e-05,
          'gen_ai.usage.input_tokens': 404,
          'gen_ai.usage.output_cost': 2.91e-05,
          'gen_ai.usage.output_tokens': 97,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 15487931403639704052,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242929967112000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242929381420000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"success": true, "result": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Find what year it is in the America/New_York timezone\\"}, {\\"number\\": 2, \\"description\\": \\"Write the value (single number) to a file\\"}]}"}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Find what year it is in the America/New_York timezone\\"}, {\\"number\\": 2, \\"description\\": \\"Write the value (single number) to a file\\"}]}"}',
          'gen_ai.tool.description': '''
            final_output(answer: str) -> dict[str, str | bool]
            This tool is used to validate the final output. It must be called when the final answer is ready in order to ensure that the output is valid.
            
                Args:
                    answer: The final output that can be loaded as a Pydantic model. This must be a JSON compatible string that matches the following schema:
                        {'$defs': {'Step': {'properties': {'number': {'title': 'Number', 'type': 'integer'}, 'description': {'title': 'Description', 'type': 'string'}}, 'required': ['number', 'description'], 'title': 'Step', 'type': 'object'}}, 'additionalProperties': False, 'properties': {'steps': {'items': {'$ref': '#/$defs/Step'}, 'title': 'Steps', 'type': 'array'}}, 'required': ['steps'], 'title': 'Steps', 'type': 'object'}
            
                Returns:
                    A dictionary with the following keys:
                        - success: True if the output is valid, False otherwise.
                        - result: The final output if success is True, otherwise an error message.
            
                
          ''',
          'gen_ai.tool.name': 'final_output',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1544951527540939112,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242929968536000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_output',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242929967729000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            The final output is:
            ```json
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Find what year it is in the America/New_York timezone"
                },
                {
                  "number": 2,
                  "description": "Write the value (single number) to a file"
                }
              ]
            }
            ```
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.32e-05,
          'gen_ai.usage.input_tokens': 532,
          'gen_ai.usage.output_cost': 2.2199999999999998e-05,
          'gen_ai.usage.output_tokens': 74,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 18063847748954412256,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242930719249000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242929969102000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3603843085779346201,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 335737563852591607814925615264466007552,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242933145284000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242927205266000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[OPENAI_trace].328763700714006172422748723723478400766
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken.", "role": "user"}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 4.4699999999999996e-05,
          'gen_ai.usage.input_tokens': 447,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7720954420916537781,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242904418673000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242903600128000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"type":"text","text":"{\\n  \\"timezone\\": \\"America/New_York\\",\\n  \\"datetime\\": \\"2025-07-11T10:08:24-04:00\\",\\n  \\"is_dst\\": true\\n}","annotations":null,"meta":null}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"timezone\\": \\"America/New_York\\"}"',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3854308545166560081,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242904425580000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904420065000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.5799999999999994e-05,
          'gen_ai.usage.input_tokens': 558,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6868857887609282361,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905225070000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904428089000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\": \\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9082296852391654166,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905227046000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905225970000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '"{\\"text\\": \\"2025\\"}"',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 9082296852391654166,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905227046000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905225970000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Find what year it is in the America/New_York timezone"}, {"number": 2, "description": "Write the value (single number) to a file"}, {"number": 3, "description": "Return a list of the steps you have taken"}]}',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.87e-05,
          'gen_ai.usage.input_tokens': 587,
          'gen_ai.usage.output_cost': 2.1e-05,
          'gen_ai.usage.output_tokens': 70,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 3978522140353504100,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242907103313000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905230476000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 668567127634199968,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 328763700714006172422748723723478400766,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242907104703000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242903598182000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[SMOLAGENTS_trace].128721558422921508733810133314290305556
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer.You must call the final_output tool when finished.The \'answer\' argument passed to the final_output tool must be a JSON string that matches the following schema:\\n{\'$defs\': {\'Step\': {\'properties\': {\'number\': {\'title\': \'Number\', \'type\': \'integer\'}, \'description\': {\'title\': \'Description\', \'type\': \'string\'}}, \'required\': [\'number\', \'description\'], \'title\': \'Step\', \'type\': \'object\'}}, \'additionalProperties\': False, \'properties\': {\'steps\': {\'items\': {\'$ref\': \'#/$defs/Step\'}, \'title\': \'Steps\', \'type\': \'array\'}}, \'required\': [\'steps\'], \'title\': \'Steps\', \'type\': \'object\'}"}, {"role": "user", "content": "New task:\\nFind what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 6.89e-05,
          'gen_ai.usage.input_tokens': 689,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 8799055473395356592,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242909678875000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242908824335000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-11T10:08:29-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.description': 'Get current time in a specific timezones',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1675824693003715691,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242909686902000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242909681190000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 8.26e-05,
          'gen_ai.usage.input_tokens': 826,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5751683162434914524,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242910287556000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242909687313000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.description': 'write the text to a file in the tmp_path directory',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 6525383456809009541,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242910288473000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242910287722000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "final_answer", "tool.args": "{\\"answer\\": \\"{\\\\\\"steps\\\\\\": [{\\\\\\"number\\\\\\": 1, \\\\\\"description\\\\\\": \\\\\\"Get current time in the America/New_York timezone.\\\\\\"}, {\\\\\\"number\\\\\\": 2, \\\\\\"description\\\\\\": \\\\\\"Write the year to a file.\\\\\\"}]}\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 9.059999999999999e-05,
          'gen_ai.usage.input_tokens': 906,
          'gen_ai.usage.output_cost': 1.68e-05,
          'gen_ai.usage.output_tokens': 56,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4161226972138341269,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242913898198000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242910288796000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '{"steps": [{"number": 1, "description": "Get current time in the America/New_York timezone."}, {"number": 2, "description": "Write the year to a file."}]}',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"answer": "{\\"steps\\": [{\\"number\\": 1, \\"description\\": \\"Get current time in the America/New_York timezone.\\"}, {\\"number\\": 2, \\"description\\": \\"Write the year to a file.\\"}]}"}',
          'gen_ai.tool.description': 'Provides a final answer to the given problem.',
          'gen_ai.tool.name': 'final_answer',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 16238474458346133273,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242913900463000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool final_answer',
        'parent': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242913898464000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7795872409431626510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 128721558422921508733810133314290305556,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242913900684000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242908823968000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
# name: test_agent_trace_snapshot[TINYAGENT_trace].124983472727402140335516614620132174223
  dict({
    'final_output': dict({
    }),
    'spans': list([
      dict({
        'attributes': dict({
          'gen_ai.input.messages': '[{"role": "system", "content": "Use the available tools to answer."}, {"role": "user", "content": "Find what year it is in the America/New_York timezone and write the value (single number) to a file. Finally, return a list of the steps you have taken."}]',
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "get_current_time", "tool.args": "{\\"timezone\\": \\"America/New_York\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 2.4999999999999998e-05,
          'gen_ai.usage.input_tokens': 250,
          'gen_ai.usage.output_cost': 4.8e-06,
          'gen_ai.usage.output_tokens': 16,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 10253661053750851488,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905513282000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904920153000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': '''
            {
              "timezone": "America/New_York",
              "datetime": "2025-07-11T10:08:25-04:00",
              "is_dst": true
            }
          ''',
          'gen_ai.output.type': 'json',
          'gen_ai.tool.args': '{"timezone": "America/New_York"}',
          'gen_ai.tool.name': 'get_current_time',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 7211550896736117399,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242905520006000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool get_current_time',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905513577000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '[{"tool.name": "write_file", "tool.args": "{\\"text\\": \\"2025\\"}"}]',
          'gen_ai.output.type': 'json',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.34e-05,
          'gen_ai.usage.input_tokens': 334,
          'gen_ai.usage.output_cost': 4.2e-06,
          'gen_ai.usage.output_tokens': 14,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 2943170665864009510,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242906651743000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242905520168000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'execute_tool',
          'gen_ai.output': 'None',
          'gen_ai.output.type': 'text',
          'gen_ai.tool.args': '{"text": "2025"}',
          'gen_ai.tool.name': 'write_file',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 1535384857103565315,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242906653639000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'execute_tool write_file',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242906651937000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            Here are the steps I have taken:
            
            1. Found the current time in the America/New_York timezone.
            2. Extracted the year from the current time.
            3. Wrote the year to a file.
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 3.65e-05,
          'gen_ai.usage.input_tokens': 365,
          'gen_ai.usage.output_cost': 1.3199999999999999e-05,
          'gen_ai.usage.output_tokens': 44,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 4300300729989197642,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242908855609000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242906653730000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.operation.name': 'call_llm',
          'gen_ai.output': '''
            {
              "steps": [
                {
                  "number": 1,
                  "description": "Found the current time in the America/New_York timezone."
                },
                {
                  "number": 2,
                  "description": "Extracted the year from the current time."
                },
                {
                  "number": 3,
                  "description": "Wrote the year to a file."
                }
              ]
            }
          ''',
          'gen_ai.output.type': 'text',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
          'gen_ai.usage.input_cost': 5.4199999999999996e-05,
          'gen_ai.usage.input_tokens': 542,
          'gen_ai.usage.output_cost': 2.6099999999999997e-05,
          'gen_ai.usage.output_tokens': 87,
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 5370167228931614591,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242910952911000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'call_llm mistral/mistral-small-latest',
        'parent': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242908856144000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.OK: 'ok'>,
        }),
      }),
      dict({
        'attributes': dict({
          'gen_ai.agent.description': 'No description.',
          'gen_ai.agent.name': 'any_agent',
          'gen_ai.operation.name': 'invoke_agent',
          'gen_ai.request.model': 'mistral/mistral-small-latest',
        }),
        'context': dict({
          'is_remote': False,
          'span_id': 13765658053726845749,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': 124983472727402140335516614620132174223,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'end_time': 1752242910952990000,
        'events': list([
        ]),
        'kind': <SpanKind.INTERNAL: 'internal'>,
        'links': list([
        ]),
        'name': 'invoke_agent [any_agent]',
        'parent': dict({
          'is_remote': False,
          'span_id': None,
          'trace_flags': dict({
            'value': 0,
          }),
          'trace_id': None,
          'trace_state': dict({
            'entries': dict({
            }),
          }),
        }),
        'resource': dict({
          'attributes': dict({
            'service.name': 'unknown_service',
            'telemetry.sdk.language': 'python',
            'telemetry.sdk.name': 'opentelemetry',
            'telemetry.sdk.version': '1.35.0',
          }),
          'schema_url': '',
        }),
        'start_time': 1752242904920048000,
        'status': dict({
          'description': None,
          'status_code': <StatusCode.UNSET: 'unset'>,
        }),
      }),
    ]),
  })
# ---
