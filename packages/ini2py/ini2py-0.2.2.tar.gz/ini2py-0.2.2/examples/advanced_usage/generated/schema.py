# THIS FILE IS AUTO-GENERATED BY aiconfig-generator.
# DO NOT EDIT THIS FILE MANUALLY.

import __init__
from configparser import SectionProxy
import os

class ConfigSchema:
    """
    配置架構類，用於處理配置文件的特定區段。

    提供方法來返回屬性名稱和值，並支援敏感信息的遮罩處理。
    """
    def __init__(self, config_section: SectionProxy) -> None:
        """
        初始化 ConfigSchema 實例。

        參數：
            config_section (SectionProxy): 配置文件中的特定區段。
        """
        self._config_section = config_section
        
    def return_properties(self, return_type="list", mask_sensitive=True):
        """
        返回所有 @property 方法的名稱和對應的值。

        參數：
            return_type (str): 指定返回格式，'list' 返回列表，'dict' 返回字典。
            mask_sensitive (bool): 是否對敏感信息進行隱藏處理。

        返回：
            list 或 dict: 包含 @property 名稱和值的列表或字典。
        """
        if return_type == "dict":
            payload = {}
        elif return_type == "list":
            payload = []
        else:
            raise ValueError("Invalid return_type. Must be 'list' or 'dict'.")

        sensitive_keywords = [
            "password", "pwd", "api_token", "appkey", "secret", "key",
        ]

        def mask_value(value):
            """
            對敏感值進行遮罩處理。

            參數：
                value: 要遮罩的值。

            返回：
                str: 遮罩後的值。
            """
            value_str = str(value)
            if len(value_str) > 4:
                return value_str[:2] + "*" * (len(value_str) - 4) + value_str[-2:]
            return value

        for attr_name in dir(self):
            attr = getattr(self.__class__, attr_name, None)
            if isinstance(attr, property):
                try:
                    value = getattr(self, attr_name)
                    if mask_sensitive and any(
                        keyword.lower() in attr_name.lower()
                        for keyword in sensitive_keywords
                    ):
                        value = mask_value(value)
                except Exception as e:
                    # 替換 f-string 為字串連接
                    value = "<Error: " + str(e) + ">"

                if return_type == "dict":
                    payload[attr_name] = value
                elif return_type == "list":
                    # 替換 f-string 為字串連接
                    payload.append(str(attr_name) + ": " + str(value))

        return payload


# ---------- GENERATED CLASSES START ----------
class AppServerSchema(ConfigSchema):
    """[app_server]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def name(self):
        return self._config_section.get('name')
    @property
    def version(self):
        return self._config_section.get('version')
    @property
    def environment(self):
        return self._config_section.get('environment')
    @property
    def bind_host(self):
        return self._config_section.get('bind_host')
    @property
    def bind_port(self):
        return self._config_section.getint('bind_port')
    @property
    def worker_processes(self):
        return self._config_section.getint('worker_processes')
    @property
    def worker_connections(self):
        return self._config_section.getint('worker_connections')
    @property
    def keepalive_timeout(self):
        return self._config_section.getfloat('keepalive_timeout')
    @property
    def max_request_size(self):
        return self._config_section.getint('max_request_size')
    @property
    def enable_compression(self):
        return self._config_section.getboolean('enable_compression')
    @property
    def compression_level(self):
        return self._config_section.getint('compression_level')

class SecuritySchema(ConfigSchema):
    """[security]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def secret_key(self):
        return self._config_section.get('secret_key')
    @property
    def jwt_secret(self):
        return self._config_section.get('jwt_secret')
    @property
    def jwt_expiry_hours(self):
        return self._config_section.getint('jwt_expiry_hours')
    @property
    def enable_csrf(self):
        return self._config_section.getboolean('enable_csrf')
    @property
    def csrf_token_timeout(self):
        return self._config_section.getint('csrf_token_timeout')
    @property
    def session_timeout(self):
        return self._config_section.getint('session_timeout')
    @property
    def password_min_length(self):
        return self._config_section.getint('password_min_length')
    @property
    def password_require_special(self):
        return self._config_section.getboolean('password_require_special')
    @property
    def enable_rate_limiting(self):
        return self._config_section.getboolean('enable_rate_limiting')
    @property
    def rate_limit_per_minute(self):
        return self._config_section.getint('rate_limit_per_minute')

class DatabasePrimarySchema(ConfigSchema):
    """[database_primary]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def engine(self):
        return self._config_section.get('engine')
    @property
    def host(self):
        return self._config_section.get('host')
    @property
    def port(self):
        return self._config_section.getint('port')
    @property
    def database(self):
        return self._config_section.get('database')
    @property
    def username(self):
        return self._config_section.get('username')
    @property
    def password(self):
        return self._config_section.get('password')
    @property
    def connection_pool_size(self):
        return self._config_section.getint('connection_pool_size')
    @property
    def connection_pool_max_overflow(self):
        return self._config_section.getint('connection_pool_max_overflow')
    @property
    def connection_timeout(self):
        return self._config_section.getint('connection_timeout')
    @property
    def query_timeout(self):
        return self._config_section.getint('query_timeout')
    @property
    def enable_ssl(self):
        return self._config_section.getboolean('enable_ssl')
    @property
    def ssl_cert_path(self):
        return self._config_section.get('ssl_cert_path')
    @property
    def ssl_key_path(self):
        return self._config_section.get('ssl_key_path')
    @property
    def ssl_ca_path(self):
        return self._config_section.get('ssl_ca_path')

class DatabaseReplicaSchema(ConfigSchema):
    """[database_replica]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def engine(self):
        return self._config_section.get('engine')
    @property
    def host(self):
        return self._config_section.get('host')
    @property
    def port(self):
        return self._config_section.getint('port')
    @property
    def database(self):
        return self._config_section.get('database')
    @property
    def username(self):
        return self._config_section.get('username')
    @property
    def password(self):
        return self._config_section.get('password')
    @property
    def connection_pool_size(self):
        return self._config_section.getint('connection_pool_size')
    @property
    def connection_pool_max_overflow(self):
        return self._config_section.getint('connection_pool_max_overflow')
    @property
    def connection_timeout(self):
        return self._config_section.getint('connection_timeout')
    @property
    def query_timeout(self):
        return self._config_section.getint('query_timeout')
    @property
    def enable_ssl(self):
        return self._config_section.getboolean('enable_ssl')

class RedisClusterSchema(ConfigSchema):
    """[redis_cluster]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def nodes(self):
        return self._config_section.get('nodes')
    @property
    def password(self):
        return self._config_section.get('password')
    @property
    def database(self):
        return self._config_section.getint('database')
    @property
    def connection_timeout(self):
        return self._config_section.getint('connection_timeout')
    @property
    def socket_timeout(self):
        return self._config_section.getint('socket_timeout')
    @property
    def max_connections_per_node(self):
        return self._config_section.getint('max_connections_per_node')
    @property
    def health_check_interval(self):
        return self._config_section.getint('health_check_interval')
    @property
    def enable_cluster_mode(self):
        return self._config_section.getboolean('enable_cluster_mode')
    @property
    def retry_on_timeout(self):
        return self._config_section.getboolean('retry_on_timeout')
    @property
    def max_retries(self):
        return self._config_section.getint('max_retries')

class ElasticsearchSchema(ConfigSchema):
    """[elasticsearch]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def hosts(self):
        return self._config_section.get('hosts')
    @property
    def username(self):
        return self._config_section.get('username')
    @property
    def password(self):
        return self._config_section.get('password')
    @property
    def index_prefix(self):
        return self._config_section.get('index_prefix')
    @property
    def default_index(self):
        return self._config_section.get('default_index')
    @property
    def request_timeout(self):
        return self._config_section.getint('request_timeout')
    @property
    def max_retries(self):
        return self._config_section.getint('max_retries')
    @property
    def retry_on_timeout(self):
        return self._config_section.getboolean('retry_on_timeout')
    @property
    def enable_sniffing(self):
        return self._config_section.getboolean('enable_sniffing')
    @property
    def sniff_on_start(self):
        return self._config_section.getboolean('sniff_on_start')
    @property
    def sniff_on_connection_fail(self):
        return self._config_section.getboolean('sniff_on_connection_fail')
    @property
    def sniff_timeout(self):
        return self._config_section.getint('sniff_timeout')

class MessageQueueSchema(ConfigSchema):
    """[message_queue]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def host(self):
        return self._config_section.get('host')
    @property
    def port(self):
        return self._config_section.getint('port')
    @property
    def virtual_host(self):
        return self._config_section.get('virtual_host')
    @property
    def username(self):
        return self._config_section.get('username')
    @property
    def password(self):
        return self._config_section.get('password')
    @property
    def connection_timeout(self):
        return self._config_section.getint('connection_timeout')
    @property
    def heartbeat(self):
        return self._config_section.getint('heartbeat')
    @property
    def blocked_connection_timeout(self):
        return self._config_section.getint('blocked_connection_timeout')
    @property
    def enable_ssl(self):
        return self._config_section.getboolean('enable_ssl')
    @property
    def ssl_cert_path(self):
        return self._config_section.get('ssl_cert_path')
    @property
    def ssl_key_path(self):
        return self._config_section.get('ssl_key_path')

class MonitoringSchema(ConfigSchema):
    """[monitoring]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def enable_metrics(self):
        return self._config_section.getboolean('enable_metrics')
    @property
    def metrics_port(self):
        return self._config_section.getint('metrics_port')
    @property
    def metrics_path(self):
        return self._config_section.get('metrics_path')
    @property
    def enable_health_check(self):
        return self._config_section.getboolean('enable_health_check')
    @property
    def health_check_path(self):
        return self._config_section.get('health_check_path')
    @property
    def enable_tracing(self):
        return self._config_section.getboolean('enable_tracing')
    @property
    def tracing_endpoint(self):
        return self._config_section.get('tracing_endpoint')
    @property
    def tracing_sample_rate(self):
        return self._config_section.getfloat('tracing_sample_rate')
    @property
    def log_level(self):
        return self._config_section.get('log_level')
    @property
    def log_format(self):
        return self._config_section.get('log_format')
    @property
    def enable_structured_logging(self):
        return self._config_section.getboolean('enable_structured_logging')

class FeatureFlagsSchema(ConfigSchema):
    """[feature_flags]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def enable_new_ui(self):
        return self._config_section.getboolean('enable_new_ui')
    @property
    def enable_advanced_search(self):
        return self._config_section.getboolean('enable_advanced_search')
    @property
    def enable_beta_features(self):
        return self._config_section.getboolean('enable_beta_features')
    @property
    def new_algorithm_rollout_percentage(self):
        return self._config_section.getint('new_algorithm_rollout_percentage')
    @property
    def enable_experimental_caching(self):
        return self._config_section.getboolean('enable_experimental_caching')
    @property
    def cache_ttl_seconds(self):
        return self._config_section.getint('cache_ttl_seconds')
    @property
    def enable_async_processing(self):
        return self._config_section.getboolean('enable_async_processing')
    @property
    def max_async_workers(self):
        return self._config_section.getint('max_async_workers')

class ExternalApisSchema(ConfigSchema):
    """[external_apis]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def payment_gateway_url(self):
        return self._config_section.get('payment_gateway_url')
    @property
    def payment_gateway_key(self):
        return self._config_section.get('payment_gateway_key')
    @property
    def analytics_api_url(self):
        return self._config_section.get('analytics_api_url')
    @property
    def analytics_api_key(self):
        return self._config_section.get('analytics_api_key')
    @property
    def email_service_url(self):
        return self._config_section.get('email_service_url')
    @property
    def email_service_key(self):
        return self._config_section.get('email_service_key')
    @property
    def sms_service_url(self):
        return self._config_section.get('sms_service_url')
    @property
    def sms_service_token(self):
        return self._config_section.get('sms_service_token')
    @property
    def default_timeout(self):
        return self._config_section.getint('default_timeout')
    @property
    def max_retries(self):
        return self._config_section.getint('max_retries')
    @property
    def enable_circuit_breaker(self):
        return self._config_section.getboolean('enable_circuit_breaker')

class BackupStorageSchema(ConfigSchema):
    """[backup_storage]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def storage_type(self):
        return self._config_section.get('storage_type')
    @property
    def s3_bucket(self):
        return self._config_section.get('s3_bucket')
    @property
    def s3_region(self):
        return self._config_section.get('s3_region')
    @property
    def s3_access_key(self):
        return self._config_section.get('s3_access_key')
    @property
    def s3_secret_key(self):
        return self._config_section.get('s3_secret_key')
    @property
    def s3_endpoint_url(self):
        return self._config_section.get('s3_endpoint_url')
    @property
    def backup_retention_days(self):
        return self._config_section.getint('backup_retention_days')
    @property
    def enable_encryption(self):
        return self._config_section.getboolean('enable_encryption')
    @property
    def encryption_key(self):
        return self._config_section.get('encryption_key')
    @property
    def compression_enabled(self):
        return self._config_section.getboolean('compression_enabled')
    @property
    def compression_level(self):
        return self._config_section.getint('compression_level')

class PerformanceSchema(ConfigSchema):
    """[performance]"""
    def __init__(self, config_section: SectionProxy) -> None:
        super().__init__(config_section)

    @property
    def cache_enabled(self):
        return self._config_section.getboolean('cache_enabled')
    @property
    def cache_ttl(self):
        return self._config_section.getint('cache_ttl')
    @property
    def cache_max_size(self):
        return self._config_section.getint('cache_max_size')
    @property
    def enable_query_optimization(self):
        return self._config_section.getboolean('enable_query_optimization')
    @property
    def enable_connection_pooling(self):
        return self._config_section.getboolean('enable_connection_pooling')
    @property
    def max_concurrent_requests(self):
        return self._config_section.getint('max_concurrent_requests')
    @property
    def request_timeout(self):
        return self._config_section.getfloat('request_timeout')
    @property
    def enable_lazy_loading(self):
        return self._config_section.getboolean('enable_lazy_loading')
    @property
    def batch_size(self):
        return self._config_section.getint('batch_size')
    @property
    def pagination_default_size(self):
        return self._config_section.getint('pagination_default_size')
    @property
    def pagination_max_size(self):
        return self._config_section.getint('pagination_max_size')
# ---------- GENERATED CLASSES END ----------