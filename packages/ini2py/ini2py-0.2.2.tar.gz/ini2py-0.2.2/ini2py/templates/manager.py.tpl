# THIS FILE IS AUTO-GENERATED BY ini2py.
# DO NOT EDIT THIS FILE MANUALLY.

import time
import configparser
import os
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from threading import Thread
from .schema import (
{{SCHEMA_IMPORTS}}
)


def find_config_path(filename="config.ini", max_depth=5):
    """
    從當前工作目錄開始向上查找配置文件。
    會依次尋找 'filename', 'config/filename', 'conf/filename'。

    參數：
        filename (str): 配置文件名稱，預設為 'config.ini'。
        max_depth (int): 最大向上查找的目錄層數，預設為 5。

    返回：
        str 或 None: 找到的配置文件路徑，若未找到則返回 None。
    """
    path = "."
    for _ in range(max_depth):
        abs_path = os.path.abspath(path)
        
        # 檢查幾種常見的路徑模式
        check_paths = [
            os.path.join(abs_path, filename),
            os.path.join(abs_path, 'config', filename),
            os.path.join(abs_path, 'conf', filename),
        ]
        
        for p in check_paths:
            if os.path.exists(p):
                return p
        
        # 如果找不到，就到上一層目錄
        if os.path.dirname(abs_path) == abs_path: # 到達根目錄 (e.g., C:\ 或 /)
            break
        path = os.path.join(path, "..")
        
    return None


class ConfigFileHandler(FileSystemEventHandler):
    """
    文件系統事件處理器，用於監控配置文件的變更。

    當監控的配置文件發生變更時，觸發重新加載配置的操作。
    """
    def __init__(self, config_manager):
        """
        初始化事件處理器。

        參數：
            config_manager (ConfigManager): 配置管理器實例。
        """
        self.config_manager = config_manager
        self.last_modified_time = 0

    def on_modified(self, event):
        """
        當監控的文件被修改時觸發。

        參數：
            event: 文件系統事件對象。
        """
        if os.path.normpath(event.src_path) == os.path.normpath(self.config_manager.config_path):
            current_time = time.time()
            if current_time - self.last_modified_time > 1:
                self.last_modified_time = current_time
                print("Config file " + str(event.src_path) + " changed, reloading values...")
                self.config_manager.reload_config()


class ConfigManager(object):
    """
    配置管理器，負責加載、管理和監控配置文件。

    使用單例模式確保全局只有一個配置管理器實例。
    """
    _instance = None
    _initialized = False

    def __new__(cls, *args, **kwargs): 
        """
        創建或返回單例實例。
        """
        if cls._instance is None: 
            cls._instance = super().__new__(cls) 
        return cls._instance

    def __init__(self, config_path: str = None):
        """
        初始化配置管理器。

        參數：
            config_path (str): 配置文件的路徑，若未提供則自動查找。
        """
        if self._initialized:
            # 如果已經初始化，並且傳入了新的路徑，這可能是一個錯誤，發出警告。
            if config_path and config_path != self.config_path:
                print(f"Warning: ConfigManager already initialized with path '{self.config_path}'. Ignoring new path '{config_path}'.")
            return
        
        if config_path:
            # 1. 優先使用使用者明確提供的路徑
            self.config_path = config_path
        else:
            # 2. 如果未提供，則自動向上查找
            self.config_path = find_config_path()

        if not self.config_path or not os.path.exists(self.config_path):
            raise FileNotFoundError(
                "Could not find config.ini. Please provide the path explicitly "
                "to ConfigManager(config_path='/path/to/your/config.ini') "
                "or place it in the project root or a 'config/' subdirectory."
            )
        
        print(f"ConfigManager is using configuration file: {self.config_path}")

        # 修復：使用 RawConfigParser 來避免插值錯誤
        self._config = configparser.RawConfigParser()
        self._load_config()

        self._start_watchdog()
        self._initialized = True

    def _load_config(self):
        """
        加載配置文件內容。
        """
        self._config.read(self.config_path, encoding='utf-8')
{{MANAGER_PROPERTIES}}

    def reload_config(self):
        """
        當配置文件變更時重新加載配置值。
        """
        try:
            # 修復：使用 RawConfigParser 來避免插值錯誤
            new_config = configparser.RawConfigParser()
            new_config.read(self.config_path, encoding='utf-8')
            self._config = new_config
            self._load_config() 
            print("Configuration values reloaded successfully.")
        except Exception as e:
            print("Error reloading configuration: " + str(e))

    def _start_watchdog(self):
        """
        啟動 Watchdog 觀察者以監控配置文件的變更。
        """
        # 檢測 CI 環境，如果在 CI 中則停用 watchdog
        if os.environ.get("CI") == "true" or os.environ.get("GITHUB_ACTIONS") == "true":
            print("Running in CI environment. Watchdog disabled.")
            return
            
        event_handler = ConfigFileHandler(self)
        observer = Observer()
        config_dir = os.path.dirname(self.config_path)
        if not os.path.isdir(config_dir):
            print("Warning: Config directory '" + str(config_dir) + "' does not exist. Watchdog not started.")
            return

        observer.schedule(event_handler, config_dir, recursive=False)
        observer_thread = Thread(target=observer.start, daemon=True)
        observer_thread.start()
        print("Started watchdog for config file changes at '" + str(self.config_path) + "'.")