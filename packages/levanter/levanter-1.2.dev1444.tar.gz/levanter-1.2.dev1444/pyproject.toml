[build-system]
requires = ["uv_build>=0.7.19,<0.8.0"]
build-backend = "uv_build"

[project]
name = "levanter"
version = "1.2.dev1444"
authors = [
    { name = "David Hall", email = "dlwh@cs.stanford.edu" },
    { name = "Jason Wang", email = "jsywang@cs.stanford.edu" },
    { name = "Ahmed Ahmed" },
    { name = "Ivan Zhou", email = "ivanz@stanford.edu" },
    { name = "Will Held" },
    { name = "Virginia Adams" },
]
description = "Scalable Training for Foundation Models with Named Tensors and JAX"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
]
dependencies = [
    "haliax>=1.4.dev351",
    "equinox>=0.11.7,!=0.12.0",
    "jaxtyping>=0.2.34",
    "tokenizers>=0.15.2",
    "transformers>=4.49.0,<5.0",
    "optax>=0.1.9",
    "wandb>=0.17.8",
    "draccus>=0.11.5",
    "pyarrow>=11.0.0",
    "zstandard>=0.18.0",
    "datasets>=3.1.0,<5.0",
    "gcsfs>=2024.2,<2026",
    "braceexpand>=0.1.7",
    "jmp>=0.0.3",
    "fsspec[http]>=2024.2,<2026",
    "tensorstore>=0.1.73",
    "pytimeparse>=1.1.8",
    "humanfriendly==10.0",
    "safetensors[numpy]>=0.4.2,<0.6.0",
    "matplotlib>=3.7.0",
    "tblib>=1.7.0,<4.0.0",
    "dataclasses-json~=0.6.4",
    "ray[default]>=2.34.0",
    "pydantic<3",
    "filelock~=3.13",
    "async-lru~=2.0",
    "tqdm-loggable>=0.2",
    "deepdiff",
    "lenses",
    "jinja2"   # needed for apply_chat_template
    #    "lm-eval==0.4.2",
    #    "lm-eval @ git+https://github.com/dlwh/lm-evaluation-harness.git@no_torch"
]

[project.urls]
"Homepage" = "https://github.com/stanford-crfm/levanter"
"Bug Tracker" = "https://github.com/stanford-crfm/levanter/issues"

[tool.black]
line-length = 119
target-version = ["py310"]
preview = true

[tool.isort]
profile = "black"
multi_line_output = 3
lines_after_imports = 2
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 119
src_paths = ["src", "tests"]
known_haliax = ["haliax"]
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "HALIAX",
    "FIRSTPARTY",
    "LOCALFOLDER",
]

[tool.mypy]
python_version = "1.2.dev1444"
mypy_path = ["src"]

[tool.mypy-haliax.core]
ignore_missing_imports = true

# [flake8]
#exclude = .git
#max-line-length = 120
#ignore = E203, E501, W503, W605, F821, E266, E731
#per-file-ignores =
#    */__init__.py: F401
#    examples/*.py: E402

[tool.ruff]
line-length = 119
target-version = "1.2.dev1444"
# Note: Grow more strict over time!
extend-exclude = ["scripts/"]

[tool.ruff.lint]
ignore = [ "E203", "E501", "W605", "F821", "E266", "E731", "E741" ]

[tool.pytest.ini_options]
pythonpath = ["src", "tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "entry: marks tests as entry point tests (deselect with '-m \"not entry\"')",
    "ray: marks tests that require Ray (deselect with '-m \"not ray\"')",
]
asyncio_default_fixture_loop_scope = "function"

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-forked",
    "pytest-asyncio",
    "soundfile",
    "librosa",
    "tensorboardX>=2.6",
]
gpu = [
    "jax[cuda12]>=0.5",
]
tpu = [
    "jax[tpu]>=0.5",
]

dev = [
    "pytest",
    "pytest-forked",
    "pytest-asyncio",
    "soundfile",
    "librosa",
    "tensorboardX>=2.6",
    "pre-commit",
]

# we only use pytorch for more thorough testing, so we don't require it by default
torch_test = [
    "torch>=2.7.0",
    "peft>=0.12.0",
]


[tool.uv]
conflicts = [
    [
        { extra = "gpu" },
        { extra = "tpu" },
    ],
]  # Never solve for both GPU and TPU at the same time
