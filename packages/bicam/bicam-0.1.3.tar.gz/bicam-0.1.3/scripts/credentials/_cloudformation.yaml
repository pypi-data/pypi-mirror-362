AWSTemplateFormatVersion: '2010-09-09'
Description: 'BICAM Credential Server Infrastructure'

Parameters:
  SecretKey:
    Type: String
    Description: Secret key for package token validation
    NoEcho: true

  RoleArn:
    Type: String
    Description: ARN of the IAM role to assume for S3 access
    Default: 'arn:aws:iam::123456789:role/BICAMReadOnlyRole'

  BucketName:
    Type: String
    Description: S3 bucket name for BICAM data
    Default: 'bicam-datasets'

Resources:
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: BICAMCredentialServerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: STSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref RoleArn

  # Lambda function
  CredentialServerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BICAMCredentialServer
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import hashlib
          import os
          from datetime import datetime
          from typing import Dict, Any

          def lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
              secret_key = os.environ.get('BICAM_SECRET_KEY')
              role_arn = os.environ.get('BICAM_ROLE_ARN')
              bucket_name = os.environ.get('BICAM_BUCKET_NAME')

              if not secret_key:
                  return {'statusCode': 500, 'body': json.dumps({'error': 'Server configuration error'})}

              # Parse request body from API Gateway
              try:
                  if 'body' in event and event['body']:
                      request_data = json.loads(event['body'])
                  else:
                      request_data = event
              except json.JSONDecodeError:
                  return {'statusCode': 400, 'body': json.dumps({'error': 'Invalid JSON in request body'})}

              package_token = request_data.get('package_token')
              package_version = request_data.get('version')
              user_agent = request_data.get('user_agent', 'unknown')

              if not package_token or not package_version:
                  return {'statusCode': 400, 'body': json.dumps({'error': 'Missing required parameters'})}

              expected_token = hashlib.sha256(f"{package_version}-{secret_key}".encode()).hexdigest()

              if package_token != expected_token:
                  return {'statusCode': 403, 'body': json.dumps({'error': 'Invalid package token'})}

              try:
                  sts = boto3.client('sts')
                  assumed_role = sts.assume_role(
                      RoleArn=role_arn,
                      RoleSessionName=f'bicam-{package_version}-{hashlib.md5(user_agent.encode()).hexdigest()[:8]}',
                      DurationSeconds=3600,
                      Policy=json.dumps({
                          "Version": "2012-10-17",
                          "Statement": [{
                              "Effect": "Allow",
                              "Action": ["s3:GetObject", "s3:ListBucket"],
                              "Resource": [f"arn:aws:s3:::{bucket_name}", f"arn:aws:s3:::{bucket_name}/*"]
                          }]
                      })
                  )

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type',
                          'Access-Control-Allow-Methods': 'POST, OPTIONS'
                      },
                      'body': json.dumps({
                          'credentials': {
                              'access_key': assumed_role['Credentials']['AccessKeyId'],
                              'secret_key': assumed_role['Credentials']['SecretAccessKey'],
                              'session_token': assumed_role['Credentials']['SessionToken'],
                              'expiration': assumed_role['Credentials']['Expiration'].isoformat()
                          },
                          'bucket': bucket_name,
                          'region': 'us-east-1'
                      })
                  }
              except Exception as e:
                  print(f"Error generating credentials: {str(e)}")
                  return {'statusCode': 500, 'body': json.dumps({'error': f'Failed to generate credentials: {str(e)}'})}
      Environment:
        Variables:
          BICAM_SECRET_KEY: !Ref SecretKey
          BICAM_ROLE_ARN: !Ref RoleArn
          BICAM_BUCKET_NAME: !Ref BucketName
      Timeout: 30
      MemorySize: 128

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BICAMCredentialAPI
      Description: API Gateway for BICAM credential server

  # API Gateway Resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: get-credentials

  # API Gateway Method
  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CredentialServerFunction.Arn}/invocations

  # Lambda permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CredentialServerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/get-credentials

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  ApiUrl:
    Description: URL of the credential server API
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/get-credentials
    Export:
      Name: BICAMCredentialServerURL

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt CredentialServerFunction.Arn
    Export:
      Name: BICAMCredentialServerLambdaArn
