[build-system]
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "spatiomic"
description = "A python toolbox for spatial omics analysis."
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [{ name = "Malte Kuehl", email = "malte.kuehl@clin.au.dk" }]
readme = { file = "README.md", content-type = "text/markdown" }
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Natural Language :: English",
    "Typing :: Typed",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dynamic = ["version"]
dependencies = [
    "adjustText",
    "anndata",
    "colorcet",
    "esda>=2.7.0",
    "joblib",
    "lazy_loader",
    "matplotlib",
    "networkx",
    "numpy>=2",
    "pandas>=2",
    "pysal",
    "python-igraph",
    "scikit-image",
    "scikit-learn",
    "scipy>=1.15.0",
    "seaborn",
    "statsmodels",
    "umap-learn",
    "xpysom==1.0.7",
]

[project.optional-dependencies]
dev = [
    "aicspylibczi",
    "certifi",
    "coverage",
    "flit",
    "furo",
    "ipykernel",
    "ipywidgets",
    "jupyter-client",
    "jupyter-core",
    "mypy==1.17.0",
    "myst-parser",
    "nbsphinx",
    "opencv-python-headless",
    "openpyxl",
    "pandas-stubs",
    "pandoc",
    "pre-commit",
    "pygments",
    "pytest",
    "pytest-datafiles",
    "readlif",
    "ruff==0.9.10",
    "session-info2",
    "sphinx",
    "sphinx-autoapi",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-mermaid",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-rtd-theme",
    "virtualenv",
]

[project.urls]
Home = "https://github.com/complextissue/spatiomic"
Source = "https://github.com/complextissue/spatiomic"
Documentation = "https://complextissue.github.io/spatiomic/"

[tool.ruff]
include = [
    "pyproject.toml",
    "docs/**/*.py",
    "docs/**/*.ipynb",
    "spatiomic/**/*.py",
    "test/**/*.py",
]
cache-dir = "~/.cache/ruff"
exclude = [".venv"]
line-length = 120

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C4",
    "D",
    "I",
    "E4",
    "E7",
    "E9",
    "F",
    "FIX",
    "N",
    "NPY",
    "PD",
    "PERF",
    "RUF",
    "S",
    "SIM",
    "TID",
    "W",
]
ignore = [
    "C901",
    "D417",
    "E402",
    "E203",
    "E731",
    "F841",
    "F811",
    "N811",
    "N813",
    "NPY002",
    "S301",
    "S403",
    "S101",
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
pydocstyle.convention = "google"
mccabe.max-complexity = 7
isort.case-sensitive = true
isort.order-by-type = true

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
plugins = ["numpy.typing.mypy_plugin"]
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
disallow_untyped_defs = true
python_version = "3.12"
ignore_missing_imports = true
exclude = ["^docs/.*", "^test/.*"]

[tool.pytest.ini_options]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "WARNING"
log_cli = true

markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "cpu: marks tests that explicitly run the CPU, not the GPU version (deselect with '-m \"not cpu\"')",
    "no_github_ci: marks tests that should not be run on GitHub CI (deselect with '-m \"not no_github_ci\"')",
    "gpu: marks tests that require a GPU (deselect with '-m \"not gpu\"')",
    "datafiles: takes files provided by pytest-datafiles'",
]

[tool.coverage.run]
source = ["spatiomic"]
omit = ["*/test/*", "*/plot/*"]

[tool.coverage.report]
# don't complain if non-runnable code isn't run:
exclude_lines = [
    "if 0:",
    "if __name__ == __main__:",
    "raise",
    "except",
    "@abc.abstractmethod",
    "def __repr__",
    "def __str__",
    "if TYPE_CHECKING:",
    # exclude GPU-only parts
    "if use_gpu:",
    "if self.use_gpu:",
    "if self.cuml:",
    "if cuml",
    "elif cuml:",
]
ignore_errors = true

[tool.coverage.html]
directory = "docs/coverage_report"
