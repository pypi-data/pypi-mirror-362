# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SMSSecretResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'namespace': 'str',
        'key': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'updated_at': 'datetime',
        'updated_by': 'str',
        'credential_type': 'CredentialTypes',
        'credential_provider': 'CredentialProviders'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'key': 'key',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'credential_type': 'credential_type',
        'credential_provider': 'credential_provider'
    }

    def __init__(self, id=None, namespace=None, key=None, created_at=None, created_by=None, updated_at=None, updated_by=None, credential_type=None, credential_provider=None, local_vars_configuration=None):  # noqa: E501
        """SMSSecretResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._namespace = None
        self._key = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self._credential_type = None
        self._credential_provider = None
        self.discriminator = None

        self.id = id
        self.namespace = namespace
        self.key = key
        self.created_at = created_at
        self.created_by = created_by
        self.updated_at = updated_at
        self.updated_by = updated_by
        self.credential_type = credential_type
        if credential_provider is not None:
            self.credential_provider = credential_provider

    @property
    def id(self):
        """Gets the id of this SMSSecretResponse.  # noqa: E501


        :return: The id of this SMSSecretResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SMSSecretResponse.


        :param id: The id of this SMSSecretResponse.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this SMSSecretResponse.  # noqa: E501


        :return: The namespace of this SMSSecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SMSSecretResponse.


        :param namespace: The namespace of this SMSSecretResponse.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def key(self):
        """Gets the key of this SMSSecretResponse.  # noqa: E501


        :return: The key of this SMSSecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SMSSecretResponse.


        :param key: The key of this SMSSecretResponse.  # noqa: E501
        :type key: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def created_at(self):
        """Gets the created_at of this SMSSecretResponse.  # noqa: E501


        :return: The created_at of this SMSSecretResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SMSSecretResponse.


        :param created_at: The created_at of this SMSSecretResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SMSSecretResponse.  # noqa: E501


        :return: The created_by of this SMSSecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SMSSecretResponse.


        :param created_by: The created_by of this SMSSecretResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this SMSSecretResponse.  # noqa: E501


        :return: The updated_at of this SMSSecretResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SMSSecretResponse.


        :param updated_at: The updated_at of this SMSSecretResponse.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this SMSSecretResponse.  # noqa: E501


        :return: The updated_by of this SMSSecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SMSSecretResponse.


        :param updated_by: The updated_by of this SMSSecretResponse.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def credential_type(self):
        """Gets the credential_type of this SMSSecretResponse.  # noqa: E501


        :return: The credential_type of this SMSSecretResponse.  # noqa: E501
        :rtype: CredentialTypes
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this SMSSecretResponse.


        :param credential_type: The credential_type of this SMSSecretResponse.  # noqa: E501
        :type credential_type: CredentialTypes
        """
        if self.local_vars_configuration.client_side_validation and credential_type is None:  # noqa: E501
            raise ValueError("Invalid value for `credential_type`, must not be `None`")  # noqa: E501

        self._credential_type = credential_type

    @property
    def credential_provider(self):
        """Gets the credential_provider of this SMSSecretResponse.  # noqa: E501


        :return: The credential_provider of this SMSSecretResponse.  # noqa: E501
        :rtype: CredentialProviders
        """
        return self._credential_provider

    @credential_provider.setter
    def credential_provider(self, credential_provider):
        """Sets the credential_provider of this SMSSecretResponse.


        :param credential_provider: The credential_provider of this SMSSecretResponse.  # noqa: E501
        :type credential_provider: CredentialProviders
        """

        self._credential_provider = credential_provider

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSSecretResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SMSSecretResponse):
            return True

        return self.to_dict() != other.to_dict()
