# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class AllStationGroupInfoResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'station_groups': 'list[StationGroup]',
        'display_location': 'str',
        'is_line': 'bool'
    }

    attribute_map = {
        'station_groups': 'station_groups',
        'display_location': 'display_location',
        'is_line': 'is_line'
    }

    def __init__(self, station_groups=None, display_location=None, is_line=None, local_vars_configuration=None):  # noqa: E501
        """AllStationGroupInfoResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._station_groups = None
        self._display_location = None
        self._is_line = None
        self.discriminator = None

        self.station_groups = station_groups
        self.display_location = display_location
        self.is_line = is_line

    @property
    def station_groups(self):
        """Gets the station_groups of this AllStationGroupInfoResp.  # noqa: E501


        :return: The station_groups of this AllStationGroupInfoResp.  # noqa: E501
        :rtype: list[StationGroup]
        """
        return self._station_groups

    @station_groups.setter
    def station_groups(self, station_groups):
        """Sets the station_groups of this AllStationGroupInfoResp.


        :param station_groups: The station_groups of this AllStationGroupInfoResp.  # noqa: E501
        :type station_groups: list[StationGroup]
        """
        if self.local_vars_configuration.client_side_validation and station_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `station_groups`, must not be `None`")  # noqa: E501

        self._station_groups = station_groups

    @property
    def display_location(self):
        """Gets the display_location of this AllStationGroupInfoResp.  # noqa: E501


        :return: The display_location of this AllStationGroupInfoResp.  # noqa: E501
        :rtype: str
        """
        return self._display_location

    @display_location.setter
    def display_location(self, display_location):
        """Sets the display_location of this AllStationGroupInfoResp.


        :param display_location: The display_location of this AllStationGroupInfoResp.  # noqa: E501
        :type display_location: str
        """
        if self.local_vars_configuration.client_side_validation and display_location is None:  # noqa: E501
            raise ValueError("Invalid value for `display_location`, must not be `None`")  # noqa: E501

        self._display_location = display_location

    @property
    def is_line(self):
        """Gets the is_line of this AllStationGroupInfoResp.  # noqa: E501


        :return: The is_line of this AllStationGroupInfoResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_line

    @is_line.setter
    def is_line(self, is_line):
        """Sets the is_line of this AllStationGroupInfoResp.


        :param is_line: The is_line of this AllStationGroupInfoResp.  # noqa: E501
        :type is_line: bool
        """
        if self.local_vars_configuration.client_side_validation and is_line is None:  # noqa: E501
            raise ValueError("Invalid value for `is_line`, must not be `None`")  # noqa: E501

        self._is_line = is_line

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllStationGroupInfoResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AllStationGroupInfoResp):
            return True

        return self.to_dict() != other.to_dict()
