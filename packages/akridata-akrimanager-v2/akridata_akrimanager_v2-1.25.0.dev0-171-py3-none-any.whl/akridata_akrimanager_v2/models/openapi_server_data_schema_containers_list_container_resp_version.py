# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersListContainerRespVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'creation_date': 'datetime',
        'has_autotier_policy': 'bool',
        'can_delete': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'creation_date': 'creation_date',
        'has_autotier_policy': 'has_autotier_policy',
        'can_delete': 'can_delete'
    }

    def __init__(self, version=None, creation_date=None, has_autotier_policy=None, can_delete=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersListContainerRespVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._creation_date = None
        self._has_autotier_policy = None
        self._can_delete = None
        self.discriminator = None

        self.version = version
        self.creation_date = creation_date
        self.has_autotier_policy = has_autotier_policy
        self.can_delete = can_delete

    @property
    def version(self):
        """Gets the version of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501


        :return: The version of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OpenapiServerDataSchemaContainersListContainerRespVersion.


        :param version: The version of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def creation_date(self):
        """Gets the creation_date of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501


        :return: The creation_date of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this OpenapiServerDataSchemaContainersListContainerRespVersion.


        :param creation_date: The creation_date of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :type creation_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def has_autotier_policy(self):
        """Gets the has_autotier_policy of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501


        :return: The has_autotier_policy of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :rtype: bool
        """
        return self._has_autotier_policy

    @has_autotier_policy.setter
    def has_autotier_policy(self, has_autotier_policy):
        """Sets the has_autotier_policy of this OpenapiServerDataSchemaContainersListContainerRespVersion.


        :param has_autotier_policy: The has_autotier_policy of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :type has_autotier_policy: bool
        """
        if self.local_vars_configuration.client_side_validation and has_autotier_policy is None:  # noqa: E501
            raise ValueError("Invalid value for `has_autotier_policy`, must not be `None`")  # noqa: E501

        self._has_autotier_policy = has_autotier_policy

    @property
    def can_delete(self):
        """Gets the can_delete of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501


        :return: The can_delete of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this OpenapiServerDataSchemaContainersListContainerRespVersion.


        :param can_delete: The can_delete of this OpenapiServerDataSchemaContainersListContainerRespVersion.  # noqa: E501
        :type can_delete: bool
        """
        if self.local_vars_configuration.client_side_validation and can_delete is None:  # noqa: E501
            raise ValueError("Invalid value for `can_delete`, must not be `None`")  # noqa: E501

        self._can_delete = can_delete

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersListContainerRespVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersListContainerRespVersion):
            return True

        return self.to_dict() != other.to_dict()
