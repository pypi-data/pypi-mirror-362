# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ExternalCatalogTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'columns': 'list[Columns]',
        'description': 'str',
        'primary_key': 'list[str]',
        'indices': 'list[str]',
        'visualizable': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'columns': 'columns',
        'description': 'description',
        'primary_key': 'primary_key',
        'indices': 'indices',
        'visualizable': 'visualizable'
    }

    def __init__(self, name=None, columns=None, description='', primary_key=[], indices=[], visualizable=None, local_vars_configuration=None):  # noqa: E501
        """ExternalCatalogTable - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._columns = None
        self._description = None
        self._primary_key = None
        self._indices = None
        self._visualizable = None
        self.discriminator = None

        self.name = name
        self.columns = columns
        if description is not None:
            self.description = description
        if primary_key is not None:
            self.primary_key = primary_key
        if indices is not None:
            self.indices = indices
        self.visualizable = visualizable

    @property
    def name(self):
        """Gets the name of this ExternalCatalogTable.  # noqa: E501


        :return: The name of this ExternalCatalogTable.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExternalCatalogTable.


        :param name: The name of this ExternalCatalogTable.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def columns(self):
        """Gets the columns of this ExternalCatalogTable.  # noqa: E501


        :return: The columns of this ExternalCatalogTable.  # noqa: E501
        :rtype: list[Columns]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ExternalCatalogTable.


        :param columns: The columns of this ExternalCatalogTable.  # noqa: E501
        :type columns: list[Columns]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def description(self):
        """Gets the description of this ExternalCatalogTable.  # noqa: E501


        :return: The description of this ExternalCatalogTable.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExternalCatalogTable.


        :param description: The description of this ExternalCatalogTable.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def primary_key(self):
        """Gets the primary_key of this ExternalCatalogTable.  # noqa: E501


        :return: The primary_key of this ExternalCatalogTable.  # noqa: E501
        :rtype: list[str]
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this ExternalCatalogTable.


        :param primary_key: The primary_key of this ExternalCatalogTable.  # noqa: E501
        :type primary_key: list[str]
        """

        self._primary_key = primary_key

    @property
    def indices(self):
        """Gets the indices of this ExternalCatalogTable.  # noqa: E501


        :return: The indices of this ExternalCatalogTable.  # noqa: E501
        :rtype: list[str]
        """
        return self._indices

    @indices.setter
    def indices(self, indices):
        """Sets the indices of this ExternalCatalogTable.


        :param indices: The indices of this ExternalCatalogTable.  # noqa: E501
        :type indices: list[str]
        """

        self._indices = indices

    @property
    def visualizable(self):
        """Gets the visualizable of this ExternalCatalogTable.  # noqa: E501


        :return: The visualizable of this ExternalCatalogTable.  # noqa: E501
        :rtype: bool
        """
        return self._visualizable

    @visualizable.setter
    def visualizable(self, visualizable):
        """Sets the visualizable of this ExternalCatalogTable.


        :param visualizable: The visualizable of this ExternalCatalogTable.  # noqa: E501
        :type visualizable: bool
        """
        if self.local_vars_configuration.client_side_validation and visualizable is None:  # noqa: E501
            raise ValueError("Invalid value for `visualizable`, must not be `None`")  # noqa: E501

        self._visualizable = visualizable

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalCatalogTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalCatalogTable):
            return True

        return self.to_dict() != other.to_dict()
