# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DataSetsItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'namespace': 'str',
        'name': 'str',
        'type': 'str',
        'data_type': 'str',
        'num_pipelines_attached': 'int',
        'creation_date': 'datetime',
        'is_enabled': 'bool',
        'latest_version': 'str',
        'versions': 'list[str]',
        'is_demo': 'bool',
        'creation_status': 'JobStatus',
        'update_available': 'bool',
        'files_count': 'int',
        'frames_count': 'int',
        'background_catalog_status': 'BCJobStatus',
        'local_container': 'bool',
        'schema_version': 'str',
        'container_uri': 'str',
        'input_sub_path': 'str',
        'dataset_base_url': 'str',
        'qms_metadata': 'DatasetQMSMetadata',
        'use_image_server': 'bool',
        'dataset_type': 'DatasetType',
        'default_ds_job_id': 'str',
        'is_default_ds_job_running': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'name': 'name',
        'type': 'type',
        'data_type': 'data_type',
        'num_pipelines_attached': 'num_pipelines_attached',
        'creation_date': 'creation_date',
        'is_enabled': 'is_enabled',
        'latest_version': 'latest_version',
        'versions': 'versions',
        'is_demo': 'is_demo',
        'creation_status': 'creation_status',
        'update_available': 'update_available',
        'files_count': 'files_count',
        'frames_count': 'frames_count',
        'background_catalog_status': 'background_catalog_status',
        'local_container': 'local_container',
        'schema_version': 'schema_version',
        'container_uri': 'container_uri',
        'input_sub_path': 'input_sub_path',
        'dataset_base_url': 'dataset_base_url',
        'qms_metadata': 'qms_metadata',
        'use_image_server': 'use_image_server',
        'dataset_type': 'dataset_type',
        'default_ds_job_id': 'default_ds_job_id',
        'is_default_ds_job_running': 'is_default_ds_job_running'
    }

    def __init__(self, id=None, namespace=None, name=None, type=None, data_type=None, num_pipelines_attached=None, creation_date=None, is_enabled=None, latest_version=None, versions=None, is_demo=False, creation_status=None, update_available=False, files_count=None, frames_count=None, background_catalog_status=None, local_container=False, schema_version=None, container_uri=None, input_sub_path=None, dataset_base_url=None, qms_metadata=None, use_image_server=None, dataset_type=None, default_ds_job_id=None, is_default_ds_job_running=False, local_vars_configuration=None):  # noqa: E501
        """DataSetsItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._namespace = None
        self._name = None
        self._type = None
        self._data_type = None
        self._num_pipelines_attached = None
        self._creation_date = None
        self._is_enabled = None
        self._latest_version = None
        self._versions = None
        self._is_demo = None
        self._creation_status = None
        self._update_available = None
        self._files_count = None
        self._frames_count = None
        self._background_catalog_status = None
        self._local_container = None
        self._schema_version = None
        self._container_uri = None
        self._input_sub_path = None
        self._dataset_base_url = None
        self._qms_metadata = None
        self._use_image_server = None
        self._dataset_type = None
        self._default_ds_job_id = None
        self._is_default_ds_job_running = None
        self.discriminator = None

        self.id = id
        self.namespace = namespace
        self.name = name
        self.type = type
        self.data_type = data_type
        self.num_pipelines_attached = num_pipelines_attached
        self.creation_date = creation_date
        self.is_enabled = is_enabled
        if latest_version is not None:
            self.latest_version = latest_version
        if versions is not None:
            self.versions = versions
        if is_demo is not None:
            self.is_demo = is_demo
        if creation_status is not None:
            self.creation_status = creation_status
        if update_available is not None:
            self.update_available = update_available
        if files_count is not None:
            self.files_count = files_count
        if frames_count is not None:
            self.frames_count = frames_count
        if background_catalog_status is not None:
            self.background_catalog_status = background_catalog_status
        if local_container is not None:
            self.local_container = local_container
        self.schema_version = schema_version
        self.container_uri = container_uri
        if input_sub_path is not None:
            self.input_sub_path = input_sub_path
        if dataset_base_url is not None:
            self.dataset_base_url = dataset_base_url
        if qms_metadata is not None:
            self.qms_metadata = qms_metadata
        self.use_image_server = use_image_server
        self.dataset_type = dataset_type
        if default_ds_job_id is not None:
            self.default_ds_job_id = default_ds_job_id
        if is_default_ds_job_running is not None:
            self.is_default_ds_job_running = is_default_ds_job_running

    @property
    def id(self):
        """Gets the id of this DataSetsItem.  # noqa: E501


        :return: The id of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSetsItem.


        :param id: The id of this DataSetsItem.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this DataSetsItem.  # noqa: E501


        :return: The namespace of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataSetsItem.


        :param namespace: The namespace of this DataSetsItem.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this DataSetsItem.  # noqa: E501


        :return: The name of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetsItem.


        :param name: The name of this DataSetsItem.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this DataSetsItem.  # noqa: E501


        :return: The type of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSetsItem.


        :param type: The type of this DataSetsItem.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def data_type(self):
        """Gets the data_type of this DataSetsItem.  # noqa: E501


        :return: The data_type of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataSetsItem.


        :param data_type: The data_type of this DataSetsItem.  # noqa: E501
        :type data_type: str
        """
        if self.local_vars_configuration.client_side_validation and data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def num_pipelines_attached(self):
        """Gets the num_pipelines_attached of this DataSetsItem.  # noqa: E501


        :return: The num_pipelines_attached of this DataSetsItem.  # noqa: E501
        :rtype: int
        """
        return self._num_pipelines_attached

    @num_pipelines_attached.setter
    def num_pipelines_attached(self, num_pipelines_attached):
        """Sets the num_pipelines_attached of this DataSetsItem.


        :param num_pipelines_attached: The num_pipelines_attached of this DataSetsItem.  # noqa: E501
        :type num_pipelines_attached: int
        """
        if self.local_vars_configuration.client_side_validation and num_pipelines_attached is None:  # noqa: E501
            raise ValueError("Invalid value for `num_pipelines_attached`, must not be `None`")  # noqa: E501

        self._num_pipelines_attached = num_pipelines_attached

    @property
    def creation_date(self):
        """Gets the creation_date of this DataSetsItem.  # noqa: E501


        :return: The creation_date of this DataSetsItem.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this DataSetsItem.


        :param creation_date: The creation_date of this DataSetsItem.  # noqa: E501
        :type creation_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DataSetsItem.  # noqa: E501


        :return: The is_enabled of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DataSetsItem.


        :param is_enabled: The is_enabled of this DataSetsItem.  # noqa: E501
        :type is_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and is_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    @property
    def latest_version(self):
        """Gets the latest_version of this DataSetsItem.  # noqa: E501


        :return: The latest_version of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this DataSetsItem.


        :param latest_version: The latest_version of this DataSetsItem.  # noqa: E501
        :type latest_version: str
        """

        self._latest_version = latest_version

    @property
    def versions(self):
        """Gets the versions of this DataSetsItem.  # noqa: E501


        :return: The versions of this DataSetsItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DataSetsItem.


        :param versions: The versions of this DataSetsItem.  # noqa: E501
        :type versions: list[str]
        """

        self._versions = versions

    @property
    def is_demo(self):
        """Gets the is_demo of this DataSetsItem.  # noqa: E501


        :return: The is_demo of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo

    @is_demo.setter
    def is_demo(self, is_demo):
        """Sets the is_demo of this DataSetsItem.


        :param is_demo: The is_demo of this DataSetsItem.  # noqa: E501
        :type is_demo: bool
        """

        self._is_demo = is_demo

    @property
    def creation_status(self):
        """Gets the creation_status of this DataSetsItem.  # noqa: E501


        :return: The creation_status of this DataSetsItem.  # noqa: E501
        :rtype: JobStatus
        """
        return self._creation_status

    @creation_status.setter
    def creation_status(self, creation_status):
        """Sets the creation_status of this DataSetsItem.


        :param creation_status: The creation_status of this DataSetsItem.  # noqa: E501
        :type creation_status: JobStatus
        """

        self._creation_status = creation_status

    @property
    def update_available(self):
        """Gets the update_available of this DataSetsItem.  # noqa: E501


        :return: The update_available of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._update_available

    @update_available.setter
    def update_available(self, update_available):
        """Sets the update_available of this DataSetsItem.


        :param update_available: The update_available of this DataSetsItem.  # noqa: E501
        :type update_available: bool
        """

        self._update_available = update_available

    @property
    def files_count(self):
        """Gets the files_count of this DataSetsItem.  # noqa: E501


        :return: The files_count of this DataSetsItem.  # noqa: E501
        :rtype: int
        """
        return self._files_count

    @files_count.setter
    def files_count(self, files_count):
        """Sets the files_count of this DataSetsItem.


        :param files_count: The files_count of this DataSetsItem.  # noqa: E501
        :type files_count: int
        """

        self._files_count = files_count

    @property
    def frames_count(self):
        """Gets the frames_count of this DataSetsItem.  # noqa: E501


        :return: The frames_count of this DataSetsItem.  # noqa: E501
        :rtype: int
        """
        return self._frames_count

    @frames_count.setter
    def frames_count(self, frames_count):
        """Sets the frames_count of this DataSetsItem.


        :param frames_count: The frames_count of this DataSetsItem.  # noqa: E501
        :type frames_count: int
        """

        self._frames_count = frames_count

    @property
    def background_catalog_status(self):
        """Gets the background_catalog_status of this DataSetsItem.  # noqa: E501


        :return: The background_catalog_status of this DataSetsItem.  # noqa: E501
        :rtype: BCJobStatus
        """
        return self._background_catalog_status

    @background_catalog_status.setter
    def background_catalog_status(self, background_catalog_status):
        """Sets the background_catalog_status of this DataSetsItem.


        :param background_catalog_status: The background_catalog_status of this DataSetsItem.  # noqa: E501
        :type background_catalog_status: BCJobStatus
        """

        self._background_catalog_status = background_catalog_status

    @property
    def local_container(self):
        """Gets the local_container of this DataSetsItem.  # noqa: E501


        :return: The local_container of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._local_container

    @local_container.setter
    def local_container(self, local_container):
        """Sets the local_container of this DataSetsItem.


        :param local_container: The local_container of this DataSetsItem.  # noqa: E501
        :type local_container: bool
        """

        self._local_container = local_container

    @property
    def schema_version(self):
        """Gets the schema_version of this DataSetsItem.  # noqa: E501


        :return: The schema_version of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this DataSetsItem.


        :param schema_version: The schema_version of this DataSetsItem.  # noqa: E501
        :type schema_version: str
        """
        if self.local_vars_configuration.client_side_validation and schema_version is None:  # noqa: E501
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501

        self._schema_version = schema_version

    @property
    def container_uri(self):
        """Gets the container_uri of this DataSetsItem.  # noqa: E501


        :return: The container_uri of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._container_uri

    @container_uri.setter
    def container_uri(self, container_uri):
        """Sets the container_uri of this DataSetsItem.


        :param container_uri: The container_uri of this DataSetsItem.  # noqa: E501
        :type container_uri: str
        """
        if self.local_vars_configuration.client_side_validation and container_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `container_uri`, must not be `None`")  # noqa: E501

        self._container_uri = container_uri

    @property
    def input_sub_path(self):
        """Gets the input_sub_path of this DataSetsItem.  # noqa: E501


        :return: The input_sub_path of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._input_sub_path

    @input_sub_path.setter
    def input_sub_path(self, input_sub_path):
        """Sets the input_sub_path of this DataSetsItem.


        :param input_sub_path: The input_sub_path of this DataSetsItem.  # noqa: E501
        :type input_sub_path: str
        """

        self._input_sub_path = input_sub_path

    @property
    def dataset_base_url(self):
        """Gets the dataset_base_url of this DataSetsItem.  # noqa: E501


        :return: The dataset_base_url of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._dataset_base_url

    @dataset_base_url.setter
    def dataset_base_url(self, dataset_base_url):
        """Sets the dataset_base_url of this DataSetsItem.


        :param dataset_base_url: The dataset_base_url of this DataSetsItem.  # noqa: E501
        :type dataset_base_url: str
        """

        self._dataset_base_url = dataset_base_url

    @property
    def qms_metadata(self):
        """Gets the qms_metadata of this DataSetsItem.  # noqa: E501


        :return: The qms_metadata of this DataSetsItem.  # noqa: E501
        :rtype: DatasetQMSMetadata
        """
        return self._qms_metadata

    @qms_metadata.setter
    def qms_metadata(self, qms_metadata):
        """Sets the qms_metadata of this DataSetsItem.


        :param qms_metadata: The qms_metadata of this DataSetsItem.  # noqa: E501
        :type qms_metadata: DatasetQMSMetadata
        """

        self._qms_metadata = qms_metadata

    @property
    def use_image_server(self):
        """Gets the use_image_server of this DataSetsItem.  # noqa: E501


        :return: The use_image_server of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._use_image_server

    @use_image_server.setter
    def use_image_server(self, use_image_server):
        """Sets the use_image_server of this DataSetsItem.


        :param use_image_server: The use_image_server of this DataSetsItem.  # noqa: E501
        :type use_image_server: bool
        """
        if self.local_vars_configuration.client_side_validation and use_image_server is None:  # noqa: E501
            raise ValueError("Invalid value for `use_image_server`, must not be `None`")  # noqa: E501

        self._use_image_server = use_image_server

    @property
    def dataset_type(self):
        """Gets the dataset_type of this DataSetsItem.  # noqa: E501


        :return: The dataset_type of this DataSetsItem.  # noqa: E501
        :rtype: DatasetType
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this DataSetsItem.


        :param dataset_type: The dataset_type of this DataSetsItem.  # noqa: E501
        :type dataset_type: DatasetType
        """
        if self.local_vars_configuration.client_side_validation and dataset_type is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_type`, must not be `None`")  # noqa: E501

        self._dataset_type = dataset_type

    @property
    def default_ds_job_id(self):
        """Gets the default_ds_job_id of this DataSetsItem.  # noqa: E501


        :return: The default_ds_job_id of this DataSetsItem.  # noqa: E501
        :rtype: str
        """
        return self._default_ds_job_id

    @default_ds_job_id.setter
    def default_ds_job_id(self, default_ds_job_id):
        """Sets the default_ds_job_id of this DataSetsItem.


        :param default_ds_job_id: The default_ds_job_id of this DataSetsItem.  # noqa: E501
        :type default_ds_job_id: str
        """

        self._default_ds_job_id = default_ds_job_id

    @property
    def is_default_ds_job_running(self):
        """Gets the is_default_ds_job_running of this DataSetsItem.  # noqa: E501


        :return: The is_default_ds_job_running of this DataSetsItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_default_ds_job_running

    @is_default_ds_job_running.setter
    def is_default_ds_job_running(self, is_default_ds_job_running):
        """Sets the is_default_ds_job_running of this DataSetsItem.


        :param is_default_ds_job_running: The is_default_ds_job_running of this DataSetsItem.  # noqa: E501
        :type is_default_ds_job_running: bool
        """

        self._is_default_ds_job_running = is_default_ds_job_running

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetsItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSetsItem):
            return True

        return self.to_dict() != other.to_dict()
