# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class HealthAlert(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container_id': 'str',
        'container_type': 'ISContainerType',
        'is_alert': 'bool',
        'down_time_ranges': 'list[TimeParams]',
        'err_time_ranges': 'list[ErrorTimeRange]'
    }

    attribute_map = {
        'container_id': 'container_id',
        'container_type': 'container_type',
        'is_alert': 'is_alert',
        'down_time_ranges': 'down_time_ranges',
        'err_time_ranges': 'err_time_ranges'
    }

    def __init__(self, container_id=None, container_type=None, is_alert=None, down_time_ranges=None, err_time_ranges=None, local_vars_configuration=None):  # noqa: E501
        """HealthAlert - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._container_id = None
        self._container_type = None
        self._is_alert = None
        self._down_time_ranges = None
        self._err_time_ranges = None
        self.discriminator = None

        self.container_id = container_id
        self.container_type = container_type
        self.is_alert = is_alert
        if down_time_ranges is not None:
            self.down_time_ranges = down_time_ranges
        if err_time_ranges is not None:
            self.err_time_ranges = err_time_ranges

    @property
    def container_id(self):
        """Gets the container_id of this HealthAlert.  # noqa: E501


        :return: The container_id of this HealthAlert.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this HealthAlert.


        :param container_id: The container_id of this HealthAlert.  # noqa: E501
        :type container_id: str
        """
        if self.local_vars_configuration.client_side_validation and container_id is None:  # noqa: E501
            raise ValueError("Invalid value for `container_id`, must not be `None`")  # noqa: E501

        self._container_id = container_id

    @property
    def container_type(self):
        """Gets the container_type of this HealthAlert.  # noqa: E501


        :return: The container_type of this HealthAlert.  # noqa: E501
        :rtype: ISContainerType
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this HealthAlert.


        :param container_type: The container_type of this HealthAlert.  # noqa: E501
        :type container_type: ISContainerType
        """
        if self.local_vars_configuration.client_side_validation and container_type is None:  # noqa: E501
            raise ValueError("Invalid value for `container_type`, must not be `None`")  # noqa: E501

        self._container_type = container_type

    @property
    def is_alert(self):
        """Gets the is_alert of this HealthAlert.  # noqa: E501


        :return: The is_alert of this HealthAlert.  # noqa: E501
        :rtype: bool
        """
        return self._is_alert

    @is_alert.setter
    def is_alert(self, is_alert):
        """Sets the is_alert of this HealthAlert.


        :param is_alert: The is_alert of this HealthAlert.  # noqa: E501
        :type is_alert: bool
        """
        if self.local_vars_configuration.client_side_validation and is_alert is None:  # noqa: E501
            raise ValueError("Invalid value for `is_alert`, must not be `None`")  # noqa: E501

        self._is_alert = is_alert

    @property
    def down_time_ranges(self):
        """Gets the down_time_ranges of this HealthAlert.  # noqa: E501


        :return: The down_time_ranges of this HealthAlert.  # noqa: E501
        :rtype: list[TimeParams]
        """
        return self._down_time_ranges

    @down_time_ranges.setter
    def down_time_ranges(self, down_time_ranges):
        """Sets the down_time_ranges of this HealthAlert.


        :param down_time_ranges: The down_time_ranges of this HealthAlert.  # noqa: E501
        :type down_time_ranges: list[TimeParams]
        """

        self._down_time_ranges = down_time_ranges

    @property
    def err_time_ranges(self):
        """Gets the err_time_ranges of this HealthAlert.  # noqa: E501


        :return: The err_time_ranges of this HealthAlert.  # noqa: E501
        :rtype: list[ErrorTimeRange]
        """
        return self._err_time_ranges

    @err_time_ranges.setter
    def err_time_ranges(self, err_time_ranges):
        """Sets the err_time_ranges of this HealthAlert.


        :param err_time_ranges: The err_time_ranges of this HealthAlert.  # noqa: E501
        :type err_time_ranges: list[ErrorTimeRange]
        """

        self._err_time_ranges = err_time_ranges

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthAlert):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthAlert):
            return True

        return self.to_dict() != other.to_dict()
