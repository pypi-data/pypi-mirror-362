# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class QueryResultResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_id': 'str',
        'max_per_page': 'int',
        'row_count': 'int',
        'page_token': 'str',
        'columns_list': 'list[object]',
        'result_set': 'list[list[str]]',
        'result_set_json_list': 'list[QueryJSONFrame]',
        'pe_categorical_result': 'object'
    }

    attribute_map = {
        'query_id': 'query_id',
        'max_per_page': 'max_per_page',
        'row_count': 'row_count',
        'page_token': 'page_token',
        'columns_list': 'columns_list',
        'result_set': 'result_set',
        'result_set_json_list': 'result_set_json_list',
        'pe_categorical_result': 'pe_categorical_result'
    }

    def __init__(self, query_id=None, max_per_page=None, row_count=None, page_token=None, columns_list=None, result_set=None, result_set_json_list=None, pe_categorical_result=None, local_vars_configuration=None):  # noqa: E501
        """QueryResultResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._query_id = None
        self._max_per_page = None
        self._row_count = None
        self._page_token = None
        self._columns_list = None
        self._result_set = None
        self._result_set_json_list = None
        self._pe_categorical_result = None
        self.discriminator = None

        self.query_id = query_id
        self.max_per_page = max_per_page
        self.row_count = row_count
        if page_token is not None:
            self.page_token = page_token
        if columns_list is not None:
            self.columns_list = columns_list
        if result_set is not None:
            self.result_set = result_set
        if result_set_json_list is not None:
            self.result_set_json_list = result_set_json_list
        if pe_categorical_result is not None:
            self.pe_categorical_result = pe_categorical_result

    @property
    def query_id(self):
        """Gets the query_id of this QueryResultResponse.  # noqa: E501


        :return: The query_id of this QueryResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryResultResponse.


        :param query_id: The query_id of this QueryResultResponse.  # noqa: E501
        :type query_id: str
        """
        if self.local_vars_configuration.client_side_validation and query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id

    @property
    def max_per_page(self):
        """Gets the max_per_page of this QueryResultResponse.  # noqa: E501


        :return: The max_per_page of this QueryResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_per_page

    @max_per_page.setter
    def max_per_page(self, max_per_page):
        """Sets the max_per_page of this QueryResultResponse.


        :param max_per_page: The max_per_page of this QueryResultResponse.  # noqa: E501
        :type max_per_page: int
        """
        if self.local_vars_configuration.client_side_validation and max_per_page is None:  # noqa: E501
            raise ValueError("Invalid value for `max_per_page`, must not be `None`")  # noqa: E501

        self._max_per_page = max_per_page

    @property
    def row_count(self):
        """Gets the row_count of this QueryResultResponse.  # noqa: E501


        :return: The row_count of this QueryResultResponse.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this QueryResultResponse.


        :param row_count: The row_count of this QueryResultResponse.  # noqa: E501
        :type row_count: int
        """
        if self.local_vars_configuration.client_side_validation and row_count is None:  # noqa: E501
            raise ValueError("Invalid value for `row_count`, must not be `None`")  # noqa: E501

        self._row_count = row_count

    @property
    def page_token(self):
        """Gets the page_token of this QueryResultResponse.  # noqa: E501


        :return: The page_token of this QueryResultResponse.  # noqa: E501
        :rtype: str
        """
        return self._page_token

    @page_token.setter
    def page_token(self, page_token):
        """Sets the page_token of this QueryResultResponse.


        :param page_token: The page_token of this QueryResultResponse.  # noqa: E501
        :type page_token: str
        """

        self._page_token = page_token

    @property
    def columns_list(self):
        """Gets the columns_list of this QueryResultResponse.  # noqa: E501


        :return: The columns_list of this QueryResultResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._columns_list

    @columns_list.setter
    def columns_list(self, columns_list):
        """Sets the columns_list of this QueryResultResponse.


        :param columns_list: The columns_list of this QueryResultResponse.  # noqa: E501
        :type columns_list: list[object]
        """

        self._columns_list = columns_list

    @property
    def result_set(self):
        """Gets the result_set of this QueryResultResponse.  # noqa: E501


        :return: The result_set of this QueryResultResponse.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._result_set

    @result_set.setter
    def result_set(self, result_set):
        """Sets the result_set of this QueryResultResponse.


        :param result_set: The result_set of this QueryResultResponse.  # noqa: E501
        :type result_set: list[list[str]]
        """

        self._result_set = result_set

    @property
    def result_set_json_list(self):
        """Gets the result_set_json_list of this QueryResultResponse.  # noqa: E501


        :return: The result_set_json_list of this QueryResultResponse.  # noqa: E501
        :rtype: list[QueryJSONFrame]
        """
        return self._result_set_json_list

    @result_set_json_list.setter
    def result_set_json_list(self, result_set_json_list):
        """Sets the result_set_json_list of this QueryResultResponse.


        :param result_set_json_list: The result_set_json_list of this QueryResultResponse.  # noqa: E501
        :type result_set_json_list: list[QueryJSONFrame]
        """

        self._result_set_json_list = result_set_json_list

    @property
    def pe_categorical_result(self):
        """Gets the pe_categorical_result of this QueryResultResponse.  # noqa: E501


        :return: The pe_categorical_result of this QueryResultResponse.  # noqa: E501
        :rtype: object
        """
        return self._pe_categorical_result

    @pe_categorical_result.setter
    def pe_categorical_result(self, pe_categorical_result):
        """Sets the pe_categorical_result of this QueryResultResponse.


        :param pe_categorical_result: The pe_categorical_result of this QueryResultResponse.  # noqa: E501
        :type pe_categorical_result: object
        """

        self._pe_categorical_result = pe_categorical_result

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResultResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryResultResponse):
            return True

        return self.to_dict() != other.to_dict()
