# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersGetContainerRespDataStore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'store_type': 'StoreTypes',
        'uri': 'str',
        'relative_uri': 'str',
        'sparse': 'bool',
        'type': 'StreamTypes',
        'port': 'int',
        'remote': 'bool',
        'data_store_keys': 'OpenapiServerDataSchemaContainersGetContainerRespDataStoreKeys',
        'use_instance_attached_identity': 'bool',
        'credentials': 'Credentials',
        'is_accessible': 'bool',
        'tiering_level': 'int',
        'hostname': 'str',
        'streams': 'list[Stream]'
    }

    attribute_map = {
        'name': 'name',
        'store_type': 'store_type',
        'uri': 'uri',
        'relative_uri': 'relativeUri',
        'sparse': 'sparse',
        'type': 'type',
        'port': 'port',
        'remote': 'remote',
        'data_store_keys': 'data_store_keys',
        'use_instance_attached_identity': 'use_instance_attached_identity',
        'credentials': 'credentials',
        'is_accessible': 'is_accessible',
        'tiering_level': 'tiering_level',
        'hostname': 'hostname',
        'streams': 'streams'
    }

    def __init__(self, name=None, store_type=None, uri=None, relative_uri=None, sparse=True, type=None, port=None, remote=None, data_store_keys=None, use_instance_attached_identity=False, credentials=None, is_accessible=False, tiering_level=None, hostname=None, streams=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersGetContainerRespDataStore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._store_type = None
        self._uri = None
        self._relative_uri = None
        self._sparse = None
        self._type = None
        self._port = None
        self._remote = None
        self._data_store_keys = None
        self._use_instance_attached_identity = None
        self._credentials = None
        self._is_accessible = None
        self._tiering_level = None
        self._hostname = None
        self._streams = None
        self.discriminator = None

        self.name = name
        self.store_type = store_type
        if uri is not None:
            self.uri = uri
        if relative_uri is not None:
            self.relative_uri = relative_uri
        if sparse is not None:
            self.sparse = sparse
        self.type = type
        if port is not None:
            self.port = port
        if remote is not None:
            self.remote = remote
        if data_store_keys is not None:
            self.data_store_keys = data_store_keys
        if use_instance_attached_identity is not None:
            self.use_instance_attached_identity = use_instance_attached_identity
        if credentials is not None:
            self.credentials = credentials
        if is_accessible is not None:
            self.is_accessible = is_accessible
        if tiering_level is not None:
            self.tiering_level = tiering_level
        if hostname is not None:
            self.hostname = hostname
        if streams is not None:
            self.streams = streams

    @property
    def name(self):
        """Gets the name of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The name of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param name: The name of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def store_type(self):
        """Gets the store_type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The store_type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: StoreTypes
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param store_type: The store_type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type store_type: StoreTypes
        """
        if self.local_vars_configuration.client_side_validation and store_type is None:  # noqa: E501
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501

        self._store_type = store_type

    @property
    def uri(self):
        """Gets the uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param uri: The uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    @property
    def relative_uri(self):
        """Gets the relative_uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The relative_uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: str
        """
        return self._relative_uri

    @relative_uri.setter
    def relative_uri(self, relative_uri):
        """Sets the relative_uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param relative_uri: The relative_uri of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type relative_uri: str
        """

        self._relative_uri = relative_uri

    @property
    def sparse(self):
        """Gets the sparse of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The sparse of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._sparse

    @sparse.setter
    def sparse(self, sparse):
        """Sets the sparse of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param sparse: The sparse of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type sparse: bool
        """

        self._sparse = sparse

    @property
    def type(self):
        """Gets the type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: StreamTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param type: The type of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type type: StreamTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def port(self):
        """Gets the port of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The port of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param port: The port of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def remote(self):
        """Gets the remote of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The remote of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param remote: The remote of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type remote: bool
        """

        self._remote = remote

    @property
    def data_store_keys(self):
        """Gets the data_store_keys of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The data_store_keys of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: OpenapiServerDataSchemaContainersGetContainerRespDataStoreKeys
        """
        return self._data_store_keys

    @data_store_keys.setter
    def data_store_keys(self, data_store_keys):
        """Sets the data_store_keys of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param data_store_keys: The data_store_keys of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type data_store_keys: OpenapiServerDataSchemaContainersGetContainerRespDataStoreKeys
        """

        self._data_store_keys = data_store_keys

    @property
    def use_instance_attached_identity(self):
        """Gets the use_instance_attached_identity of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The use_instance_attached_identity of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._use_instance_attached_identity

    @use_instance_attached_identity.setter
    def use_instance_attached_identity(self, use_instance_attached_identity):
        """Sets the use_instance_attached_identity of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param use_instance_attached_identity: The use_instance_attached_identity of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type use_instance_attached_identity: bool
        """

        self._use_instance_attached_identity = use_instance_attached_identity

    @property
    def credentials(self):
        """Gets the credentials of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The credentials of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: Credentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param credentials: The credentials of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type credentials: Credentials
        """

        self._credentials = credentials

    @property
    def is_accessible(self):
        """Gets the is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: bool
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param is_accessible: The is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type is_accessible: bool
        """

        self._is_accessible = is_accessible

    @property
    def tiering_level(self):
        """Gets the tiering_level of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The tiering_level of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: int
        """
        return self._tiering_level

    @tiering_level.setter
    def tiering_level(self, tiering_level):
        """Sets the tiering_level of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param tiering_level: The tiering_level of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type tiering_level: int
        """
        if (self.local_vars_configuration.client_side_validation and
                tiering_level is not None and tiering_level > 3):  # noqa: E501
            raise ValueError("Invalid value for `tiering_level`, must be a value less than or equal to `3`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                tiering_level is not None and tiering_level < 0):  # noqa: E501
            raise ValueError("Invalid value for `tiering_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tiering_level = tiering_level

    @property
    def hostname(self):
        """Gets the hostname of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The hostname of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param hostname: The hostname of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def streams(self):
        """Gets the streams of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501


        :return: The streams of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :rtype: list[Stream]
        """
        return self._streams

    @streams.setter
    def streams(self, streams):
        """Sets the streams of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.


        :param streams: The streams of this OpenapiServerDataSchemaContainersGetContainerRespDataStore.  # noqa: E501
        :type streams: list[Stream]
        """

        self._streams = streams

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespDataStore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespDataStore):
            return True

        return self.to_dict() != other.to_dict()
