# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class BGCCreateModelTrainingReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ds_project_id': 'str',
        'ds_session_id': 'str',
        'training_spec_url': 'str',
        'project_type': 'BCModelTrainProjectType',
        'training_job_type': 'BCModelTrainJobType',
        'training_config': 'TrainingConfig'
    }

    attribute_map = {
        'ds_project_id': 'ds_project_id',
        'ds_session_id': 'ds_session_id',
        'training_spec_url': 'training_spec_url',
        'project_type': 'project_type',
        'training_job_type': 'training_job_type',
        'training_config': 'training_config'
    }

    def __init__(self, ds_project_id=None, ds_session_id=None, training_spec_url=None, project_type=None, training_job_type=None, training_config=None, local_vars_configuration=None):  # noqa: E501
        """BGCCreateModelTrainingReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ds_project_id = None
        self._ds_session_id = None
        self._training_spec_url = None
        self._project_type = None
        self._training_job_type = None
        self._training_config = None
        self.discriminator = None

        self.ds_project_id = ds_project_id
        self.ds_session_id = ds_session_id
        self.training_spec_url = training_spec_url
        self.project_type = project_type
        self.training_job_type = training_job_type
        if training_config is not None:
            self.training_config = training_config

    @property
    def ds_project_id(self):
        """Gets the ds_project_id of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The ds_project_id of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: str
        """
        return self._ds_project_id

    @ds_project_id.setter
    def ds_project_id(self, ds_project_id):
        """Sets the ds_project_id of this BGCCreateModelTrainingReq.


        :param ds_project_id: The ds_project_id of this BGCCreateModelTrainingReq.  # noqa: E501
        :type ds_project_id: str
        """
        if self.local_vars_configuration.client_side_validation and ds_project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `ds_project_id`, must not be `None`")  # noqa: E501

        self._ds_project_id = ds_project_id

    @property
    def ds_session_id(self):
        """Gets the ds_session_id of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The ds_session_id of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: str
        """
        return self._ds_session_id

    @ds_session_id.setter
    def ds_session_id(self, ds_session_id):
        """Sets the ds_session_id of this BGCCreateModelTrainingReq.


        :param ds_session_id: The ds_session_id of this BGCCreateModelTrainingReq.  # noqa: E501
        :type ds_session_id: str
        """
        if self.local_vars_configuration.client_side_validation and ds_session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `ds_session_id`, must not be `None`")  # noqa: E501

        self._ds_session_id = ds_session_id

    @property
    def training_spec_url(self):
        """Gets the training_spec_url of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The training_spec_url of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: str
        """
        return self._training_spec_url

    @training_spec_url.setter
    def training_spec_url(self, training_spec_url):
        """Sets the training_spec_url of this BGCCreateModelTrainingReq.


        :param training_spec_url: The training_spec_url of this BGCCreateModelTrainingReq.  # noqa: E501
        :type training_spec_url: str
        """
        if self.local_vars_configuration.client_side_validation and training_spec_url is None:  # noqa: E501
            raise ValueError("Invalid value for `training_spec_url`, must not be `None`")  # noqa: E501

        self._training_spec_url = training_spec_url

    @property
    def project_type(self):
        """Gets the project_type of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The project_type of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: BCModelTrainProjectType
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this BGCCreateModelTrainingReq.


        :param project_type: The project_type of this BGCCreateModelTrainingReq.  # noqa: E501
        :type project_type: BCModelTrainProjectType
        """
        if self.local_vars_configuration.client_side_validation and project_type is None:  # noqa: E501
            raise ValueError("Invalid value for `project_type`, must not be `None`")  # noqa: E501

        self._project_type = project_type

    @property
    def training_job_type(self):
        """Gets the training_job_type of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The training_job_type of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: BCModelTrainJobType
        """
        return self._training_job_type

    @training_job_type.setter
    def training_job_type(self, training_job_type):
        """Sets the training_job_type of this BGCCreateModelTrainingReq.


        :param training_job_type: The training_job_type of this BGCCreateModelTrainingReq.  # noqa: E501
        :type training_job_type: BCModelTrainJobType
        """
        if self.local_vars_configuration.client_side_validation and training_job_type is None:  # noqa: E501
            raise ValueError("Invalid value for `training_job_type`, must not be `None`")  # noqa: E501

        self._training_job_type = training_job_type

    @property
    def training_config(self):
        """Gets the training_config of this BGCCreateModelTrainingReq.  # noqa: E501


        :return: The training_config of this BGCCreateModelTrainingReq.  # noqa: E501
        :rtype: TrainingConfig
        """
        return self._training_config

    @training_config.setter
    def training_config(self, training_config):
        """Sets the training_config of this BGCCreateModelTrainingReq.


        :param training_config: The training_config of this BGCCreateModelTrainingReq.  # noqa: E501
        :type training_config: TrainingConfig
        """

        self._training_config = training_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BGCCreateModelTrainingReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BGCCreateModelTrainingReq):
            return True

        return self.to_dict() != other.to_dict()
