# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class CreateAnalyticsQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_range_start': 'datetime',
        'time_range_end': 'datetime',
        'granularity_minutes': 'int',
        'station_group_id': 'str',
        'metric_id': 'str',
        'catalog_column': 'str',
        'aggregate_func': 'AggregateFunction',
        'group_by': 'StatManGroupBy',
        'station_ids_filter': 'list[str]',
        'line_ids_filter': 'list[str]',
        'location_ids_filter': 'list[str]',
        'filter_conditions': 'WhereCondition'
    }

    attribute_map = {
        'time_range_start': 'time_range_start',
        'time_range_end': 'time_range_end',
        'granularity_minutes': 'granularity_minutes',
        'station_group_id': 'station_group_id',
        'metric_id': 'metric_id',
        'catalog_column': 'catalog_column',
        'aggregate_func': 'aggregate_func',
        'group_by': 'group_by',
        'station_ids_filter': 'station_ids_filter',
        'line_ids_filter': 'line_ids_filter',
        'location_ids_filter': 'location_ids_filter',
        'filter_conditions': 'filter_conditions'
    }

    def __init__(self, time_range_start=None, time_range_end=None, granularity_minutes=None, station_group_id=None, metric_id=None, catalog_column=None, aggregate_func=None, group_by=None, station_ids_filter=None, line_ids_filter=None, location_ids_filter=None, filter_conditions=None, local_vars_configuration=None):  # noqa: E501
        """CreateAnalyticsQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._time_range_start = None
        self._time_range_end = None
        self._granularity_minutes = None
        self._station_group_id = None
        self._metric_id = None
        self._catalog_column = None
        self._aggregate_func = None
        self._group_by = None
        self._station_ids_filter = None
        self._line_ids_filter = None
        self._location_ids_filter = None
        self._filter_conditions = None
        self.discriminator = None

        self.time_range_start = time_range_start
        self.time_range_end = time_range_end
        if granularity_minutes is not None:
            self.granularity_minutes = granularity_minutes
        self.station_group_id = station_group_id
        if metric_id is not None:
            self.metric_id = metric_id
        if catalog_column is not None:
            self.catalog_column = catalog_column
        self.aggregate_func = aggregate_func
        self.group_by = group_by
        if station_ids_filter is not None:
            self.station_ids_filter = station_ids_filter
        if line_ids_filter is not None:
            self.line_ids_filter = line_ids_filter
        if location_ids_filter is not None:
            self.location_ids_filter = location_ids_filter
        if filter_conditions is not None:
            self.filter_conditions = filter_conditions

    @property
    def time_range_start(self):
        """Gets the time_range_start of this CreateAnalyticsQuery.  # noqa: E501


        :return: The time_range_start of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._time_range_start

    @time_range_start.setter
    def time_range_start(self, time_range_start):
        """Sets the time_range_start of this CreateAnalyticsQuery.


        :param time_range_start: The time_range_start of this CreateAnalyticsQuery.  # noqa: E501
        :type time_range_start: datetime
        """
        if self.local_vars_configuration.client_side_validation and time_range_start is None:  # noqa: E501
            raise ValueError("Invalid value for `time_range_start`, must not be `None`")  # noqa: E501

        self._time_range_start = time_range_start

    @property
    def time_range_end(self):
        """Gets the time_range_end of this CreateAnalyticsQuery.  # noqa: E501


        :return: The time_range_end of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: datetime
        """
        return self._time_range_end

    @time_range_end.setter
    def time_range_end(self, time_range_end):
        """Sets the time_range_end of this CreateAnalyticsQuery.


        :param time_range_end: The time_range_end of this CreateAnalyticsQuery.  # noqa: E501
        :type time_range_end: datetime
        """
        if self.local_vars_configuration.client_side_validation and time_range_end is None:  # noqa: E501
            raise ValueError("Invalid value for `time_range_end`, must not be `None`")  # noqa: E501

        self._time_range_end = time_range_end

    @property
    def granularity_minutes(self):
        """Gets the granularity_minutes of this CreateAnalyticsQuery.  # noqa: E501


        :return: The granularity_minutes of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: int
        """
        return self._granularity_minutes

    @granularity_minutes.setter
    def granularity_minutes(self, granularity_minutes):
        """Sets the granularity_minutes of this CreateAnalyticsQuery.


        :param granularity_minutes: The granularity_minutes of this CreateAnalyticsQuery.  # noqa: E501
        :type granularity_minutes: int
        """

        self._granularity_minutes = granularity_minutes

    @property
    def station_group_id(self):
        """Gets the station_group_id of this CreateAnalyticsQuery.  # noqa: E501


        :return: The station_group_id of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._station_group_id

    @station_group_id.setter
    def station_group_id(self, station_group_id):
        """Sets the station_group_id of this CreateAnalyticsQuery.


        :param station_group_id: The station_group_id of this CreateAnalyticsQuery.  # noqa: E501
        :type station_group_id: str
        """
        if self.local_vars_configuration.client_side_validation and station_group_id is None:  # noqa: E501
            raise ValueError("Invalid value for `station_group_id`, must not be `None`")  # noqa: E501

        self._station_group_id = station_group_id

    @property
    def metric_id(self):
        """Gets the metric_id of this CreateAnalyticsQuery.  # noqa: E501


        :return: The metric_id of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this CreateAnalyticsQuery.


        :param metric_id: The metric_id of this CreateAnalyticsQuery.  # noqa: E501
        :type metric_id: str
        """

        self._metric_id = metric_id

    @property
    def catalog_column(self):
        """Gets the catalog_column of this CreateAnalyticsQuery.  # noqa: E501


        :return: The catalog_column of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._catalog_column

    @catalog_column.setter
    def catalog_column(self, catalog_column):
        """Sets the catalog_column of this CreateAnalyticsQuery.


        :param catalog_column: The catalog_column of this CreateAnalyticsQuery.  # noqa: E501
        :type catalog_column: str
        """

        self._catalog_column = catalog_column

    @property
    def aggregate_func(self):
        """Gets the aggregate_func of this CreateAnalyticsQuery.  # noqa: E501


        :return: The aggregate_func of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: AggregateFunction
        """
        return self._aggregate_func

    @aggregate_func.setter
    def aggregate_func(self, aggregate_func):
        """Sets the aggregate_func of this CreateAnalyticsQuery.


        :param aggregate_func: The aggregate_func of this CreateAnalyticsQuery.  # noqa: E501
        :type aggregate_func: AggregateFunction
        """
        if self.local_vars_configuration.client_side_validation and aggregate_func is None:  # noqa: E501
            raise ValueError("Invalid value for `aggregate_func`, must not be `None`")  # noqa: E501

        self._aggregate_func = aggregate_func

    @property
    def group_by(self):
        """Gets the group_by of this CreateAnalyticsQuery.  # noqa: E501


        :return: The group_by of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: StatManGroupBy
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this CreateAnalyticsQuery.


        :param group_by: The group_by of this CreateAnalyticsQuery.  # noqa: E501
        :type group_by: StatManGroupBy
        """
        if self.local_vars_configuration.client_side_validation and group_by is None:  # noqa: E501
            raise ValueError("Invalid value for `group_by`, must not be `None`")  # noqa: E501

        self._group_by = group_by

    @property
    def station_ids_filter(self):
        """Gets the station_ids_filter of this CreateAnalyticsQuery.  # noqa: E501


        :return: The station_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._station_ids_filter

    @station_ids_filter.setter
    def station_ids_filter(self, station_ids_filter):
        """Sets the station_ids_filter of this CreateAnalyticsQuery.


        :param station_ids_filter: The station_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :type station_ids_filter: list[str]
        """

        self._station_ids_filter = station_ids_filter

    @property
    def line_ids_filter(self):
        """Gets the line_ids_filter of this CreateAnalyticsQuery.  # noqa: E501


        :return: The line_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._line_ids_filter

    @line_ids_filter.setter
    def line_ids_filter(self, line_ids_filter):
        """Sets the line_ids_filter of this CreateAnalyticsQuery.


        :param line_ids_filter: The line_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :type line_ids_filter: list[str]
        """

        self._line_ids_filter = line_ids_filter

    @property
    def location_ids_filter(self):
        """Gets the location_ids_filter of this CreateAnalyticsQuery.  # noqa: E501


        :return: The location_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_ids_filter

    @location_ids_filter.setter
    def location_ids_filter(self, location_ids_filter):
        """Sets the location_ids_filter of this CreateAnalyticsQuery.


        :param location_ids_filter: The location_ids_filter of this CreateAnalyticsQuery.  # noqa: E501
        :type location_ids_filter: list[str]
        """

        self._location_ids_filter = location_ids_filter

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this CreateAnalyticsQuery.  # noqa: E501


        :return: The filter_conditions of this CreateAnalyticsQuery.  # noqa: E501
        :rtype: WhereCondition
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this CreateAnalyticsQuery.


        :param filter_conditions: The filter_conditions of this CreateAnalyticsQuery.  # noqa: E501
        :type filter_conditions: WhereCondition
        """

        self._filter_conditions = filter_conditions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAnalyticsQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAnalyticsQuery):
            return True

        return self.to_dict() != other.to_dict()
