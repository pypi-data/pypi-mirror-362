# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DEMeterableFeature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    BASIC_SEARCH_V1 = "basic-search-v1"
    BASIC_COMPARE_V1 = "basic-compare-v1"
    DATASETS_V1 = "datasets-v1"
    JOBS_V1 = "jobs-v1"
    RESULTSETS_V1 = "resultsets-v1"
    SECRETS_V1 = "secrets-v1"
    EXTERNAL_CATALOG_V1 = "external-catalog-v1"
    ADVANCED_SEARCH_V1 = "advanced-search-v1"
    CATALOG_QUERIES_V1 = "catalog-queries-v1"
    MODEL_ANALYZE_V1 = "model-analyze-v1"
    NUM_USERS = "num-users"
    TOTAL_FRAMES = "total-frames"
    FRAMES_PER_JOB = "frames-per-job"
    SEQ_EXPLORE_V1 = "seq-explore-v1"
    SALIENCY_MAPS_V1 = "saliency-maps-v1"
    TOTAL_AUTOLABELLED_FRAMES_V1 = "total-autolabelled-frames-v1"
    TOTAL_DPUS = "total-dpus"
    UNKNOWN_VALUE = "unknown_value"

    allowable_values = [BASIC_SEARCH_V1, BASIC_COMPARE_V1, DATASETS_V1, JOBS_V1, RESULTSETS_V1, SECRETS_V1, EXTERNAL_CATALOG_V1, ADVANCED_SEARCH_V1, CATALOG_QUERIES_V1, MODEL_ANALYZE_V1, NUM_USERS, TOTAL_FRAMES, FRAMES_PER_JOB, SEQ_EXPLORE_V1, SALIENCY_MAPS_V1, TOTAL_AUTOLABELLED_FRAMES_V1, TOTAL_DPUS, UNKNOWN_VALUE]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """DEMeterableFeature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DEMeterableFeature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DEMeterableFeature):
            return True

        return self.to_dict() != other.to_dict()
