# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class Source(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'local': 'bool',
        'use_image_server': 'bool',
        'use_scratchpad': 'bool',
        'input_sub_path': 'str'
    }

    attribute_map = {
        'id': 'id',
        'local': 'local',
        'use_image_server': 'use_image_server',
        'use_scratchpad': 'use_scratchpad',
        'input_sub_path': 'input_sub_path'
    }

    def __init__(self, id=None, local=None, use_image_server=False, use_scratchpad=False, input_sub_path=None, local_vars_configuration=None):  # noqa: E501
        """Source - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._local = None
        self._use_image_server = None
        self._use_scratchpad = None
        self._input_sub_path = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.local = local
        if use_image_server is not None:
            self.use_image_server = use_image_server
        if use_scratchpad is not None:
            self.use_scratchpad = use_scratchpad
        if input_sub_path is not None:
            self.input_sub_path = input_sub_path

    @property
    def id(self):
        """Gets the id of this Source.  # noqa: E501


        :return: The id of this Source.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.


        :param id: The id of this Source.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def local(self):
        """Gets the local of this Source.  # noqa: E501


        :return: The local of this Source.  # noqa: E501
        :rtype: bool
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this Source.


        :param local: The local of this Source.  # noqa: E501
        :type local: bool
        """
        if self.local_vars_configuration.client_side_validation and local is None:  # noqa: E501
            raise ValueError("Invalid value for `local`, must not be `None`")  # noqa: E501

        self._local = local

    @property
    def use_image_server(self):
        """Gets the use_image_server of this Source.  # noqa: E501


        :return: The use_image_server of this Source.  # noqa: E501
        :rtype: bool
        """
        return self._use_image_server

    @use_image_server.setter
    def use_image_server(self, use_image_server):
        """Sets the use_image_server of this Source.


        :param use_image_server: The use_image_server of this Source.  # noqa: E501
        :type use_image_server: bool
        """

        self._use_image_server = use_image_server

    @property
    def use_scratchpad(self):
        """Gets the use_scratchpad of this Source.  # noqa: E501


        :return: The use_scratchpad of this Source.  # noqa: E501
        :rtype: bool
        """
        return self._use_scratchpad

    @use_scratchpad.setter
    def use_scratchpad(self, use_scratchpad):
        """Sets the use_scratchpad of this Source.


        :param use_scratchpad: The use_scratchpad of this Source.  # noqa: E501
        :type use_scratchpad: bool
        """

        self._use_scratchpad = use_scratchpad

    @property
    def input_sub_path(self):
        """Gets the input_sub_path of this Source.  # noqa: E501


        :return: The input_sub_path of this Source.  # noqa: E501
        :rtype: str
        """
        return self._input_sub_path

    @input_sub_path.setter
    def input_sub_path(self, input_sub_path):
        """Sets the input_sub_path of this Source.


        :param input_sub_path: The input_sub_path of this Source.  # noqa: E501
        :type input_sub_path: str
        """

        self._input_sub_path = input_sub_path

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Source):
            return True

        return self.to_dict() != other.to_dict()
