# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DataSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_name': 'str',
        'type': 'str',
        'data_type': 'str',
        'namespace': 'str',
        'is_demo': 'bool',
        'containers': 'Containers',
        'dataset_spec': 'DataSetSpec',
        'pipelines_to_attach': 'list[str]',
        'attachment_policy': 'PolicyDetailsBody',
        'pipeline_config': 'PipelineConfig',
        'skip_register_data': 'bool',
        'dataset_type': 'DatasetType',
        'station_group_id': 'str'
    }

    attribute_map = {
        'dataset_name': 'dataset_name',
        'type': 'type',
        'data_type': 'data_type',
        'namespace': 'namespace',
        'is_demo': 'is_demo',
        'containers': 'containers',
        'dataset_spec': 'dataset_spec',
        'pipelines_to_attach': 'pipelines_to_attach',
        'attachment_policy': 'attachment_policy',
        'pipeline_config': 'pipeline_config',
        'skip_register_data': 'skip_register_data',
        'dataset_type': 'dataset_type',
        'station_group_id': 'station_group_id'
    }

    def __init__(self, dataset_name=None, type=None, data_type=None, namespace=None, is_demo=False, containers=None, dataset_spec=None, pipelines_to_attach=None, attachment_policy=None, pipeline_config=None, skip_register_data=False, dataset_type=None, station_group_id=None, local_vars_configuration=None):  # noqa: E501
        """DataSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_name = None
        self._type = None
        self._data_type = None
        self._namespace = None
        self._is_demo = None
        self._containers = None
        self._dataset_spec = None
        self._pipelines_to_attach = None
        self._attachment_policy = None
        self._pipeline_config = None
        self._skip_register_data = None
        self._dataset_type = None
        self._station_group_id = None
        self.discriminator = None

        self.dataset_name = dataset_name
        self.type = type
        self.data_type = data_type
        self.namespace = namespace
        if is_demo is not None:
            self.is_demo = is_demo
        self.containers = containers
        self.dataset_spec = dataset_spec
        if pipelines_to_attach is not None:
            self.pipelines_to_attach = pipelines_to_attach
        if attachment_policy is not None:
            self.attachment_policy = attachment_policy
        if pipeline_config is not None:
            self.pipeline_config = pipeline_config
        if skip_register_data is not None:
            self.skip_register_data = skip_register_data
        if dataset_type is not None:
            self.dataset_type = dataset_type
        if station_group_id is not None:
            self.station_group_id = station_group_id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this DataSet.  # noqa: E501


        :return: The dataset_name of this DataSet.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this DataSet.


        :param dataset_name: The dataset_name of this DataSet.  # noqa: E501
        :type dataset_name: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    @property
    def type(self):
        """Gets the type of this DataSet.  # noqa: E501


        :return: The type of this DataSet.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSet.


        :param type: The type of this DataSet.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def data_type(self):
        """Gets the data_type of this DataSet.  # noqa: E501


        :return: The data_type of this DataSet.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataSet.


        :param data_type: The data_type of this DataSet.  # noqa: E501
        :type data_type: str
        """
        if self.local_vars_configuration.client_side_validation and data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def namespace(self):
        """Gets the namespace of this DataSet.  # noqa: E501


        :return: The namespace of this DataSet.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataSet.


        :param namespace: The namespace of this DataSet.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def is_demo(self):
        """Gets the is_demo of this DataSet.  # noqa: E501


        :return: The is_demo of this DataSet.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo

    @is_demo.setter
    def is_demo(self, is_demo):
        """Sets the is_demo of this DataSet.


        :param is_demo: The is_demo of this DataSet.  # noqa: E501
        :type is_demo: bool
        """

        self._is_demo = is_demo

    @property
    def containers(self):
        """Gets the containers of this DataSet.  # noqa: E501


        :return: The containers of this DataSet.  # noqa: E501
        :rtype: Containers
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this DataSet.


        :param containers: The containers of this DataSet.  # noqa: E501
        :type containers: Containers
        """
        if self.local_vars_configuration.client_side_validation and containers is None:  # noqa: E501
            raise ValueError("Invalid value for `containers`, must not be `None`")  # noqa: E501

        self._containers = containers

    @property
    def dataset_spec(self):
        """Gets the dataset_spec of this DataSet.  # noqa: E501


        :return: The dataset_spec of this DataSet.  # noqa: E501
        :rtype: DataSetSpec
        """
        return self._dataset_spec

    @dataset_spec.setter
    def dataset_spec(self, dataset_spec):
        """Sets the dataset_spec of this DataSet.


        :param dataset_spec: The dataset_spec of this DataSet.  # noqa: E501
        :type dataset_spec: DataSetSpec
        """
        if self.local_vars_configuration.client_side_validation and dataset_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_spec`, must not be `None`")  # noqa: E501

        self._dataset_spec = dataset_spec

    @property
    def pipelines_to_attach(self):
        """Gets the pipelines_to_attach of this DataSet.  # noqa: E501


        :return: The pipelines_to_attach of this DataSet.  # noqa: E501
        :rtype: list[str]
        """
        return self._pipelines_to_attach

    @pipelines_to_attach.setter
    def pipelines_to_attach(self, pipelines_to_attach):
        """Sets the pipelines_to_attach of this DataSet.


        :param pipelines_to_attach: The pipelines_to_attach of this DataSet.  # noqa: E501
        :type pipelines_to_attach: list[str]
        """

        self._pipelines_to_attach = pipelines_to_attach

    @property
    def attachment_policy(self):
        """Gets the attachment_policy of this DataSet.  # noqa: E501


        :return: The attachment_policy of this DataSet.  # noqa: E501
        :rtype: PolicyDetailsBody
        """
        return self._attachment_policy

    @attachment_policy.setter
    def attachment_policy(self, attachment_policy):
        """Sets the attachment_policy of this DataSet.


        :param attachment_policy: The attachment_policy of this DataSet.  # noqa: E501
        :type attachment_policy: PolicyDetailsBody
        """

        self._attachment_policy = attachment_policy

    @property
    def pipeline_config(self):
        """Gets the pipeline_config of this DataSet.  # noqa: E501


        :return: The pipeline_config of this DataSet.  # noqa: E501
        :rtype: PipelineConfig
        """
        return self._pipeline_config

    @pipeline_config.setter
    def pipeline_config(self, pipeline_config):
        """Sets the pipeline_config of this DataSet.


        :param pipeline_config: The pipeline_config of this DataSet.  # noqa: E501
        :type pipeline_config: PipelineConfig
        """

        self._pipeline_config = pipeline_config

    @property
    def skip_register_data(self):
        """Gets the skip_register_data of this DataSet.  # noqa: E501


        :return: The skip_register_data of this DataSet.  # noqa: E501
        :rtype: bool
        """
        return self._skip_register_data

    @skip_register_data.setter
    def skip_register_data(self, skip_register_data):
        """Sets the skip_register_data of this DataSet.


        :param skip_register_data: The skip_register_data of this DataSet.  # noqa: E501
        :type skip_register_data: bool
        """

        self._skip_register_data = skip_register_data

    @property
    def dataset_type(self):
        """Gets the dataset_type of this DataSet.  # noqa: E501


        :return: The dataset_type of this DataSet.  # noqa: E501
        :rtype: DatasetType
        """
        return self._dataset_type

    @dataset_type.setter
    def dataset_type(self, dataset_type):
        """Sets the dataset_type of this DataSet.


        :param dataset_type: The dataset_type of this DataSet.  # noqa: E501
        :type dataset_type: DatasetType
        """

        self._dataset_type = dataset_type

    @property
    def station_group_id(self):
        """Gets the station_group_id of this DataSet.  # noqa: E501


        :return: The station_group_id of this DataSet.  # noqa: E501
        :rtype: str
        """
        return self._station_group_id

    @station_group_id.setter
    def station_group_id(self, station_group_id):
        """Sets the station_group_id of this DataSet.


        :param station_group_id: The station_group_id of this DataSet.  # noqa: E501
        :type station_group_id: str
        """

        self._station_group_id = station_group_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSet):
            return True

        return self.to_dict() != other.to_dict()
