# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_store': 'str',
        'default_expiry_days': 'int',
        'max_expiry_days': 'int',
        'action_override': 'bool',
        'dest_store': 'str',
        'action': 'Action'
    }

    attribute_map = {
        'data_store': 'data_store',
        'default_expiry_days': 'default_expiry_days',
        'max_expiry_days': 'max_expiry_days',
        'action_override': 'action_override',
        'dest_store': 'dest_store',
        'action': 'action'
    }

    def __init__(self, data_store=None, default_expiry_days=None, max_expiry_days=None, action_override=None, dest_store=None, action=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data_store = None
        self._default_expiry_days = None
        self._max_expiry_days = None
        self._action_override = None
        self._dest_store = None
        self._action = None
        self.discriminator = None

        self.data_store = data_store
        self.default_expiry_days = default_expiry_days
        self.max_expiry_days = max_expiry_days
        self.action_override = action_override
        if dest_store is not None:
            self.dest_store = dest_store
        self.action = action

    @property
    def data_store(self):
        """Gets the data_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The data_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: str
        """
        return self._data_store

    @data_store.setter
    def data_store(self, data_store):
        """Sets the data_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param data_store: The data_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type data_store: str
        """
        if self.local_vars_configuration.client_side_validation and data_store is None:  # noqa: E501
            raise ValueError("Invalid value for `data_store`, must not be `None`")  # noqa: E501

        self._data_store = data_store

    @property
    def default_expiry_days(self):
        """Gets the default_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The default_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: int
        """
        return self._default_expiry_days

    @default_expiry_days.setter
    def default_expiry_days(self, default_expiry_days):
        """Sets the default_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param default_expiry_days: The default_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type default_expiry_days: int
        """
        if self.local_vars_configuration.client_side_validation and default_expiry_days is None:  # noqa: E501
            raise ValueError("Invalid value for `default_expiry_days`, must not be `None`")  # noqa: E501

        self._default_expiry_days = default_expiry_days

    @property
    def max_expiry_days(self):
        """Gets the max_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The max_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_expiry_days

    @max_expiry_days.setter
    def max_expiry_days(self, max_expiry_days):
        """Sets the max_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param max_expiry_days: The max_expiry_days of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type max_expiry_days: int
        """
        if self.local_vars_configuration.client_side_validation and max_expiry_days is None:  # noqa: E501
            raise ValueError("Invalid value for `max_expiry_days`, must not be `None`")  # noqa: E501

        self._max_expiry_days = max_expiry_days

    @property
    def action_override(self):
        """Gets the action_override of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The action_override of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._action_override

    @action_override.setter
    def action_override(self, action_override):
        """Sets the action_override of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param action_override: The action_override of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type action_override: bool
        """
        if self.local_vars_configuration.client_side_validation and action_override is None:  # noqa: E501
            raise ValueError("Invalid value for `action_override`, must not be `None`")  # noqa: E501

        self._action_override = action_override

    @property
    def dest_store(self):
        """Gets the dest_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The dest_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: str
        """
        return self._dest_store

    @dest_store.setter
    def dest_store(self, dest_store):
        """Sets the dest_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param dest_store: The dest_store of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type dest_store: str
        """

        self._dest_store = dest_store

    @property
    def action(self):
        """Gets the action of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501


        :return: The action of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.


        :param action: The action of this OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy.  # noqa: E501
        :type action: Action
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy):
            return True

        return self.to_dict() != other.to_dict()
