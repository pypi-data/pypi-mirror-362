# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DefaultViewRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'create_update_view_details': 'CreateUpdateViewRequest',
        'task_type': 'TaskType',
        'abs_table_name': 'str',
        'file_type': 'FileType',
        'udts_info': 'list[UDTInfo]',
        'data_format': 'CatalogTableImportDataFormat'
    }

    attribute_map = {
        'dataset_id': 'dataset_id',
        'create_update_view_details': 'create_update_view_details',
        'task_type': 'task_type',
        'abs_table_name': 'abs_table_name',
        'file_type': 'file_type',
        'udts_info': 'udts_info',
        'data_format': 'data_format'
    }

    def __init__(self, dataset_id=None, create_update_view_details=None, task_type=None, abs_table_name=None, file_type=None, udts_info=None, data_format=None, local_vars_configuration=None):  # noqa: E501
        """DefaultViewRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._create_update_view_details = None
        self._task_type = None
        self._abs_table_name = None
        self._file_type = None
        self._udts_info = None
        self._data_format = None
        self.discriminator = None

        self.dataset_id = dataset_id
        self.create_update_view_details = create_update_view_details
        self.task_type = task_type
        self.abs_table_name = abs_table_name
        self.file_type = file_type
        if udts_info is not None:
            self.udts_info = udts_info
        if data_format is not None:
            self.data_format = data_format

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DefaultViewRequest.  # noqa: E501


        :return: The dataset_id of this DefaultViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DefaultViewRequest.


        :param dataset_id: The dataset_id of this DefaultViewRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def create_update_view_details(self):
        """Gets the create_update_view_details of this DefaultViewRequest.  # noqa: E501


        :return: The create_update_view_details of this DefaultViewRequest.  # noqa: E501
        :rtype: CreateUpdateViewRequest
        """
        return self._create_update_view_details

    @create_update_view_details.setter
    def create_update_view_details(self, create_update_view_details):
        """Sets the create_update_view_details of this DefaultViewRequest.


        :param create_update_view_details: The create_update_view_details of this DefaultViewRequest.  # noqa: E501
        :type create_update_view_details: CreateUpdateViewRequest
        """
        if self.local_vars_configuration.client_side_validation and create_update_view_details is None:  # noqa: E501
            raise ValueError("Invalid value for `create_update_view_details`, must not be `None`")  # noqa: E501

        self._create_update_view_details = create_update_view_details

    @property
    def task_type(self):
        """Gets the task_type of this DefaultViewRequest.  # noqa: E501


        :return: The task_type of this DefaultViewRequest.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this DefaultViewRequest.


        :param task_type: The task_type of this DefaultViewRequest.  # noqa: E501
        :type task_type: TaskType
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def abs_table_name(self):
        """Gets the abs_table_name of this DefaultViewRequest.  # noqa: E501


        :return: The abs_table_name of this DefaultViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._abs_table_name

    @abs_table_name.setter
    def abs_table_name(self, abs_table_name):
        """Sets the abs_table_name of this DefaultViewRequest.


        :param abs_table_name: The abs_table_name of this DefaultViewRequest.  # noqa: E501
        :type abs_table_name: str
        """
        if self.local_vars_configuration.client_side_validation and abs_table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `abs_table_name`, must not be `None`")  # noqa: E501

        self._abs_table_name = abs_table_name

    @property
    def file_type(self):
        """Gets the file_type of this DefaultViewRequest.  # noqa: E501


        :return: The file_type of this DefaultViewRequest.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this DefaultViewRequest.


        :param file_type: The file_type of this DefaultViewRequest.  # noqa: E501
        :type file_type: FileType
        """
        if self.local_vars_configuration.client_side_validation and file_type is None:  # noqa: E501
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type

    @property
    def udts_info(self):
        """Gets the udts_info of this DefaultViewRequest.  # noqa: E501


        :return: The udts_info of this DefaultViewRequest.  # noqa: E501
        :rtype: list[UDTInfo]
        """
        return self._udts_info

    @udts_info.setter
    def udts_info(self, udts_info):
        """Sets the udts_info of this DefaultViewRequest.


        :param udts_info: The udts_info of this DefaultViewRequest.  # noqa: E501
        :type udts_info: list[UDTInfo]
        """

        self._udts_info = udts_info

    @property
    def data_format(self):
        """Gets the data_format of this DefaultViewRequest.  # noqa: E501


        :return: The data_format of this DefaultViewRequest.  # noqa: E501
        :rtype: CatalogTableImportDataFormat
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this DefaultViewRequest.


        :param data_format: The data_format of this DefaultViewRequest.  # noqa: E501
        :type data_format: CatalogTableImportDataFormat
        """

        self._data_format = data_format

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefaultViewRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefaultViewRequest):
            return True

        return self.to_dict() != other.to_dict()
