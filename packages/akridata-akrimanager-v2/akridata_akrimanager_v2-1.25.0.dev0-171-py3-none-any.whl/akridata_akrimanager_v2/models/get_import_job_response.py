# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class GetImportJobResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'dataset_id': 'str',
        'table_name': 'str',
        'submitted_at': 'datetime',
        'submitted_by': 'str',
        'status': 'str',
        'started_at': 'datetime',
        'completed_at': 'datetime',
        'skipped_rows': 'int',
        'inserted_rows': 'int',
        'updated_rows': 'int'
    }

    attribute_map = {
        'job_id': 'job_id',
        'dataset_id': 'dataset_id',
        'table_name': 'table_name',
        'submitted_at': 'submitted_at',
        'submitted_by': 'submitted_by',
        'status': 'status',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'skipped_rows': 'skipped_rows',
        'inserted_rows': 'inserted_rows',
        'updated_rows': 'updated_rows'
    }

    def __init__(self, job_id=None, dataset_id=None, table_name=None, submitted_at=None, submitted_by=None, status=None, started_at=None, completed_at=None, skipped_rows=None, inserted_rows=None, updated_rows=None, local_vars_configuration=None):  # noqa: E501
        """GetImportJobResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._dataset_id = None
        self._table_name = None
        self._submitted_at = None
        self._submitted_by = None
        self._status = None
        self._started_at = None
        self._completed_at = None
        self._skipped_rows = None
        self._inserted_rows = None
        self._updated_rows = None
        self.discriminator = None

        self.job_id = job_id
        self.dataset_id = dataset_id
        self.table_name = table_name
        self.submitted_at = submitted_at
        self.submitted_by = submitted_by
        self.status = status
        if started_at is not None:
            self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        self.skipped_rows = skipped_rows
        self.inserted_rows = inserted_rows
        self.updated_rows = updated_rows

    @property
    def job_id(self):
        """Gets the job_id of this GetImportJobResponse.  # noqa: E501


        :return: The job_id of this GetImportJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this GetImportJobResponse.


        :param job_id: The job_id of this GetImportJobResponse.  # noqa: E501
        :type job_id: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this GetImportJobResponse.  # noqa: E501


        :return: The dataset_id of this GetImportJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this GetImportJobResponse.


        :param dataset_id: The dataset_id of this GetImportJobResponse.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def table_name(self):
        """Gets the table_name of this GetImportJobResponse.  # noqa: E501


        :return: The table_name of this GetImportJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this GetImportJobResponse.


        :param table_name: The table_name of this GetImportJobResponse.  # noqa: E501
        :type table_name: str
        """
        if self.local_vars_configuration.client_side_validation and table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def submitted_at(self):
        """Gets the submitted_at of this GetImportJobResponse.  # noqa: E501


        :return: The submitted_at of this GetImportJobResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this GetImportJobResponse.


        :param submitted_at: The submitted_at of this GetImportJobResponse.  # noqa: E501
        :type submitted_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and submitted_at is None:  # noqa: E501
            raise ValueError("Invalid value for `submitted_at`, must not be `None`")  # noqa: E501

        self._submitted_at = submitted_at

    @property
    def submitted_by(self):
        """Gets the submitted_by of this GetImportJobResponse.  # noqa: E501


        :return: The submitted_by of this GetImportJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this GetImportJobResponse.


        :param submitted_by: The submitted_by of this GetImportJobResponse.  # noqa: E501
        :type submitted_by: str
        """
        if self.local_vars_configuration.client_side_validation and submitted_by is None:  # noqa: E501
            raise ValueError("Invalid value for `submitted_by`, must not be `None`")  # noqa: E501

        self._submitted_by = submitted_by

    @property
    def status(self):
        """Gets the status of this GetImportJobResponse.  # noqa: E501


        :return: The status of this GetImportJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetImportJobResponse.


        :param status: The status of this GetImportJobResponse.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def started_at(self):
        """Gets the started_at of this GetImportJobResponse.  # noqa: E501


        :return: The started_at of this GetImportJobResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this GetImportJobResponse.


        :param started_at: The started_at of this GetImportJobResponse.  # noqa: E501
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this GetImportJobResponse.  # noqa: E501


        :return: The completed_at of this GetImportJobResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this GetImportJobResponse.


        :param completed_at: The completed_at of this GetImportJobResponse.  # noqa: E501
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def skipped_rows(self):
        """Gets the skipped_rows of this GetImportJobResponse.  # noqa: E501


        :return: The skipped_rows of this GetImportJobResponse.  # noqa: E501
        :rtype: int
        """
        return self._skipped_rows

    @skipped_rows.setter
    def skipped_rows(self, skipped_rows):
        """Sets the skipped_rows of this GetImportJobResponse.


        :param skipped_rows: The skipped_rows of this GetImportJobResponse.  # noqa: E501
        :type skipped_rows: int
        """
        if self.local_vars_configuration.client_side_validation and skipped_rows is None:  # noqa: E501
            raise ValueError("Invalid value for `skipped_rows`, must not be `None`")  # noqa: E501

        self._skipped_rows = skipped_rows

    @property
    def inserted_rows(self):
        """Gets the inserted_rows of this GetImportJobResponse.  # noqa: E501


        :return: The inserted_rows of this GetImportJobResponse.  # noqa: E501
        :rtype: int
        """
        return self._inserted_rows

    @inserted_rows.setter
    def inserted_rows(self, inserted_rows):
        """Sets the inserted_rows of this GetImportJobResponse.


        :param inserted_rows: The inserted_rows of this GetImportJobResponse.  # noqa: E501
        :type inserted_rows: int
        """
        if self.local_vars_configuration.client_side_validation and inserted_rows is None:  # noqa: E501
            raise ValueError("Invalid value for `inserted_rows`, must not be `None`")  # noqa: E501

        self._inserted_rows = inserted_rows

    @property
    def updated_rows(self):
        """Gets the updated_rows of this GetImportJobResponse.  # noqa: E501


        :return: The updated_rows of this GetImportJobResponse.  # noqa: E501
        :rtype: int
        """
        return self._updated_rows

    @updated_rows.setter
    def updated_rows(self, updated_rows):
        """Sets the updated_rows of this GetImportJobResponse.


        :param updated_rows: The updated_rows of this GetImportJobResponse.  # noqa: E501
        :type updated_rows: int
        """
        if self.local_vars_configuration.client_side_validation and updated_rows is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_rows`, must not be `None`")  # noqa: E501

        self._updated_rows = updated_rows

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetImportJobResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetImportJobResponse):
            return True

        return self.to_dict() != other.to_dict()
