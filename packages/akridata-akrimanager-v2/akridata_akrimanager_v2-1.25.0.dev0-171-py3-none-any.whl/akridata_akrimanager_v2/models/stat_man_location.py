# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class StatManLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_id': 'str',
        'location_name': 'str',
        'location_description': 'str',
        'location_created_at': 'datetime',
        'location_head_email': 'str',
        'num_lines': 'int',
        'num_stations': 'int',
        'lines': 'list[StatManLine]',
        'stations': 'list[StatManStation]'
    }

    attribute_map = {
        'location_id': 'location_id',
        'location_name': 'location_name',
        'location_description': 'location_description',
        'location_created_at': 'location_created_at',
        'location_head_email': 'location_head_email',
        'num_lines': 'num_lines',
        'num_stations': 'num_stations',
        'lines': 'lines',
        'stations': 'stations'
    }

    def __init__(self, location_id=None, location_name=None, location_description=None, location_created_at=None, location_head_email=None, num_lines=-1, num_stations=None, lines=None, stations=None, local_vars_configuration=None):  # noqa: E501
        """StatManLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._location_id = None
        self._location_name = None
        self._location_description = None
        self._location_created_at = None
        self._location_head_email = None
        self._num_lines = None
        self._num_stations = None
        self._lines = None
        self._stations = None
        self.discriminator = None

        self.location_id = location_id
        self.location_name = location_name
        self.location_description = location_description
        self.location_created_at = location_created_at
        if location_head_email is not None:
            self.location_head_email = location_head_email
        if num_lines is not None:
            self.num_lines = num_lines
        self.num_stations = num_stations
        if lines is not None:
            self.lines = lines
        if stations is not None:
            self.stations = stations

    @property
    def location_id(self):
        """Gets the location_id of this StatManLocation.  # noqa: E501


        :return: The location_id of this StatManLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this StatManLocation.


        :param location_id: The location_id of this StatManLocation.  # noqa: E501
        :type location_id: str
        """
        if self.local_vars_configuration.client_side_validation and location_id is None:  # noqa: E501
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def location_name(self):
        """Gets the location_name of this StatManLocation.  # noqa: E501


        :return: The location_name of this StatManLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this StatManLocation.


        :param location_name: The location_name of this StatManLocation.  # noqa: E501
        :type location_name: str
        """
        if self.local_vars_configuration.client_side_validation and location_name is None:  # noqa: E501
            raise ValueError("Invalid value for `location_name`, must not be `None`")  # noqa: E501

        self._location_name = location_name

    @property
    def location_description(self):
        """Gets the location_description of this StatManLocation.  # noqa: E501


        :return: The location_description of this StatManLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this StatManLocation.


        :param location_description: The location_description of this StatManLocation.  # noqa: E501
        :type location_description: str
        """
        if self.local_vars_configuration.client_side_validation and location_description is None:  # noqa: E501
            raise ValueError("Invalid value for `location_description`, must not be `None`")  # noqa: E501

        self._location_description = location_description

    @property
    def location_created_at(self):
        """Gets the location_created_at of this StatManLocation.  # noqa: E501


        :return: The location_created_at of this StatManLocation.  # noqa: E501
        :rtype: datetime
        """
        return self._location_created_at

    @location_created_at.setter
    def location_created_at(self, location_created_at):
        """Sets the location_created_at of this StatManLocation.


        :param location_created_at: The location_created_at of this StatManLocation.  # noqa: E501
        :type location_created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and location_created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `location_created_at`, must not be `None`")  # noqa: E501

        self._location_created_at = location_created_at

    @property
    def location_head_email(self):
        """Gets the location_head_email of this StatManLocation.  # noqa: E501


        :return: The location_head_email of this StatManLocation.  # noqa: E501
        :rtype: str
        """
        return self._location_head_email

    @location_head_email.setter
    def location_head_email(self, location_head_email):
        """Sets the location_head_email of this StatManLocation.


        :param location_head_email: The location_head_email of this StatManLocation.  # noqa: E501
        :type location_head_email: str
        """

        self._location_head_email = location_head_email

    @property
    def num_lines(self):
        """Gets the num_lines of this StatManLocation.  # noqa: E501


        :return: The num_lines of this StatManLocation.  # noqa: E501
        :rtype: int
        """
        return self._num_lines

    @num_lines.setter
    def num_lines(self, num_lines):
        """Sets the num_lines of this StatManLocation.


        :param num_lines: The num_lines of this StatManLocation.  # noqa: E501
        :type num_lines: int
        """

        self._num_lines = num_lines

    @property
    def num_stations(self):
        """Gets the num_stations of this StatManLocation.  # noqa: E501


        :return: The num_stations of this StatManLocation.  # noqa: E501
        :rtype: int
        """
        return self._num_stations

    @num_stations.setter
    def num_stations(self, num_stations):
        """Sets the num_stations of this StatManLocation.


        :param num_stations: The num_stations of this StatManLocation.  # noqa: E501
        :type num_stations: int
        """
        if self.local_vars_configuration.client_side_validation and num_stations is None:  # noqa: E501
            raise ValueError("Invalid value for `num_stations`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_stations is not None and num_stations < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_stations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_stations = num_stations

    @property
    def lines(self):
        """Gets the lines of this StatManLocation.  # noqa: E501


        :return: The lines of this StatManLocation.  # noqa: E501
        :rtype: list[StatManLine]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this StatManLocation.


        :param lines: The lines of this StatManLocation.  # noqa: E501
        :type lines: list[StatManLine]
        """

        self._lines = lines

    @property
    def stations(self):
        """Gets the stations of this StatManLocation.  # noqa: E501


        :return: The stations of this StatManLocation.  # noqa: E501
        :rtype: list[StatManStation]
        """
        return self._stations

    @stations.setter
    def stations(self, stations):
        """Sets the stations of this StatManLocation.


        :param stations: The stations of this StatManLocation.  # noqa: E501
        :type stations: list[StatManStation]
        """

        self._stations = stations

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatManLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatManLocation):
            return True

        return self.to_dict() != other.to_dict()
