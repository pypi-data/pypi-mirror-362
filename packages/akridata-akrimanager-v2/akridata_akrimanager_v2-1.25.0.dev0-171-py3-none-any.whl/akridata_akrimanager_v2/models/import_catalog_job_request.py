# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ImportCatalogJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'table_name': 'str',
        'description': 'str',
        'dataset_id': 'str',
        'file_list': 'list[FileInfo]',
        'create_table': 'bool',
        'import_feature_details': 'ImportFeatureDetails',
        'notify': 'bool',
        'data_format': 'CatalogTableImportDataFormat',
        'udts_info': 'list[UDTInfo]',
        'file_type': 'FileType',
        'task_type': 'TaskType',
        'import_identifier': 'str',
        'create_update_view_details': 'CreateUpdateViewRequest',
        'callback_context': 'str',
        'status': 'EntityStatus'
    }

    attribute_map = {
        'table_name': 'table_name',
        'description': 'description',
        'dataset_id': 'dataset_id',
        'file_list': 'file_list',
        'create_table': 'create_table',
        'import_feature_details': 'import_feature_details',
        'notify': 'notify',
        'data_format': 'data_format',
        'udts_info': 'udts_info',
        'file_type': 'file_type',
        'task_type': 'task_type',
        'import_identifier': 'import_identifier',
        'create_update_view_details': 'create_update_view_details',
        'callback_context': 'callback_context',
        'status': 'status'
    }

    def __init__(self, table_name=None, description=None, dataset_id=None, file_list=None, create_table=False, import_feature_details=None, notify=False, data_format=None, udts_info=None, file_type=None, task_type=None, import_identifier=None, create_update_view_details=None, callback_context=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ImportCatalogJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._table_name = None
        self._description = None
        self._dataset_id = None
        self._file_list = None
        self._create_table = None
        self._import_feature_details = None
        self._notify = None
        self._data_format = None
        self._udts_info = None
        self._file_type = None
        self._task_type = None
        self._import_identifier = None
        self._create_update_view_details = None
        self._callback_context = None
        self._status = None
        self.discriminator = None

        self.table_name = table_name
        if description is not None:
            self.description = description
        self.dataset_id = dataset_id
        self.file_list = file_list
        if create_table is not None:
            self.create_table = create_table
        if import_feature_details is not None:
            self.import_feature_details = import_feature_details
        if notify is not None:
            self.notify = notify
        if data_format is not None:
            self.data_format = data_format
        if udts_info is not None:
            self.udts_info = udts_info
        if file_type is not None:
            self.file_type = file_type
        if task_type is not None:
            self.task_type = task_type
        if import_identifier is not None:
            self.import_identifier = import_identifier
        if create_update_view_details is not None:
            self.create_update_view_details = create_update_view_details
        if callback_context is not None:
            self.callback_context = callback_context
        if status is not None:
            self.status = status

    @property
    def table_name(self):
        """Gets the table_name of this ImportCatalogJobRequest.  # noqa: E501


        :return: The table_name of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ImportCatalogJobRequest.


        :param table_name: The table_name of this ImportCatalogJobRequest.  # noqa: E501
        :type table_name: str
        """
        if self.local_vars_configuration.client_side_validation and table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def description(self):
        """Gets the description of this ImportCatalogJobRequest.  # noqa: E501


        :return: The description of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ImportCatalogJobRequest.


        :param description: The description of this ImportCatalogJobRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ImportCatalogJobRequest.  # noqa: E501


        :return: The dataset_id of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ImportCatalogJobRequest.


        :param dataset_id: The dataset_id of this ImportCatalogJobRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def file_list(self):
        """Gets the file_list of this ImportCatalogJobRequest.  # noqa: E501


        :return: The file_list of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: list[FileInfo]
        """
        return self._file_list

    @file_list.setter
    def file_list(self, file_list):
        """Sets the file_list of this ImportCatalogJobRequest.


        :param file_list: The file_list of this ImportCatalogJobRequest.  # noqa: E501
        :type file_list: list[FileInfo]
        """
        if self.local_vars_configuration.client_side_validation and file_list is None:  # noqa: E501
            raise ValueError("Invalid value for `file_list`, must not be `None`")  # noqa: E501

        self._file_list = file_list

    @property
    def create_table(self):
        """Gets the create_table of this ImportCatalogJobRequest.  # noqa: E501


        :return: The create_table of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_table

    @create_table.setter
    def create_table(self, create_table):
        """Sets the create_table of this ImportCatalogJobRequest.


        :param create_table: The create_table of this ImportCatalogJobRequest.  # noqa: E501
        :type create_table: bool
        """

        self._create_table = create_table

    @property
    def import_feature_details(self):
        """Gets the import_feature_details of this ImportCatalogJobRequest.  # noqa: E501


        :return: The import_feature_details of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: ImportFeatureDetails
        """
        return self._import_feature_details

    @import_feature_details.setter
    def import_feature_details(self, import_feature_details):
        """Sets the import_feature_details of this ImportCatalogJobRequest.


        :param import_feature_details: The import_feature_details of this ImportCatalogJobRequest.  # noqa: E501
        :type import_feature_details: ImportFeatureDetails
        """

        self._import_feature_details = import_feature_details

    @property
    def notify(self):
        """Gets the notify of this ImportCatalogJobRequest.  # noqa: E501


        :return: The notify of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this ImportCatalogJobRequest.


        :param notify: The notify of this ImportCatalogJobRequest.  # noqa: E501
        :type notify: bool
        """

        self._notify = notify

    @property
    def data_format(self):
        """Gets the data_format of this ImportCatalogJobRequest.  # noqa: E501


        :return: The data_format of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: CatalogTableImportDataFormat
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this ImportCatalogJobRequest.


        :param data_format: The data_format of this ImportCatalogJobRequest.  # noqa: E501
        :type data_format: CatalogTableImportDataFormat
        """

        self._data_format = data_format

    @property
    def udts_info(self):
        """Gets the udts_info of this ImportCatalogJobRequest.  # noqa: E501


        :return: The udts_info of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: list[UDTInfo]
        """
        return self._udts_info

    @udts_info.setter
    def udts_info(self, udts_info):
        """Sets the udts_info of this ImportCatalogJobRequest.


        :param udts_info: The udts_info of this ImportCatalogJobRequest.  # noqa: E501
        :type udts_info: list[UDTInfo]
        """

        self._udts_info = udts_info

    @property
    def file_type(self):
        """Gets the file_type of this ImportCatalogJobRequest.  # noqa: E501


        :return: The file_type of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ImportCatalogJobRequest.


        :param file_type: The file_type of this ImportCatalogJobRequest.  # noqa: E501
        :type file_type: FileType
        """

        self._file_type = file_type

    @property
    def task_type(self):
        """Gets the task_type of this ImportCatalogJobRequest.  # noqa: E501


        :return: The task_type of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this ImportCatalogJobRequest.


        :param task_type: The task_type of this ImportCatalogJobRequest.  # noqa: E501
        :type task_type: TaskType
        """

        self._task_type = task_type

    @property
    def import_identifier(self):
        """Gets the import_identifier of this ImportCatalogJobRequest.  # noqa: E501


        :return: The import_identifier of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._import_identifier

    @import_identifier.setter
    def import_identifier(self, import_identifier):
        """Sets the import_identifier of this ImportCatalogJobRequest.


        :param import_identifier: The import_identifier of this ImportCatalogJobRequest.  # noqa: E501
        :type import_identifier: str
        """

        self._import_identifier = import_identifier

    @property
    def create_update_view_details(self):
        """Gets the create_update_view_details of this ImportCatalogJobRequest.  # noqa: E501


        :return: The create_update_view_details of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: CreateUpdateViewRequest
        """
        return self._create_update_view_details

    @create_update_view_details.setter
    def create_update_view_details(self, create_update_view_details):
        """Sets the create_update_view_details of this ImportCatalogJobRequest.


        :param create_update_view_details: The create_update_view_details of this ImportCatalogJobRequest.  # noqa: E501
        :type create_update_view_details: CreateUpdateViewRequest
        """

        self._create_update_view_details = create_update_view_details

    @property
    def callback_context(self):
        """Gets the callback_context of this ImportCatalogJobRequest.  # noqa: E501


        :return: The callback_context of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback_context

    @callback_context.setter
    def callback_context(self, callback_context):
        """Sets the callback_context of this ImportCatalogJobRequest.


        :param callback_context: The callback_context of this ImportCatalogJobRequest.  # noqa: E501
        :type callback_context: str
        """

        self._callback_context = callback_context

    @property
    def status(self):
        """Gets the status of this ImportCatalogJobRequest.  # noqa: E501


        :return: The status of this ImportCatalogJobRequest.  # noqa: E501
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImportCatalogJobRequest.


        :param status: The status of this ImportCatalogJobRequest.  # noqa: E501
        :type status: EntityStatus
        """

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportCatalogJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportCatalogJobRequest):
            return True

        return self.to_dict() != other.to_dict()
