# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class MakeQueryViewRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'projections': 'list[str]',
        'where_conditions': 'WhereCondition',
        'where_conditions_post': 'WhereCondition',
        'order_by': 'list[list[object]]',
        'sequence_params': 'SequenceParams',
        'resultset_params_list': 'list[ResultsetParams]',
        'coreset_params': 'CoresetParams',
        'limit': 'int',
        'query_type': 'QueryType',
        'pe_cat_only_on_file_path': 'bool',
        'rate_limit_pe': 'bool',
        'view_id': 'str',
        'view_name': 'str',
        'udf_validation_mode': 'UDFValidationMode'
    }

    attribute_map = {
        'projections': 'projections',
        'where_conditions': 'where_conditions',
        'where_conditions_post': 'where_conditions_post',
        'order_by': 'order_by',
        'sequence_params': 'sequence_params',
        'resultset_params_list': 'resultset_params_list',
        'coreset_params': 'coreset_params',
        'limit': 'limit',
        'query_type': 'query_type',
        'pe_cat_only_on_file_path': 'pe_cat_only_on_file_path',
        'rate_limit_pe': 'rate_limit_pe',
        'view_id': 'view_id',
        'view_name': 'view_name',
        'udf_validation_mode': 'udf_validation_mode'
    }

    def __init__(self, projections=None, where_conditions=None, where_conditions_post=None, order_by=None, sequence_params=None, resultset_params_list=None, coreset_params=None, limit=1000, query_type=None, pe_cat_only_on_file_path=False, rate_limit_pe=True, view_id=None, view_name=None, udf_validation_mode=None, local_vars_configuration=None):  # noqa: E501
        """MakeQueryViewRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._projections = None
        self._where_conditions = None
        self._where_conditions_post = None
        self._order_by = None
        self._sequence_params = None
        self._resultset_params_list = None
        self._coreset_params = None
        self._limit = None
        self._query_type = None
        self._pe_cat_only_on_file_path = None
        self._rate_limit_pe = None
        self._view_id = None
        self._view_name = None
        self._udf_validation_mode = None
        self.discriminator = None

        if projections is not None:
            self.projections = projections
        if where_conditions is not None:
            self.where_conditions = where_conditions
        if where_conditions_post is not None:
            self.where_conditions_post = where_conditions_post
        if order_by is not None:
            self.order_by = order_by
        if sequence_params is not None:
            self.sequence_params = sequence_params
        if resultset_params_list is not None:
            self.resultset_params_list = resultset_params_list
        if coreset_params is not None:
            self.coreset_params = coreset_params
        if limit is not None:
            self.limit = limit
        if query_type is not None:
            self.query_type = query_type
        if pe_cat_only_on_file_path is not None:
            self.pe_cat_only_on_file_path = pe_cat_only_on_file_path
        if rate_limit_pe is not None:
            self.rate_limit_pe = rate_limit_pe
        self.view_id = view_id
        self.view_name = view_name
        if udf_validation_mode is not None:
            self.udf_validation_mode = udf_validation_mode

    @property
    def projections(self):
        """Gets the projections of this MakeQueryViewRequest.  # noqa: E501


        :return: The projections of this MakeQueryViewRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._projections

    @projections.setter
    def projections(self, projections):
        """Sets the projections of this MakeQueryViewRequest.


        :param projections: The projections of this MakeQueryViewRequest.  # noqa: E501
        :type projections: list[str]
        """

        self._projections = projections

    @property
    def where_conditions(self):
        """Gets the where_conditions of this MakeQueryViewRequest.  # noqa: E501


        :return: The where_conditions of this MakeQueryViewRequest.  # noqa: E501
        :rtype: WhereCondition
        """
        return self._where_conditions

    @where_conditions.setter
    def where_conditions(self, where_conditions):
        """Sets the where_conditions of this MakeQueryViewRequest.


        :param where_conditions: The where_conditions of this MakeQueryViewRequest.  # noqa: E501
        :type where_conditions: WhereCondition
        """

        self._where_conditions = where_conditions

    @property
    def where_conditions_post(self):
        """Gets the where_conditions_post of this MakeQueryViewRequest.  # noqa: E501


        :return: The where_conditions_post of this MakeQueryViewRequest.  # noqa: E501
        :rtype: WhereCondition
        """
        return self._where_conditions_post

    @where_conditions_post.setter
    def where_conditions_post(self, where_conditions_post):
        """Sets the where_conditions_post of this MakeQueryViewRequest.


        :param where_conditions_post: The where_conditions_post of this MakeQueryViewRequest.  # noqa: E501
        :type where_conditions_post: WhereCondition
        """

        self._where_conditions_post = where_conditions_post

    @property
    def order_by(self):
        """Gets the order_by of this MakeQueryViewRequest.  # noqa: E501


        :return: The order_by of this MakeQueryViewRequest.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this MakeQueryViewRequest.


        :param order_by: The order_by of this MakeQueryViewRequest.  # noqa: E501
        :type order_by: list[list[object]]
        """

        self._order_by = order_by

    @property
    def sequence_params(self):
        """Gets the sequence_params of this MakeQueryViewRequest.  # noqa: E501

        Sequence specification parameters. Query returns anchor frames for sequences.  # noqa: E501

        :return: The sequence_params of this MakeQueryViewRequest.  # noqa: E501
        :rtype: SequenceParams
        """
        return self._sequence_params

    @sequence_params.setter
    def sequence_params(self, sequence_params):
        """Sets the sequence_params of this MakeQueryViewRequest.

        Sequence specification parameters. Query returns anchor frames for sequences.  # noqa: E501

        :param sequence_params: The sequence_params of this MakeQueryViewRequest.  # noqa: E501
        :type sequence_params: SequenceParams
        """

        self._sequence_params = sequence_params

    @property
    def resultset_params_list(self):
        """Gets the resultset_params_list of this MakeQueryViewRequest.  # noqa: E501


        :return: The resultset_params_list of this MakeQueryViewRequest.  # noqa: E501
        :rtype: list[ResultsetParams]
        """
        return self._resultset_params_list

    @resultset_params_list.setter
    def resultset_params_list(self, resultset_params_list):
        """Sets the resultset_params_list of this MakeQueryViewRequest.


        :param resultset_params_list: The resultset_params_list of this MakeQueryViewRequest.  # noqa: E501
        :type resultset_params_list: list[ResultsetParams]
        """

        self._resultset_params_list = resultset_params_list

    @property
    def coreset_params(self):
        """Gets the coreset_params of this MakeQueryViewRequest.  # noqa: E501


        :return: The coreset_params of this MakeQueryViewRequest.  # noqa: E501
        :rtype: CoresetParams
        """
        return self._coreset_params

    @coreset_params.setter
    def coreset_params(self, coreset_params):
        """Sets the coreset_params of this MakeQueryViewRequest.


        :param coreset_params: The coreset_params of this MakeQueryViewRequest.  # noqa: E501
        :type coreset_params: CoresetParams
        """

        self._coreset_params = coreset_params

    @property
    def limit(self):
        """Gets the limit of this MakeQueryViewRequest.  # noqa: E501


        :return: The limit of this MakeQueryViewRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this MakeQueryViewRequest.


        :param limit: The limit of this MakeQueryViewRequest.  # noqa: E501
        :type limit: int
        """

        self._limit = limit

    @property
    def query_type(self):
        """Gets the query_type of this MakeQueryViewRequest.  # noqa: E501


        :return: The query_type of this MakeQueryViewRequest.  # noqa: E501
        :rtype: QueryType
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this MakeQueryViewRequest.


        :param query_type: The query_type of this MakeQueryViewRequest.  # noqa: E501
        :type query_type: QueryType
        """

        self._query_type = query_type

    @property
    def pe_cat_only_on_file_path(self):
        """Gets the pe_cat_only_on_file_path of this MakeQueryViewRequest.  # noqa: E501


        :return: The pe_cat_only_on_file_path of this MakeQueryViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._pe_cat_only_on_file_path

    @pe_cat_only_on_file_path.setter
    def pe_cat_only_on_file_path(self, pe_cat_only_on_file_path):
        """Sets the pe_cat_only_on_file_path of this MakeQueryViewRequest.


        :param pe_cat_only_on_file_path: The pe_cat_only_on_file_path of this MakeQueryViewRequest.  # noqa: E501
        :type pe_cat_only_on_file_path: bool
        """

        self._pe_cat_only_on_file_path = pe_cat_only_on_file_path

    @property
    def rate_limit_pe(self):
        """Gets the rate_limit_pe of this MakeQueryViewRequest.  # noqa: E501


        :return: The rate_limit_pe of this MakeQueryViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._rate_limit_pe

    @rate_limit_pe.setter
    def rate_limit_pe(self, rate_limit_pe):
        """Sets the rate_limit_pe of this MakeQueryViewRequest.


        :param rate_limit_pe: The rate_limit_pe of this MakeQueryViewRequest.  # noqa: E501
        :type rate_limit_pe: bool
        """

        self._rate_limit_pe = rate_limit_pe

    @property
    def view_id(self):
        """Gets the view_id of this MakeQueryViewRequest.  # noqa: E501


        :return: The view_id of this MakeQueryViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this MakeQueryViewRequest.


        :param view_id: The view_id of this MakeQueryViewRequest.  # noqa: E501
        :type view_id: str
        """
        if self.local_vars_configuration.client_side_validation and view_id is None:  # noqa: E501
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def view_name(self):
        """Gets the view_name of this MakeQueryViewRequest.  # noqa: E501


        :return: The view_name of this MakeQueryViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this MakeQueryViewRequest.


        :param view_name: The view_name of this MakeQueryViewRequest.  # noqa: E501
        :type view_name: str
        """
        if self.local_vars_configuration.client_side_validation and view_name is None:  # noqa: E501
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def udf_validation_mode(self):
        """Gets the udf_validation_mode of this MakeQueryViewRequest.  # noqa: E501


        :return: The udf_validation_mode of this MakeQueryViewRequest.  # noqa: E501
        :rtype: UDFValidationMode
        """
        return self._udf_validation_mode

    @udf_validation_mode.setter
    def udf_validation_mode(self, udf_validation_mode):
        """Sets the udf_validation_mode of this MakeQueryViewRequest.


        :param udf_validation_mode: The udf_validation_mode of this MakeQueryViewRequest.  # noqa: E501
        :type udf_validation_mode: UDFValidationMode
        """

        self._udf_validation_mode = udf_validation_mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MakeQueryViewRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MakeQueryViewRequest):
            return True

        return self.to_dict() != other.to_dict()
