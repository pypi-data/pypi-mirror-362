# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DataSetContainer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'namespace': 'str',
        'name': 'str',
        'version': 'str',
        'use_image_server': 'bool',
        'is_scratchpad': 'bool',
        'internal': 'bool',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'namespace': 'namespace',
        'name': 'name',
        'version': 'version',
        'use_image_server': 'use_image_server',
        'is_scratchpad': 'is_scratchpad',
        'internal': 'internal',
        'uri': 'uri'
    }

    def __init__(self, id=None, namespace=None, name=None, version=None, use_image_server=None, is_scratchpad=None, internal=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """DataSetContainer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._namespace = None
        self._name = None
        self._version = None
        self._use_image_server = None
        self._is_scratchpad = None
        self._internal = None
        self._uri = None
        self.discriminator = None

        self.id = id
        self.namespace = namespace
        self.name = name
        self.version = version
        self.use_image_server = use_image_server
        self.is_scratchpad = is_scratchpad
        if internal is not None:
            self.internal = internal
        if uri is not None:
            self.uri = uri

    @property
    def id(self):
        """Gets the id of this DataSetContainer.  # noqa: E501


        :return: The id of this DataSetContainer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSetContainer.


        :param id: The id of this DataSetContainer.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def namespace(self):
        """Gets the namespace of this DataSetContainer.  # noqa: E501


        :return: The namespace of this DataSetContainer.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DataSetContainer.


        :param namespace: The namespace of this DataSetContainer.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this DataSetContainer.  # noqa: E501


        :return: The name of this DataSetContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetContainer.


        :param name: The name of this DataSetContainer.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this DataSetContainer.  # noqa: E501


        :return: The version of this DataSetContainer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DataSetContainer.


        :param version: The version of this DataSetContainer.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def use_image_server(self):
        """Gets the use_image_server of this DataSetContainer.  # noqa: E501


        :return: The use_image_server of this DataSetContainer.  # noqa: E501
        :rtype: bool
        """
        return self._use_image_server

    @use_image_server.setter
    def use_image_server(self, use_image_server):
        """Sets the use_image_server of this DataSetContainer.


        :param use_image_server: The use_image_server of this DataSetContainer.  # noqa: E501
        :type use_image_server: bool
        """
        if self.local_vars_configuration.client_side_validation and use_image_server is None:  # noqa: E501
            raise ValueError("Invalid value for `use_image_server`, must not be `None`")  # noqa: E501

        self._use_image_server = use_image_server

    @property
    def is_scratchpad(self):
        """Gets the is_scratchpad of this DataSetContainer.  # noqa: E501


        :return: The is_scratchpad of this DataSetContainer.  # noqa: E501
        :rtype: bool
        """
        return self._is_scratchpad

    @is_scratchpad.setter
    def is_scratchpad(self, is_scratchpad):
        """Sets the is_scratchpad of this DataSetContainer.


        :param is_scratchpad: The is_scratchpad of this DataSetContainer.  # noqa: E501
        :type is_scratchpad: bool
        """
        if self.local_vars_configuration.client_side_validation and is_scratchpad is None:  # noqa: E501
            raise ValueError("Invalid value for `is_scratchpad`, must not be `None`")  # noqa: E501

        self._is_scratchpad = is_scratchpad

    @property
    def internal(self):
        """Gets the internal of this DataSetContainer.  # noqa: E501


        :return: The internal of this DataSetContainer.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this DataSetContainer.


        :param internal: The internal of this DataSetContainer.  # noqa: E501
        :type internal: bool
        """

        self._internal = internal

    @property
    def uri(self):
        """Gets the uri of this DataSetContainer.  # noqa: E501


        :return: The uri of this DataSetContainer.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DataSetContainer.


        :param uri: The uri of this DataSetContainer.  # noqa: E501
        :type uri: str
        """

        self._uri = uri

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetContainer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSetContainer):
            return True

        return self.to_dict() != other.to_dict()
