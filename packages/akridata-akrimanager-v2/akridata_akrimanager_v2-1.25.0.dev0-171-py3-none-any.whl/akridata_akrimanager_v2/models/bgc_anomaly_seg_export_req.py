# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class BGCAnomalySegExportReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_id': 'str',
        'rules': 'RulesInfo',
        'input_spec_presigned_url': 'str',
        'metadata': 'ExportReqMetadata'
    }

    attribute_map = {
        'session_id': 'session_id',
        'rules': 'rules',
        'input_spec_presigned_url': 'input_spec_presigned_url',
        'metadata': 'metadata'
    }

    def __init__(self, session_id=None, rules=None, input_spec_presigned_url=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """BGCAnomalySegExportReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._session_id = None
        self._rules = None
        self._input_spec_presigned_url = None
        self._metadata = None
        self.discriminator = None

        self.session_id = session_id
        self.rules = rules
        self.input_spec_presigned_url = input_spec_presigned_url
        self.metadata = metadata

    @property
    def session_id(self):
        """Gets the session_id of this BGCAnomalySegExportReq.  # noqa: E501


        :return: The session_id of this BGCAnomalySegExportReq.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this BGCAnomalySegExportReq.


        :param session_id: The session_id of this BGCAnomalySegExportReq.  # noqa: E501
        :type session_id: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def rules(self):
        """Gets the rules of this BGCAnomalySegExportReq.  # noqa: E501


        :return: The rules of this BGCAnomalySegExportReq.  # noqa: E501
        :rtype: RulesInfo
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this BGCAnomalySegExportReq.


        :param rules: The rules of this BGCAnomalySegExportReq.  # noqa: E501
        :type rules: RulesInfo
        """
        if self.local_vars_configuration.client_side_validation and rules is None:  # noqa: E501
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    @property
    def input_spec_presigned_url(self):
        """Gets the input_spec_presigned_url of this BGCAnomalySegExportReq.  # noqa: E501


        :return: The input_spec_presigned_url of this BGCAnomalySegExportReq.  # noqa: E501
        :rtype: str
        """
        return self._input_spec_presigned_url

    @input_spec_presigned_url.setter
    def input_spec_presigned_url(self, input_spec_presigned_url):
        """Sets the input_spec_presigned_url of this BGCAnomalySegExportReq.


        :param input_spec_presigned_url: The input_spec_presigned_url of this BGCAnomalySegExportReq.  # noqa: E501
        :type input_spec_presigned_url: str
        """
        if self.local_vars_configuration.client_side_validation and input_spec_presigned_url is None:  # noqa: E501
            raise ValueError("Invalid value for `input_spec_presigned_url`, must not be `None`")  # noqa: E501

        self._input_spec_presigned_url = input_spec_presigned_url

    @property
    def metadata(self):
        """Gets the metadata of this BGCAnomalySegExportReq.  # noqa: E501


        :return: The metadata of this BGCAnomalySegExportReq.  # noqa: E501
        :rtype: ExportReqMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BGCAnomalySegExportReq.


        :param metadata: The metadata of this BGCAnomalySegExportReq.  # noqa: E501
        :type metadata: ExportReqMetadata
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BGCAnomalySegExportReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BGCAnomalySegExportReq):
            return True

        return self.to_dict() != other.to_dict()
