# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class PipelineVersionDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'thumbnail_docker': 'PipelineDocker',
        'attribute_generator_dockers': 'list[PipelineAttributeGenerator]',
        'pipeline_name': 'str',
        'pipeline_description': 'str'
    }

    attribute_map = {
        'thumbnail_docker': 'thumbnail_docker',
        'attribute_generator_dockers': 'attribute_generator_dockers',
        'pipeline_name': 'pipeline_name',
        'pipeline_description': 'pipeline_description'
    }

    def __init__(self, thumbnail_docker=None, attribute_generator_dockers=None, pipeline_name=None, pipeline_description=None, local_vars_configuration=None):  # noqa: E501
        """PipelineVersionDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._thumbnail_docker = None
        self._attribute_generator_dockers = None
        self._pipeline_name = None
        self._pipeline_description = None
        self.discriminator = None

        if thumbnail_docker is not None:
            self.thumbnail_docker = thumbnail_docker
        if attribute_generator_dockers is not None:
            self.attribute_generator_dockers = attribute_generator_dockers
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if pipeline_description is not None:
            self.pipeline_description = pipeline_description

    @property
    def thumbnail_docker(self):
        """Gets the thumbnail_docker of this PipelineVersionDetails.  # noqa: E501


        :return: The thumbnail_docker of this PipelineVersionDetails.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._thumbnail_docker

    @thumbnail_docker.setter
    def thumbnail_docker(self, thumbnail_docker):
        """Sets the thumbnail_docker of this PipelineVersionDetails.


        :param thumbnail_docker: The thumbnail_docker of this PipelineVersionDetails.  # noqa: E501
        :type thumbnail_docker: PipelineDocker
        """

        self._thumbnail_docker = thumbnail_docker

    @property
    def attribute_generator_dockers(self):
        """Gets the attribute_generator_dockers of this PipelineVersionDetails.  # noqa: E501


        :return: The attribute_generator_dockers of this PipelineVersionDetails.  # noqa: E501
        :rtype: list[PipelineAttributeGenerator]
        """
        return self._attribute_generator_dockers

    @attribute_generator_dockers.setter
    def attribute_generator_dockers(self, attribute_generator_dockers):
        """Sets the attribute_generator_dockers of this PipelineVersionDetails.


        :param attribute_generator_dockers: The attribute_generator_dockers of this PipelineVersionDetails.  # noqa: E501
        :type attribute_generator_dockers: list[PipelineAttributeGenerator]
        """

        self._attribute_generator_dockers = attribute_generator_dockers

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineVersionDetails.  # noqa: E501


        :return: The pipeline_name of this PipelineVersionDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineVersionDetails.


        :param pipeline_name: The pipeline_name of this PipelineVersionDetails.  # noqa: E501
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def pipeline_description(self):
        """Gets the pipeline_description of this PipelineVersionDetails.  # noqa: E501


        :return: The pipeline_description of this PipelineVersionDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_description

    @pipeline_description.setter
    def pipeline_description(self, pipeline_description):
        """Sets the pipeline_description of this PipelineVersionDetails.


        :param pipeline_description: The pipeline_description of this PipelineVersionDetails.  # noqa: E501
        :type pipeline_description: str
        """

        self._pipeline_description = pipeline_description

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineVersionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineVersionDetails):
            return True

        return self.to_dict() != other.to_dict()
