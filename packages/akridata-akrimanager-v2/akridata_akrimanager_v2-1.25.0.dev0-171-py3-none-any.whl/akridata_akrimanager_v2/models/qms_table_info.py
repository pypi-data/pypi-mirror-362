# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class QMSTableInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'table_name': 'str',
        'abs_table_name': 'str',
        'table_type': 'TableType',
        'pipeline_id': 'str',
        'catalog_name': 'str',
        'schema_name': 'str',
        'alias_name': 'str',
        'join_conditions': 'list[JoinCondition]',
        'join_type': 'TableJoinType'
    }

    attribute_map = {
        'table_name': 'table_name',
        'abs_table_name': 'abs_table_name',
        'table_type': 'table_type',
        'pipeline_id': 'pipeline_id',
        'catalog_name': 'catalog_name',
        'schema_name': 'schema_name',
        'alias_name': 'alias_name',
        'join_conditions': 'join_conditions',
        'join_type': 'join_type'
    }

    def __init__(self, table_name=None, abs_table_name=None, table_type=None, pipeline_id=None, catalog_name=None, schema_name=None, alias_name=None, join_conditions=None, join_type=None, local_vars_configuration=None):  # noqa: E501
        """QMSTableInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._table_name = None
        self._abs_table_name = None
        self._table_type = None
        self._pipeline_id = None
        self._catalog_name = None
        self._schema_name = None
        self._alias_name = None
        self._join_conditions = None
        self._join_type = None
        self.discriminator = None

        self.table_name = table_name
        self.abs_table_name = abs_table_name
        self.table_type = table_type
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if catalog_name is not None:
            self.catalog_name = catalog_name
        if schema_name is not None:
            self.schema_name = schema_name
        self.alias_name = alias_name
        if join_conditions is not None:
            self.join_conditions = join_conditions
        if join_type is not None:
            self.join_type = join_type

    @property
    def table_name(self):
        """Gets the table_name of this QMSTableInfo.  # noqa: E501


        :return: The table_name of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this QMSTableInfo.


        :param table_name: The table_name of this QMSTableInfo.  # noqa: E501
        :type table_name: str
        """
        if self.local_vars_configuration.client_side_validation and table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def abs_table_name(self):
        """Gets the abs_table_name of this QMSTableInfo.  # noqa: E501


        :return: The abs_table_name of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._abs_table_name

    @abs_table_name.setter
    def abs_table_name(self, abs_table_name):
        """Sets the abs_table_name of this QMSTableInfo.


        :param abs_table_name: The abs_table_name of this QMSTableInfo.  # noqa: E501
        :type abs_table_name: str
        """
        if self.local_vars_configuration.client_side_validation and abs_table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `abs_table_name`, must not be `None`")  # noqa: E501

        self._abs_table_name = abs_table_name

    @property
    def table_type(self):
        """Gets the table_type of this QMSTableInfo.  # noqa: E501


        :return: The table_type of this QMSTableInfo.  # noqa: E501
        :rtype: TableType
        """
        return self._table_type

    @table_type.setter
    def table_type(self, table_type):
        """Sets the table_type of this QMSTableInfo.


        :param table_type: The table_type of this QMSTableInfo.  # noqa: E501
        :type table_type: TableType
        """
        if self.local_vars_configuration.client_side_validation and table_type is None:  # noqa: E501
            raise ValueError("Invalid value for `table_type`, must not be `None`")  # noqa: E501

        self._table_type = table_type

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this QMSTableInfo.  # noqa: E501


        :return: The pipeline_id of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this QMSTableInfo.


        :param pipeline_id: The pipeline_id of this QMSTableInfo.  # noqa: E501
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def catalog_name(self):
        """Gets the catalog_name of this QMSTableInfo.  # noqa: E501


        :return: The catalog_name of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._catalog_name

    @catalog_name.setter
    def catalog_name(self, catalog_name):
        """Sets the catalog_name of this QMSTableInfo.


        :param catalog_name: The catalog_name of this QMSTableInfo.  # noqa: E501
        :type catalog_name: str
        """

        self._catalog_name = catalog_name

    @property
    def schema_name(self):
        """Gets the schema_name of this QMSTableInfo.  # noqa: E501


        :return: The schema_name of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this QMSTableInfo.


        :param schema_name: The schema_name of this QMSTableInfo.  # noqa: E501
        :type schema_name: str
        """

        self._schema_name = schema_name

    @property
    def alias_name(self):
        """Gets the alias_name of this QMSTableInfo.  # noqa: E501


        :return: The alias_name of this QMSTableInfo.  # noqa: E501
        :rtype: str
        """
        return self._alias_name

    @alias_name.setter
    def alias_name(self, alias_name):
        """Sets the alias_name of this QMSTableInfo.


        :param alias_name: The alias_name of this QMSTableInfo.  # noqa: E501
        :type alias_name: str
        """
        if self.local_vars_configuration.client_side_validation and alias_name is None:  # noqa: E501
            raise ValueError("Invalid value for `alias_name`, must not be `None`")  # noqa: E501

        self._alias_name = alias_name

    @property
    def join_conditions(self):
        """Gets the join_conditions of this QMSTableInfo.  # noqa: E501


        :return: The join_conditions of this QMSTableInfo.  # noqa: E501
        :rtype: list[JoinCondition]
        """
        return self._join_conditions

    @join_conditions.setter
    def join_conditions(self, join_conditions):
        """Sets the join_conditions of this QMSTableInfo.


        :param join_conditions: The join_conditions of this QMSTableInfo.  # noqa: E501
        :type join_conditions: list[JoinCondition]
        """

        self._join_conditions = join_conditions

    @property
    def join_type(self):
        """Gets the join_type of this QMSTableInfo.  # noqa: E501


        :return: The join_type of this QMSTableInfo.  # noqa: E501
        :rtype: TableJoinType
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this QMSTableInfo.


        :param join_type: The join_type of this QMSTableInfo.  # noqa: E501
        :type join_type: TableJoinType
        """

        self._join_type = join_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QMSTableInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QMSTableInfo):
            return True

        return self.to_dict() != other.to_dict()
