# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SequenceParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'length': 'float',
        'stride': 'float',
        'offset': 'float'
    }

    attribute_map = {
        'length': 'length',
        'stride': 'stride',
        'offset': 'offset'
    }

    def __init__(self, length=None, stride=None, offset=0, local_vars_configuration=None):  # noqa: E501
        """SequenceParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._length = None
        self._stride = None
        self._offset = None
        self.discriminator = None

        if length is not None:
            self.length = length
        if stride is not None:
            self.stride = stride
        if offset is not None:
            self.offset = offset

    @property
    def length(self):
        """Gets the length of this SequenceParams.  # noqa: E501

        Length of sequence in seconds.  # noqa: E501

        :return: The length of this SequenceParams.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this SequenceParams.

        Length of sequence in seconds.  # noqa: E501

        :param length: The length of this SequenceParams.  # noqa: E501
        :type length: float
        """

        self._length = length

    @property
    def stride(self):
        """Gets the stride of this SequenceParams.  # noqa: E501

        Minimum time gap in seconds between successive sequences.  # noqa: E501

        :return: The stride of this SequenceParams.  # noqa: E501
        :rtype: float
        """
        return self._stride

    @stride.setter
    def stride(self, stride):
        """Sets the stride of this SequenceParams.

        Minimum time gap in seconds between successive sequences.  # noqa: E501

        :param stride: The stride of this SequenceParams.  # noqa: E501
        :type stride: float
        """

        self._stride = stride

    @property
    def offset(self):
        """Gets the offset of this SequenceParams.  # noqa: E501

        Time in seconds before anchor frame to be treated as start of sequence.  # noqa: E501

        :return: The offset of this SequenceParams.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SequenceParams.

        Time in seconds before anchor frame to be treated as start of sequence.  # noqa: E501

        :param offset: The offset of this SequenceParams.  # noqa: E501
        :type offset: float
        """
        if (self.local_vars_configuration.client_side_validation and
                offset is not None and offset < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `offset`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._offset = offset

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequenceParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequenceParams):
            return True

        return self.to_dict() != other.to_dict()
