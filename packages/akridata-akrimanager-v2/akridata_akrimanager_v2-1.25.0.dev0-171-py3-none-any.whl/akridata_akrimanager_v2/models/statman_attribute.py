# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class StatmanAttribute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'pd_class': 'str',
        'pd_score': 'float',
        'pd_box': 'str',
        'pd_seg': 'str',
        'pd_custom_data': 'object',
        'map_path': 'str',
        'timestamp': 'datetime',
        'model_name': 'str',
        'camera_id': 'str',
        'sensor_id': 'str',
        'is_error': 'bool',
        'gt_class': 'str',
        'gt_color': 'str',
        'gt_box': 'str',
        'gt_seg': 'str',
        'gt_custom_data': 'object',
        'operator_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'pd_class': 'pd_class',
        'pd_score': 'pd_score',
        'pd_box': 'pd_box',
        'pd_seg': 'pd_seg',
        'pd_custom_data': 'pd_custom_data',
        'map_path': 'map_path',
        'timestamp': 'timestamp',
        'model_name': 'model_name',
        'camera_id': 'camera_id',
        'sensor_id': 'sensor_id',
        'is_error': 'is_error',
        'gt_class': 'gt_class',
        'gt_color': 'gt_color',
        'gt_box': 'gt_box',
        'gt_seg': 'gt_seg',
        'gt_custom_data': 'gt_custom_data',
        'operator_id': 'operator_id'
    }

    def __init__(self, id=None, pd_class=None, pd_score=None, pd_box=None, pd_seg=None, pd_custom_data=None, map_path=None, timestamp=None, model_name=None, camera_id=None, sensor_id=None, is_error=None, gt_class=None, gt_color=None, gt_box=None, gt_seg=None, gt_custom_data=None, operator_id=None, local_vars_configuration=None):  # noqa: E501
        """StatmanAttribute - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._pd_class = None
        self._pd_score = None
        self._pd_box = None
        self._pd_seg = None
        self._pd_custom_data = None
        self._map_path = None
        self._timestamp = None
        self._model_name = None
        self._camera_id = None
        self._sensor_id = None
        self._is_error = None
        self._gt_class = None
        self._gt_color = None
        self._gt_box = None
        self._gt_seg = None
        self._gt_custom_data = None
        self._operator_id = None
        self.discriminator = None

        self.id = id
        if pd_class is not None:
            self.pd_class = pd_class
        if pd_score is not None:
            self.pd_score = pd_score
        if pd_box is not None:
            self.pd_box = pd_box
        if pd_seg is not None:
            self.pd_seg = pd_seg
        if pd_custom_data is not None:
            self.pd_custom_data = pd_custom_data
        if map_path is not None:
            self.map_path = map_path
        if timestamp is not None:
            self.timestamp = timestamp
        if model_name is not None:
            self.model_name = model_name
        if camera_id is not None:
            self.camera_id = camera_id
        if sensor_id is not None:
            self.sensor_id = sensor_id
        if is_error is not None:
            self.is_error = is_error
        if gt_class is not None:
            self.gt_class = gt_class
        if gt_color is not None:
            self.gt_color = gt_color
        if gt_box is not None:
            self.gt_box = gt_box
        if gt_seg is not None:
            self.gt_seg = gt_seg
        if gt_custom_data is not None:
            self.gt_custom_data = gt_custom_data
        if operator_id is not None:
            self.operator_id = operator_id

    @property
    def id(self):
        """Gets the id of this StatmanAttribute.  # noqa: E501


        :return: The id of this StatmanAttribute.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatmanAttribute.


        :param id: The id of this StatmanAttribute.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def pd_class(self):
        """Gets the pd_class of this StatmanAttribute.  # noqa: E501


        :return: The pd_class of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._pd_class

    @pd_class.setter
    def pd_class(self, pd_class):
        """Sets the pd_class of this StatmanAttribute.


        :param pd_class: The pd_class of this StatmanAttribute.  # noqa: E501
        :type pd_class: str
        """

        self._pd_class = pd_class

    @property
    def pd_score(self):
        """Gets the pd_score of this StatmanAttribute.  # noqa: E501


        :return: The pd_score of this StatmanAttribute.  # noqa: E501
        :rtype: float
        """
        return self._pd_score

    @pd_score.setter
    def pd_score(self, pd_score):
        """Sets the pd_score of this StatmanAttribute.


        :param pd_score: The pd_score of this StatmanAttribute.  # noqa: E501
        :type pd_score: float
        """

        self._pd_score = pd_score

    @property
    def pd_box(self):
        """Gets the pd_box of this StatmanAttribute.  # noqa: E501


        :return: The pd_box of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._pd_box

    @pd_box.setter
    def pd_box(self, pd_box):
        """Sets the pd_box of this StatmanAttribute.


        :param pd_box: The pd_box of this StatmanAttribute.  # noqa: E501
        :type pd_box: str
        """

        self._pd_box = pd_box

    @property
    def pd_seg(self):
        """Gets the pd_seg of this StatmanAttribute.  # noqa: E501


        :return: The pd_seg of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._pd_seg

    @pd_seg.setter
    def pd_seg(self, pd_seg):
        """Sets the pd_seg of this StatmanAttribute.


        :param pd_seg: The pd_seg of this StatmanAttribute.  # noqa: E501
        :type pd_seg: str
        """

        self._pd_seg = pd_seg

    @property
    def pd_custom_data(self):
        """Gets the pd_custom_data of this StatmanAttribute.  # noqa: E501


        :return: The pd_custom_data of this StatmanAttribute.  # noqa: E501
        :rtype: object
        """
        return self._pd_custom_data

    @pd_custom_data.setter
    def pd_custom_data(self, pd_custom_data):
        """Sets the pd_custom_data of this StatmanAttribute.


        :param pd_custom_data: The pd_custom_data of this StatmanAttribute.  # noqa: E501
        :type pd_custom_data: object
        """

        self._pd_custom_data = pd_custom_data

    @property
    def map_path(self):
        """Gets the map_path of this StatmanAttribute.  # noqa: E501


        :return: The map_path of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._map_path

    @map_path.setter
    def map_path(self, map_path):
        """Sets the map_path of this StatmanAttribute.


        :param map_path: The map_path of this StatmanAttribute.  # noqa: E501
        :type map_path: str
        """

        self._map_path = map_path

    @property
    def timestamp(self):
        """Gets the timestamp of this StatmanAttribute.  # noqa: E501


        :return: The timestamp of this StatmanAttribute.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StatmanAttribute.


        :param timestamp: The timestamp of this StatmanAttribute.  # noqa: E501
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def model_name(self):
        """Gets the model_name of this StatmanAttribute.  # noqa: E501


        :return: The model_name of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this StatmanAttribute.


        :param model_name: The model_name of this StatmanAttribute.  # noqa: E501
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def camera_id(self):
        """Gets the camera_id of this StatmanAttribute.  # noqa: E501


        :return: The camera_id of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._camera_id

    @camera_id.setter
    def camera_id(self, camera_id):
        """Sets the camera_id of this StatmanAttribute.


        :param camera_id: The camera_id of this StatmanAttribute.  # noqa: E501
        :type camera_id: str
        """

        self._camera_id = camera_id

    @property
    def sensor_id(self):
        """Gets the sensor_id of this StatmanAttribute.  # noqa: E501


        :return: The sensor_id of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._sensor_id

    @sensor_id.setter
    def sensor_id(self, sensor_id):
        """Sets the sensor_id of this StatmanAttribute.


        :param sensor_id: The sensor_id of this StatmanAttribute.  # noqa: E501
        :type sensor_id: str
        """

        self._sensor_id = sensor_id

    @property
    def is_error(self):
        """Gets the is_error of this StatmanAttribute.  # noqa: E501


        :return: The is_error of this StatmanAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._is_error

    @is_error.setter
    def is_error(self, is_error):
        """Sets the is_error of this StatmanAttribute.


        :param is_error: The is_error of this StatmanAttribute.  # noqa: E501
        :type is_error: bool
        """

        self._is_error = is_error

    @property
    def gt_class(self):
        """Gets the gt_class of this StatmanAttribute.  # noqa: E501


        :return: The gt_class of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._gt_class

    @gt_class.setter
    def gt_class(self, gt_class):
        """Sets the gt_class of this StatmanAttribute.


        :param gt_class: The gt_class of this StatmanAttribute.  # noqa: E501
        :type gt_class: str
        """

        self._gt_class = gt_class

    @property
    def gt_color(self):
        """Gets the gt_color of this StatmanAttribute.  # noqa: E501


        :return: The gt_color of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._gt_color

    @gt_color.setter
    def gt_color(self, gt_color):
        """Sets the gt_color of this StatmanAttribute.


        :param gt_color: The gt_color of this StatmanAttribute.  # noqa: E501
        :type gt_color: str
        """

        self._gt_color = gt_color

    @property
    def gt_box(self):
        """Gets the gt_box of this StatmanAttribute.  # noqa: E501


        :return: The gt_box of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._gt_box

    @gt_box.setter
    def gt_box(self, gt_box):
        """Sets the gt_box of this StatmanAttribute.


        :param gt_box: The gt_box of this StatmanAttribute.  # noqa: E501
        :type gt_box: str
        """

        self._gt_box = gt_box

    @property
    def gt_seg(self):
        """Gets the gt_seg of this StatmanAttribute.  # noqa: E501


        :return: The gt_seg of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._gt_seg

    @gt_seg.setter
    def gt_seg(self, gt_seg):
        """Sets the gt_seg of this StatmanAttribute.


        :param gt_seg: The gt_seg of this StatmanAttribute.  # noqa: E501
        :type gt_seg: str
        """

        self._gt_seg = gt_seg

    @property
    def gt_custom_data(self):
        """Gets the gt_custom_data of this StatmanAttribute.  # noqa: E501


        :return: The gt_custom_data of this StatmanAttribute.  # noqa: E501
        :rtype: object
        """
        return self._gt_custom_data

    @gt_custom_data.setter
    def gt_custom_data(self, gt_custom_data):
        """Sets the gt_custom_data of this StatmanAttribute.


        :param gt_custom_data: The gt_custom_data of this StatmanAttribute.  # noqa: E501
        :type gt_custom_data: object
        """

        self._gt_custom_data = gt_custom_data

    @property
    def operator_id(self):
        """Gets the operator_id of this StatmanAttribute.  # noqa: E501


        :return: The operator_id of this StatmanAttribute.  # noqa: E501
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this StatmanAttribute.


        :param operator_id: The operator_id of this StatmanAttribute.  # noqa: E501
        :type operator_id: str
        """

        self._operator_id = operator_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatmanAttribute):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatmanAttribute):
            return True

        return self.to_dict() != other.to_dict()
