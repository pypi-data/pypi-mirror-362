# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class FeatureUsage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_id': 'str',
        'plan_feature_id': 'str',
        'feature_name': 'DEFeature',
        'edge_mode': 'ApplicationMode',
        'reset': 'ResetType',
        'used': 'float',
        'total': 'float'
    }

    attribute_map = {
        'feature_id': 'feature_id',
        'plan_feature_id': 'plan_feature_id',
        'feature_name': 'feature_name',
        'edge_mode': 'edge_mode',
        'reset': 'reset',
        'used': 'used',
        'total': 'total'
    }

    def __init__(self, feature_id=None, plan_feature_id=None, feature_name=None, edge_mode=None, reset=None, used=None, total=None, local_vars_configuration=None):  # noqa: E501
        """FeatureUsage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._feature_id = None
        self._plan_feature_id = None
        self._feature_name = None
        self._edge_mode = None
        self._reset = None
        self._used = None
        self._total = None
        self.discriminator = None

        self.feature_id = feature_id
        self.plan_feature_id = plan_feature_id
        self.feature_name = feature_name
        self.edge_mode = edge_mode
        self.reset = reset
        self.used = used
        self.total = total

    @property
    def feature_id(self):
        """Gets the feature_id of this FeatureUsage.  # noqa: E501


        :return: The feature_id of this FeatureUsage.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this FeatureUsage.


        :param feature_id: The feature_id of this FeatureUsage.  # noqa: E501
        :type feature_id: str
        """
        if self.local_vars_configuration.client_side_validation and feature_id is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    @property
    def plan_feature_id(self):
        """Gets the plan_feature_id of this FeatureUsage.  # noqa: E501


        :return: The plan_feature_id of this FeatureUsage.  # noqa: E501
        :rtype: str
        """
        return self._plan_feature_id

    @plan_feature_id.setter
    def plan_feature_id(self, plan_feature_id):
        """Sets the plan_feature_id of this FeatureUsage.


        :param plan_feature_id: The plan_feature_id of this FeatureUsage.  # noqa: E501
        :type plan_feature_id: str
        """
        if self.local_vars_configuration.client_side_validation and plan_feature_id is None:  # noqa: E501
            raise ValueError("Invalid value for `plan_feature_id`, must not be `None`")  # noqa: E501

        self._plan_feature_id = plan_feature_id

    @property
    def feature_name(self):
        """Gets the feature_name of this FeatureUsage.  # noqa: E501


        :return: The feature_name of this FeatureUsage.  # noqa: E501
        :rtype: DEFeature
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this FeatureUsage.


        :param feature_name: The feature_name of this FeatureUsage.  # noqa: E501
        :type feature_name: DEFeature
        """
        if self.local_vars_configuration.client_side_validation and feature_name is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_name`, must not be `None`")  # noqa: E501

        self._feature_name = feature_name

    @property
    def edge_mode(self):
        """Gets the edge_mode of this FeatureUsage.  # noqa: E501


        :return: The edge_mode of this FeatureUsage.  # noqa: E501
        :rtype: ApplicationMode
        """
        return self._edge_mode

    @edge_mode.setter
    def edge_mode(self, edge_mode):
        """Sets the edge_mode of this FeatureUsage.


        :param edge_mode: The edge_mode of this FeatureUsage.  # noqa: E501
        :type edge_mode: ApplicationMode
        """
        if self.local_vars_configuration.client_side_validation and edge_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `edge_mode`, must not be `None`")  # noqa: E501

        self._edge_mode = edge_mode

    @property
    def reset(self):
        """Gets the reset of this FeatureUsage.  # noqa: E501


        :return: The reset of this FeatureUsage.  # noqa: E501
        :rtype: ResetType
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this FeatureUsage.


        :param reset: The reset of this FeatureUsage.  # noqa: E501
        :type reset: ResetType
        """
        if self.local_vars_configuration.client_side_validation and reset is None:  # noqa: E501
            raise ValueError("Invalid value for `reset`, must not be `None`")  # noqa: E501

        self._reset = reset

    @property
    def used(self):
        """Gets the used of this FeatureUsage.  # noqa: E501


        :return: The used of this FeatureUsage.  # noqa: E501
        :rtype: float
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this FeatureUsage.


        :param used: The used of this FeatureUsage.  # noqa: E501
        :type used: float
        """
        if self.local_vars_configuration.client_side_validation and used is None:  # noqa: E501
            raise ValueError("Invalid value for `used`, must not be `None`")  # noqa: E501

        self._used = used

    @property
    def total(self):
        """Gets the total of this FeatureUsage.  # noqa: E501


        :return: The total of this FeatureUsage.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this FeatureUsage.


        :param total: The total of this FeatureUsage.  # noqa: E501
        :type total: float
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureUsage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureUsage):
            return True

        return self.to_dict() != other.to_dict()
