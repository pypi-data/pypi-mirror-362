# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DockerImageReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'namespace': 'str',
        'repository_id': 'str',
        'image_name': 'str',
        'image_tag': 'str',
        'filter_type': 'str',
        'gpu_filter': 'bool',
        'gpu_mem_fraction': 'float',
        'allow_no_gpu': 'bool',
        'output_fields': 'list[OutputField]',
        'filter_properties': 'dict(str, str)',
        'output_port_properties': 'dict(str, object)',
        'command': 'str',
        'description': 'str',
        'python_exec_info': 'PythonExecDetails'
    }

    attribute_map = {
        'name': 'name',
        'namespace': 'namespace',
        'repository_id': 'repository_id',
        'image_name': 'image_name',
        'image_tag': 'image_tag',
        'filter_type': 'filter_type',
        'gpu_filter': 'gpu_filter',
        'gpu_mem_fraction': 'gpu_mem_fraction',
        'allow_no_gpu': 'allow_no_gpu',
        'output_fields': 'output_fields',
        'filter_properties': 'filter_properties',
        'output_port_properties': 'output_port_properties',
        'command': 'command',
        'description': 'description',
        'python_exec_info': 'python_exec_info'
    }

    def __init__(self, name=None, namespace=None, repository_id=None, image_name=None, image_tag=None, filter_type=None, gpu_filter=None, gpu_mem_fraction=1.0, allow_no_gpu=True, output_fields=None, filter_properties=None, output_port_properties=None, command=None, description=None, python_exec_info=None, local_vars_configuration=None):  # noqa: E501
        """DockerImageReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._namespace = None
        self._repository_id = None
        self._image_name = None
        self._image_tag = None
        self._filter_type = None
        self._gpu_filter = None
        self._gpu_mem_fraction = None
        self._allow_no_gpu = None
        self._output_fields = None
        self._filter_properties = None
        self._output_port_properties = None
        self._command = None
        self._description = None
        self._python_exec_info = None
        self.discriminator = None

        self.name = name
        self.namespace = namespace
        self.repository_id = repository_id
        self.image_name = image_name
        self.image_tag = image_tag
        self.filter_type = filter_type
        self.gpu_filter = gpu_filter
        if gpu_mem_fraction is not None:
            self.gpu_mem_fraction = gpu_mem_fraction
        if allow_no_gpu is not None:
            self.allow_no_gpu = allow_no_gpu
        if output_fields is not None:
            self.output_fields = output_fields
        if filter_properties is not None:
            self.filter_properties = filter_properties
        if output_port_properties is not None:
            self.output_port_properties = output_port_properties
        self.command = command
        if description is not None:
            self.description = description
        if python_exec_info is not None:
            self.python_exec_info = python_exec_info

    @property
    def name(self):
        """Gets the name of this DockerImageReq.  # noqa: E501


        :return: The name of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerImageReq.


        :param name: The name of this DockerImageReq.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this DockerImageReq.  # noqa: E501


        :return: The namespace of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DockerImageReq.


        :param namespace: The namespace of this DockerImageReq.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def repository_id(self):
        """Gets the repository_id of this DockerImageReq.  # noqa: E501


        :return: The repository_id of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this DockerImageReq.


        :param repository_id: The repository_id of this DockerImageReq.  # noqa: E501
        :type repository_id: str
        """
        if self.local_vars_configuration.client_side_validation and repository_id is None:  # noqa: E501
            raise ValueError("Invalid value for `repository_id`, must not be `None`")  # noqa: E501

        self._repository_id = repository_id

    @property
    def image_name(self):
        """Gets the image_name of this DockerImageReq.  # noqa: E501


        :return: The image_name of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this DockerImageReq.


        :param image_name: The image_name of this DockerImageReq.  # noqa: E501
        :type image_name: str
        """
        if self.local_vars_configuration.client_side_validation and image_name is None:  # noqa: E501
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    @property
    def image_tag(self):
        """Gets the image_tag of this DockerImageReq.  # noqa: E501


        :return: The image_tag of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this DockerImageReq.


        :param image_tag: The image_tag of this DockerImageReq.  # noqa: E501
        :type image_tag: str
        """
        if self.local_vars_configuration.client_side_validation and image_tag is None:  # noqa: E501
            raise ValueError("Invalid value for `image_tag`, must not be `None`")  # noqa: E501

        self._image_tag = image_tag

    @property
    def filter_type(self):
        """Gets the filter_type of this DockerImageReq.  # noqa: E501


        :return: The filter_type of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this DockerImageReq.


        :param filter_type: The filter_type of this DockerImageReq.  # noqa: E501
        :type filter_type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501

        self._filter_type = filter_type

    @property
    def gpu_filter(self):
        """Gets the gpu_filter of this DockerImageReq.  # noqa: E501


        :return: The gpu_filter of this DockerImageReq.  # noqa: E501
        :rtype: bool
        """
        return self._gpu_filter

    @gpu_filter.setter
    def gpu_filter(self, gpu_filter):
        """Sets the gpu_filter of this DockerImageReq.


        :param gpu_filter: The gpu_filter of this DockerImageReq.  # noqa: E501
        :type gpu_filter: bool
        """
        if self.local_vars_configuration.client_side_validation and gpu_filter is None:  # noqa: E501
            raise ValueError("Invalid value for `gpu_filter`, must not be `None`")  # noqa: E501

        self._gpu_filter = gpu_filter

    @property
    def gpu_mem_fraction(self):
        """Gets the gpu_mem_fraction of this DockerImageReq.  # noqa: E501


        :return: The gpu_mem_fraction of this DockerImageReq.  # noqa: E501
        :rtype: float
        """
        return self._gpu_mem_fraction

    @gpu_mem_fraction.setter
    def gpu_mem_fraction(self, gpu_mem_fraction):
        """Sets the gpu_mem_fraction of this DockerImageReq.


        :param gpu_mem_fraction: The gpu_mem_fraction of this DockerImageReq.  # noqa: E501
        :type gpu_mem_fraction: float
        """
        if (self.local_vars_configuration.client_side_validation and
                gpu_mem_fraction is not None and gpu_mem_fraction > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `gpu_mem_fraction`, must be a value less than or equal to `1.0`")  # noqa: E501

        self._gpu_mem_fraction = gpu_mem_fraction

    @property
    def allow_no_gpu(self):
        """Gets the allow_no_gpu of this DockerImageReq.  # noqa: E501


        :return: The allow_no_gpu of this DockerImageReq.  # noqa: E501
        :rtype: bool
        """
        return self._allow_no_gpu

    @allow_no_gpu.setter
    def allow_no_gpu(self, allow_no_gpu):
        """Sets the allow_no_gpu of this DockerImageReq.


        :param allow_no_gpu: The allow_no_gpu of this DockerImageReq.  # noqa: E501
        :type allow_no_gpu: bool
        """

        self._allow_no_gpu = allow_no_gpu

    @property
    def output_fields(self):
        """Gets the output_fields of this DockerImageReq.  # noqa: E501


        :return: The output_fields of this DockerImageReq.  # noqa: E501
        :rtype: list[OutputField]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this DockerImageReq.


        :param output_fields: The output_fields of this DockerImageReq.  # noqa: E501
        :type output_fields: list[OutputField]
        """

        self._output_fields = output_fields

    @property
    def filter_properties(self):
        """Gets the filter_properties of this DockerImageReq.  # noqa: E501


        :return: The filter_properties of this DockerImageReq.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._filter_properties

    @filter_properties.setter
    def filter_properties(self, filter_properties):
        """Sets the filter_properties of this DockerImageReq.


        :param filter_properties: The filter_properties of this DockerImageReq.  # noqa: E501
        :type filter_properties: dict(str, str)
        """

        self._filter_properties = filter_properties

    @property
    def output_port_properties(self):
        """Gets the output_port_properties of this DockerImageReq.  # noqa: E501


        :return: The output_port_properties of this DockerImageReq.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output_port_properties

    @output_port_properties.setter
    def output_port_properties(self, output_port_properties):
        """Sets the output_port_properties of this DockerImageReq.


        :param output_port_properties: The output_port_properties of this DockerImageReq.  # noqa: E501
        :type output_port_properties: dict(str, object)
        """

        self._output_port_properties = output_port_properties

    @property
    def command(self):
        """Gets the command of this DockerImageReq.  # noqa: E501


        :return: The command of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DockerImageReq.


        :param command: The command of this DockerImageReq.  # noqa: E501
        :type command: str
        """
        if self.local_vars_configuration.client_side_validation and command is None:  # noqa: E501
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def description(self):
        """Gets the description of this DockerImageReq.  # noqa: E501


        :return: The description of this DockerImageReq.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DockerImageReq.


        :param description: The description of this DockerImageReq.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def python_exec_info(self):
        """Gets the python_exec_info of this DockerImageReq.  # noqa: E501


        :return: The python_exec_info of this DockerImageReq.  # noqa: E501
        :rtype: PythonExecDetails
        """
        return self._python_exec_info

    @python_exec_info.setter
    def python_exec_info(self, python_exec_info):
        """Sets the python_exec_info of this DockerImageReq.


        :param python_exec_info: The python_exec_info of this DockerImageReq.  # noqa: E501
        :type python_exec_info: PythonExecDetails
        """

        self._python_exec_info = python_exec_info

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerImageReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerImageReq):
            return True

        return self.to_dict() != other.to_dict()
