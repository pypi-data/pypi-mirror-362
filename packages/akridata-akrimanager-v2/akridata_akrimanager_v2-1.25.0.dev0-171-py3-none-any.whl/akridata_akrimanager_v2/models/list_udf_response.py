# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ListUDFResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'udfs': 'list[UDFInfo]',
        'categories': 'list[UDFCategory]',
        'view_default_rules': 'object'
    }

    attribute_map = {
        'udfs': 'UDFs',
        'categories': 'categories',
        'view_default_rules': 'view_default_rules'
    }

    def __init__(self, udfs=None, categories=None, view_default_rules=None, local_vars_configuration=None):  # noqa: E501
        """ListUDFResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._udfs = None
        self._categories = None
        self._view_default_rules = None
        self.discriminator = None

        self.udfs = udfs
        self.categories = categories
        self.view_default_rules = view_default_rules

    @property
    def udfs(self):
        """Gets the udfs of this ListUDFResponse.  # noqa: E501


        :return: The udfs of this ListUDFResponse.  # noqa: E501
        :rtype: list[UDFInfo]
        """
        return self._udfs

    @udfs.setter
    def udfs(self, udfs):
        """Sets the udfs of this ListUDFResponse.


        :param udfs: The udfs of this ListUDFResponse.  # noqa: E501
        :type udfs: list[UDFInfo]
        """
        if self.local_vars_configuration.client_side_validation and udfs is None:  # noqa: E501
            raise ValueError("Invalid value for `udfs`, must not be `None`")  # noqa: E501

        self._udfs = udfs

    @property
    def categories(self):
        """Gets the categories of this ListUDFResponse.  # noqa: E501


        :return: The categories of this ListUDFResponse.  # noqa: E501
        :rtype: list[UDFCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ListUDFResponse.


        :param categories: The categories of this ListUDFResponse.  # noqa: E501
        :type categories: list[UDFCategory]
        """
        if self.local_vars_configuration.client_side_validation and categories is None:  # noqa: E501
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def view_default_rules(self):
        """Gets the view_default_rules of this ListUDFResponse.  # noqa: E501


        :return: The view_default_rules of this ListUDFResponse.  # noqa: E501
        :rtype: object
        """
        return self._view_default_rules

    @view_default_rules.setter
    def view_default_rules(self, view_default_rules):
        """Sets the view_default_rules of this ListUDFResponse.


        :param view_default_rules: The view_default_rules of this ListUDFResponse.  # noqa: E501
        :type view_default_rules: object
        """
        if self.local_vars_configuration.client_side_validation and view_default_rules is None:  # noqa: E501
            raise ValueError("Invalid value for `view_default_rules`, must not be `None`")  # noqa: E501

        self._view_default_rules = view_default_rules

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListUDFResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListUDFResponse):
            return True

        return self.to_dict() != other.to_dict()
