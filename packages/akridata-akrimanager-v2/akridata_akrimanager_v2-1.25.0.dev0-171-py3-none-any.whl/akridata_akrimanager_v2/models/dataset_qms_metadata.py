# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DatasetQMSMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_pipeline_id': 'str',
        'default_table_name': 'str',
        'default_view_id': 'str',
        'default_pe_query_id': 'str',
        'default_in_progress_pe_query_id': 'str',
        'tables_pe_categorical_results': 'list[PECategoricalResultTable]',
        'views_pe_categorical_results': 'list[PECategoricalResultView]',
        'tables_pe_categorical_prefix_results': 'list[PECategoricalResultTable]',
        'views_pe_categorical_prefix_results': 'list[PECategoricalResultView]'
    }

    attribute_map = {
        'default_pipeline_id': 'default_pipeline_id',
        'default_table_name': 'default_table_name',
        'default_view_id': 'default_view_id',
        'default_pe_query_id': 'default_pe_query_id',
        'default_in_progress_pe_query_id': 'default_in_progress_pe_query_id',
        'tables_pe_categorical_results': 'tables_pe_categorical_results',
        'views_pe_categorical_results': 'views_pe_categorical_results',
        'tables_pe_categorical_prefix_results': 'tables_pe_categorical_prefix_results',
        'views_pe_categorical_prefix_results': 'views_pe_categorical_prefix_results'
    }

    def __init__(self, default_pipeline_id=None, default_table_name=None, default_view_id=None, default_pe_query_id=None, default_in_progress_pe_query_id=None, tables_pe_categorical_results=None, views_pe_categorical_results=None, tables_pe_categorical_prefix_results=None, views_pe_categorical_prefix_results=None, local_vars_configuration=None):  # noqa: E501
        """DatasetQMSMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._default_pipeline_id = None
        self._default_table_name = None
        self._default_view_id = None
        self._default_pe_query_id = None
        self._default_in_progress_pe_query_id = None
        self._tables_pe_categorical_results = None
        self._views_pe_categorical_results = None
        self._tables_pe_categorical_prefix_results = None
        self._views_pe_categorical_prefix_results = None
        self.discriminator = None

        if default_pipeline_id is not None:
            self.default_pipeline_id = default_pipeline_id
        if default_table_name is not None:
            self.default_table_name = default_table_name
        if default_view_id is not None:
            self.default_view_id = default_view_id
        if default_pe_query_id is not None:
            self.default_pe_query_id = default_pe_query_id
        if default_in_progress_pe_query_id is not None:
            self.default_in_progress_pe_query_id = default_in_progress_pe_query_id
        if tables_pe_categorical_results is not None:
            self.tables_pe_categorical_results = tables_pe_categorical_results
        if views_pe_categorical_results is not None:
            self.views_pe_categorical_results = views_pe_categorical_results
        if tables_pe_categorical_prefix_results is not None:
            self.tables_pe_categorical_prefix_results = tables_pe_categorical_prefix_results
        if views_pe_categorical_prefix_results is not None:
            self.views_pe_categorical_prefix_results = views_pe_categorical_prefix_results

    @property
    def default_pipeline_id(self):
        """Gets the default_pipeline_id of this DatasetQMSMetadata.  # noqa: E501


        :return: The default_pipeline_id of this DatasetQMSMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_pipeline_id

    @default_pipeline_id.setter
    def default_pipeline_id(self, default_pipeline_id):
        """Sets the default_pipeline_id of this DatasetQMSMetadata.


        :param default_pipeline_id: The default_pipeline_id of this DatasetQMSMetadata.  # noqa: E501
        :type default_pipeline_id: str
        """

        self._default_pipeline_id = default_pipeline_id

    @property
    def default_table_name(self):
        """Gets the default_table_name of this DatasetQMSMetadata.  # noqa: E501


        :return: The default_table_name of this DatasetQMSMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_table_name

    @default_table_name.setter
    def default_table_name(self, default_table_name):
        """Sets the default_table_name of this DatasetQMSMetadata.


        :param default_table_name: The default_table_name of this DatasetQMSMetadata.  # noqa: E501
        :type default_table_name: str
        """

        self._default_table_name = default_table_name

    @property
    def default_view_id(self):
        """Gets the default_view_id of this DatasetQMSMetadata.  # noqa: E501


        :return: The default_view_id of this DatasetQMSMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_view_id

    @default_view_id.setter
    def default_view_id(self, default_view_id):
        """Sets the default_view_id of this DatasetQMSMetadata.


        :param default_view_id: The default_view_id of this DatasetQMSMetadata.  # noqa: E501
        :type default_view_id: str
        """

        self._default_view_id = default_view_id

    @property
    def default_pe_query_id(self):
        """Gets the default_pe_query_id of this DatasetQMSMetadata.  # noqa: E501


        :return: The default_pe_query_id of this DatasetQMSMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_pe_query_id

    @default_pe_query_id.setter
    def default_pe_query_id(self, default_pe_query_id):
        """Sets the default_pe_query_id of this DatasetQMSMetadata.


        :param default_pe_query_id: The default_pe_query_id of this DatasetQMSMetadata.  # noqa: E501
        :type default_pe_query_id: str
        """

        self._default_pe_query_id = default_pe_query_id

    @property
    def default_in_progress_pe_query_id(self):
        """Gets the default_in_progress_pe_query_id of this DatasetQMSMetadata.  # noqa: E501


        :return: The default_in_progress_pe_query_id of this DatasetQMSMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_in_progress_pe_query_id

    @default_in_progress_pe_query_id.setter
    def default_in_progress_pe_query_id(self, default_in_progress_pe_query_id):
        """Sets the default_in_progress_pe_query_id of this DatasetQMSMetadata.


        :param default_in_progress_pe_query_id: The default_in_progress_pe_query_id of this DatasetQMSMetadata.  # noqa: E501
        :type default_in_progress_pe_query_id: str
        """

        self._default_in_progress_pe_query_id = default_in_progress_pe_query_id

    @property
    def tables_pe_categorical_results(self):
        """Gets the tables_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501


        :return: The tables_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501
        :rtype: list[PECategoricalResultTable]
        """
        return self._tables_pe_categorical_results

    @tables_pe_categorical_results.setter
    def tables_pe_categorical_results(self, tables_pe_categorical_results):
        """Sets the tables_pe_categorical_results of this DatasetQMSMetadata.


        :param tables_pe_categorical_results: The tables_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501
        :type tables_pe_categorical_results: list[PECategoricalResultTable]
        """

        self._tables_pe_categorical_results = tables_pe_categorical_results

    @property
    def views_pe_categorical_results(self):
        """Gets the views_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501


        :return: The views_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501
        :rtype: list[PECategoricalResultView]
        """
        return self._views_pe_categorical_results

    @views_pe_categorical_results.setter
    def views_pe_categorical_results(self, views_pe_categorical_results):
        """Sets the views_pe_categorical_results of this DatasetQMSMetadata.


        :param views_pe_categorical_results: The views_pe_categorical_results of this DatasetQMSMetadata.  # noqa: E501
        :type views_pe_categorical_results: list[PECategoricalResultView]
        """

        self._views_pe_categorical_results = views_pe_categorical_results

    @property
    def tables_pe_categorical_prefix_results(self):
        """Gets the tables_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501


        :return: The tables_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501
        :rtype: list[PECategoricalResultTable]
        """
        return self._tables_pe_categorical_prefix_results

    @tables_pe_categorical_prefix_results.setter
    def tables_pe_categorical_prefix_results(self, tables_pe_categorical_prefix_results):
        """Sets the tables_pe_categorical_prefix_results of this DatasetQMSMetadata.


        :param tables_pe_categorical_prefix_results: The tables_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501
        :type tables_pe_categorical_prefix_results: list[PECategoricalResultTable]
        """

        self._tables_pe_categorical_prefix_results = tables_pe_categorical_prefix_results

    @property
    def views_pe_categorical_prefix_results(self):
        """Gets the views_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501


        :return: The views_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501
        :rtype: list[PECategoricalResultView]
        """
        return self._views_pe_categorical_prefix_results

    @views_pe_categorical_prefix_results.setter
    def views_pe_categorical_prefix_results(self, views_pe_categorical_prefix_results):
        """Sets the views_pe_categorical_prefix_results of this DatasetQMSMetadata.


        :param views_pe_categorical_prefix_results: The views_pe_categorical_prefix_results of this DatasetQMSMetadata.  # noqa: E501
        :type views_pe_categorical_prefix_results: list[PECategoricalResultView]
        """

        self._views_pe_categorical_prefix_results = views_pe_categorical_prefix_results

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetQMSMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetQMSMetadata):
            return True

        return self.to_dict() != other.to_dict()
