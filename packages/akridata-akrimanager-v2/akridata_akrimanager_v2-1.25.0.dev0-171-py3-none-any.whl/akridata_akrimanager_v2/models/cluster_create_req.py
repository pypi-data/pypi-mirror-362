# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ClusterCreateReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'endpoint': 'str',
        'description': 'str',
        'secret_key': 'str',
        'num_gpu': 'int',
        'cloud_provider': 'CloudProviderType',
        'region': 'str',
        'tier': 'SubscriptionTier',
        'max_nodes': 'int',
        'set_default': 'bool',
        'worker_handle': 'str',
        'cluster_type': 'ClusterType'
    }

    attribute_map = {
        'name': 'name',
        'endpoint': 'endpoint',
        'description': 'description',
        'secret_key': 'secret_key',
        'num_gpu': 'num_gpu',
        'cloud_provider': 'cloud_provider',
        'region': 'region',
        'tier': 'tier',
        'max_nodes': 'max_nodes',
        'set_default': 'set_default',
        'worker_handle': 'worker_handle',
        'cluster_type': 'cluster_type'
    }

    def __init__(self, name=None, endpoint=None, description=None, secret_key=None, num_gpu=0, cloud_provider=None, region=None, tier=None, max_nodes=None, set_default=False, worker_handle='akridata-cluster-internal-handle', cluster_type=None, local_vars_configuration=None):  # noqa: E501
        """ClusterCreateReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._endpoint = None
        self._description = None
        self._secret_key = None
        self._num_gpu = None
        self._cloud_provider = None
        self._region = None
        self._tier = None
        self._max_nodes = None
        self._set_default = None
        self._worker_handle = None
        self._cluster_type = None
        self.discriminator = None

        self.name = name
        self.endpoint = endpoint
        self.description = description
        self.secret_key = secret_key
        if num_gpu is not None:
            self.num_gpu = num_gpu
        self.cloud_provider = cloud_provider
        if region is not None:
            self.region = region
        if tier is not None:
            self.tier = tier
        self.max_nodes = max_nodes
        if set_default is not None:
            self.set_default = set_default
        if worker_handle is not None:
            self.worker_handle = worker_handle
        if cluster_type is not None:
            self.cluster_type = cluster_type

    @property
    def name(self):
        """Gets the name of this ClusterCreateReq.  # noqa: E501


        :return: The name of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterCreateReq.


        :param name: The name of this ClusterCreateReq.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def endpoint(self):
        """Gets the endpoint of this ClusterCreateReq.  # noqa: E501


        :return: The endpoint of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ClusterCreateReq.


        :param endpoint: The endpoint of this ClusterCreateReq.  # noqa: E501
        :type endpoint: str
        """
        if self.local_vars_configuration.client_side_validation and endpoint is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def description(self):
        """Gets the description of this ClusterCreateReq.  # noqa: E501


        :return: The description of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClusterCreateReq.


        :param description: The description of this ClusterCreateReq.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def secret_key(self):
        """Gets the secret_key of this ClusterCreateReq.  # noqa: E501


        :return: The secret_key of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ClusterCreateReq.


        :param secret_key: The secret_key of this ClusterCreateReq.  # noqa: E501
        :type secret_key: str
        """
        if self.local_vars_configuration.client_side_validation and secret_key is None:  # noqa: E501
            raise ValueError("Invalid value for `secret_key`, must not be `None`")  # noqa: E501

        self._secret_key = secret_key

    @property
    def num_gpu(self):
        """Gets the num_gpu of this ClusterCreateReq.  # noqa: E501


        :return: The num_gpu of this ClusterCreateReq.  # noqa: E501
        :rtype: int
        """
        return self._num_gpu

    @num_gpu.setter
    def num_gpu(self, num_gpu):
        """Sets the num_gpu of this ClusterCreateReq.


        :param num_gpu: The num_gpu of this ClusterCreateReq.  # noqa: E501
        :type num_gpu: int
        """

        self._num_gpu = num_gpu

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this ClusterCreateReq.  # noqa: E501


        :return: The cloud_provider of this ClusterCreateReq.  # noqa: E501
        :rtype: CloudProviderType
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this ClusterCreateReq.


        :param cloud_provider: The cloud_provider of this ClusterCreateReq.  # noqa: E501
        :type cloud_provider: CloudProviderType
        """
        if self.local_vars_configuration.client_side_validation and cloud_provider is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_provider`, must not be `None`")  # noqa: E501

        self._cloud_provider = cloud_provider

    @property
    def region(self):
        """Gets the region of this ClusterCreateReq.  # noqa: E501


        :return: The region of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ClusterCreateReq.


        :param region: The region of this ClusterCreateReq.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def tier(self):
        """Gets the tier of this ClusterCreateReq.  # noqa: E501


        :return: The tier of this ClusterCreateReq.  # noqa: E501
        :rtype: SubscriptionTier
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this ClusterCreateReq.


        :param tier: The tier of this ClusterCreateReq.  # noqa: E501
        :type tier: SubscriptionTier
        """

        self._tier = tier

    @property
    def max_nodes(self):
        """Gets the max_nodes of this ClusterCreateReq.  # noqa: E501


        :return: The max_nodes of this ClusterCreateReq.  # noqa: E501
        :rtype: int
        """
        return self._max_nodes

    @max_nodes.setter
    def max_nodes(self, max_nodes):
        """Sets the max_nodes of this ClusterCreateReq.


        :param max_nodes: The max_nodes of this ClusterCreateReq.  # noqa: E501
        :type max_nodes: int
        """
        if self.local_vars_configuration.client_side_validation and max_nodes is None:  # noqa: E501
            raise ValueError("Invalid value for `max_nodes`, must not be `None`")  # noqa: E501

        self._max_nodes = max_nodes

    @property
    def set_default(self):
        """Gets the set_default of this ClusterCreateReq.  # noqa: E501


        :return: The set_default of this ClusterCreateReq.  # noqa: E501
        :rtype: bool
        """
        return self._set_default

    @set_default.setter
    def set_default(self, set_default):
        """Sets the set_default of this ClusterCreateReq.


        :param set_default: The set_default of this ClusterCreateReq.  # noqa: E501
        :type set_default: bool
        """

        self._set_default = set_default

    @property
    def worker_handle(self):
        """Gets the worker_handle of this ClusterCreateReq.  # noqa: E501


        :return: The worker_handle of this ClusterCreateReq.  # noqa: E501
        :rtype: str
        """
        return self._worker_handle

    @worker_handle.setter
    def worker_handle(self, worker_handle):
        """Sets the worker_handle of this ClusterCreateReq.


        :param worker_handle: The worker_handle of this ClusterCreateReq.  # noqa: E501
        :type worker_handle: str
        """

        self._worker_handle = worker_handle

    @property
    def cluster_type(self):
        """Gets the cluster_type of this ClusterCreateReq.  # noqa: E501


        :return: The cluster_type of this ClusterCreateReq.  # noqa: E501
        :rtype: ClusterType
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this ClusterCreateReq.


        :param cluster_type: The cluster_type of this ClusterCreateReq.  # noqa: E501
        :type cluster_type: ClusterType
        """

        self._cluster_type = cluster_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterCreateReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterCreateReq):
            return True

        return self.to_dict() != other.to_dict()
