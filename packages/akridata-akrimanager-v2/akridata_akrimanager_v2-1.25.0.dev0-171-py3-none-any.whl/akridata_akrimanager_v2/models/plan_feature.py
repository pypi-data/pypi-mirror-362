# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class PlanFeature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'feature_id': 'str',
        'plan_feature_id': 'str',
        'name': 'DEFeature',
        'limited_access': 'bool',
        'limits': 'PlanLimits',
        'feature_type': 'FeatureType',
        'dynamic_pricing_info_list': 'list[DynamicPricingInfo]',
        'display_text': 'str'
    }

    attribute_map = {
        'feature_id': 'feature_id',
        'plan_feature_id': 'plan_feature_id',
        'name': 'name',
        'limited_access': 'limited_access',
        'limits': 'limits',
        'feature_type': 'feature_type',
        'dynamic_pricing_info_list': 'dynamic_pricing_info_list',
        'display_text': 'display_text'
    }

    def __init__(self, feature_id=None, plan_feature_id=None, name=None, limited_access=None, limits=None, feature_type=None, dynamic_pricing_info_list=None, display_text=None, local_vars_configuration=None):  # noqa: E501
        """PlanFeature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._feature_id = None
        self._plan_feature_id = None
        self._name = None
        self._limited_access = None
        self._limits = None
        self._feature_type = None
        self._dynamic_pricing_info_list = None
        self._display_text = None
        self.discriminator = None

        self.feature_id = feature_id
        self.plan_feature_id = plan_feature_id
        self.name = name
        self.limited_access = limited_access
        self.limits = limits
        self.feature_type = feature_type
        if dynamic_pricing_info_list is not None:
            self.dynamic_pricing_info_list = dynamic_pricing_info_list
        if display_text is not None:
            self.display_text = display_text

    @property
    def feature_id(self):
        """Gets the feature_id of this PlanFeature.  # noqa: E501


        :return: The feature_id of this PlanFeature.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this PlanFeature.


        :param feature_id: The feature_id of this PlanFeature.  # noqa: E501
        :type feature_id: str
        """
        if self.local_vars_configuration.client_side_validation and feature_id is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_id`, must not be `None`")  # noqa: E501

        self._feature_id = feature_id

    @property
    def plan_feature_id(self):
        """Gets the plan_feature_id of this PlanFeature.  # noqa: E501


        :return: The plan_feature_id of this PlanFeature.  # noqa: E501
        :rtype: str
        """
        return self._plan_feature_id

    @plan_feature_id.setter
    def plan_feature_id(self, plan_feature_id):
        """Sets the plan_feature_id of this PlanFeature.


        :param plan_feature_id: The plan_feature_id of this PlanFeature.  # noqa: E501
        :type plan_feature_id: str
        """
        if self.local_vars_configuration.client_side_validation and plan_feature_id is None:  # noqa: E501
            raise ValueError("Invalid value for `plan_feature_id`, must not be `None`")  # noqa: E501

        self._plan_feature_id = plan_feature_id

    @property
    def name(self):
        """Gets the name of this PlanFeature.  # noqa: E501


        :return: The name of this PlanFeature.  # noqa: E501
        :rtype: DEFeature
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlanFeature.


        :param name: The name of this PlanFeature.  # noqa: E501
        :type name: DEFeature
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def limited_access(self):
        """Gets the limited_access of this PlanFeature.  # noqa: E501


        :return: The limited_access of this PlanFeature.  # noqa: E501
        :rtype: bool
        """
        return self._limited_access

    @limited_access.setter
    def limited_access(self, limited_access):
        """Sets the limited_access of this PlanFeature.


        :param limited_access: The limited_access of this PlanFeature.  # noqa: E501
        :type limited_access: bool
        """
        if self.local_vars_configuration.client_side_validation and limited_access is None:  # noqa: E501
            raise ValueError("Invalid value for `limited_access`, must not be `None`")  # noqa: E501

        self._limited_access = limited_access

    @property
    def limits(self):
        """Gets the limits of this PlanFeature.  # noqa: E501


        :return: The limits of this PlanFeature.  # noqa: E501
        :rtype: PlanLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this PlanFeature.


        :param limits: The limits of this PlanFeature.  # noqa: E501
        :type limits: PlanLimits
        """
        if self.local_vars_configuration.client_side_validation and limits is None:  # noqa: E501
            raise ValueError("Invalid value for `limits`, must not be `None`")  # noqa: E501

        self._limits = limits

    @property
    def feature_type(self):
        """Gets the feature_type of this PlanFeature.  # noqa: E501


        :return: The feature_type of this PlanFeature.  # noqa: E501
        :rtype: FeatureType
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this PlanFeature.


        :param feature_type: The feature_type of this PlanFeature.  # noqa: E501
        :type feature_type: FeatureType
        """
        if self.local_vars_configuration.client_side_validation and feature_type is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_type`, must not be `None`")  # noqa: E501

        self._feature_type = feature_type

    @property
    def dynamic_pricing_info_list(self):
        """Gets the dynamic_pricing_info_list of this PlanFeature.  # noqa: E501


        :return: The dynamic_pricing_info_list of this PlanFeature.  # noqa: E501
        :rtype: list[DynamicPricingInfo]
        """
        return self._dynamic_pricing_info_list

    @dynamic_pricing_info_list.setter
    def dynamic_pricing_info_list(self, dynamic_pricing_info_list):
        """Sets the dynamic_pricing_info_list of this PlanFeature.


        :param dynamic_pricing_info_list: The dynamic_pricing_info_list of this PlanFeature.  # noqa: E501
        :type dynamic_pricing_info_list: list[DynamicPricingInfo]
        """

        self._dynamic_pricing_info_list = dynamic_pricing_info_list

    @property
    def display_text(self):
        """Gets the display_text of this PlanFeature.  # noqa: E501


        :return: The display_text of this PlanFeature.  # noqa: E501
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this PlanFeature.


        :param display_text: The display_text of this PlanFeature.  # noqa: E501
        :type display_text: str
        """

        self._display_text = display_text

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlanFeature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlanFeature):
            return True

        return self.to_dict() != other.to_dict()
