# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SubscriptionDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'org_id': 'str',
        'org_profile': 'OrgProfile',
        'status': 'SubscriptionStatus',
        'plan': 'SubscribedPlan',
        'num_users': 'int',
        'valid_till': 'datetime',
        'cancellation_scheduled_at': 'datetime',
        'deactivated_at': 'datetime',
        'deleted': 'bool'
    }

    attribute_map = {
        'org_id': 'org_id',
        'org_profile': 'org_profile',
        'status': 'status',
        'plan': 'plan',
        'num_users': 'num_users',
        'valid_till': 'valid_till',
        'cancellation_scheduled_at': 'cancellation_scheduled_at',
        'deactivated_at': 'deactivated_at',
        'deleted': 'deleted'
    }

    def __init__(self, org_id=None, org_profile=None, status=None, plan=None, num_users=None, valid_till=None, cancellation_scheduled_at=None, deactivated_at=None, deleted=False, local_vars_configuration=None):  # noqa: E501
        """SubscriptionDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._org_id = None
        self._org_profile = None
        self._status = None
        self._plan = None
        self._num_users = None
        self._valid_till = None
        self._cancellation_scheduled_at = None
        self._deactivated_at = None
        self._deleted = None
        self.discriminator = None

        self.org_id = org_id
        self.org_profile = org_profile
        self.status = status
        self.plan = plan
        self.num_users = num_users
        if valid_till is not None:
            self.valid_till = valid_till
        if cancellation_scheduled_at is not None:
            self.cancellation_scheduled_at = cancellation_scheduled_at
        if deactivated_at is not None:
            self.deactivated_at = deactivated_at
        if deleted is not None:
            self.deleted = deleted

    @property
    def org_id(self):
        """Gets the org_id of this SubscriptionDetails.  # noqa: E501


        :return: The org_id of this SubscriptionDetails.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SubscriptionDetails.


        :param org_id: The org_id of this SubscriptionDetails.  # noqa: E501
        :type org_id: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def org_profile(self):
        """Gets the org_profile of this SubscriptionDetails.  # noqa: E501


        :return: The org_profile of this SubscriptionDetails.  # noqa: E501
        :rtype: OrgProfile
        """
        return self._org_profile

    @org_profile.setter
    def org_profile(self, org_profile):
        """Sets the org_profile of this SubscriptionDetails.


        :param org_profile: The org_profile of this SubscriptionDetails.  # noqa: E501
        :type org_profile: OrgProfile
        """
        if self.local_vars_configuration.client_side_validation and org_profile is None:  # noqa: E501
            raise ValueError("Invalid value for `org_profile`, must not be `None`")  # noqa: E501

        self._org_profile = org_profile

    @property
    def status(self):
        """Gets the status of this SubscriptionDetails.  # noqa: E501


        :return: The status of this SubscriptionDetails.  # noqa: E501
        :rtype: SubscriptionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionDetails.


        :param status: The status of this SubscriptionDetails.  # noqa: E501
        :type status: SubscriptionStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def plan(self):
        """Gets the plan of this SubscriptionDetails.  # noqa: E501


        :return: The plan of this SubscriptionDetails.  # noqa: E501
        :rtype: SubscribedPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SubscriptionDetails.


        :param plan: The plan of this SubscriptionDetails.  # noqa: E501
        :type plan: SubscribedPlan
        """
        if self.local_vars_configuration.client_side_validation and plan is None:  # noqa: E501
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def num_users(self):
        """Gets the num_users of this SubscriptionDetails.  # noqa: E501


        :return: The num_users of this SubscriptionDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_users

    @num_users.setter
    def num_users(self, num_users):
        """Sets the num_users of this SubscriptionDetails.


        :param num_users: The num_users of this SubscriptionDetails.  # noqa: E501
        :type num_users: int
        """
        if self.local_vars_configuration.client_side_validation and num_users is None:  # noqa: E501
            raise ValueError("Invalid value for `num_users`, must not be `None`")  # noqa: E501

        self._num_users = num_users

    @property
    def valid_till(self):
        """Gets the valid_till of this SubscriptionDetails.  # noqa: E501


        :return: The valid_till of this SubscriptionDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this SubscriptionDetails.


        :param valid_till: The valid_till of this SubscriptionDetails.  # noqa: E501
        :type valid_till: datetime
        """

        self._valid_till = valid_till

    @property
    def cancellation_scheduled_at(self):
        """Gets the cancellation_scheduled_at of this SubscriptionDetails.  # noqa: E501


        :return: The cancellation_scheduled_at of this SubscriptionDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_scheduled_at

    @cancellation_scheduled_at.setter
    def cancellation_scheduled_at(self, cancellation_scheduled_at):
        """Sets the cancellation_scheduled_at of this SubscriptionDetails.


        :param cancellation_scheduled_at: The cancellation_scheduled_at of this SubscriptionDetails.  # noqa: E501
        :type cancellation_scheduled_at: datetime
        """

        self._cancellation_scheduled_at = cancellation_scheduled_at

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this SubscriptionDetails.  # noqa: E501


        :return: The deactivated_at of this SubscriptionDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this SubscriptionDetails.


        :param deactivated_at: The deactivated_at of this SubscriptionDetails.  # noqa: E501
        :type deactivated_at: datetime
        """

        self._deactivated_at = deactivated_at

    @property
    def deleted(self):
        """Gets the deleted of this SubscriptionDetails.  # noqa: E501


        :return: The deleted of this SubscriptionDetails.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SubscriptionDetails.


        :param deleted: The deleted of this SubscriptionDetails.  # noqa: E501
        :type deleted: bool
        """

        self._deleted = deleted

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionDetails):
            return True

        return self.to_dict() != other.to_dict()
