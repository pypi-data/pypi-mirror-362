# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'DBStreamTypes',
        'store_type': 'DBStoreTypes',
        'hostname': 'str',
        'am_hostname': 'str',
        'am_port': 'str',
        'exposed': 'bool',
        'use_ssl': 'bool',
        'database_host_cert': 'str',
        'port': 'int',
        'database_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'store_type': 'store_type',
        'hostname': 'hostname',
        'am_hostname': 'am_hostname',
        'am_port': 'am_port',
        'exposed': 'exposed',
        'use_ssl': 'use_ssl',
        'database_host_cert': 'database_host_cert',
        'port': 'port',
        'database_name': 'database_name'
    }

    def __init__(self, name=None, type=None, store_type=None, hostname=None, am_hostname=None, am_port=None, exposed=None, use_ssl=None, database_host_cert=None, port=None, database_name=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._store_type = None
        self._hostname = None
        self._am_hostname = None
        self._am_port = None
        self._exposed = None
        self._use_ssl = None
        self._database_host_cert = None
        self._port = None
        self._database_name = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.store_type = store_type
        self.hostname = hostname
        if am_hostname is not None:
            self.am_hostname = am_hostname
        if am_port is not None:
            self.am_port = am_port
        if exposed is not None:
            self.exposed = exposed
        if use_ssl is not None:
            self.use_ssl = use_ssl
        if database_host_cert is not None:
            self.database_host_cert = database_host_cert
        self.port = port
        self.database_name = database_name

    @property
    def name(self):
        """Gets the name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param name: The name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: DBStreamTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param type: The type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type type: DBStreamTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def store_type(self):
        """Gets the store_type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The store_type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: DBStoreTypes
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type):
        """Sets the store_type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param store_type: The store_type of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type store_type: DBStoreTypes
        """
        if self.local_vars_configuration.client_side_validation and store_type is None:  # noqa: E501
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501

        self._store_type = store_type

    @property
    def hostname(self):
        """Gets the hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param hostname: The hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type hostname: str
        """
        if self.local_vars_configuration.client_side_validation and hostname is None:  # noqa: E501
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def am_hostname(self):
        """Gets the am_hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The am_hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._am_hostname

    @am_hostname.setter
    def am_hostname(self, am_hostname):
        """Sets the am_hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param am_hostname: The am_hostname of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type am_hostname: str
        """

        self._am_hostname = am_hostname

    @property
    def am_port(self):
        """Gets the am_port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The am_port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._am_port

    @am_port.setter
    def am_port(self, am_port):
        """Sets the am_port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param am_port: The am_port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type am_port: str
        """

        self._am_port = am_port

    @property
    def exposed(self):
        """Gets the exposed of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The exposed of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: bool
        """
        return self._exposed

    @exposed.setter
    def exposed(self, exposed):
        """Sets the exposed of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param exposed: The exposed of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type exposed: bool
        """

        self._exposed = exposed

    @property
    def use_ssl(self):
        """Gets the use_ssl of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The use_ssl of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param use_ssl: The use_ssl of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type use_ssl: bool
        """

        self._use_ssl = use_ssl

    @property
    def database_host_cert(self):
        """Gets the database_host_cert of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The database_host_cert of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._database_host_cert

    @database_host_cert.setter
    def database_host_cert(self, database_host_cert):
        """Sets the database_host_cert of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param database_host_cert: The database_host_cert of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type database_host_cert: str
        """

        self._database_host_cert = database_host_cert

    @property
    def port(self):
        """Gets the port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param port: The port of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type port: int
        """
        if self.local_vars_configuration.client_side_validation and port is None:  # noqa: E501
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def database_name(self):
        """Gets the database_name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501


        :return: The database_name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.


        :param database_name: The database_name of this OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore.  # noqa: E501
        :type database_name: str
        """
        if self.local_vars_configuration.client_side_validation and database_name is None:  # noqa: E501
            raise ValueError("Invalid value for `database_name`, must not be `None`")  # noqa: E501

        self._database_name = database_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore):
            return True

        return self.to_dict() != other.to_dict()
