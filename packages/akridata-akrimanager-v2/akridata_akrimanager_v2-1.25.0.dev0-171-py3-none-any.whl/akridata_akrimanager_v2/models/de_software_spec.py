# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DeSoftwareSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'str',
        'min_supported_version': 'str',
        'akrisoft_docker_image': 'str',
        'akri_filter_images_tag': 'str',
        'cloud_helm_repo': 'str',
        'cloud_helm_chart_version': 'str',
        'min_adectl_version': 'str',
        'adectl_version': 'str',
        'public_repo': 'str',
        'default_repo_type': 'DockerRepoType'
    }

    attribute_map = {
        'version': 'version',
        'min_supported_version': 'min_supported_version',
        'akrisoft_docker_image': 'akrisoft_docker_image',
        'akri_filter_images_tag': 'akri_filter_images_tag',
        'cloud_helm_repo': 'cloud_helm_repo',
        'cloud_helm_chart_version': 'cloud_helm_chart_version',
        'min_adectl_version': 'min_adectl_version',
        'adectl_version': 'adectl_version',
        'public_repo': 'public_repo',
        'default_repo_type': 'default_repo_type'
    }

    def __init__(self, version=None, min_supported_version=None, akrisoft_docker_image=None, akri_filter_images_tag=None, cloud_helm_repo=None, cloud_helm_chart_version=None, min_adectl_version=None, adectl_version=None, public_repo=None, default_repo_type=None, local_vars_configuration=None):  # noqa: E501
        """DeSoftwareSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._min_supported_version = None
        self._akrisoft_docker_image = None
        self._akri_filter_images_tag = None
        self._cloud_helm_repo = None
        self._cloud_helm_chart_version = None
        self._min_adectl_version = None
        self._adectl_version = None
        self._public_repo = None
        self._default_repo_type = None
        self.discriminator = None

        self.version = version
        self.min_supported_version = min_supported_version
        self.akrisoft_docker_image = akrisoft_docker_image
        self.akri_filter_images_tag = akri_filter_images_tag
        self.cloud_helm_repo = cloud_helm_repo
        self.cloud_helm_chart_version = cloud_helm_chart_version
        self.min_adectl_version = min_adectl_version
        if adectl_version is not None:
            self.adectl_version = adectl_version
        if public_repo is not None:
            self.public_repo = public_repo
        if default_repo_type is not None:
            self.default_repo_type = default_repo_type

    @property
    def version(self):
        """Gets the version of this DeSoftwareSpec.  # noqa: E501


        :return: The version of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeSoftwareSpec.


        :param version: The version of this DeSoftwareSpec.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def min_supported_version(self):
        """Gets the min_supported_version of this DeSoftwareSpec.  # noqa: E501


        :return: The min_supported_version of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._min_supported_version

    @min_supported_version.setter
    def min_supported_version(self, min_supported_version):
        """Sets the min_supported_version of this DeSoftwareSpec.


        :param min_supported_version: The min_supported_version of this DeSoftwareSpec.  # noqa: E501
        :type min_supported_version: str
        """
        if self.local_vars_configuration.client_side_validation and min_supported_version is None:  # noqa: E501
            raise ValueError("Invalid value for `min_supported_version`, must not be `None`")  # noqa: E501

        self._min_supported_version = min_supported_version

    @property
    def akrisoft_docker_image(self):
        """Gets the akrisoft_docker_image of this DeSoftwareSpec.  # noqa: E501


        :return: The akrisoft_docker_image of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._akrisoft_docker_image

    @akrisoft_docker_image.setter
    def akrisoft_docker_image(self, akrisoft_docker_image):
        """Sets the akrisoft_docker_image of this DeSoftwareSpec.


        :param akrisoft_docker_image: The akrisoft_docker_image of this DeSoftwareSpec.  # noqa: E501
        :type akrisoft_docker_image: str
        """
        if self.local_vars_configuration.client_side_validation and akrisoft_docker_image is None:  # noqa: E501
            raise ValueError("Invalid value for `akrisoft_docker_image`, must not be `None`")  # noqa: E501

        self._akrisoft_docker_image = akrisoft_docker_image

    @property
    def akri_filter_images_tag(self):
        """Gets the akri_filter_images_tag of this DeSoftwareSpec.  # noqa: E501


        :return: The akri_filter_images_tag of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._akri_filter_images_tag

    @akri_filter_images_tag.setter
    def akri_filter_images_tag(self, akri_filter_images_tag):
        """Sets the akri_filter_images_tag of this DeSoftwareSpec.


        :param akri_filter_images_tag: The akri_filter_images_tag of this DeSoftwareSpec.  # noqa: E501
        :type akri_filter_images_tag: str
        """
        if self.local_vars_configuration.client_side_validation and akri_filter_images_tag is None:  # noqa: E501
            raise ValueError("Invalid value for `akri_filter_images_tag`, must not be `None`")  # noqa: E501

        self._akri_filter_images_tag = akri_filter_images_tag

    @property
    def cloud_helm_repo(self):
        """Gets the cloud_helm_repo of this DeSoftwareSpec.  # noqa: E501


        :return: The cloud_helm_repo of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._cloud_helm_repo

    @cloud_helm_repo.setter
    def cloud_helm_repo(self, cloud_helm_repo):
        """Sets the cloud_helm_repo of this DeSoftwareSpec.


        :param cloud_helm_repo: The cloud_helm_repo of this DeSoftwareSpec.  # noqa: E501
        :type cloud_helm_repo: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_helm_repo is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_helm_repo`, must not be `None`")  # noqa: E501

        self._cloud_helm_repo = cloud_helm_repo

    @property
    def cloud_helm_chart_version(self):
        """Gets the cloud_helm_chart_version of this DeSoftwareSpec.  # noqa: E501


        :return: The cloud_helm_chart_version of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._cloud_helm_chart_version

    @cloud_helm_chart_version.setter
    def cloud_helm_chart_version(self, cloud_helm_chart_version):
        """Sets the cloud_helm_chart_version of this DeSoftwareSpec.


        :param cloud_helm_chart_version: The cloud_helm_chart_version of this DeSoftwareSpec.  # noqa: E501
        :type cloud_helm_chart_version: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_helm_chart_version is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_helm_chart_version`, must not be `None`")  # noqa: E501

        self._cloud_helm_chart_version = cloud_helm_chart_version

    @property
    def min_adectl_version(self):
        """Gets the min_adectl_version of this DeSoftwareSpec.  # noqa: E501


        :return: The min_adectl_version of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._min_adectl_version

    @min_adectl_version.setter
    def min_adectl_version(self, min_adectl_version):
        """Sets the min_adectl_version of this DeSoftwareSpec.


        :param min_adectl_version: The min_adectl_version of this DeSoftwareSpec.  # noqa: E501
        :type min_adectl_version: str
        """
        if self.local_vars_configuration.client_side_validation and min_adectl_version is None:  # noqa: E501
            raise ValueError("Invalid value for `min_adectl_version`, must not be `None`")  # noqa: E501

        self._min_adectl_version = min_adectl_version

    @property
    def adectl_version(self):
        """Gets the adectl_version of this DeSoftwareSpec.  # noqa: E501


        :return: The adectl_version of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._adectl_version

    @adectl_version.setter
    def adectl_version(self, adectl_version):
        """Sets the adectl_version of this DeSoftwareSpec.


        :param adectl_version: The adectl_version of this DeSoftwareSpec.  # noqa: E501
        :type adectl_version: str
        """

        self._adectl_version = adectl_version

    @property
    def public_repo(self):
        """Gets the public_repo of this DeSoftwareSpec.  # noqa: E501


        :return: The public_repo of this DeSoftwareSpec.  # noqa: E501
        :rtype: str
        """
        return self._public_repo

    @public_repo.setter
    def public_repo(self, public_repo):
        """Sets the public_repo of this DeSoftwareSpec.


        :param public_repo: The public_repo of this DeSoftwareSpec.  # noqa: E501
        :type public_repo: str
        """

        self._public_repo = public_repo

    @property
    def default_repo_type(self):
        """Gets the default_repo_type of this DeSoftwareSpec.  # noqa: E501


        :return: The default_repo_type of this DeSoftwareSpec.  # noqa: E501
        :rtype: DockerRepoType
        """
        return self._default_repo_type

    @default_repo_type.setter
    def default_repo_type(self, default_repo_type):
        """Sets the default_repo_type of this DeSoftwareSpec.


        :param default_repo_type: The default_repo_type of this DeSoftwareSpec.  # noqa: E501
        :type default_repo_type: DockerRepoType
        """

        self._default_repo_type = default_repo_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeSoftwareSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeSoftwareSpec):
            return True

        return self.to_dict() != other.to_dict()
