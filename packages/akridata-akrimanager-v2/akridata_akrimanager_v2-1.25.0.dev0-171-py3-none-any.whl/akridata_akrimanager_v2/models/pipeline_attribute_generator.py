# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class PipelineAttributeGenerator(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'image_name': 'str',
        'properties': 'dict(str, str)',
        'output_port_properties': 'dict(str, object)',
        'license_name': 'str',
        'license_url': 'str',
        'dpu_info': 'DockerImageDpuInfo',
        'action': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'image_name': 'image_name',
        'properties': 'properties',
        'output_port_properties': 'output_port_properties',
        'license_name': 'license_name',
        'license_url': 'license_url',
        'dpu_info': 'dpu_info',
        'action': 'action'
    }

    def __init__(self, id=None, name=None, image_name=None, properties=None, output_port_properties=None, license_name=None, license_url=None, dpu_info=None, action='add', local_vars_configuration=None):  # noqa: E501
        """PipelineAttributeGenerator - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._image_name = None
        self._properties = None
        self._output_port_properties = None
        self._license_name = None
        self._license_url = None
        self._dpu_info = None
        self._action = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if image_name is not None:
            self.image_name = image_name
        if properties is not None:
            self.properties = properties
        if output_port_properties is not None:
            self.output_port_properties = output_port_properties
        if license_name is not None:
            self.license_name = license_name
        if license_url is not None:
            self.license_url = license_url
        if dpu_info is not None:
            self.dpu_info = dpu_info
        if action is not None:
            self.action = action

    @property
    def id(self):
        """Gets the id of this PipelineAttributeGenerator.  # noqa: E501


        :return: The id of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PipelineAttributeGenerator.


        :param id: The id of this PipelineAttributeGenerator.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PipelineAttributeGenerator.  # noqa: E501


        :return: The name of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PipelineAttributeGenerator.


        :param name: The name of this PipelineAttributeGenerator.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def image_name(self):
        """Gets the image_name of this PipelineAttributeGenerator.  # noqa: E501


        :return: The image_name of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this PipelineAttributeGenerator.


        :param image_name: The image_name of this PipelineAttributeGenerator.  # noqa: E501
        :type image_name: str
        """

        self._image_name = image_name

    @property
    def properties(self):
        """Gets the properties of this PipelineAttributeGenerator.  # noqa: E501


        :return: The properties of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PipelineAttributeGenerator.


        :param properties: The properties of this PipelineAttributeGenerator.  # noqa: E501
        :type properties: dict(str, str)
        """

        self._properties = properties

    @property
    def output_port_properties(self):
        """Gets the output_port_properties of this PipelineAttributeGenerator.  # noqa: E501


        :return: The output_port_properties of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output_port_properties

    @output_port_properties.setter
    def output_port_properties(self, output_port_properties):
        """Sets the output_port_properties of this PipelineAttributeGenerator.


        :param output_port_properties: The output_port_properties of this PipelineAttributeGenerator.  # noqa: E501
        :type output_port_properties: dict(str, object)
        """

        self._output_port_properties = output_port_properties

    @property
    def license_name(self):
        """Gets the license_name of this PipelineAttributeGenerator.  # noqa: E501


        :return: The license_name of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this PipelineAttributeGenerator.


        :param license_name: The license_name of this PipelineAttributeGenerator.  # noqa: E501
        :type license_name: str
        """

        self._license_name = license_name

    @property
    def license_url(self):
        """Gets the license_url of this PipelineAttributeGenerator.  # noqa: E501


        :return: The license_url of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this PipelineAttributeGenerator.


        :param license_url: The license_url of this PipelineAttributeGenerator.  # noqa: E501
        :type license_url: str
        """

        self._license_url = license_url

    @property
    def dpu_info(self):
        """Gets the dpu_info of this PipelineAttributeGenerator.  # noqa: E501


        :return: The dpu_info of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: DockerImageDpuInfo
        """
        return self._dpu_info

    @dpu_info.setter
    def dpu_info(self, dpu_info):
        """Sets the dpu_info of this PipelineAttributeGenerator.


        :param dpu_info: The dpu_info of this PipelineAttributeGenerator.  # noqa: E501
        :type dpu_info: DockerImageDpuInfo
        """

        self._dpu_info = dpu_info

    @property
    def action(self):
        """Gets the action of this PipelineAttributeGenerator.  # noqa: E501


        :return: The action of this PipelineAttributeGenerator.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PipelineAttributeGenerator.


        :param action: The action of this PipelineAttributeGenerator.  # noqa: E501
        :type action: str
        """

        self._action = action

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineAttributeGenerator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineAttributeGenerator):
            return True

        return self.to_dict() != other.to_dict()
