# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class TableInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'TableTypes',
        'abs_name': 'str',
        'description': 'str',
        'supports_vseq': 'bool',
        'visualizable': 'bool',
        'columns': 'list[ColumnInfo]',
        'latest_pe_query_id': 'str',
        'latest_in_progress_pe_query_id': 'str',
        'import_feature_details': 'ImportFeatureDetails',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'created_by': 'str',
        'task_type': 'TaskType',
        'file_type': 'FileType',
        'status': 'EntityStatus'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'abs_name': 'abs_name',
        'description': 'description',
        'supports_vseq': 'supports_vseq',
        'visualizable': 'visualizable',
        'columns': 'columns',
        'latest_pe_query_id': 'latest_pe_query_id',
        'latest_in_progress_pe_query_id': 'latest_in_progress_pe_query_id',
        'import_feature_details': 'import_feature_details',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'created_by': 'created_by',
        'task_type': 'task_type',
        'file_type': 'file_type',
        'status': 'status'
    }

    def __init__(self, name=None, type=None, abs_name=None, description=None, supports_vseq=False, visualizable=None, columns=None, latest_pe_query_id=None, latest_in_progress_pe_query_id=None, import_feature_details=None, created_at=None, updated_at=None, created_by=None, task_type=None, file_type=None, status=None, local_vars_configuration=None):  # noqa: E501
        """TableInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._abs_name = None
        self._description = None
        self._supports_vseq = None
        self._visualizable = None
        self._columns = None
        self._latest_pe_query_id = None
        self._latest_in_progress_pe_query_id = None
        self._import_feature_details = None
        self._created_at = None
        self._updated_at = None
        self._created_by = None
        self._task_type = None
        self._file_type = None
        self._status = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.abs_name = abs_name
        self.description = description
        if supports_vseq is not None:
            self.supports_vseq = supports_vseq
        if visualizable is not None:
            self.visualizable = visualizable
        self.columns = columns
        if latest_pe_query_id is not None:
            self.latest_pe_query_id = latest_pe_query_id
        if latest_in_progress_pe_query_id is not None:
            self.latest_in_progress_pe_query_id = latest_in_progress_pe_query_id
        if import_feature_details is not None:
            self.import_feature_details = import_feature_details
        self.created_at = created_at
        self.updated_at = updated_at
        if created_by is not None:
            self.created_by = created_by
        self.task_type = task_type
        if file_type is not None:
            self.file_type = file_type
        self.status = status

    @property
    def name(self):
        """Gets the name of this TableInfo.  # noqa: E501


        :return: The name of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableInfo.


        :param name: The name of this TableInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this TableInfo.  # noqa: E501


        :return: The type of this TableInfo.  # noqa: E501
        :rtype: TableTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableInfo.


        :param type: The type of this TableInfo.  # noqa: E501
        :type type: TableTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def abs_name(self):
        """Gets the abs_name of this TableInfo.  # noqa: E501


        :return: The abs_name of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._abs_name

    @abs_name.setter
    def abs_name(self, abs_name):
        """Sets the abs_name of this TableInfo.


        :param abs_name: The abs_name of this TableInfo.  # noqa: E501
        :type abs_name: str
        """
        if self.local_vars_configuration.client_side_validation and abs_name is None:  # noqa: E501
            raise ValueError("Invalid value for `abs_name`, must not be `None`")  # noqa: E501

        self._abs_name = abs_name

    @property
    def description(self):
        """Gets the description of this TableInfo.  # noqa: E501


        :return: The description of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TableInfo.


        :param description: The description of this TableInfo.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def supports_vseq(self):
        """Gets the supports_vseq of this TableInfo.  # noqa: E501


        :return: The supports_vseq of this TableInfo.  # noqa: E501
        :rtype: bool
        """
        return self._supports_vseq

    @supports_vseq.setter
    def supports_vseq(self, supports_vseq):
        """Sets the supports_vseq of this TableInfo.


        :param supports_vseq: The supports_vseq of this TableInfo.  # noqa: E501
        :type supports_vseq: bool
        """

        self._supports_vseq = supports_vseq

    @property
    def visualizable(self):
        """Gets the visualizable of this TableInfo.  # noqa: E501


        :return: The visualizable of this TableInfo.  # noqa: E501
        :rtype: bool
        """
        return self._visualizable

    @visualizable.setter
    def visualizable(self, visualizable):
        """Sets the visualizable of this TableInfo.


        :param visualizable: The visualizable of this TableInfo.  # noqa: E501
        :type visualizable: bool
        """

        self._visualizable = visualizable

    @property
    def columns(self):
        """Gets the columns of this TableInfo.  # noqa: E501


        :return: The columns of this TableInfo.  # noqa: E501
        :rtype: list[ColumnInfo]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this TableInfo.


        :param columns: The columns of this TableInfo.  # noqa: E501
        :type columns: list[ColumnInfo]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def latest_pe_query_id(self):
        """Gets the latest_pe_query_id of this TableInfo.  # noqa: E501


        :return: The latest_pe_query_id of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._latest_pe_query_id

    @latest_pe_query_id.setter
    def latest_pe_query_id(self, latest_pe_query_id):
        """Sets the latest_pe_query_id of this TableInfo.


        :param latest_pe_query_id: The latest_pe_query_id of this TableInfo.  # noqa: E501
        :type latest_pe_query_id: str
        """

        self._latest_pe_query_id = latest_pe_query_id

    @property
    def latest_in_progress_pe_query_id(self):
        """Gets the latest_in_progress_pe_query_id of this TableInfo.  # noqa: E501


        :return: The latest_in_progress_pe_query_id of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._latest_in_progress_pe_query_id

    @latest_in_progress_pe_query_id.setter
    def latest_in_progress_pe_query_id(self, latest_in_progress_pe_query_id):
        """Sets the latest_in_progress_pe_query_id of this TableInfo.


        :param latest_in_progress_pe_query_id: The latest_in_progress_pe_query_id of this TableInfo.  # noqa: E501
        :type latest_in_progress_pe_query_id: str
        """

        self._latest_in_progress_pe_query_id = latest_in_progress_pe_query_id

    @property
    def import_feature_details(self):
        """Gets the import_feature_details of this TableInfo.  # noqa: E501


        :return: The import_feature_details of this TableInfo.  # noqa: E501
        :rtype: ImportFeatureDetails
        """
        return self._import_feature_details

    @import_feature_details.setter
    def import_feature_details(self, import_feature_details):
        """Sets the import_feature_details of this TableInfo.


        :param import_feature_details: The import_feature_details of this TableInfo.  # noqa: E501
        :type import_feature_details: ImportFeatureDetails
        """

        self._import_feature_details = import_feature_details

    @property
    def created_at(self):
        """Gets the created_at of this TableInfo.  # noqa: E501


        :return: The created_at of this TableInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TableInfo.


        :param created_at: The created_at of this TableInfo.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this TableInfo.  # noqa: E501


        :return: The updated_at of this TableInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TableInfo.


        :param updated_at: The updated_at of this TableInfo.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_by(self):
        """Gets the created_by of this TableInfo.  # noqa: E501


        :return: The created_by of this TableInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TableInfo.


        :param created_by: The created_by of this TableInfo.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def task_type(self):
        """Gets the task_type of this TableInfo.  # noqa: E501


        :return: The task_type of this TableInfo.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TableInfo.


        :param task_type: The task_type of this TableInfo.  # noqa: E501
        :type task_type: TaskType
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def file_type(self):
        """Gets the file_type of this TableInfo.  # noqa: E501


        :return: The file_type of this TableInfo.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this TableInfo.


        :param file_type: The file_type of this TableInfo.  # noqa: E501
        :type file_type: FileType
        """

        self._file_type = file_type

    @property
    def status(self):
        """Gets the status of this TableInfo.  # noqa: E501


        :return: The status of this TableInfo.  # noqa: E501
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TableInfo.


        :param status: The status of this TableInfo.  # noqa: E501
        :type status: EntityStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TableInfo):
            return True

        return self.to_dict() != other.to_dict()
