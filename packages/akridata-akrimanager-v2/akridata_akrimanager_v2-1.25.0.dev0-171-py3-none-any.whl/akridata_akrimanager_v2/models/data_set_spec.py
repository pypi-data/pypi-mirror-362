# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DataSetSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'glob': 'str',
        'glob_ignore_case': 'bool',
        'glob_extensions': 'list[str]',
        'glob_prefix': 'str',
        'access_type': 'str',
        'wmts': 'dict(str, str)',
        'sample_frame_rate': 'float',
        'members': 'DataSetSpecMember',
        'name_parsing': 'NameParsing',
        'partitions': 'Partitions'
    }

    attribute_map = {
        'glob': 'glob',
        'glob_ignore_case': 'glob_ignore_case',
        'glob_extensions': 'glob_extensions',
        'glob_prefix': 'glob_prefix',
        'access_type': 'access_type',
        'wmts': 'wmts',
        'sample_frame_rate': 'sample_frame_rate',
        'members': 'members',
        'name_parsing': 'name_parsing',
        'partitions': 'partitions'
    }

    def __init__(self, glob='*.*', glob_ignore_case=True, glob_extensions=None, glob_prefix='*', access_type='default', wmts=None, sample_frame_rate=-1, members=None, name_parsing=None, partitions=None, local_vars_configuration=None):  # noqa: E501
        """DataSetSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._glob = None
        self._glob_ignore_case = None
        self._glob_extensions = None
        self._glob_prefix = None
        self._access_type = None
        self._wmts = None
        self._sample_frame_rate = None
        self._members = None
        self._name_parsing = None
        self._partitions = None
        self.discriminator = None

        if glob is not None:
            self.glob = glob
        if glob_ignore_case is not None:
            self.glob_ignore_case = glob_ignore_case
        if glob_extensions is not None:
            self.glob_extensions = glob_extensions
        if glob_prefix is not None:
            self.glob_prefix = glob_prefix
        if access_type is not None:
            self.access_type = access_type
        if wmts is not None:
            self.wmts = wmts
        if sample_frame_rate is not None:
            self.sample_frame_rate = sample_frame_rate
        if members is not None:
            self.members = members
        if name_parsing is not None:
            self.name_parsing = name_parsing
        if partitions is not None:
            self.partitions = partitions

    @property
    def glob(self):
        """Gets the glob of this DataSetSpec.  # noqa: E501


        :return: The glob of this DataSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._glob

    @glob.setter
    def glob(self, glob):
        """Sets the glob of this DataSetSpec.


        :param glob: The glob of this DataSetSpec.  # noqa: E501
        :type glob: str
        """

        self._glob = glob

    @property
    def glob_ignore_case(self):
        """Gets the glob_ignore_case of this DataSetSpec.  # noqa: E501


        :return: The glob_ignore_case of this DataSetSpec.  # noqa: E501
        :rtype: bool
        """
        return self._glob_ignore_case

    @glob_ignore_case.setter
    def glob_ignore_case(self, glob_ignore_case):
        """Sets the glob_ignore_case of this DataSetSpec.


        :param glob_ignore_case: The glob_ignore_case of this DataSetSpec.  # noqa: E501
        :type glob_ignore_case: bool
        """

        self._glob_ignore_case = glob_ignore_case

    @property
    def glob_extensions(self):
        """Gets the glob_extensions of this DataSetSpec.  # noqa: E501


        :return: The glob_extensions of this DataSetSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._glob_extensions

    @glob_extensions.setter
    def glob_extensions(self, glob_extensions):
        """Sets the glob_extensions of this DataSetSpec.


        :param glob_extensions: The glob_extensions of this DataSetSpec.  # noqa: E501
        :type glob_extensions: list[str]
        """

        self._glob_extensions = glob_extensions

    @property
    def glob_prefix(self):
        """Gets the glob_prefix of this DataSetSpec.  # noqa: E501


        :return: The glob_prefix of this DataSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._glob_prefix

    @glob_prefix.setter
    def glob_prefix(self, glob_prefix):
        """Sets the glob_prefix of this DataSetSpec.


        :param glob_prefix: The glob_prefix of this DataSetSpec.  # noqa: E501
        :type glob_prefix: str
        """

        self._glob_prefix = glob_prefix

    @property
    def access_type(self):
        """Gets the access_type of this DataSetSpec.  # noqa: E501


        :return: The access_type of this DataSetSpec.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this DataSetSpec.


        :param access_type: The access_type of this DataSetSpec.  # noqa: E501
        :type access_type: str
        """

        self._access_type = access_type

    @property
    def wmts(self):
        """Gets the wmts of this DataSetSpec.  # noqa: E501


        :return: The wmts of this DataSetSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._wmts

    @wmts.setter
    def wmts(self, wmts):
        """Sets the wmts of this DataSetSpec.


        :param wmts: The wmts of this DataSetSpec.  # noqa: E501
        :type wmts: dict(str, str)
        """

        self._wmts = wmts

    @property
    def sample_frame_rate(self):
        """Gets the sample_frame_rate of this DataSetSpec.  # noqa: E501


        :return: The sample_frame_rate of this DataSetSpec.  # noqa: E501
        :rtype: float
        """
        return self._sample_frame_rate

    @sample_frame_rate.setter
    def sample_frame_rate(self, sample_frame_rate):
        """Sets the sample_frame_rate of this DataSetSpec.


        :param sample_frame_rate: The sample_frame_rate of this DataSetSpec.  # noqa: E501
        :type sample_frame_rate: float
        """

        self._sample_frame_rate = sample_frame_rate

    @property
    def members(self):
        """Gets the members of this DataSetSpec.  # noqa: E501


        :return: The members of this DataSetSpec.  # noqa: E501
        :rtype: DataSetSpecMember
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this DataSetSpec.


        :param members: The members of this DataSetSpec.  # noqa: E501
        :type members: DataSetSpecMember
        """

        self._members = members

    @property
    def name_parsing(self):
        """Gets the name_parsing of this DataSetSpec.  # noqa: E501


        :return: The name_parsing of this DataSetSpec.  # noqa: E501
        :rtype: NameParsing
        """
        return self._name_parsing

    @name_parsing.setter
    def name_parsing(self, name_parsing):
        """Sets the name_parsing of this DataSetSpec.


        :param name_parsing: The name_parsing of this DataSetSpec.  # noqa: E501
        :type name_parsing: NameParsing
        """

        self._name_parsing = name_parsing

    @property
    def partitions(self):
        """Gets the partitions of this DataSetSpec.  # noqa: E501


        :return: The partitions of this DataSetSpec.  # noqa: E501
        :rtype: Partitions
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this DataSetSpec.


        :param partitions: The partitions of this DataSetSpec.  # noqa: E501
        :type partitions: Partitions
        """

        self._partitions = partitions

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSetSpec):
            return True

        return self.to_dict() != other.to_dict()
