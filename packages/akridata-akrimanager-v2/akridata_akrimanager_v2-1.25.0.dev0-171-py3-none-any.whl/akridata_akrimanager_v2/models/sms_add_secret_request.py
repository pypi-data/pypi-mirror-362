# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SMSAddSecretRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'namespace': 'str',
        'credential_type': 'CredentialTypes',
        'credential_provider': 'CredentialProviders',
        'credentials': 'SMSCredentials'
    }

    attribute_map = {
        'key': 'key',
        'namespace': 'namespace',
        'credential_type': 'credential_type',
        'credential_provider': 'credential_provider',
        'credentials': 'credentials'
    }

    def __init__(self, key=None, namespace=None, credential_type=None, credential_provider=None, credentials=None, local_vars_configuration=None):  # noqa: E501
        """SMSAddSecretRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._namespace = None
        self._credential_type = None
        self._credential_provider = None
        self._credentials = None
        self.discriminator = None

        self.key = key
        self.namespace = namespace
        self.credential_type = credential_type
        if credential_provider is not None:
            self.credential_provider = credential_provider
        self.credentials = credentials

    @property
    def key(self):
        """Gets the key of this SMSAddSecretRequest.  # noqa: E501


        :return: The key of this SMSAddSecretRequest.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SMSAddSecretRequest.


        :param key: The key of this SMSAddSecretRequest.  # noqa: E501
        :type key: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def namespace(self):
        """Gets the namespace of this SMSAddSecretRequest.  # noqa: E501


        :return: The namespace of this SMSAddSecretRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SMSAddSecretRequest.


        :param namespace: The namespace of this SMSAddSecretRequest.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def credential_type(self):
        """Gets the credential_type of this SMSAddSecretRequest.  # noqa: E501


        :return: The credential_type of this SMSAddSecretRequest.  # noqa: E501
        :rtype: CredentialTypes
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this SMSAddSecretRequest.


        :param credential_type: The credential_type of this SMSAddSecretRequest.  # noqa: E501
        :type credential_type: CredentialTypes
        """
        if self.local_vars_configuration.client_side_validation and credential_type is None:  # noqa: E501
            raise ValueError("Invalid value for `credential_type`, must not be `None`")  # noqa: E501

        self._credential_type = credential_type

    @property
    def credential_provider(self):
        """Gets the credential_provider of this SMSAddSecretRequest.  # noqa: E501


        :return: The credential_provider of this SMSAddSecretRequest.  # noqa: E501
        :rtype: CredentialProviders
        """
        return self._credential_provider

    @credential_provider.setter
    def credential_provider(self, credential_provider):
        """Sets the credential_provider of this SMSAddSecretRequest.


        :param credential_provider: The credential_provider of this SMSAddSecretRequest.  # noqa: E501
        :type credential_provider: CredentialProviders
        """

        self._credential_provider = credential_provider

    @property
    def credentials(self):
        """Gets the credentials of this SMSAddSecretRequest.  # noqa: E501


        :return: The credentials of this SMSAddSecretRequest.  # noqa: E501
        :rtype: SMSCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this SMSAddSecretRequest.


        :param credentials: The credentials of this SMSAddSecretRequest.  # noqa: E501
        :type credentials: SMSCredentials
        """
        if self.local_vars_configuration.client_side_validation and credentials is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SMSAddSecretRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SMSAddSecretRequest):
            return True

        return self.to_dict() != other.to_dict()
