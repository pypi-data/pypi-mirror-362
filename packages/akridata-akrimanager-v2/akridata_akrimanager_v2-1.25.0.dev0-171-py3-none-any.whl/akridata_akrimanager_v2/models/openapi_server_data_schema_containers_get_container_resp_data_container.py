# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersGetContainerRespDataContainer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'version': 'str',
        'type': 'DataContainerTypes',
        'gateway_host': 'str',
        'storage_mgr': 'OpenapiServerDataSchemaContainersGetContainerRespStorageManager',
        'data_stores': 'list[OpenapiServerDataSchemaContainersGetContainerRespDataStore]',
        'is_accessible': 'bool',
        'catalog_db_stores': 'list[OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore]',
        'auto_tiering_policies': 'list[OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy]',
        'use_image_server': 'bool',
        'is_scratchpad': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'type': 'type',
        'gateway_host': 'gateway_host',
        'storage_mgr': 'storage_mgr',
        'data_stores': 'data_stores',
        'is_accessible': 'is_accessible',
        'catalog_db_stores': 'catalog_db_stores',
        'auto_tiering_policies': 'auto_tiering_policies',
        'use_image_server': 'use_image_server',
        'is_scratchpad': 'is_scratchpad'
    }

    def __init__(self, name=None, version=None, type=None, gateway_host=None, storage_mgr=None, data_stores=None, is_accessible=False, catalog_db_stores=None, auto_tiering_policies=None, use_image_server=None, is_scratchpad=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersGetContainerRespDataContainer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._version = None
        self._type = None
        self._gateway_host = None
        self._storage_mgr = None
        self._data_stores = None
        self._is_accessible = None
        self._catalog_db_stores = None
        self._auto_tiering_policies = None
        self._use_image_server = None
        self._is_scratchpad = None
        self.discriminator = None

        self.name = name
        self.version = version
        self.type = type
        if gateway_host is not None:
            self.gateway_host = gateway_host
        if storage_mgr is not None:
            self.storage_mgr = storage_mgr
        self.data_stores = data_stores
        if is_accessible is not None:
            self.is_accessible = is_accessible
        if catalog_db_stores is not None:
            self.catalog_db_stores = catalog_db_stores
        if auto_tiering_policies is not None:
            self.auto_tiering_policies = auto_tiering_policies
        self.use_image_server = use_image_server
        self.is_scratchpad = is_scratchpad

    @property
    def name(self):
        """Gets the name of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The name of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param name: The name of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The version of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param version: The version of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def type(self):
        """Gets the type of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The type of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: DataContainerTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param type: The type of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type type: DataContainerTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def gateway_host(self):
        """Gets the gateway_host of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The gateway_host of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: str
        """
        return self._gateway_host

    @gateway_host.setter
    def gateway_host(self, gateway_host):
        """Sets the gateway_host of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param gateway_host: The gateway_host of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type gateway_host: str
        """

        self._gateway_host = gateway_host

    @property
    def storage_mgr(self):
        """Gets the storage_mgr of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The storage_mgr of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: OpenapiServerDataSchemaContainersGetContainerRespStorageManager
        """
        return self._storage_mgr

    @storage_mgr.setter
    def storage_mgr(self, storage_mgr):
        """Sets the storage_mgr of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param storage_mgr: The storage_mgr of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type storage_mgr: OpenapiServerDataSchemaContainersGetContainerRespStorageManager
        """

        self._storage_mgr = storage_mgr

    @property
    def data_stores(self):
        """Gets the data_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The data_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaContainersGetContainerRespDataStore]
        """
        return self._data_stores

    @data_stores.setter
    def data_stores(self, data_stores):
        """Sets the data_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param data_stores: The data_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type data_stores: list[OpenapiServerDataSchemaContainersGetContainerRespDataStore]
        """
        if self.local_vars_configuration.client_side_validation and data_stores is None:  # noqa: E501
            raise ValueError("Invalid value for `data_stores`, must not be `None`")  # noqa: E501

        self._data_stores = data_stores

    @property
    def is_accessible(self):
        """Gets the is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: bool
        """
        return self._is_accessible

    @is_accessible.setter
    def is_accessible(self, is_accessible):
        """Sets the is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param is_accessible: The is_accessible of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type is_accessible: bool
        """

        self._is_accessible = is_accessible

    @property
    def catalog_db_stores(self):
        """Gets the catalog_db_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The catalog_db_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore]
        """
        return self._catalog_db_stores

    @catalog_db_stores.setter
    def catalog_db_stores(self, catalog_db_stores):
        """Sets the catalog_db_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param catalog_db_stores: The catalog_db_stores of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type catalog_db_stores: list[OpenapiServerDataSchemaContainersGetContainerRespCatalogDBStore]
        """

        self._catalog_db_stores = catalog_db_stores

    @property
    def auto_tiering_policies(self):
        """Gets the auto_tiering_policies of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The auto_tiering_policies of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy]
        """
        return self._auto_tiering_policies

    @auto_tiering_policies.setter
    def auto_tiering_policies(self, auto_tiering_policies):
        """Sets the auto_tiering_policies of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param auto_tiering_policies: The auto_tiering_policies of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type auto_tiering_policies: list[OpenapiServerDataSchemaContainersGetContainerRespAutoTierPolicy]
        """

        self._auto_tiering_policies = auto_tiering_policies

    @property
    def use_image_server(self):
        """Gets the use_image_server of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The use_image_server of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: bool
        """
        return self._use_image_server

    @use_image_server.setter
    def use_image_server(self, use_image_server):
        """Sets the use_image_server of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param use_image_server: The use_image_server of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type use_image_server: bool
        """
        if self.local_vars_configuration.client_side_validation and use_image_server is None:  # noqa: E501
            raise ValueError("Invalid value for `use_image_server`, must not be `None`")  # noqa: E501

        self._use_image_server = use_image_server

    @property
    def is_scratchpad(self):
        """Gets the is_scratchpad of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501


        :return: The is_scratchpad of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :rtype: bool
        """
        return self._is_scratchpad

    @is_scratchpad.setter
    def is_scratchpad(self, is_scratchpad):
        """Sets the is_scratchpad of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.


        :param is_scratchpad: The is_scratchpad of this OpenapiServerDataSchemaContainersGetContainerRespDataContainer.  # noqa: E501
        :type is_scratchpad: bool
        """
        if self.local_vars_configuration.client_side_validation and is_scratchpad is None:  # noqa: E501
            raise ValueError("Invalid value for `is_scratchpad`, must not be `None`")  # noqa: E501

        self._is_scratchpad = is_scratchpad

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespDataContainer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespDataContainer):
            return True

        return self.to_dict() != other.to_dict()
