# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class BCAttachmentProgressReportResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'status': 'BCJobStatus',
        'error_logs': 'str',
        'total_files_to_be_processed': 'int',
        'total_files_processed': 'float',
        'skipped_files_count': 'int',
        'max_files_to_register': 'int',
        'stage': 'BCGroupJobStage',
        'total_tasks': 'int',
        'tasks_waiting_for_resource': 'int',
        'tasks_active': 'int',
        'tasks_completed': 'int',
        'input_sub_dir': 'str',
        'policy_details': 'AttachmentPolicyResp',
        'progress': 'float',
        'retry_count': 'int'
    }

    attribute_map = {
        'job_id': 'job_id',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'status': 'status',
        'error_logs': 'error_logs',
        'total_files_to_be_processed': 'total_files_to_be_processed',
        'total_files_processed': 'total_files_processed',
        'skipped_files_count': 'skipped_files_count',
        'max_files_to_register': 'max_files_to_register',
        'stage': 'stage',
        'total_tasks': 'total_tasks',
        'tasks_waiting_for_resource': 'tasks_waiting_for_resource',
        'tasks_active': 'tasks_active',
        'tasks_completed': 'tasks_completed',
        'input_sub_dir': 'input_sub_dir',
        'policy_details': 'policy_details',
        'progress': 'progress',
        'retry_count': 'retry_count'
    }

    def __init__(self, job_id=None, start_time=None, end_time=None, status=None, error_logs=None, total_files_to_be_processed=None, total_files_processed=None, skipped_files_count=None, max_files_to_register=None, stage=None, total_tasks=None, tasks_waiting_for_resource=None, tasks_active=None, tasks_completed=None, input_sub_dir=None, policy_details=None, progress=None, retry_count=None, local_vars_configuration=None):  # noqa: E501
        """BCAttachmentProgressReportResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._error_logs = None
        self._total_files_to_be_processed = None
        self._total_files_processed = None
        self._skipped_files_count = None
        self._max_files_to_register = None
        self._stage = None
        self._total_tasks = None
        self._tasks_waiting_for_resource = None
        self._tasks_active = None
        self._tasks_completed = None
        self._input_sub_dir = None
        self._policy_details = None
        self._progress = None
        self._retry_count = None
        self.discriminator = None

        if job_id is not None:
            self.job_id = job_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if status is not None:
            self.status = status
        if error_logs is not None:
            self.error_logs = error_logs
        self.total_files_to_be_processed = total_files_to_be_processed
        self.total_files_processed = total_files_processed
        self.skipped_files_count = skipped_files_count
        if max_files_to_register is not None:
            self.max_files_to_register = max_files_to_register
        if stage is not None:
            self.stage = stage
        self.total_tasks = total_tasks
        self.tasks_waiting_for_resource = tasks_waiting_for_resource
        self.tasks_active = tasks_active
        self.tasks_completed = tasks_completed
        if input_sub_dir is not None:
            self.input_sub_dir = input_sub_dir
        self.policy_details = policy_details
        self.progress = progress
        if retry_count is not None:
            self.retry_count = retry_count

    @property
    def job_id(self):
        """Gets the job_id of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The job_id of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BCAttachmentProgressReportResp.


        :param job_id: The job_id of this BCAttachmentProgressReportResp.  # noqa: E501
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def start_time(self):
        """Gets the start_time of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The start_time of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BCAttachmentProgressReportResp.


        :param start_time: The start_time of this BCAttachmentProgressReportResp.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The end_time of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BCAttachmentProgressReportResp.


        :param end_time: The end_time of this BCAttachmentProgressReportResp.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """Gets the status of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The status of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: BCJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BCAttachmentProgressReportResp.


        :param status: The status of this BCAttachmentProgressReportResp.  # noqa: E501
        :type status: BCJobStatus
        """

        self._status = status

    @property
    def error_logs(self):
        """Gets the error_logs of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The error_logs of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: str
        """
        return self._error_logs

    @error_logs.setter
    def error_logs(self, error_logs):
        """Sets the error_logs of this BCAttachmentProgressReportResp.


        :param error_logs: The error_logs of this BCAttachmentProgressReportResp.  # noqa: E501
        :type error_logs: str
        """

        self._error_logs = error_logs

    @property
    def total_files_to_be_processed(self):
        """Gets the total_files_to_be_processed of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The total_files_to_be_processed of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._total_files_to_be_processed

    @total_files_to_be_processed.setter
    def total_files_to_be_processed(self, total_files_to_be_processed):
        """Sets the total_files_to_be_processed of this BCAttachmentProgressReportResp.


        :param total_files_to_be_processed: The total_files_to_be_processed of this BCAttachmentProgressReportResp.  # noqa: E501
        :type total_files_to_be_processed: int
        """
        if self.local_vars_configuration.client_side_validation and total_files_to_be_processed is None:  # noqa: E501
            raise ValueError("Invalid value for `total_files_to_be_processed`, must not be `None`")  # noqa: E501

        self._total_files_to_be_processed = total_files_to_be_processed

    @property
    def total_files_processed(self):
        """Gets the total_files_processed of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The total_files_processed of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: float
        """
        return self._total_files_processed

    @total_files_processed.setter
    def total_files_processed(self, total_files_processed):
        """Sets the total_files_processed of this BCAttachmentProgressReportResp.


        :param total_files_processed: The total_files_processed of this BCAttachmentProgressReportResp.  # noqa: E501
        :type total_files_processed: float
        """
        if self.local_vars_configuration.client_side_validation and total_files_processed is None:  # noqa: E501
            raise ValueError("Invalid value for `total_files_processed`, must not be `None`")  # noqa: E501

        self._total_files_processed = total_files_processed

    @property
    def skipped_files_count(self):
        """Gets the skipped_files_count of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The skipped_files_count of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._skipped_files_count

    @skipped_files_count.setter
    def skipped_files_count(self, skipped_files_count):
        """Sets the skipped_files_count of this BCAttachmentProgressReportResp.


        :param skipped_files_count: The skipped_files_count of this BCAttachmentProgressReportResp.  # noqa: E501
        :type skipped_files_count: int
        """
        if self.local_vars_configuration.client_side_validation and skipped_files_count is None:  # noqa: E501
            raise ValueError("Invalid value for `skipped_files_count`, must not be `None`")  # noqa: E501

        self._skipped_files_count = skipped_files_count

    @property
    def max_files_to_register(self):
        """Gets the max_files_to_register of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The max_files_to_register of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._max_files_to_register

    @max_files_to_register.setter
    def max_files_to_register(self, max_files_to_register):
        """Sets the max_files_to_register of this BCAttachmentProgressReportResp.


        :param max_files_to_register: The max_files_to_register of this BCAttachmentProgressReportResp.  # noqa: E501
        :type max_files_to_register: int
        """

        self._max_files_to_register = max_files_to_register

    @property
    def stage(self):
        """Gets the stage of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The stage of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: BCGroupJobStage
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this BCAttachmentProgressReportResp.


        :param stage: The stage of this BCAttachmentProgressReportResp.  # noqa: E501
        :type stage: BCGroupJobStage
        """

        self._stage = stage

    @property
    def total_tasks(self):
        """Gets the total_tasks of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The total_tasks of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._total_tasks

    @total_tasks.setter
    def total_tasks(self, total_tasks):
        """Sets the total_tasks of this BCAttachmentProgressReportResp.


        :param total_tasks: The total_tasks of this BCAttachmentProgressReportResp.  # noqa: E501
        :type total_tasks: int
        """
        if self.local_vars_configuration.client_side_validation and total_tasks is None:  # noqa: E501
            raise ValueError("Invalid value for `total_tasks`, must not be `None`")  # noqa: E501

        self._total_tasks = total_tasks

    @property
    def tasks_waiting_for_resource(self):
        """Gets the tasks_waiting_for_resource of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The tasks_waiting_for_resource of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._tasks_waiting_for_resource

    @tasks_waiting_for_resource.setter
    def tasks_waiting_for_resource(self, tasks_waiting_for_resource):
        """Sets the tasks_waiting_for_resource of this BCAttachmentProgressReportResp.


        :param tasks_waiting_for_resource: The tasks_waiting_for_resource of this BCAttachmentProgressReportResp.  # noqa: E501
        :type tasks_waiting_for_resource: int
        """
        if self.local_vars_configuration.client_side_validation and tasks_waiting_for_resource is None:  # noqa: E501
            raise ValueError("Invalid value for `tasks_waiting_for_resource`, must not be `None`")  # noqa: E501

        self._tasks_waiting_for_resource = tasks_waiting_for_resource

    @property
    def tasks_active(self):
        """Gets the tasks_active of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The tasks_active of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._tasks_active

    @tasks_active.setter
    def tasks_active(self, tasks_active):
        """Sets the tasks_active of this BCAttachmentProgressReportResp.


        :param tasks_active: The tasks_active of this BCAttachmentProgressReportResp.  # noqa: E501
        :type tasks_active: int
        """
        if self.local_vars_configuration.client_side_validation and tasks_active is None:  # noqa: E501
            raise ValueError("Invalid value for `tasks_active`, must not be `None`")  # noqa: E501

        self._tasks_active = tasks_active

    @property
    def tasks_completed(self):
        """Gets the tasks_completed of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The tasks_completed of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._tasks_completed

    @tasks_completed.setter
    def tasks_completed(self, tasks_completed):
        """Sets the tasks_completed of this BCAttachmentProgressReportResp.


        :param tasks_completed: The tasks_completed of this BCAttachmentProgressReportResp.  # noqa: E501
        :type tasks_completed: int
        """
        if self.local_vars_configuration.client_side_validation and tasks_completed is None:  # noqa: E501
            raise ValueError("Invalid value for `tasks_completed`, must not be `None`")  # noqa: E501

        self._tasks_completed = tasks_completed

    @property
    def input_sub_dir(self):
        """Gets the input_sub_dir of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The input_sub_dir of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: str
        """
        return self._input_sub_dir

    @input_sub_dir.setter
    def input_sub_dir(self, input_sub_dir):
        """Sets the input_sub_dir of this BCAttachmentProgressReportResp.


        :param input_sub_dir: The input_sub_dir of this BCAttachmentProgressReportResp.  # noqa: E501
        :type input_sub_dir: str
        """

        self._input_sub_dir = input_sub_dir

    @property
    def policy_details(self):
        """Gets the policy_details of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The policy_details of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: AttachmentPolicyResp
        """
        return self._policy_details

    @policy_details.setter
    def policy_details(self, policy_details):
        """Sets the policy_details of this BCAttachmentProgressReportResp.


        :param policy_details: The policy_details of this BCAttachmentProgressReportResp.  # noqa: E501
        :type policy_details: AttachmentPolicyResp
        """
        if self.local_vars_configuration.client_side_validation and policy_details is None:  # noqa: E501
            raise ValueError("Invalid value for `policy_details`, must not be `None`")  # noqa: E501

        self._policy_details = policy_details

    @property
    def progress(self):
        """Gets the progress of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The progress of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this BCAttachmentProgressReportResp.


        :param progress: The progress of this BCAttachmentProgressReportResp.  # noqa: E501
        :type progress: float
        """
        if self.local_vars_configuration.client_side_validation and progress is None:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def retry_count(self):
        """Gets the retry_count of this BCAttachmentProgressReportResp.  # noqa: E501


        :return: The retry_count of this BCAttachmentProgressReportResp.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this BCAttachmentProgressReportResp.


        :param retry_count: The retry_count of this BCAttachmentProgressReportResp.  # noqa: E501
        :type retry_count: int
        """

        self._retry_count = retry_count

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BCAttachmentProgressReportResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BCAttachmentProgressReportResp):
            return True

        return self.to_dict() != other.to_dict()
