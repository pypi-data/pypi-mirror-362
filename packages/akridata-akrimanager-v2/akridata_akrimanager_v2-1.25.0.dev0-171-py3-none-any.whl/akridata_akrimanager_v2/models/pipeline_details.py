# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class PipelineDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipeline_name': 'str',
        'pipeline_description': 'str',
        'namespace': 'str',
        'featurizer_docker': 'PipelineDocker',
        'thumbnail_docker': 'PipelineDocker',
        'pre_processor_docker': 'PipelineDocker',
        'data_type': 'str',
        'partition_span_us': 'int',
        'blob_span_us': 'int',
        'version': 'str',
        'attribute_generator_dockers': 'list[PipelineAttributeGenerator]',
        'pipeline_type': 'str',
        'pipeline_alias_name': 'str'
    }

    attribute_map = {
        'pipeline_name': 'pipeline_name',
        'pipeline_description': 'pipeline_description',
        'namespace': 'namespace',
        'featurizer_docker': 'featurizer_docker',
        'thumbnail_docker': 'thumbnail_docker',
        'pre_processor_docker': 'pre_processor_docker',
        'data_type': 'data_type',
        'partition_span_us': 'partition_span_us',
        'blob_span_us': 'blob_span_us',
        'version': 'version',
        'attribute_generator_dockers': 'attribute_generator_dockers',
        'pipeline_type': 'pipeline_type',
        'pipeline_alias_name': 'pipeline_alias_name'
    }

    def __init__(self, pipeline_name=None, pipeline_description=None, namespace=None, featurizer_docker=None, thumbnail_docker=None, pre_processor_docker=None, data_type=None, partition_span_us=300000000, blob_span_us=300000000, version=None, attribute_generator_dockers=[], pipeline_type='default', pipeline_alias_name=None, local_vars_configuration=None):  # noqa: E501
        """PipelineDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pipeline_name = None
        self._pipeline_description = None
        self._namespace = None
        self._featurizer_docker = None
        self._thumbnail_docker = None
        self._pre_processor_docker = None
        self._data_type = None
        self._partition_span_us = None
        self._blob_span_us = None
        self._version = None
        self._attribute_generator_dockers = None
        self._pipeline_type = None
        self._pipeline_alias_name = None
        self.discriminator = None

        self.pipeline_name = pipeline_name
        if pipeline_description is not None:
            self.pipeline_description = pipeline_description
        self.namespace = namespace
        self.featurizer_docker = featurizer_docker
        self.thumbnail_docker = thumbnail_docker
        self.pre_processor_docker = pre_processor_docker
        self.data_type = data_type
        if partition_span_us is not None:
            self.partition_span_us = partition_span_us
        if blob_span_us is not None:
            self.blob_span_us = blob_span_us
        if version is not None:
            self.version = version
        if attribute_generator_dockers is not None:
            self.attribute_generator_dockers = attribute_generator_dockers
        if pipeline_type is not None:
            self.pipeline_type = pipeline_type
        if pipeline_alias_name is not None:
            self.pipeline_alias_name = pipeline_alias_name

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineDetails.  # noqa: E501


        :return: The pipeline_name of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineDetails.


        :param pipeline_name: The pipeline_name of this PipelineDetails.  # noqa: E501
        :type pipeline_name: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_name is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_description(self):
        """Gets the pipeline_description of this PipelineDetails.  # noqa: E501


        :return: The pipeline_description of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_description

    @pipeline_description.setter
    def pipeline_description(self, pipeline_description):
        """Sets the pipeline_description of this PipelineDetails.


        :param pipeline_description: The pipeline_description of this PipelineDetails.  # noqa: E501
        :type pipeline_description: str
        """

        self._pipeline_description = pipeline_description

    @property
    def namespace(self):
        """Gets the namespace of this PipelineDetails.  # noqa: E501


        :return: The namespace of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PipelineDetails.


        :param namespace: The namespace of this PipelineDetails.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def featurizer_docker(self):
        """Gets the featurizer_docker of this PipelineDetails.  # noqa: E501


        :return: The featurizer_docker of this PipelineDetails.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._featurizer_docker

    @featurizer_docker.setter
    def featurizer_docker(self, featurizer_docker):
        """Sets the featurizer_docker of this PipelineDetails.


        :param featurizer_docker: The featurizer_docker of this PipelineDetails.  # noqa: E501
        :type featurizer_docker: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and featurizer_docker is None:  # noqa: E501
            raise ValueError("Invalid value for `featurizer_docker`, must not be `None`")  # noqa: E501

        self._featurizer_docker = featurizer_docker

    @property
    def thumbnail_docker(self):
        """Gets the thumbnail_docker of this PipelineDetails.  # noqa: E501


        :return: The thumbnail_docker of this PipelineDetails.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._thumbnail_docker

    @thumbnail_docker.setter
    def thumbnail_docker(self, thumbnail_docker):
        """Sets the thumbnail_docker of this PipelineDetails.


        :param thumbnail_docker: The thumbnail_docker of this PipelineDetails.  # noqa: E501
        :type thumbnail_docker: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and thumbnail_docker is None:  # noqa: E501
            raise ValueError("Invalid value for `thumbnail_docker`, must not be `None`")  # noqa: E501

        self._thumbnail_docker = thumbnail_docker

    @property
    def pre_processor_docker(self):
        """Gets the pre_processor_docker of this PipelineDetails.  # noqa: E501


        :return: The pre_processor_docker of this PipelineDetails.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._pre_processor_docker

    @pre_processor_docker.setter
    def pre_processor_docker(self, pre_processor_docker):
        """Sets the pre_processor_docker of this PipelineDetails.


        :param pre_processor_docker: The pre_processor_docker of this PipelineDetails.  # noqa: E501
        :type pre_processor_docker: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and pre_processor_docker is None:  # noqa: E501
            raise ValueError("Invalid value for `pre_processor_docker`, must not be `None`")  # noqa: E501

        self._pre_processor_docker = pre_processor_docker

    @property
    def data_type(self):
        """Gets the data_type of this PipelineDetails.  # noqa: E501


        :return: The data_type of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this PipelineDetails.


        :param data_type: The data_type of this PipelineDetails.  # noqa: E501
        :type data_type: str
        """
        if self.local_vars_configuration.client_side_validation and data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def partition_span_us(self):
        """Gets the partition_span_us of this PipelineDetails.  # noqa: E501


        :return: The partition_span_us of this PipelineDetails.  # noqa: E501
        :rtype: int
        """
        return self._partition_span_us

    @partition_span_us.setter
    def partition_span_us(self, partition_span_us):
        """Sets the partition_span_us of this PipelineDetails.


        :param partition_span_us: The partition_span_us of this PipelineDetails.  # noqa: E501
        :type partition_span_us: int
        """

        self._partition_span_us = partition_span_us

    @property
    def blob_span_us(self):
        """Gets the blob_span_us of this PipelineDetails.  # noqa: E501


        :return: The blob_span_us of this PipelineDetails.  # noqa: E501
        :rtype: int
        """
        return self._blob_span_us

    @blob_span_us.setter
    def blob_span_us(self, blob_span_us):
        """Sets the blob_span_us of this PipelineDetails.


        :param blob_span_us: The blob_span_us of this PipelineDetails.  # noqa: E501
        :type blob_span_us: int
        """

        self._blob_span_us = blob_span_us

    @property
    def version(self):
        """Gets the version of this PipelineDetails.  # noqa: E501


        :return: The version of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PipelineDetails.


        :param version: The version of this PipelineDetails.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def attribute_generator_dockers(self):
        """Gets the attribute_generator_dockers of this PipelineDetails.  # noqa: E501


        :return: The attribute_generator_dockers of this PipelineDetails.  # noqa: E501
        :rtype: list[PipelineAttributeGenerator]
        """
        return self._attribute_generator_dockers

    @attribute_generator_dockers.setter
    def attribute_generator_dockers(self, attribute_generator_dockers):
        """Sets the attribute_generator_dockers of this PipelineDetails.


        :param attribute_generator_dockers: The attribute_generator_dockers of this PipelineDetails.  # noqa: E501
        :type attribute_generator_dockers: list[PipelineAttributeGenerator]
        """

        self._attribute_generator_dockers = attribute_generator_dockers

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this PipelineDetails.  # noqa: E501


        :return: The pipeline_type of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this PipelineDetails.


        :param pipeline_type: The pipeline_type of this PipelineDetails.  # noqa: E501
        :type pipeline_type: str
        """

        self._pipeline_type = pipeline_type

    @property
    def pipeline_alias_name(self):
        """Gets the pipeline_alias_name of this PipelineDetails.  # noqa: E501


        :return: The pipeline_alias_name of this PipelineDetails.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_alias_name

    @pipeline_alias_name.setter
    def pipeline_alias_name(self, pipeline_alias_name):
        """Sets the pipeline_alias_name of this PipelineDetails.


        :param pipeline_alias_name: The pipeline_alias_name of this PipelineDetails.  # noqa: E501
        :type pipeline_alias_name: str
        """

        self._pipeline_alias_name = pipeline_alias_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineDetails):
            return True

        return self.to_dict() != other.to_dict()
