# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class WorkflowRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'attachments': 'list[Attachment]',
        'version': 'str',
        'workflow_type': 'WorkflowType',
        'with_gpu': 'bool',
        'stream_name': 'str',
        'with_dpu_mapping': 'bool'
    }

    attribute_map = {
        'dataset_id': 'dataset_id',
        'attachments': 'attachments',
        'version': 'version',
        'workflow_type': 'workflow_type',
        'with_gpu': 'with_gpu',
        'stream_name': 'stream_name',
        'with_dpu_mapping': 'with_dpu_mapping'
    }

    def __init__(self, dataset_id=None, attachments=None, version=None, workflow_type=None, with_gpu=False, stream_name=None, with_dpu_mapping=False, local_vars_configuration=None):  # noqa: E501
        """WorkflowRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._attachments = None
        self._version = None
        self._workflow_type = None
        self._with_gpu = None
        self._stream_name = None
        self._with_dpu_mapping = None
        self.discriminator = None

        self.dataset_id = dataset_id
        if attachments is not None:
            self.attachments = attachments
        self.version = version
        if workflow_type is not None:
            self.workflow_type = workflow_type
        if with_gpu is not None:
            self.with_gpu = with_gpu
        if stream_name is not None:
            self.stream_name = stream_name
        if with_dpu_mapping is not None:
            self.with_dpu_mapping = with_dpu_mapping

    @property
    def dataset_id(self):
        """Gets the dataset_id of this WorkflowRequest.  # noqa: E501


        :return: The dataset_id of this WorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this WorkflowRequest.


        :param dataset_id: The dataset_id of this WorkflowRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def attachments(self):
        """Gets the attachments of this WorkflowRequest.  # noqa: E501


        :return: The attachments of this WorkflowRequest.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this WorkflowRequest.


        :param attachments: The attachments of this WorkflowRequest.  # noqa: E501
        :type attachments: list[Attachment]
        """

        self._attachments = attachments

    @property
    def version(self):
        """Gets the version of this WorkflowRequest.  # noqa: E501


        :return: The version of this WorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this WorkflowRequest.


        :param version: The version of this WorkflowRequest.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowRequest.  # noqa: E501


        :return: The workflow_type of this WorkflowRequest.  # noqa: E501
        :rtype: WorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowRequest.


        :param workflow_type: The workflow_type of this WorkflowRequest.  # noqa: E501
        :type workflow_type: WorkflowType
        """

        self._workflow_type = workflow_type

    @property
    def with_gpu(self):
        """Gets the with_gpu of this WorkflowRequest.  # noqa: E501


        :return: The with_gpu of this WorkflowRequest.  # noqa: E501
        :rtype: bool
        """
        return self._with_gpu

    @with_gpu.setter
    def with_gpu(self, with_gpu):
        """Sets the with_gpu of this WorkflowRequest.


        :param with_gpu: The with_gpu of this WorkflowRequest.  # noqa: E501
        :type with_gpu: bool
        """

        self._with_gpu = with_gpu

    @property
    def stream_name(self):
        """Gets the stream_name of this WorkflowRequest.  # noqa: E501


        :return: The stream_name of this WorkflowRequest.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this WorkflowRequest.


        :param stream_name: The stream_name of this WorkflowRequest.  # noqa: E501
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def with_dpu_mapping(self):
        """Gets the with_dpu_mapping of this WorkflowRequest.  # noqa: E501


        :return: The with_dpu_mapping of this WorkflowRequest.  # noqa: E501
        :rtype: bool
        """
        return self._with_dpu_mapping

    @with_dpu_mapping.setter
    def with_dpu_mapping(self, with_dpu_mapping):
        """Sets the with_dpu_mapping of this WorkflowRequest.


        :param with_dpu_mapping: The with_dpu_mapping of this WorkflowRequest.  # noqa: E501
        :type with_dpu_mapping: bool
        """

        self._with_dpu_mapping = with_dpu_mapping

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowRequest):
            return True

        return self.to_dict() != other.to_dict()
