# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class Plan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'status': 'ItemStatusType',
        'features': 'list[PlanFeature]',
        'plan_items': 'list[PlanItemPrice]',
        'custom': 'bool',
        'desc': 'str',
        'active': 'bool',
        'addons': 'list[Addon]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'features': 'features',
        'plan_items': 'plan_items',
        'custom': 'custom',
        'desc': 'desc',
        'active': 'active',
        'addons': 'addons'
    }

    def __init__(self, id=None, name=None, status=None, features=None, plan_items=None, custom=None, desc=None, active=None, addons=None, local_vars_configuration=None):  # noqa: E501
        """Plan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._status = None
        self._features = None
        self._plan_items = None
        self._custom = None
        self._desc = None
        self._active = None
        self._addons = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.status = status
        self.features = features
        self.plan_items = plan_items
        self.custom = custom
        self.desc = desc
        self.active = active
        if addons is not None:
            self.addons = addons

    @property
    def id(self):
        """Gets the id of this Plan.  # noqa: E501


        :return: The id of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plan.


        :param id: The id of this Plan.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Plan.  # noqa: E501


        :return: The name of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plan.


        :param name: The name of this Plan.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this Plan.  # noqa: E501


        :return: The status of this Plan.  # noqa: E501
        :rtype: ItemStatusType
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Plan.


        :param status: The status of this Plan.  # noqa: E501
        :type status: ItemStatusType
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def features(self):
        """Gets the features of this Plan.  # noqa: E501


        :return: The features of this Plan.  # noqa: E501
        :rtype: list[PlanFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Plan.


        :param features: The features of this Plan.  # noqa: E501
        :type features: list[PlanFeature]
        """
        if self.local_vars_configuration.client_side_validation and features is None:  # noqa: E501
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def plan_items(self):
        """Gets the plan_items of this Plan.  # noqa: E501


        :return: The plan_items of this Plan.  # noqa: E501
        :rtype: list[PlanItemPrice]
        """
        return self._plan_items

    @plan_items.setter
    def plan_items(self, plan_items):
        """Sets the plan_items of this Plan.


        :param plan_items: The plan_items of this Plan.  # noqa: E501
        :type plan_items: list[PlanItemPrice]
        """
        if self.local_vars_configuration.client_side_validation and plan_items is None:  # noqa: E501
            raise ValueError("Invalid value for `plan_items`, must not be `None`")  # noqa: E501

        self._plan_items = plan_items

    @property
    def custom(self):
        """Gets the custom of this Plan.  # noqa: E501


        :return: The custom of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Plan.


        :param custom: The custom of this Plan.  # noqa: E501
        :type custom: bool
        """
        if self.local_vars_configuration.client_side_validation and custom is None:  # noqa: E501
            raise ValueError("Invalid value for `custom`, must not be `None`")  # noqa: E501

        self._custom = custom

    @property
    def desc(self):
        """Gets the desc of this Plan.  # noqa: E501


        :return: The desc of this Plan.  # noqa: E501
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """Sets the desc of this Plan.


        :param desc: The desc of this Plan.  # noqa: E501
        :type desc: str
        """
        if self.local_vars_configuration.client_side_validation and desc is None:  # noqa: E501
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def active(self):
        """Gets the active of this Plan.  # noqa: E501


        :return: The active of this Plan.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Plan.


        :param active: The active of this Plan.  # noqa: E501
        :type active: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def addons(self):
        """Gets the addons of this Plan.  # noqa: E501


        :return: The addons of this Plan.  # noqa: E501
        :rtype: list[Addon]
        """
        return self._addons

    @addons.setter
    def addons(self, addons):
        """Sets the addons of this Plan.


        :param addons: The addons of this Plan.  # noqa: E501
        :type addons: list[Addon]
        """

        self._addons = addons

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Plan):
            return True

        return self.to_dict() != other.to_dict()
