# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class BGCAnomalySegReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'presigned_url': 'str',
        'docker_id': 'str',
        'docker_version': 'str',
        'ds_model_id': 'str'
    }

    attribute_map = {
        'presigned_url': 'presigned_url',
        'docker_id': 'docker_id',
        'docker_version': 'docker_version',
        'ds_model_id': 'ds_model_id'
    }

    def __init__(self, presigned_url=None, docker_id=None, docker_version=None, ds_model_id=None, local_vars_configuration=None):  # noqa: E501
        """BGCAnomalySegReq - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._presigned_url = None
        self._docker_id = None
        self._docker_version = None
        self._ds_model_id = None
        self.discriminator = None

        self.presigned_url = presigned_url
        self.docker_id = docker_id
        self.docker_version = docker_version
        self.ds_model_id = ds_model_id

    @property
    def presigned_url(self):
        """Gets the presigned_url of this BGCAnomalySegReq.  # noqa: E501


        :return: The presigned_url of this BGCAnomalySegReq.  # noqa: E501
        :rtype: str
        """
        return self._presigned_url

    @presigned_url.setter
    def presigned_url(self, presigned_url):
        """Sets the presigned_url of this BGCAnomalySegReq.


        :param presigned_url: The presigned_url of this BGCAnomalySegReq.  # noqa: E501
        :type presigned_url: str
        """
        if self.local_vars_configuration.client_side_validation and presigned_url is None:  # noqa: E501
            raise ValueError("Invalid value for `presigned_url`, must not be `None`")  # noqa: E501

        self._presigned_url = presigned_url

    @property
    def docker_id(self):
        """Gets the docker_id of this BGCAnomalySegReq.  # noqa: E501


        :return: The docker_id of this BGCAnomalySegReq.  # noqa: E501
        :rtype: str
        """
        return self._docker_id

    @docker_id.setter
    def docker_id(self, docker_id):
        """Sets the docker_id of this BGCAnomalySegReq.


        :param docker_id: The docker_id of this BGCAnomalySegReq.  # noqa: E501
        :type docker_id: str
        """
        if self.local_vars_configuration.client_side_validation and docker_id is None:  # noqa: E501
            raise ValueError("Invalid value for `docker_id`, must not be `None`")  # noqa: E501

        self._docker_id = docker_id

    @property
    def docker_version(self):
        """Gets the docker_version of this BGCAnomalySegReq.  # noqa: E501


        :return: The docker_version of this BGCAnomalySegReq.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this BGCAnomalySegReq.


        :param docker_version: The docker_version of this BGCAnomalySegReq.  # noqa: E501
        :type docker_version: str
        """
        if self.local_vars_configuration.client_side_validation and docker_version is None:  # noqa: E501
            raise ValueError("Invalid value for `docker_version`, must not be `None`")  # noqa: E501

        self._docker_version = docker_version

    @property
    def ds_model_id(self):
        """Gets the ds_model_id of this BGCAnomalySegReq.  # noqa: E501


        :return: The ds_model_id of this BGCAnomalySegReq.  # noqa: E501
        :rtype: str
        """
        return self._ds_model_id

    @ds_model_id.setter
    def ds_model_id(self, ds_model_id):
        """Sets the ds_model_id of this BGCAnomalySegReq.


        :param ds_model_id: The ds_model_id of this BGCAnomalySegReq.  # noqa: E501
        :type ds_model_id: str
        """
        if self.local_vars_configuration.client_side_validation and ds_model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `ds_model_id`, must not be `None`")  # noqa: E501

        self._ds_model_id = ds_model_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BGCAnomalySegReq):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BGCAnomalySegReq):
            return True

        return self.to_dict() != other.to_dict()
