# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ActiveUserResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'roles': 'list[OrganizationRoles]',
        'email_id': 'str',
        'group_info': 'list[OpenapiServerDataSchemaUsersListActiveUsersGroupInfoResponse]',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'roles': 'roles',
        'email_id': 'email_id',
        'group_info': 'group_info',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, user_id=None, first_name=None, last_name=None, roles=None, email_id=None, group_info=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """ActiveUserResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._first_name = None
        self._last_name = None
        self._roles = None
        self._email_id = None
        self._group_info = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        self.user_id = user_id
        self.first_name = first_name
        self.last_name = last_name
        if roles is not None:
            self.roles = roles
        self.email_id = email_id
        if group_info is not None:
            self.group_info = group_info
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this ActiveUserResponse.  # noqa: E501


        :return: The user_id of this ActiveUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActiveUserResponse.


        :param user_id: The user_id of this ActiveUserResponse.  # noqa: E501
        :type user_id: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def first_name(self):
        """Gets the first_name of this ActiveUserResponse.  # noqa: E501


        :return: The first_name of this ActiveUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ActiveUserResponse.


        :param first_name: The first_name of this ActiveUserResponse.  # noqa: E501
        :type first_name: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ActiveUserResponse.  # noqa: E501


        :return: The last_name of this ActiveUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ActiveUserResponse.


        :param last_name: The last_name of this ActiveUserResponse.  # noqa: E501
        :type last_name: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def roles(self):
        """Gets the roles of this ActiveUserResponse.  # noqa: E501


        :return: The roles of this ActiveUserResponse.  # noqa: E501
        :rtype: list[OrganizationRoles]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this ActiveUserResponse.


        :param roles: The roles of this ActiveUserResponse.  # noqa: E501
        :type roles: list[OrganizationRoles]
        """

        self._roles = roles

    @property
    def email_id(self):
        """Gets the email_id of this ActiveUserResponse.  # noqa: E501


        :return: The email_id of this ActiveUserResponse.  # noqa: E501
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this ActiveUserResponse.


        :param email_id: The email_id of this ActiveUserResponse.  # noqa: E501
        :type email_id: str
        """
        if self.local_vars_configuration.client_side_validation and email_id is None:  # noqa: E501
            raise ValueError("Invalid value for `email_id`, must not be `None`")  # noqa: E501

        self._email_id = email_id

    @property
    def group_info(self):
        """Gets the group_info of this ActiveUserResponse.  # noqa: E501


        :return: The group_info of this ActiveUserResponse.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaUsersListActiveUsersGroupInfoResponse]
        """
        return self._group_info

    @group_info.setter
    def group_info(self, group_info):
        """Sets the group_info of this ActiveUserResponse.


        :param group_info: The group_info of this ActiveUserResponse.  # noqa: E501
        :type group_info: list[OpenapiServerDataSchemaUsersListActiveUsersGroupInfoResponse]
        """

        self._group_info = group_info

    @property
    def created_at(self):
        """Gets the created_at of this ActiveUserResponse.  # noqa: E501


        :return: The created_at of this ActiveUserResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActiveUserResponse.


        :param created_at: The created_at of this ActiveUserResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ActiveUserResponse.  # noqa: E501


        :return: The updated_at of this ActiveUserResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ActiveUserResponse.


        :param updated_at: The updated_at of this ActiveUserResponse.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveUserResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActiveUserResponse):
            return True

        return self.to_dict() != other.to_dict()
