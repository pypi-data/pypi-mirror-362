# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class StationGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'station_grp_id': 'str',
        'station_grp_name': 'str',
        'station_grp_desc': 'str',
        'station_grp_model': 'str',
        'station_grp_model_type': 'TaskType',
        'station_grp_created_at': 'datetime',
        'bad_classes': 'list[str]',
        'good_classes': 'list[str]',
        'dataset_id': 'str',
        'dataset_name': 'str',
        'num_stations': 'int',
        'stations': 'list[Station]'
    }

    attribute_map = {
        'station_grp_id': 'station_grp_id',
        'station_grp_name': 'station_grp_name',
        'station_grp_desc': 'station_grp_desc',
        'station_grp_model': 'station_grp_model',
        'station_grp_model_type': 'station_grp_model_type',
        'station_grp_created_at': 'station_grp_created_at',
        'bad_classes': 'bad_classes',
        'good_classes': 'good_classes',
        'dataset_id': 'dataset_id',
        'dataset_name': 'dataset_name',
        'num_stations': 'num_stations',
        'stations': 'stations'
    }

    def __init__(self, station_grp_id=None, station_grp_name=None, station_grp_desc=None, station_grp_model=None, station_grp_model_type=None, station_grp_created_at=None, bad_classes=None, good_classes=None, dataset_id=None, dataset_name=None, num_stations=None, stations=None, local_vars_configuration=None):  # noqa: E501
        """StationGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._station_grp_id = None
        self._station_grp_name = None
        self._station_grp_desc = None
        self._station_grp_model = None
        self._station_grp_model_type = None
        self._station_grp_created_at = None
        self._bad_classes = None
        self._good_classes = None
        self._dataset_id = None
        self._dataset_name = None
        self._num_stations = None
        self._stations = None
        self.discriminator = None

        self.station_grp_id = station_grp_id
        self.station_grp_name = station_grp_name
        self.station_grp_desc = station_grp_desc
        if station_grp_model is not None:
            self.station_grp_model = station_grp_model
        self.station_grp_model_type = station_grp_model_type
        self.station_grp_created_at = station_grp_created_at
        if bad_classes is not None:
            self.bad_classes = bad_classes
        if good_classes is not None:
            self.good_classes = good_classes
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if dataset_name is not None:
            self.dataset_name = dataset_name
        self.num_stations = num_stations
        if stations is not None:
            self.stations = stations

    @property
    def station_grp_id(self):
        """Gets the station_grp_id of this StationGroup.  # noqa: E501


        :return: The station_grp_id of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._station_grp_id

    @station_grp_id.setter
    def station_grp_id(self, station_grp_id):
        """Sets the station_grp_id of this StationGroup.


        :param station_grp_id: The station_grp_id of this StationGroup.  # noqa: E501
        :type station_grp_id: str
        """
        if self.local_vars_configuration.client_side_validation and station_grp_id is None:  # noqa: E501
            raise ValueError("Invalid value for `station_grp_id`, must not be `None`")  # noqa: E501

        self._station_grp_id = station_grp_id

    @property
    def station_grp_name(self):
        """Gets the station_grp_name of this StationGroup.  # noqa: E501


        :return: The station_grp_name of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._station_grp_name

    @station_grp_name.setter
    def station_grp_name(self, station_grp_name):
        """Sets the station_grp_name of this StationGroup.


        :param station_grp_name: The station_grp_name of this StationGroup.  # noqa: E501
        :type station_grp_name: str
        """
        if self.local_vars_configuration.client_side_validation and station_grp_name is None:  # noqa: E501
            raise ValueError("Invalid value for `station_grp_name`, must not be `None`")  # noqa: E501

        self._station_grp_name = station_grp_name

    @property
    def station_grp_desc(self):
        """Gets the station_grp_desc of this StationGroup.  # noqa: E501


        :return: The station_grp_desc of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._station_grp_desc

    @station_grp_desc.setter
    def station_grp_desc(self, station_grp_desc):
        """Sets the station_grp_desc of this StationGroup.


        :param station_grp_desc: The station_grp_desc of this StationGroup.  # noqa: E501
        :type station_grp_desc: str
        """
        if self.local_vars_configuration.client_side_validation and station_grp_desc is None:  # noqa: E501
            raise ValueError("Invalid value for `station_grp_desc`, must not be `None`")  # noqa: E501

        self._station_grp_desc = station_grp_desc

    @property
    def station_grp_model(self):
        """Gets the station_grp_model of this StationGroup.  # noqa: E501


        :return: The station_grp_model of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._station_grp_model

    @station_grp_model.setter
    def station_grp_model(self, station_grp_model):
        """Sets the station_grp_model of this StationGroup.


        :param station_grp_model: The station_grp_model of this StationGroup.  # noqa: E501
        :type station_grp_model: str
        """

        self._station_grp_model = station_grp_model

    @property
    def station_grp_model_type(self):
        """Gets the station_grp_model_type of this StationGroup.  # noqa: E501


        :return: The station_grp_model_type of this StationGroup.  # noqa: E501
        :rtype: TaskType
        """
        return self._station_grp_model_type

    @station_grp_model_type.setter
    def station_grp_model_type(self, station_grp_model_type):
        """Sets the station_grp_model_type of this StationGroup.


        :param station_grp_model_type: The station_grp_model_type of this StationGroup.  # noqa: E501
        :type station_grp_model_type: TaskType
        """
        if self.local_vars_configuration.client_side_validation and station_grp_model_type is None:  # noqa: E501
            raise ValueError("Invalid value for `station_grp_model_type`, must not be `None`")  # noqa: E501

        self._station_grp_model_type = station_grp_model_type

    @property
    def station_grp_created_at(self):
        """Gets the station_grp_created_at of this StationGroup.  # noqa: E501


        :return: The station_grp_created_at of this StationGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._station_grp_created_at

    @station_grp_created_at.setter
    def station_grp_created_at(self, station_grp_created_at):
        """Sets the station_grp_created_at of this StationGroup.


        :param station_grp_created_at: The station_grp_created_at of this StationGroup.  # noqa: E501
        :type station_grp_created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and station_grp_created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `station_grp_created_at`, must not be `None`")  # noqa: E501

        self._station_grp_created_at = station_grp_created_at

    @property
    def bad_classes(self):
        """Gets the bad_classes of this StationGroup.  # noqa: E501


        :return: The bad_classes of this StationGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._bad_classes

    @bad_classes.setter
    def bad_classes(self, bad_classes):
        """Sets the bad_classes of this StationGroup.


        :param bad_classes: The bad_classes of this StationGroup.  # noqa: E501
        :type bad_classes: list[str]
        """

        self._bad_classes = bad_classes

    @property
    def good_classes(self):
        """Gets the good_classes of this StationGroup.  # noqa: E501


        :return: The good_classes of this StationGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._good_classes

    @good_classes.setter
    def good_classes(self, good_classes):
        """Sets the good_classes of this StationGroup.


        :param good_classes: The good_classes of this StationGroup.  # noqa: E501
        :type good_classes: list[str]
        """

        self._good_classes = good_classes

    @property
    def dataset_id(self):
        """Gets the dataset_id of this StationGroup.  # noqa: E501


        :return: The dataset_id of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this StationGroup.


        :param dataset_id: The dataset_id of this StationGroup.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this StationGroup.  # noqa: E501


        :return: The dataset_name of this StationGroup.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this StationGroup.


        :param dataset_name: The dataset_name of this StationGroup.  # noqa: E501
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def num_stations(self):
        """Gets the num_stations of this StationGroup.  # noqa: E501


        :return: The num_stations of this StationGroup.  # noqa: E501
        :rtype: int
        """
        return self._num_stations

    @num_stations.setter
    def num_stations(self, num_stations):
        """Sets the num_stations of this StationGroup.


        :param num_stations: The num_stations of this StationGroup.  # noqa: E501
        :type num_stations: int
        """
        if self.local_vars_configuration.client_side_validation and num_stations is None:  # noqa: E501
            raise ValueError("Invalid value for `num_stations`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_stations is not None and num_stations < 0):  # noqa: E501
            raise ValueError("Invalid value for `num_stations`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_stations = num_stations

    @property
    def stations(self):
        """Gets the stations of this StationGroup.  # noqa: E501


        :return: The stations of this StationGroup.  # noqa: E501
        :rtype: list[Station]
        """
        return self._stations

    @stations.setter
    def stations(self, stations):
        """Sets the stations of this StationGroup.


        :param stations: The stations of this StationGroup.  # noqa: E501
        :type stations: list[Station]
        """

        self._stations = stations

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StationGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StationGroup):
            return True

        return self.to_dict() != other.to_dict()
