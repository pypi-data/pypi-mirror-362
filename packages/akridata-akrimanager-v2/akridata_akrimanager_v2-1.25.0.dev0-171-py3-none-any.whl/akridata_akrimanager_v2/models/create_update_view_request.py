# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class CreateUpdateViewRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_id': 'str',
        'create_new': 'bool',
        'view_name': 'str',
        'view_description': 'str',
        'udfs_info': 'list[ViewUDFInfo]'
    }

    attribute_map = {
        'view_id': 'view_id',
        'create_new': 'create_new',
        'view_name': 'view_name',
        'view_description': 'view_description',
        'udfs_info': 'udfs_info'
    }

    def __init__(self, view_id=None, create_new=False, view_name=None, view_description=None, udfs_info=None, local_vars_configuration=None):  # noqa: E501
        """CreateUpdateViewRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._view_id = None
        self._create_new = None
        self._view_name = None
        self._view_description = None
        self._udfs_info = None
        self.discriminator = None

        if view_id is not None:
            self.view_id = view_id
        if create_new is not None:
            self.create_new = create_new
        if view_name is not None:
            self.view_name = view_name
        if view_description is not None:
            self.view_description = view_description
        if udfs_info is not None:
            self.udfs_info = udfs_info

    @property
    def view_id(self):
        """Gets the view_id of this CreateUpdateViewRequest.  # noqa: E501


        :return: The view_id of this CreateUpdateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this CreateUpdateViewRequest.


        :param view_id: The view_id of this CreateUpdateViewRequest.  # noqa: E501
        :type view_id: str
        """

        self._view_id = view_id

    @property
    def create_new(self):
        """Gets the create_new of this CreateUpdateViewRequest.  # noqa: E501


        :return: The create_new of this CreateUpdateViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_new

    @create_new.setter
    def create_new(self, create_new):
        """Sets the create_new of this CreateUpdateViewRequest.


        :param create_new: The create_new of this CreateUpdateViewRequest.  # noqa: E501
        :type create_new: bool
        """

        self._create_new = create_new

    @property
    def view_name(self):
        """Gets the view_name of this CreateUpdateViewRequest.  # noqa: E501


        :return: The view_name of this CreateUpdateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this CreateUpdateViewRequest.


        :param view_name: The view_name of this CreateUpdateViewRequest.  # noqa: E501
        :type view_name: str
        """

        self._view_name = view_name

    @property
    def view_description(self):
        """Gets the view_description of this CreateUpdateViewRequest.  # noqa: E501


        :return: The view_description of this CreateUpdateViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_description

    @view_description.setter
    def view_description(self, view_description):
        """Sets the view_description of this CreateUpdateViewRequest.


        :param view_description: The view_description of this CreateUpdateViewRequest.  # noqa: E501
        :type view_description: str
        """

        self._view_description = view_description

    @property
    def udfs_info(self):
        """Gets the udfs_info of this CreateUpdateViewRequest.  # noqa: E501


        :return: The udfs_info of this CreateUpdateViewRequest.  # noqa: E501
        :rtype: list[ViewUDFInfo]
        """
        return self._udfs_info

    @udfs_info.setter
    def udfs_info(self, udfs_info):
        """Sets the udfs_info of this CreateUpdateViewRequest.


        :param udfs_info: The udfs_info of this CreateUpdateViewRequest.  # noqa: E501
        :type udfs_info: list[ViewUDFInfo]
        """

        self._udfs_info = udfs_info

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateUpdateViewRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateUpdateViewRequest):
            return True

        return self.to_dict() != other.to_dict()
