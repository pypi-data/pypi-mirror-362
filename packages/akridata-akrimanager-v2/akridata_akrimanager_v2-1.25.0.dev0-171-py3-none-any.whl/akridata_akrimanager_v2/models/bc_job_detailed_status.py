# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class BCJobDetailedStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_id': 'str',
        'job_type': 'BCGroupType',
        'progress': 'float',
        'status': 'BCJobStatus',
        'error_msg': 'str',
        'retry_count': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'pipeline_ids': 'list[str]'
    }

    attribute_map = {
        'job_id': 'job_id',
        'job_type': 'job_type',
        'progress': 'progress',
        'status': 'status',
        'error_msg': 'error_msg',
        'retry_count': 'retry_count',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'pipeline_ids': 'pipeline_ids'
    }

    def __init__(self, job_id=None, job_type=None, progress=None, status=None, error_msg=None, retry_count=None, start_time=None, end_time=None, pipeline_ids=None, local_vars_configuration=None):  # noqa: E501
        """BCJobDetailedStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._job_id = None
        self._job_type = None
        self._progress = None
        self._status = None
        self._error_msg = None
        self._retry_count = None
        self._start_time = None
        self._end_time = None
        self._pipeline_ids = None
        self.discriminator = None

        self.job_id = job_id
        self.job_type = job_type
        self.progress = progress
        self.status = status
        if error_msg is not None:
            self.error_msg = error_msg
        if retry_count is not None:
            self.retry_count = retry_count
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if pipeline_ids is not None:
            self.pipeline_ids = pipeline_ids

    @property
    def job_id(self):
        """Gets the job_id of this BCJobDetailedStatus.  # noqa: E501


        :return: The job_id of this BCJobDetailedStatus.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BCJobDetailedStatus.


        :param job_id: The job_id of this BCJobDetailedStatus.  # noqa: E501
        :type job_id: str
        """
        if self.local_vars_configuration.client_side_validation and job_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def job_type(self):
        """Gets the job_type of this BCJobDetailedStatus.  # noqa: E501


        :return: The job_type of this BCJobDetailedStatus.  # noqa: E501
        :rtype: BCGroupType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this BCJobDetailedStatus.


        :param job_type: The job_type of this BCJobDetailedStatus.  # noqa: E501
        :type job_type: BCGroupType
        """
        if self.local_vars_configuration.client_side_validation and job_type is None:  # noqa: E501
            raise ValueError("Invalid value for `job_type`, must not be `None`")  # noqa: E501

        self._job_type = job_type

    @property
    def progress(self):
        """Gets the progress of this BCJobDetailedStatus.  # noqa: E501


        :return: The progress of this BCJobDetailedStatus.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this BCJobDetailedStatus.


        :param progress: The progress of this BCJobDetailedStatus.  # noqa: E501
        :type progress: float
        """
        if self.local_vars_configuration.client_side_validation and progress is None:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this BCJobDetailedStatus.  # noqa: E501


        :return: The status of this BCJobDetailedStatus.  # noqa: E501
        :rtype: BCJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BCJobDetailedStatus.


        :param status: The status of this BCJobDetailedStatus.  # noqa: E501
        :type status: BCJobStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error_msg(self):
        """Gets the error_msg of this BCJobDetailedStatus.  # noqa: E501


        :return: The error_msg of this BCJobDetailedStatus.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this BCJobDetailedStatus.


        :param error_msg: The error_msg of this BCJobDetailedStatus.  # noqa: E501
        :type error_msg: str
        """

        self._error_msg = error_msg

    @property
    def retry_count(self):
        """Gets the retry_count of this BCJobDetailedStatus.  # noqa: E501


        :return: The retry_count of this BCJobDetailedStatus.  # noqa: E501
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this BCJobDetailedStatus.


        :param retry_count: The retry_count of this BCJobDetailedStatus.  # noqa: E501
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def start_time(self):
        """Gets the start_time of this BCJobDetailedStatus.  # noqa: E501


        :return: The start_time of this BCJobDetailedStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BCJobDetailedStatus.


        :param start_time: The start_time of this BCJobDetailedStatus.  # noqa: E501
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this BCJobDetailedStatus.  # noqa: E501


        :return: The end_time of this BCJobDetailedStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BCJobDetailedStatus.


        :param end_time: The end_time of this BCJobDetailedStatus.  # noqa: E501
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def pipeline_ids(self):
        """Gets the pipeline_ids of this BCJobDetailedStatus.  # noqa: E501


        :return: The pipeline_ids of this BCJobDetailedStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._pipeline_ids

    @pipeline_ids.setter
    def pipeline_ids(self, pipeline_ids):
        """Sets the pipeline_ids of this BCJobDetailedStatus.


        :param pipeline_ids: The pipeline_ids of this BCJobDetailedStatus.  # noqa: E501
        :type pipeline_ids: list[str]
        """

        self._pipeline_ids = pipeline_ids

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BCJobDetailedStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BCJobDetailedStatus):
            return True

        return self.to_dict() != other.to_dict()
