# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class AnalyticsQueryResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_id': 'str',
        'query_json': 'object',
        'status': 'QueryStatus',
        'container_id': 'str',
        'dataset_id': 'str',
        'attribute_columns': 'list[StatManAttributesColumns]',
        'total_frames': 'int',
        'results': 'list[AnalyticsGroupResult]'
    }

    attribute_map = {
        'query_id': 'query_id',
        'query_json': 'query_json',
        'status': 'status',
        'container_id': 'container_id',
        'dataset_id': 'dataset_id',
        'attribute_columns': 'attribute_columns',
        'total_frames': 'total_frames',
        'results': 'results'
    }

    def __init__(self, query_id=None, query_json=None, status=None, container_id=None, dataset_id=None, attribute_columns=None, total_frames=None, results=None, local_vars_configuration=None):  # noqa: E501
        """AnalyticsQueryResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._query_id = None
        self._query_json = None
        self._status = None
        self._container_id = None
        self._dataset_id = None
        self._attribute_columns = None
        self._total_frames = None
        self._results = None
        self.discriminator = None

        self.query_id = query_id
        self.query_json = query_json
        self.status = status
        if container_id is not None:
            self.container_id = container_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if attribute_columns is not None:
            self.attribute_columns = attribute_columns
        if total_frames is not None:
            self.total_frames = total_frames
        if results is not None:
            self.results = results

    @property
    def query_id(self):
        """Gets the query_id of this AnalyticsQueryResult.  # noqa: E501


        :return: The query_id of this AnalyticsQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this AnalyticsQueryResult.


        :param query_id: The query_id of this AnalyticsQueryResult.  # noqa: E501
        :type query_id: str
        """
        if self.local_vars_configuration.client_side_validation and query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id

    @property
    def query_json(self):
        """Gets the query_json of this AnalyticsQueryResult.  # noqa: E501


        :return: The query_json of this AnalyticsQueryResult.  # noqa: E501
        :rtype: object
        """
        return self._query_json

    @query_json.setter
    def query_json(self, query_json):
        """Sets the query_json of this AnalyticsQueryResult.


        :param query_json: The query_json of this AnalyticsQueryResult.  # noqa: E501
        :type query_json: object
        """
        if self.local_vars_configuration.client_side_validation and query_json is None:  # noqa: E501
            raise ValueError("Invalid value for `query_json`, must not be `None`")  # noqa: E501

        self._query_json = query_json

    @property
    def status(self):
        """Gets the status of this AnalyticsQueryResult.  # noqa: E501


        :return: The status of this AnalyticsQueryResult.  # noqa: E501
        :rtype: QueryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnalyticsQueryResult.


        :param status: The status of this AnalyticsQueryResult.  # noqa: E501
        :type status: QueryStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def container_id(self):
        """Gets the container_id of this AnalyticsQueryResult.  # noqa: E501


        :return: The container_id of this AnalyticsQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this AnalyticsQueryResult.


        :param container_id: The container_id of this AnalyticsQueryResult.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this AnalyticsQueryResult.  # noqa: E501


        :return: The dataset_id of this AnalyticsQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this AnalyticsQueryResult.


        :param dataset_id: The dataset_id of this AnalyticsQueryResult.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def attribute_columns(self):
        """Gets the attribute_columns of this AnalyticsQueryResult.  # noqa: E501


        :return: The attribute_columns of this AnalyticsQueryResult.  # noqa: E501
        :rtype: list[StatManAttributesColumns]
        """
        return self._attribute_columns

    @attribute_columns.setter
    def attribute_columns(self, attribute_columns):
        """Sets the attribute_columns of this AnalyticsQueryResult.


        :param attribute_columns: The attribute_columns of this AnalyticsQueryResult.  # noqa: E501
        :type attribute_columns: list[StatManAttributesColumns]
        """

        self._attribute_columns = attribute_columns

    @property
    def total_frames(self):
        """Gets the total_frames of this AnalyticsQueryResult.  # noqa: E501


        :return: The total_frames of this AnalyticsQueryResult.  # noqa: E501
        :rtype: int
        """
        return self._total_frames

    @total_frames.setter
    def total_frames(self, total_frames):
        """Sets the total_frames of this AnalyticsQueryResult.


        :param total_frames: The total_frames of this AnalyticsQueryResult.  # noqa: E501
        :type total_frames: int
        """

        self._total_frames = total_frames

    @property
    def results(self):
        """Gets the results of this AnalyticsQueryResult.  # noqa: E501


        :return: The results of this AnalyticsQueryResult.  # noqa: E501
        :rtype: list[AnalyticsGroupResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AnalyticsQueryResult.


        :param results: The results of this AnalyticsQueryResult.  # noqa: E501
        :type results: list[AnalyticsGroupResult]
        """

        self._results = results

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsQueryResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyticsQueryResult):
            return True

        return self.to_dict() != other.to_dict()
