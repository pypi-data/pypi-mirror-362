# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class GetCatalogResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'state': 'str',
        'url': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'name': 'str',
        'description': 'str',
        'sms_key': 'str',
        'sms_namespace': 'str',
        'username': 'str',
        'password': 'str',
        'type': 'DBStoreTypes',
        'hostname': 'str',
        'port': 'str',
        'db_name': 'str',
        'aws_athena_config': 'AWSAthenaConfig',
        'status': 'object',
        'is_internal': 'bool',
        'created_by': 'str',
        'updated_by': 'str',
        'mode': 'CatalogModes'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'url': 'url',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'name': 'name',
        'description': 'description',
        'sms_key': 'smsKey',
        'sms_namespace': 'smsNamespace',
        'username': 'username',
        'password': 'password',
        'type': 'type',
        'hostname': 'hostname',
        'port': 'port',
        'db_name': 'db_name',
        'aws_athena_config': 'aws_athena_config',
        'status': 'status',
        'is_internal': 'isInternal',
        'created_by': 'createdBy',
        'updated_by': 'updatedBy',
        'mode': 'mode'
    }

    def __init__(self, id=None, state=None, url=None, created_at=None, updated_at=None, name=None, description=None, sms_key=None, sms_namespace=None, username=None, password=None, type=None, hostname=None, port=None, db_name=None, aws_athena_config=None, status=None, is_internal=None, created_by=None, updated_by=None, mode=None, local_vars_configuration=None):  # noqa: E501
        """GetCatalogResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._state = None
        self._url = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._description = None
        self._sms_key = None
        self._sms_namespace = None
        self._username = None
        self._password = None
        self._type = None
        self._hostname = None
        self._port = None
        self._db_name = None
        self._aws_athena_config = None
        self._status = None
        self._is_internal = None
        self._created_by = None
        self._updated_by = None
        self._mode = None
        self.discriminator = None

        self.id = id
        self.state = state
        self.url = url
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.name = name
        if description is not None:
            self.description = description
        if sms_key is not None:
            self.sms_key = sms_key
        if sms_namespace is not None:
            self.sms_namespace = sms_namespace
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        self.type = type
        if hostname is not None:
            self.hostname = hostname
        if port is not None:
            self.port = port
        if db_name is not None:
            self.db_name = db_name
        if aws_athena_config is not None:
            self.aws_athena_config = aws_athena_config
        if status is not None:
            self.status = status
        if is_internal is not None:
            self.is_internal = is_internal
        if created_by is not None:
            self.created_by = created_by
        if updated_by is not None:
            self.updated_by = updated_by
        self.mode = mode

    @property
    def id(self):
        """Gets the id of this GetCatalogResponse.  # noqa: E501


        :return: The id of this GetCatalogResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCatalogResponse.


        :param id: The id of this GetCatalogResponse.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this GetCatalogResponse.  # noqa: E501


        :return: The state of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetCatalogResponse.


        :param state: The state of this GetCatalogResponse.  # noqa: E501
        :type state: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def url(self):
        """Gets the url of this GetCatalogResponse.  # noqa: E501


        :return: The url of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this GetCatalogResponse.


        :param url: The url of this GetCatalogResponse.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def created_at(self):
        """Gets the created_at of this GetCatalogResponse.  # noqa: E501


        :return: The created_at of this GetCatalogResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetCatalogResponse.


        :param created_at: The created_at of this GetCatalogResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GetCatalogResponse.  # noqa: E501


        :return: The updated_at of this GetCatalogResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetCatalogResponse.


        :param updated_at: The updated_at of this GetCatalogResponse.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this GetCatalogResponse.  # noqa: E501


        :return: The name of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCatalogResponse.


        :param name: The name of this GetCatalogResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetCatalogResponse.  # noqa: E501


        :return: The description of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetCatalogResponse.


        :param description: The description of this GetCatalogResponse.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def sms_key(self):
        """Gets the sms_key of this GetCatalogResponse.  # noqa: E501


        :return: The sms_key of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._sms_key

    @sms_key.setter
    def sms_key(self, sms_key):
        """Sets the sms_key of this GetCatalogResponse.


        :param sms_key: The sms_key of this GetCatalogResponse.  # noqa: E501
        :type sms_key: str
        """

        self._sms_key = sms_key

    @property
    def sms_namespace(self):
        """Gets the sms_namespace of this GetCatalogResponse.  # noqa: E501


        :return: The sms_namespace of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._sms_namespace

    @sms_namespace.setter
    def sms_namespace(self, sms_namespace):
        """Sets the sms_namespace of this GetCatalogResponse.


        :param sms_namespace: The sms_namespace of this GetCatalogResponse.  # noqa: E501
        :type sms_namespace: str
        """

        self._sms_namespace = sms_namespace

    @property
    def username(self):
        """Gets the username of this GetCatalogResponse.  # noqa: E501


        :return: The username of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GetCatalogResponse.


        :param username: The username of this GetCatalogResponse.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this GetCatalogResponse.  # noqa: E501


        :return: The password of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GetCatalogResponse.


        :param password: The password of this GetCatalogResponse.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def type(self):
        """Gets the type of this GetCatalogResponse.  # noqa: E501


        :return: The type of this GetCatalogResponse.  # noqa: E501
        :rtype: DBStoreTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetCatalogResponse.


        :param type: The type of this GetCatalogResponse.  # noqa: E501
        :type type: DBStoreTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def hostname(self):
        """Gets the hostname of this GetCatalogResponse.  # noqa: E501


        :return: The hostname of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this GetCatalogResponse.


        :param hostname: The hostname of this GetCatalogResponse.  # noqa: E501
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this GetCatalogResponse.  # noqa: E501


        :return: The port of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GetCatalogResponse.


        :param port: The port of this GetCatalogResponse.  # noqa: E501
        :type port: str
        """

        self._port = port

    @property
    def db_name(self):
        """Gets the db_name of this GetCatalogResponse.  # noqa: E501


        :return: The db_name of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this GetCatalogResponse.


        :param db_name: The db_name of this GetCatalogResponse.  # noqa: E501
        :type db_name: str
        """

        self._db_name = db_name

    @property
    def aws_athena_config(self):
        """Gets the aws_athena_config of this GetCatalogResponse.  # noqa: E501


        :return: The aws_athena_config of this GetCatalogResponse.  # noqa: E501
        :rtype: AWSAthenaConfig
        """
        return self._aws_athena_config

    @aws_athena_config.setter
    def aws_athena_config(self, aws_athena_config):
        """Sets the aws_athena_config of this GetCatalogResponse.


        :param aws_athena_config: The aws_athena_config of this GetCatalogResponse.  # noqa: E501
        :type aws_athena_config: AWSAthenaConfig
        """

        self._aws_athena_config = aws_athena_config

    @property
    def status(self):
        """Gets the status of this GetCatalogResponse.  # noqa: E501


        :return: The status of this GetCatalogResponse.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetCatalogResponse.


        :param status: The status of this GetCatalogResponse.  # noqa: E501
        :type status: object
        """

        self._status = status

    @property
    def is_internal(self):
        """Gets the is_internal of this GetCatalogResponse.  # noqa: E501


        :return: The is_internal of this GetCatalogResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this GetCatalogResponse.


        :param is_internal: The is_internal of this GetCatalogResponse.  # noqa: E501
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def created_by(self):
        """Gets the created_by of this GetCatalogResponse.  # noqa: E501


        :return: The created_by of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetCatalogResponse.


        :param created_by: The created_by of this GetCatalogResponse.  # noqa: E501
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this GetCatalogResponse.  # noqa: E501


        :return: The updated_by of this GetCatalogResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GetCatalogResponse.


        :param updated_by: The updated_by of this GetCatalogResponse.  # noqa: E501
        :type updated_by: str
        """

        self._updated_by = updated_by

    @property
    def mode(self):
        """Gets the mode of this GetCatalogResponse.  # noqa: E501


        :return: The mode of this GetCatalogResponse.  # noqa: E501
        :rtype: CatalogModes
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this GetCatalogResponse.


        :param mode: The mode of this GetCatalogResponse.  # noqa: E501
        :type mode: CatalogModes
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCatalogResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCatalogResponse):
            return True

        return self.to_dict() != other.to_dict()
