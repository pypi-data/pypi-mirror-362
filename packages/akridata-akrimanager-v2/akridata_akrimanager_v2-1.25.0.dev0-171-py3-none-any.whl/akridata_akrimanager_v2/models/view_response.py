# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class ViewResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_id': 'str',
        'view_name': 'str',
        'dataset_id': 'str',
        'description': 'str',
        'tables': 'list[list[object]]',
        'columns': 'list[object]',
        'udf_columns': 'list[object]',
        'udfs_info': 'list[object]',
        'invalid': 'bool',
        'created_at': 'datetime',
        'created_by': 'str',
        'task_type': 'TaskType',
        'status': 'EntityStatus',
        'ds_job_id': 'str',
        'ds_job_task_id': 'str',
        'latest_pe_query_id': 'str',
        'latest_in_progress_pe_query_id': 'str',
        'join_type': 'ViewJoinType'
    }

    attribute_map = {
        'view_id': 'view_id',
        'view_name': 'view_name',
        'dataset_id': 'dataset_id',
        'description': 'description',
        'tables': 'tables',
        'columns': 'columns',
        'udf_columns': 'udf_columns',
        'udfs_info': 'udfs_info',
        'invalid': 'invalid',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'task_type': 'task_type',
        'status': 'status',
        'ds_job_id': 'ds_job_id',
        'ds_job_task_id': 'ds_job_task_id',
        'latest_pe_query_id': 'latest_pe_query_id',
        'latest_in_progress_pe_query_id': 'latest_in_progress_pe_query_id',
        'join_type': 'join_type'
    }

    def __init__(self, view_id=None, view_name=None, dataset_id=None, description=None, tables=None, columns=None, udf_columns=[], udfs_info=[], invalid=False, created_at=None, created_by=None, task_type=None, status=None, ds_job_id=None, ds_job_task_id=None, latest_pe_query_id=None, latest_in_progress_pe_query_id=None, join_type=None, local_vars_configuration=None):  # noqa: E501
        """ViewResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._view_id = None
        self._view_name = None
        self._dataset_id = None
        self._description = None
        self._tables = None
        self._columns = None
        self._udf_columns = None
        self._udfs_info = None
        self._invalid = None
        self._created_at = None
        self._created_by = None
        self._task_type = None
        self._status = None
        self._ds_job_id = None
        self._ds_job_task_id = None
        self._latest_pe_query_id = None
        self._latest_in_progress_pe_query_id = None
        self._join_type = None
        self.discriminator = None

        self.view_id = view_id
        self.view_name = view_name
        if dataset_id is not None:
            self.dataset_id = dataset_id
        self.description = description
        if tables is not None:
            self.tables = tables
        if columns is not None:
            self.columns = columns
        if udf_columns is not None:
            self.udf_columns = udf_columns
        if udfs_info is not None:
            self.udfs_info = udfs_info
        if invalid is not None:
            self.invalid = invalid
        self.created_at = created_at
        self.created_by = created_by
        self.task_type = task_type
        self.status = status
        if ds_job_id is not None:
            self.ds_job_id = ds_job_id
        if ds_job_task_id is not None:
            self.ds_job_task_id = ds_job_task_id
        if latest_pe_query_id is not None:
            self.latest_pe_query_id = latest_pe_query_id
        if latest_in_progress_pe_query_id is not None:
            self.latest_in_progress_pe_query_id = latest_in_progress_pe_query_id
        if join_type is not None:
            self.join_type = join_type

    @property
    def view_id(self):
        """Gets the view_id of this ViewResponse.  # noqa: E501


        :return: The view_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewResponse.


        :param view_id: The view_id of this ViewResponse.  # noqa: E501
        :type view_id: str
        """
        if self.local_vars_configuration.client_side_validation and view_id is None:  # noqa: E501
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def view_name(self):
        """Gets the view_name of this ViewResponse.  # noqa: E501


        :return: The view_name of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this ViewResponse.


        :param view_name: The view_name of this ViewResponse.  # noqa: E501
        :type view_name: str
        """
        if self.local_vars_configuration.client_side_validation and view_name is None:  # noqa: E501
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ViewResponse.  # noqa: E501


        :return: The dataset_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ViewResponse.


        :param dataset_id: The dataset_id of this ViewResponse.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def description(self):
        """Gets the description of this ViewResponse.  # noqa: E501


        :return: The description of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ViewResponse.


        :param description: The description of this ViewResponse.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def tables(self):
        """Gets the tables of this ViewResponse.  # noqa: E501


        :return: The tables of this ViewResponse.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this ViewResponse.


        :param tables: The tables of this ViewResponse.  # noqa: E501
        :type tables: list[list[object]]
        """

        self._tables = tables

    @property
    def columns(self):
        """Gets the columns of this ViewResponse.  # noqa: E501


        :return: The columns of this ViewResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ViewResponse.


        :param columns: The columns of this ViewResponse.  # noqa: E501
        :type columns: list[object]
        """

        self._columns = columns

    @property
    def udf_columns(self):
        """Gets the udf_columns of this ViewResponse.  # noqa: E501


        :return: The udf_columns of this ViewResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._udf_columns

    @udf_columns.setter
    def udf_columns(self, udf_columns):
        """Sets the udf_columns of this ViewResponse.


        :param udf_columns: The udf_columns of this ViewResponse.  # noqa: E501
        :type udf_columns: list[object]
        """

        self._udf_columns = udf_columns

    @property
    def udfs_info(self):
        """Gets the udfs_info of this ViewResponse.  # noqa: E501


        :return: The udfs_info of this ViewResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._udfs_info

    @udfs_info.setter
    def udfs_info(self, udfs_info):
        """Sets the udfs_info of this ViewResponse.


        :param udfs_info: The udfs_info of this ViewResponse.  # noqa: E501
        :type udfs_info: list[object]
        """

        self._udfs_info = udfs_info

    @property
    def invalid(self):
        """Gets the invalid of this ViewResponse.  # noqa: E501


        :return: The invalid of this ViewResponse.  # noqa: E501
        :rtype: bool
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this ViewResponse.


        :param invalid: The invalid of this ViewResponse.  # noqa: E501
        :type invalid: bool
        """

        self._invalid = invalid

    @property
    def created_at(self):
        """Gets the created_at of this ViewResponse.  # noqa: E501


        :return: The created_at of this ViewResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ViewResponse.


        :param created_at: The created_at of this ViewResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ViewResponse.  # noqa: E501


        :return: The created_by of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ViewResponse.


        :param created_by: The created_by of this ViewResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def task_type(self):
        """Gets the task_type of this ViewResponse.  # noqa: E501


        :return: The task_type of this ViewResponse.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this ViewResponse.


        :param task_type: The task_type of this ViewResponse.  # noqa: E501
        :type task_type: TaskType
        """
        if self.local_vars_configuration.client_side_validation and task_type is None:  # noqa: E501
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def status(self):
        """Gets the status of this ViewResponse.  # noqa: E501


        :return: The status of this ViewResponse.  # noqa: E501
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ViewResponse.


        :param status: The status of this ViewResponse.  # noqa: E501
        :type status: EntityStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def ds_job_id(self):
        """Gets the ds_job_id of this ViewResponse.  # noqa: E501


        :return: The ds_job_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._ds_job_id

    @ds_job_id.setter
    def ds_job_id(self, ds_job_id):
        """Sets the ds_job_id of this ViewResponse.


        :param ds_job_id: The ds_job_id of this ViewResponse.  # noqa: E501
        :type ds_job_id: str
        """

        self._ds_job_id = ds_job_id

    @property
    def ds_job_task_id(self):
        """Gets the ds_job_task_id of this ViewResponse.  # noqa: E501


        :return: The ds_job_task_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._ds_job_task_id

    @ds_job_task_id.setter
    def ds_job_task_id(self, ds_job_task_id):
        """Sets the ds_job_task_id of this ViewResponse.


        :param ds_job_task_id: The ds_job_task_id of this ViewResponse.  # noqa: E501
        :type ds_job_task_id: str
        """

        self._ds_job_task_id = ds_job_task_id

    @property
    def latest_pe_query_id(self):
        """Gets the latest_pe_query_id of this ViewResponse.  # noqa: E501


        :return: The latest_pe_query_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest_pe_query_id

    @latest_pe_query_id.setter
    def latest_pe_query_id(self, latest_pe_query_id):
        """Sets the latest_pe_query_id of this ViewResponse.


        :param latest_pe_query_id: The latest_pe_query_id of this ViewResponse.  # noqa: E501
        :type latest_pe_query_id: str
        """

        self._latest_pe_query_id = latest_pe_query_id

    @property
    def latest_in_progress_pe_query_id(self):
        """Gets the latest_in_progress_pe_query_id of this ViewResponse.  # noqa: E501


        :return: The latest_in_progress_pe_query_id of this ViewResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest_in_progress_pe_query_id

    @latest_in_progress_pe_query_id.setter
    def latest_in_progress_pe_query_id(self, latest_in_progress_pe_query_id):
        """Sets the latest_in_progress_pe_query_id of this ViewResponse.


        :param latest_in_progress_pe_query_id: The latest_in_progress_pe_query_id of this ViewResponse.  # noqa: E501
        :type latest_in_progress_pe_query_id: str
        """

        self._latest_in_progress_pe_query_id = latest_in_progress_pe_query_id

    @property
    def join_type(self):
        """Gets the join_type of this ViewResponse.  # noqa: E501


        :return: The join_type of this ViewResponse.  # noqa: E501
        :rtype: ViewJoinType
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this ViewResponse.


        :param join_type: The join_type of this ViewResponse.  # noqa: E501
        :type join_type: ViewJoinType
        """

        self._join_type = join_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewResponse):
            return True

        return self.to_dict() != other.to_dict()
