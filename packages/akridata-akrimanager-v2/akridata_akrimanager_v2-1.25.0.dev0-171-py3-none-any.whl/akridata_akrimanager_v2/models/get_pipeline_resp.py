# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class GetPipelineResp(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipeline_id': 'str',
        'pipeline_name': 'str',
        'pipeline_description': 'str',
        'pre_processor': 'PipelineDocker',
        'featurizer_docker': 'PipelineDocker',
        'thumbnail_docker': 'PipelineDocker',
        'creation_date': 'datetime',
        'latest_version': 'str',
        'versions': 'list[OpenapiServerDataSchemaPipelineModelsVersion]',
        'attribute_generator_dockers': 'list[PipelineDocker]',
        'pipeline_type': 'str',
        'is_editable': 'bool',
        'is_internal': 'bool',
        'internal_id': 'int',
        'is_deprecated': 'bool',
        'is_datagen': 'bool',
        'dpu_usage': 'PipelineDpuUsageMapping'
    }

    attribute_map = {
        'pipeline_id': 'pipeline_id',
        'pipeline_name': 'pipeline_name',
        'pipeline_description': 'pipeline_description',
        'pre_processor': 'pre_processor',
        'featurizer_docker': 'featurizer_docker',
        'thumbnail_docker': 'thumbnail_docker',
        'creation_date': 'creation_date',
        'latest_version': 'latest_version',
        'versions': 'versions',
        'attribute_generator_dockers': 'attribute_generator_dockers',
        'pipeline_type': 'pipeline_type',
        'is_editable': 'is_editable',
        'is_internal': 'is_internal',
        'internal_id': 'internal_id',
        'is_deprecated': 'is_deprecated',
        'is_datagen': 'is_datagen',
        'dpu_usage': 'dpu_usage'
    }

    def __init__(self, pipeline_id=None, pipeline_name=None, pipeline_description=None, pre_processor=None, featurizer_docker=None, thumbnail_docker=None, creation_date=None, latest_version=None, versions=None, attribute_generator_dockers=[], pipeline_type=None, is_editable=True, is_internal=False, internal_id=0, is_deprecated=False, is_datagen=None, dpu_usage=None, local_vars_configuration=None):  # noqa: E501
        """GetPipelineResp - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pipeline_id = None
        self._pipeline_name = None
        self._pipeline_description = None
        self._pre_processor = None
        self._featurizer_docker = None
        self._thumbnail_docker = None
        self._creation_date = None
        self._latest_version = None
        self._versions = None
        self._attribute_generator_dockers = None
        self._pipeline_type = None
        self._is_editable = None
        self._is_internal = None
        self._internal_id = None
        self._is_deprecated = None
        self._is_datagen = None
        self._dpu_usage = None
        self.discriminator = None

        self.pipeline_id = pipeline_id
        self.pipeline_name = pipeline_name
        if pipeline_description is not None:
            self.pipeline_description = pipeline_description
        self.pre_processor = pre_processor
        self.featurizer_docker = featurizer_docker
        self.thumbnail_docker = thumbnail_docker
        self.creation_date = creation_date
        self.latest_version = latest_version
        if versions is not None:
            self.versions = versions
        if attribute_generator_dockers is not None:
            self.attribute_generator_dockers = attribute_generator_dockers
        self.pipeline_type = pipeline_type
        if is_editable is not None:
            self.is_editable = is_editable
        if is_internal is not None:
            self.is_internal = is_internal
        if internal_id is not None:
            self.internal_id = internal_id
        if is_deprecated is not None:
            self.is_deprecated = is_deprecated
        self.is_datagen = is_datagen
        self.dpu_usage = dpu_usage

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this GetPipelineResp.  # noqa: E501


        :return: The pipeline_id of this GetPipelineResp.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this GetPipelineResp.


        :param pipeline_id: The pipeline_id of this GetPipelineResp.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this GetPipelineResp.  # noqa: E501


        :return: The pipeline_name of this GetPipelineResp.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this GetPipelineResp.


        :param pipeline_name: The pipeline_name of this GetPipelineResp.  # noqa: E501
        :type pipeline_name: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_name is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_description(self):
        """Gets the pipeline_description of this GetPipelineResp.  # noqa: E501


        :return: The pipeline_description of this GetPipelineResp.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_description

    @pipeline_description.setter
    def pipeline_description(self, pipeline_description):
        """Sets the pipeline_description of this GetPipelineResp.


        :param pipeline_description: The pipeline_description of this GetPipelineResp.  # noqa: E501
        :type pipeline_description: str
        """

        self._pipeline_description = pipeline_description

    @property
    def pre_processor(self):
        """Gets the pre_processor of this GetPipelineResp.  # noqa: E501


        :return: The pre_processor of this GetPipelineResp.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._pre_processor

    @pre_processor.setter
    def pre_processor(self, pre_processor):
        """Sets the pre_processor of this GetPipelineResp.


        :param pre_processor: The pre_processor of this GetPipelineResp.  # noqa: E501
        :type pre_processor: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and pre_processor is None:  # noqa: E501
            raise ValueError("Invalid value for `pre_processor`, must not be `None`")  # noqa: E501

        self._pre_processor = pre_processor

    @property
    def featurizer_docker(self):
        """Gets the featurizer_docker of this GetPipelineResp.  # noqa: E501


        :return: The featurizer_docker of this GetPipelineResp.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._featurizer_docker

    @featurizer_docker.setter
    def featurizer_docker(self, featurizer_docker):
        """Sets the featurizer_docker of this GetPipelineResp.


        :param featurizer_docker: The featurizer_docker of this GetPipelineResp.  # noqa: E501
        :type featurizer_docker: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and featurizer_docker is None:  # noqa: E501
            raise ValueError("Invalid value for `featurizer_docker`, must not be `None`")  # noqa: E501

        self._featurizer_docker = featurizer_docker

    @property
    def thumbnail_docker(self):
        """Gets the thumbnail_docker of this GetPipelineResp.  # noqa: E501


        :return: The thumbnail_docker of this GetPipelineResp.  # noqa: E501
        :rtype: PipelineDocker
        """
        return self._thumbnail_docker

    @thumbnail_docker.setter
    def thumbnail_docker(self, thumbnail_docker):
        """Sets the thumbnail_docker of this GetPipelineResp.


        :param thumbnail_docker: The thumbnail_docker of this GetPipelineResp.  # noqa: E501
        :type thumbnail_docker: PipelineDocker
        """
        if self.local_vars_configuration.client_side_validation and thumbnail_docker is None:  # noqa: E501
            raise ValueError("Invalid value for `thumbnail_docker`, must not be `None`")  # noqa: E501

        self._thumbnail_docker = thumbnail_docker

    @property
    def creation_date(self):
        """Gets the creation_date of this GetPipelineResp.  # noqa: E501


        :return: The creation_date of this GetPipelineResp.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GetPipelineResp.


        :param creation_date: The creation_date of this GetPipelineResp.  # noqa: E501
        :type creation_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def latest_version(self):
        """Gets the latest_version of this GetPipelineResp.  # noqa: E501


        :return: The latest_version of this GetPipelineResp.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this GetPipelineResp.


        :param latest_version: The latest_version of this GetPipelineResp.  # noqa: E501
        :type latest_version: str
        """
        if self.local_vars_configuration.client_side_validation and latest_version is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_version`, must not be `None`")  # noqa: E501

        self._latest_version = latest_version

    @property
    def versions(self):
        """Gets the versions of this GetPipelineResp.  # noqa: E501


        :return: The versions of this GetPipelineResp.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaPipelineModelsVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this GetPipelineResp.


        :param versions: The versions of this GetPipelineResp.  # noqa: E501
        :type versions: list[OpenapiServerDataSchemaPipelineModelsVersion]
        """

        self._versions = versions

    @property
    def attribute_generator_dockers(self):
        """Gets the attribute_generator_dockers of this GetPipelineResp.  # noqa: E501


        :return: The attribute_generator_dockers of this GetPipelineResp.  # noqa: E501
        :rtype: list[PipelineDocker]
        """
        return self._attribute_generator_dockers

    @attribute_generator_dockers.setter
    def attribute_generator_dockers(self, attribute_generator_dockers):
        """Sets the attribute_generator_dockers of this GetPipelineResp.


        :param attribute_generator_dockers: The attribute_generator_dockers of this GetPipelineResp.  # noqa: E501
        :type attribute_generator_dockers: list[PipelineDocker]
        """

        self._attribute_generator_dockers = attribute_generator_dockers

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this GetPipelineResp.  # noqa: E501


        :return: The pipeline_type of this GetPipelineResp.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this GetPipelineResp.


        :param pipeline_type: The pipeline_type of this GetPipelineResp.  # noqa: E501
        :type pipeline_type: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_type is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_type`, must not be `None`")  # noqa: E501

        self._pipeline_type = pipeline_type

    @property
    def is_editable(self):
        """Gets the is_editable of this GetPipelineResp.  # noqa: E501


        :return: The is_editable of this GetPipelineResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this GetPipelineResp.


        :param is_editable: The is_editable of this GetPipelineResp.  # noqa: E501
        :type is_editable: bool
        """

        self._is_editable = is_editable

    @property
    def is_internal(self):
        """Gets the is_internal of this GetPipelineResp.  # noqa: E501


        :return: The is_internal of this GetPipelineResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this GetPipelineResp.


        :param is_internal: The is_internal of this GetPipelineResp.  # noqa: E501
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def internal_id(self):
        """Gets the internal_id of this GetPipelineResp.  # noqa: E501


        :return: The internal_id of this GetPipelineResp.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this GetPipelineResp.


        :param internal_id: The internal_id of this GetPipelineResp.  # noqa: E501
        :type internal_id: int
        """

        self._internal_id = internal_id

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this GetPipelineResp.  # noqa: E501


        :return: The is_deprecated of this GetPipelineResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this GetPipelineResp.


        :param is_deprecated: The is_deprecated of this GetPipelineResp.  # noqa: E501
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def is_datagen(self):
        """Gets the is_datagen of this GetPipelineResp.  # noqa: E501


        :return: The is_datagen of this GetPipelineResp.  # noqa: E501
        :rtype: bool
        """
        return self._is_datagen

    @is_datagen.setter
    def is_datagen(self, is_datagen):
        """Sets the is_datagen of this GetPipelineResp.


        :param is_datagen: The is_datagen of this GetPipelineResp.  # noqa: E501
        :type is_datagen: bool
        """
        if self.local_vars_configuration.client_side_validation and is_datagen is None:  # noqa: E501
            raise ValueError("Invalid value for `is_datagen`, must not be `None`")  # noqa: E501

        self._is_datagen = is_datagen

    @property
    def dpu_usage(self):
        """Gets the dpu_usage of this GetPipelineResp.  # noqa: E501


        :return: The dpu_usage of this GetPipelineResp.  # noqa: E501
        :rtype: PipelineDpuUsageMapping
        """
        return self._dpu_usage

    @dpu_usage.setter
    def dpu_usage(self, dpu_usage):
        """Sets the dpu_usage of this GetPipelineResp.


        :param dpu_usage: The dpu_usage of this GetPipelineResp.  # noqa: E501
        :type dpu_usage: PipelineDpuUsageMapping
        """
        if self.local_vars_configuration.client_side_validation and dpu_usage is None:  # noqa: E501
            raise ValueError("Invalid value for `dpu_usage`, must not be `None`")  # noqa: E501

        self._dpu_usage = dpu_usage

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPipelineResp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetPipelineResp):
            return True

        return self.to_dict() != other.to_dict()
