# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class GetUserInfoResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'user_roles': 'list[str]',
        'user_groups': 'list[str]',
        'workspace': 'str',
        'org_name': 'str',
        'subscription_status': 'SubscriptionStatus'
    }

    attribute_map = {
        'user_email': 'user_email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'user_roles': 'user_roles',
        'user_groups': 'user_groups',
        'workspace': 'workspace',
        'org_name': 'org_name',
        'subscription_status': 'subscription_status'
    }

    def __init__(self, user_email=None, first_name=None, last_name=None, user_roles=None, user_groups=None, workspace=None, org_name=None, subscription_status=None, local_vars_configuration=None):  # noqa: E501
        """GetUserInfoResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._user_email = None
        self._first_name = None
        self._last_name = None
        self._user_roles = None
        self._user_groups = None
        self._workspace = None
        self._org_name = None
        self._subscription_status = None
        self.discriminator = None

        self.user_email = user_email
        self.first_name = first_name
        self.last_name = last_name
        self.user_roles = user_roles
        self.user_groups = user_groups
        self.workspace = workspace
        self.org_name = org_name
        self.subscription_status = subscription_status

    @property
    def user_email(self):
        """Gets the user_email of this GetUserInfoResponse.  # noqa: E501


        :return: The user_email of this GetUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this GetUserInfoResponse.


        :param user_email: The user_email of this GetUserInfoResponse.  # noqa: E501
        :type user_email: str
        """
        if self.local_vars_configuration.client_side_validation and user_email is None:  # noqa: E501
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def first_name(self):
        """Gets the first_name of this GetUserInfoResponse.  # noqa: E501


        :return: The first_name of this GetUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GetUserInfoResponse.


        :param first_name: The first_name of this GetUserInfoResponse.  # noqa: E501
        :type first_name: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this GetUserInfoResponse.  # noqa: E501


        :return: The last_name of this GetUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GetUserInfoResponse.


        :param last_name: The last_name of this GetUserInfoResponse.  # noqa: E501
        :type last_name: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def user_roles(self):
        """Gets the user_roles of this GetUserInfoResponse.  # noqa: E501


        :return: The user_roles of this GetUserInfoResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this GetUserInfoResponse.


        :param user_roles: The user_roles of this GetUserInfoResponse.  # noqa: E501
        :type user_roles: list[str]
        """
        if self.local_vars_configuration.client_side_validation and user_roles is None:  # noqa: E501
            raise ValueError("Invalid value for `user_roles`, must not be `None`")  # noqa: E501

        self._user_roles = user_roles

    @property
    def user_groups(self):
        """Gets the user_groups of this GetUserInfoResponse.  # noqa: E501


        :return: The user_groups of this GetUserInfoResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this GetUserInfoResponse.


        :param user_groups: The user_groups of this GetUserInfoResponse.  # noqa: E501
        :type user_groups: list[str]
        """
        if self.local_vars_configuration.client_side_validation and user_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `user_groups`, must not be `None`")  # noqa: E501

        self._user_groups = user_groups

    @property
    def workspace(self):
        """Gets the workspace of this GetUserInfoResponse.  # noqa: E501


        :return: The workspace of this GetUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this GetUserInfoResponse.


        :param workspace: The workspace of this GetUserInfoResponse.  # noqa: E501
        :type workspace: str
        """
        if self.local_vars_configuration.client_side_validation and workspace is None:  # noqa: E501
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def org_name(self):
        """Gets the org_name of this GetUserInfoResponse.  # noqa: E501


        :return: The org_name of this GetUserInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this GetUserInfoResponse.


        :param org_name: The org_name of this GetUserInfoResponse.  # noqa: E501
        :type org_name: str
        """
        if self.local_vars_configuration.client_side_validation and org_name is None:  # noqa: E501
            raise ValueError("Invalid value for `org_name`, must not be `None`")  # noqa: E501

        self._org_name = org_name

    @property
    def subscription_status(self):
        """Gets the subscription_status of this GetUserInfoResponse.  # noqa: E501


        :return: The subscription_status of this GetUserInfoResponse.  # noqa: E501
        :rtype: SubscriptionStatus
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """Sets the subscription_status of this GetUserInfoResponse.


        :param subscription_status: The subscription_status of this GetUserInfoResponse.  # noqa: E501
        :type subscription_status: SubscriptionStatus
        """
        if self.local_vars_configuration.client_side_validation and subscription_status is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_status`, must not be `None`")  # noqa: E501

        self._subscription_status = subscription_status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetUserInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetUserInfoResponse):
            return True

        return self.to_dict() != other.to_dict()
