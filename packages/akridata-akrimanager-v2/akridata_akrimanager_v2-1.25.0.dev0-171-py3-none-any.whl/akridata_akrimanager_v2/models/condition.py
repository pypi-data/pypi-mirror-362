# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class Condition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'column': 'str',
        'column_type': 'str',
        'operation': 'str',
        'first_value': 'str',
        'second_value': 'str',
        'first_value_list': 'list[object]',
        'logical_operator': 'LogicalOperatorType'
    }

    attribute_map = {
        'column': 'column',
        'column_type': 'column_type',
        'operation': 'operation',
        'first_value': 'first_value',
        'second_value': 'second_value',
        'first_value_list': 'first_value_list',
        'logical_operator': 'logical_operator'
    }

    def __init__(self, column=None, column_type=None, operation=None, first_value=None, second_value=None, first_value_list=None, logical_operator=None, local_vars_configuration=None):  # noqa: E501
        """Condition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._column = None
        self._column_type = None
        self._operation = None
        self._first_value = None
        self._second_value = None
        self._first_value_list = None
        self._logical_operator = None
        self.discriminator = None

        self.column = column
        self.column_type = column_type
        self.operation = operation
        if first_value is not None:
            self.first_value = first_value
        if second_value is not None:
            self.second_value = second_value
        if first_value_list is not None:
            self.first_value_list = first_value_list
        if logical_operator is not None:
            self.logical_operator = logical_operator

    @property
    def column(self):
        """Gets the column of this Condition.  # noqa: E501


        :return: The column of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this Condition.


        :param column: The column of this Condition.  # noqa: E501
        :type column: str
        """
        if self.local_vars_configuration.client_side_validation and column is None:  # noqa: E501
            raise ValueError("Invalid value for `column`, must not be `None`")  # noqa: E501

        self._column = column

    @property
    def column_type(self):
        """Gets the column_type of this Condition.  # noqa: E501


        :return: The column_type of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._column_type

    @column_type.setter
    def column_type(self, column_type):
        """Sets the column_type of this Condition.


        :param column_type: The column_type of this Condition.  # noqa: E501
        :type column_type: str
        """
        if self.local_vars_configuration.client_side_validation and column_type is None:  # noqa: E501
            raise ValueError("Invalid value for `column_type`, must not be `None`")  # noqa: E501

        self._column_type = column_type

    @property
    def operation(self):
        """Gets the operation of this Condition.  # noqa: E501


        :return: The operation of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Condition.


        :param operation: The operation of this Condition.  # noqa: E501
        :type operation: str
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def first_value(self):
        """Gets the first_value of this Condition.  # noqa: E501


        :return: The first_value of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._first_value

    @first_value.setter
    def first_value(self, first_value):
        """Sets the first_value of this Condition.


        :param first_value: The first_value of this Condition.  # noqa: E501
        :type first_value: str
        """

        self._first_value = first_value

    @property
    def second_value(self):
        """Gets the second_value of this Condition.  # noqa: E501


        :return: The second_value of this Condition.  # noqa: E501
        :rtype: str
        """
        return self._second_value

    @second_value.setter
    def second_value(self, second_value):
        """Sets the second_value of this Condition.


        :param second_value: The second_value of this Condition.  # noqa: E501
        :type second_value: str
        """

        self._second_value = second_value

    @property
    def first_value_list(self):
        """Gets the first_value_list of this Condition.  # noqa: E501


        :return: The first_value_list of this Condition.  # noqa: E501
        :rtype: list[object]
        """
        return self._first_value_list

    @first_value_list.setter
    def first_value_list(self, first_value_list):
        """Sets the first_value_list of this Condition.


        :param first_value_list: The first_value_list of this Condition.  # noqa: E501
        :type first_value_list: list[object]
        """

        self._first_value_list = first_value_list

    @property
    def logical_operator(self):
        """Gets the logical_operator of this Condition.  # noqa: E501


        :return: The logical_operator of this Condition.  # noqa: E501
        :rtype: LogicalOperatorType
        """
        return self._logical_operator

    @logical_operator.setter
    def logical_operator(self, logical_operator):
        """Sets the logical_operator of this Condition.


        :param logical_operator: The logical_operator of this Condition.  # noqa: E501
        :type logical_operator: LogicalOperatorType
        """

        self._logical_operator = logical_operator

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Condition):
            return True

        return self.to_dict() != other.to_dict()
