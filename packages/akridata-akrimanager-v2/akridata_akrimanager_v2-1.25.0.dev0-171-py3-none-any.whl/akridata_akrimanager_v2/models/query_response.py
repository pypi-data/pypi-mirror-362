# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class QueryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_id': 'str',
        'dataset_id': 'str',
        'pipeline_name': 'str',
        'first_table_alias': 'str',
        'query_str': 'str',
        'query_json': 'object',
        'status': 'str',
        'source_type': 'SourceType',
        'is_internal': 'bool',
        'submitted_at': 'datetime',
        'started_at': 'datetime',
        'exec_duration': 'int',
        'submitted_by': 'str',
        'rows_processed': 'int',
        'data_scanned': 'int',
        's3_result_size': 'int',
        'status_message': 'str',
        's3_result_columns': 'list[object]',
        's3_result_row_count': 'int',
        'total_objects': 'int',
        'result_available': 'bool',
        'result_formats': 'list[str]'
    }

    attribute_map = {
        'query_id': 'query_id',
        'dataset_id': 'dataset_id',
        'pipeline_name': 'pipeline_name',
        'first_table_alias': 'first_table_alias',
        'query_str': 'query_str',
        'query_json': 'query_json',
        'status': 'status',
        'source_type': 'source_type',
        'is_internal': 'is_internal',
        'submitted_at': 'submitted_at',
        'started_at': 'started_at',
        'exec_duration': 'exec_duration',
        'submitted_by': 'submitted_by',
        'rows_processed': 'rows_processed',
        'data_scanned': 'data_scanned',
        's3_result_size': 's3_result_size',
        'status_message': 'status_message',
        's3_result_columns': 's3_result_columns',
        's3_result_row_count': 's3_result_row_count',
        'total_objects': 'total_objects',
        'result_available': 'result_available',
        'result_formats': 'result_formats'
    }

    def __init__(self, query_id=None, dataset_id=None, pipeline_name=None, first_table_alias='', query_str=None, query_json=None, status=None, source_type=None, is_internal=None, submitted_at=None, started_at=None, exec_duration=None, submitted_by=None, rows_processed=None, data_scanned=None, s3_result_size=None, status_message=None, s3_result_columns=None, s3_result_row_count=None, total_objects=None, result_available=None, result_formats=None, local_vars_configuration=None):  # noqa: E501
        """QueryResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._query_id = None
        self._dataset_id = None
        self._pipeline_name = None
        self._first_table_alias = None
        self._query_str = None
        self._query_json = None
        self._status = None
        self._source_type = None
        self._is_internal = None
        self._submitted_at = None
        self._started_at = None
        self._exec_duration = None
        self._submitted_by = None
        self._rows_processed = None
        self._data_scanned = None
        self._s3_result_size = None
        self._status_message = None
        self._s3_result_columns = None
        self._s3_result_row_count = None
        self._total_objects = None
        self._result_available = None
        self._result_formats = None
        self.discriminator = None

        self.query_id = query_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if first_table_alias is not None:
            self.first_table_alias = first_table_alias
        self.query_str = query_str
        self.query_json = query_json
        self.status = status
        self.source_type = source_type
        self.is_internal = is_internal
        self.submitted_at = submitted_at
        if started_at is not None:
            self.started_at = started_at
        if exec_duration is not None:
            self.exec_duration = exec_duration
        self.submitted_by = submitted_by
        if rows_processed is not None:
            self.rows_processed = rows_processed
        if data_scanned is not None:
            self.data_scanned = data_scanned
        if s3_result_size is not None:
            self.s3_result_size = s3_result_size
        if status_message is not None:
            self.status_message = status_message
        if s3_result_columns is not None:
            self.s3_result_columns = s3_result_columns
        if s3_result_row_count is not None:
            self.s3_result_row_count = s3_result_row_count
        if total_objects is not None:
            self.total_objects = total_objects
        if result_available is not None:
            self.result_available = result_available
        self.result_formats = result_formats

    @property
    def query_id(self):
        """Gets the query_id of this QueryResponse.  # noqa: E501


        :return: The query_id of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this QueryResponse.


        :param query_id: The query_id of this QueryResponse.  # noqa: E501
        :type query_id: str
        """
        if self.local_vars_configuration.client_side_validation and query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this QueryResponse.  # noqa: E501


        :return: The dataset_id of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this QueryResponse.


        :param dataset_id: The dataset_id of this QueryResponse.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this QueryResponse.  # noqa: E501


        :return: The pipeline_name of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this QueryResponse.


        :param pipeline_name: The pipeline_name of this QueryResponse.  # noqa: E501
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def first_table_alias(self):
        """Gets the first_table_alias of this QueryResponse.  # noqa: E501


        :return: The first_table_alias of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_table_alias

    @first_table_alias.setter
    def first_table_alias(self, first_table_alias):
        """Sets the first_table_alias of this QueryResponse.


        :param first_table_alias: The first_table_alias of this QueryResponse.  # noqa: E501
        :type first_table_alias: str
        """

        self._first_table_alias = first_table_alias

    @property
    def query_str(self):
        """Gets the query_str of this QueryResponse.  # noqa: E501


        :return: The query_str of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._query_str

    @query_str.setter
    def query_str(self, query_str):
        """Sets the query_str of this QueryResponse.


        :param query_str: The query_str of this QueryResponse.  # noqa: E501
        :type query_str: str
        """
        if self.local_vars_configuration.client_side_validation and query_str is None:  # noqa: E501
            raise ValueError("Invalid value for `query_str`, must not be `None`")  # noqa: E501

        self._query_str = query_str

    @property
    def query_json(self):
        """Gets the query_json of this QueryResponse.  # noqa: E501


        :return: The query_json of this QueryResponse.  # noqa: E501
        :rtype: object
        """
        return self._query_json

    @query_json.setter
    def query_json(self, query_json):
        """Sets the query_json of this QueryResponse.


        :param query_json: The query_json of this QueryResponse.  # noqa: E501
        :type query_json: object
        """
        if self.local_vars_configuration.client_side_validation and query_json is None:  # noqa: E501
            raise ValueError("Invalid value for `query_json`, must not be `None`")  # noqa: E501

        self._query_json = query_json

    @property
    def status(self):
        """Gets the status of this QueryResponse.  # noqa: E501


        :return: The status of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QueryResponse.


        :param status: The status of this QueryResponse.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def source_type(self):
        """Gets the source_type of this QueryResponse.  # noqa: E501


        :return: The source_type of this QueryResponse.  # noqa: E501
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this QueryResponse.


        :param source_type: The source_type of this QueryResponse.  # noqa: E501
        :type source_type: SourceType
        """
        if self.local_vars_configuration.client_side_validation and source_type is None:  # noqa: E501
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def is_internal(self):
        """Gets the is_internal of this QueryResponse.  # noqa: E501


        :return: The is_internal of this QueryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this QueryResponse.


        :param is_internal: The is_internal of this QueryResponse.  # noqa: E501
        :type is_internal: bool
        """
        if self.local_vars_configuration.client_side_validation and is_internal is None:  # noqa: E501
            raise ValueError("Invalid value for `is_internal`, must not be `None`")  # noqa: E501

        self._is_internal = is_internal

    @property
    def submitted_at(self):
        """Gets the submitted_at of this QueryResponse.  # noqa: E501


        :return: The submitted_at of this QueryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this QueryResponse.


        :param submitted_at: The submitted_at of this QueryResponse.  # noqa: E501
        :type submitted_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and submitted_at is None:  # noqa: E501
            raise ValueError("Invalid value for `submitted_at`, must not be `None`")  # noqa: E501

        self._submitted_at = submitted_at

    @property
    def started_at(self):
        """Gets the started_at of this QueryResponse.  # noqa: E501


        :return: The started_at of this QueryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this QueryResponse.


        :param started_at: The started_at of this QueryResponse.  # noqa: E501
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def exec_duration(self):
        """Gets the exec_duration of this QueryResponse.  # noqa: E501


        :return: The exec_duration of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._exec_duration

    @exec_duration.setter
    def exec_duration(self, exec_duration):
        """Sets the exec_duration of this QueryResponse.


        :param exec_duration: The exec_duration of this QueryResponse.  # noqa: E501
        :type exec_duration: int
        """

        self._exec_duration = exec_duration

    @property
    def submitted_by(self):
        """Gets the submitted_by of this QueryResponse.  # noqa: E501


        :return: The submitted_by of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this QueryResponse.


        :param submitted_by: The submitted_by of this QueryResponse.  # noqa: E501
        :type submitted_by: str
        """
        if self.local_vars_configuration.client_side_validation and submitted_by is None:  # noqa: E501
            raise ValueError("Invalid value for `submitted_by`, must not be `None`")  # noqa: E501

        self._submitted_by = submitted_by

    @property
    def rows_processed(self):
        """Gets the rows_processed of this QueryResponse.  # noqa: E501


        :return: The rows_processed of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._rows_processed

    @rows_processed.setter
    def rows_processed(self, rows_processed):
        """Sets the rows_processed of this QueryResponse.


        :param rows_processed: The rows_processed of this QueryResponse.  # noqa: E501
        :type rows_processed: int
        """

        self._rows_processed = rows_processed

    @property
    def data_scanned(self):
        """Gets the data_scanned of this QueryResponse.  # noqa: E501


        :return: The data_scanned of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._data_scanned

    @data_scanned.setter
    def data_scanned(self, data_scanned):
        """Sets the data_scanned of this QueryResponse.


        :param data_scanned: The data_scanned of this QueryResponse.  # noqa: E501
        :type data_scanned: int
        """

        self._data_scanned = data_scanned

    @property
    def s3_result_size(self):
        """Gets the s3_result_size of this QueryResponse.  # noqa: E501


        :return: The s3_result_size of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._s3_result_size

    @s3_result_size.setter
    def s3_result_size(self, s3_result_size):
        """Sets the s3_result_size of this QueryResponse.


        :param s3_result_size: The s3_result_size of this QueryResponse.  # noqa: E501
        :type s3_result_size: int
        """

        self._s3_result_size = s3_result_size

    @property
    def status_message(self):
        """Gets the status_message of this QueryResponse.  # noqa: E501


        :return: The status_message of this QueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this QueryResponse.


        :param status_message: The status_message of this QueryResponse.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def s3_result_columns(self):
        """Gets the s3_result_columns of this QueryResponse.  # noqa: E501


        :return: The s3_result_columns of this QueryResponse.  # noqa: E501
        :rtype: list[object]
        """
        return self._s3_result_columns

    @s3_result_columns.setter
    def s3_result_columns(self, s3_result_columns):
        """Sets the s3_result_columns of this QueryResponse.


        :param s3_result_columns: The s3_result_columns of this QueryResponse.  # noqa: E501
        :type s3_result_columns: list[object]
        """

        self._s3_result_columns = s3_result_columns

    @property
    def s3_result_row_count(self):
        """Gets the s3_result_row_count of this QueryResponse.  # noqa: E501


        :return: The s3_result_row_count of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._s3_result_row_count

    @s3_result_row_count.setter
    def s3_result_row_count(self, s3_result_row_count):
        """Sets the s3_result_row_count of this QueryResponse.


        :param s3_result_row_count: The s3_result_row_count of this QueryResponse.  # noqa: E501
        :type s3_result_row_count: int
        """

        self._s3_result_row_count = s3_result_row_count

    @property
    def total_objects(self):
        """Gets the total_objects of this QueryResponse.  # noqa: E501


        :return: The total_objects of this QueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_objects

    @total_objects.setter
    def total_objects(self, total_objects):
        """Sets the total_objects of this QueryResponse.


        :param total_objects: The total_objects of this QueryResponse.  # noqa: E501
        :type total_objects: int
        """

        self._total_objects = total_objects

    @property
    def result_available(self):
        """Gets the result_available of this QueryResponse.  # noqa: E501


        :return: The result_available of this QueryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._result_available

    @result_available.setter
    def result_available(self, result_available):
        """Sets the result_available of this QueryResponse.


        :param result_available: The result_available of this QueryResponse.  # noqa: E501
        :type result_available: bool
        """

        self._result_available = result_available

    @property
    def result_formats(self):
        """Gets the result_formats of this QueryResponse.  # noqa: E501


        :return: The result_formats of this QueryResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._result_formats

    @result_formats.setter
    def result_formats(self, result_formats):
        """Sets the result_formats of this QueryResponse.


        :param result_formats: The result_formats of this QueryResponse.  # noqa: E501
        :type result_formats: list[str]
        """
        if self.local_vars_configuration.client_side_validation and result_formats is None:  # noqa: E501
            raise ValueError("Invalid value for `result_formats`, must not be `None`")  # noqa: E501

        self._result_formats = result_formats

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryResponse):
            return True

        return self.to_dict() != other.to_dict()
