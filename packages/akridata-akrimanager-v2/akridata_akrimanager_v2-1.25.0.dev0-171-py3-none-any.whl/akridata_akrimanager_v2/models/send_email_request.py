# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SendEmailRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to_email': 'list[str]',
        'subject': 'str',
        'content': 'str',
        'tags': 'list[str]',
        'content_type': 'MimeType',
        'cc_email': 'str',
        'bcc_email': 'str'
    }

    attribute_map = {
        'to_email': 'to_email',
        'subject': 'subject',
        'content': 'content',
        'tags': 'tags',
        'content_type': 'content_type',
        'cc_email': 'cc_email',
        'bcc_email': 'bcc_email'
    }

    def __init__(self, to_email=None, subject=None, content=None, tags=None, content_type=None, cc_email=None, bcc_email=None, local_vars_configuration=None):  # noqa: E501
        """SendEmailRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._to_email = None
        self._subject = None
        self._content = None
        self._tags = None
        self._content_type = None
        self._cc_email = None
        self._bcc_email = None
        self.discriminator = None

        self.to_email = to_email
        self.subject = subject
        self.content = content
        self.tags = tags
        if content_type is not None:
            self.content_type = content_type
        if cc_email is not None:
            self.cc_email = cc_email
        if bcc_email is not None:
            self.bcc_email = bcc_email

    @property
    def to_email(self):
        """Gets the to_email of this SendEmailRequest.  # noqa: E501


        :return: The to_email of this SendEmailRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._to_email

    @to_email.setter
    def to_email(self, to_email):
        """Sets the to_email of this SendEmailRequest.


        :param to_email: The to_email of this SendEmailRequest.  # noqa: E501
        :type to_email: list[str]
        """
        if self.local_vars_configuration.client_side_validation and to_email is None:  # noqa: E501
            raise ValueError("Invalid value for `to_email`, must not be `None`")  # noqa: E501

        self._to_email = to_email

    @property
    def subject(self):
        """Gets the subject of this SendEmailRequest.  # noqa: E501


        :return: The subject of this SendEmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmailRequest.


        :param subject: The subject of this SendEmailRequest.  # noqa: E501
        :type subject: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def content(self):
        """Gets the content of this SendEmailRequest.  # noqa: E501


        :return: The content of this SendEmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendEmailRequest.


        :param content: The content of this SendEmailRequest.  # noqa: E501
        :type content: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def tags(self):
        """Gets the tags of this SendEmailRequest.  # noqa: E501


        :return: The tags of this SendEmailRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SendEmailRequest.


        :param tags: The tags of this SendEmailRequest.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def content_type(self):
        """Gets the content_type of this SendEmailRequest.  # noqa: E501


        :return: The content_type of this SendEmailRequest.  # noqa: E501
        :rtype: MimeType
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this SendEmailRequest.


        :param content_type: The content_type of this SendEmailRequest.  # noqa: E501
        :type content_type: MimeType
        """

        self._content_type = content_type

    @property
    def cc_email(self):
        """Gets the cc_email of this SendEmailRequest.  # noqa: E501


        :return: The cc_email of this SendEmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._cc_email

    @cc_email.setter
    def cc_email(self, cc_email):
        """Sets the cc_email of this SendEmailRequest.


        :param cc_email: The cc_email of this SendEmailRequest.  # noqa: E501
        :type cc_email: str
        """

        self._cc_email = cc_email

    @property
    def bcc_email(self):
        """Gets the bcc_email of this SendEmailRequest.  # noqa: E501


        :return: The bcc_email of this SendEmailRequest.  # noqa: E501
        :rtype: str
        """
        return self._bcc_email

    @bcc_email.setter
    def bcc_email(self, bcc_email):
        """Sets the bcc_email of this SendEmailRequest.


        :param bcc_email: The bcc_email of this SendEmailRequest.  # noqa: E501
        :type bcc_email: str
        """

        self._bcc_email = bcc_email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendEmailRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendEmailRequest):
            return True

        return self.to_dict() != other.to_dict()
