# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class FileInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_name': 'str',
        'file_id': 'str',
        'delimiter': 'str',
        'header_map': 'list[HeaderInfo]',
        'yolo_metadata': 'YOLOFileMetadata'
    }

    attribute_map = {
        'file_name': 'file_name',
        'file_id': 'file_id',
        'delimiter': 'delimiter',
        'header_map': 'header_map',
        'yolo_metadata': 'yolo_metadata'
    }

    def __init__(self, file_name=None, file_id=None, delimiter=None, header_map=None, yolo_metadata=None, local_vars_configuration=None):  # noqa: E501
        """FileInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._file_name = None
        self._file_id = None
        self._delimiter = None
        self._header_map = None
        self._yolo_metadata = None
        self.discriminator = None

        self.file_name = file_name
        self.file_id = file_id
        if delimiter is not None:
            self.delimiter = delimiter
        if header_map is not None:
            self.header_map = header_map
        if yolo_metadata is not None:
            self.yolo_metadata = yolo_metadata

    @property
    def file_name(self):
        """Gets the file_name of this FileInfo.  # noqa: E501


        :return: The file_name of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this FileInfo.


        :param file_name: The file_name of this FileInfo.  # noqa: E501
        :type file_name: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_id(self):
        """Gets the file_id of this FileInfo.  # noqa: E501


        :return: The file_id of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileInfo.


        :param file_id: The file_id of this FileInfo.  # noqa: E501
        :type file_id: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def delimiter(self):
        """Gets the delimiter of this FileInfo.  # noqa: E501


        :return: The delimiter of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this FileInfo.


        :param delimiter: The delimiter of this FileInfo.  # noqa: E501
        :type delimiter: str
        """

        self._delimiter = delimiter

    @property
    def header_map(self):
        """Gets the header_map of this FileInfo.  # noqa: E501


        :return: The header_map of this FileInfo.  # noqa: E501
        :rtype: list[HeaderInfo]
        """
        return self._header_map

    @header_map.setter
    def header_map(self, header_map):
        """Sets the header_map of this FileInfo.


        :param header_map: The header_map of this FileInfo.  # noqa: E501
        :type header_map: list[HeaderInfo]
        """

        self._header_map = header_map

    @property
    def yolo_metadata(self):
        """Gets the yolo_metadata of this FileInfo.  # noqa: E501


        :return: The yolo_metadata of this FileInfo.  # noqa: E501
        :rtype: YOLOFileMetadata
        """
        return self._yolo_metadata

    @yolo_metadata.setter
    def yolo_metadata(self, yolo_metadata):
        """Sets the yolo_metadata of this FileInfo.


        :param yolo_metadata: The yolo_metadata of this FileInfo.  # noqa: E501
        :type yolo_metadata: YOLOFileMetadata
        """

        self._yolo_metadata = yolo_metadata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileInfo):
            return True

        return self.to_dict() != other.to_dict()
