# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DockerRepositoryDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'url': 'str',
        'type': 'str',
        'access_type': 'DockerAccessType',
        'secret_key': 'str',
        'username': 'str',
        'password': 'str',
        'linked_images_count': 'int',
        'creation_date': 'datetime',
        'updated_at': 'datetime',
        'is_unregistered': 'bool',
        'is_editable': 'bool',
        'is_internal': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'url': 'url',
        'type': 'type',
        'access_type': 'access_type',
        'secret_key': 'secret_key',
        'username': 'username',
        'password': 'password',
        'linked_images_count': 'linked_images_count',
        'creation_date': 'creation_date',
        'updated_at': 'updated_at',
        'is_unregistered': 'is_unregistered',
        'is_editable': 'is_editable',
        'is_internal': 'is_internal'
    }

    def __init__(self, id=None, name=None, url=None, type=None, access_type=None, secret_key=None, username=None, password=None, linked_images_count=None, creation_date=None, updated_at=None, is_unregistered=None, is_editable=True, is_internal=False, local_vars_configuration=None):  # noqa: E501
        """DockerRepositoryDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._url = None
        self._type = None
        self._access_type = None
        self._secret_key = None
        self._username = None
        self._password = None
        self._linked_images_count = None
        self._creation_date = None
        self._updated_at = None
        self._is_unregistered = None
        self._is_editable = None
        self._is_internal = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.url = url
        self.type = type
        self.access_type = access_type
        if secret_key is not None:
            self.secret_key = secret_key
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        self.linked_images_count = linked_images_count
        self.creation_date = creation_date
        self.updated_at = updated_at
        self.is_unregistered = is_unregistered
        if is_editable is not None:
            self.is_editable = is_editable
        if is_internal is not None:
            self.is_internal = is_internal

    @property
    def id(self):
        """Gets the id of this DockerRepositoryDetails.  # noqa: E501


        :return: The id of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DockerRepositoryDetails.


        :param id: The id of this DockerRepositoryDetails.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DockerRepositoryDetails.  # noqa: E501


        :return: The name of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerRepositoryDetails.


        :param name: The name of this DockerRepositoryDetails.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this DockerRepositoryDetails.  # noqa: E501


        :return: The url of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DockerRepositoryDetails.


        :param url: The url of this DockerRepositoryDetails.  # noqa: E501
        :type url: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def type(self):
        """Gets the type of this DockerRepositoryDetails.  # noqa: E501


        :return: The type of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DockerRepositoryDetails.


        :param type: The type of this DockerRepositoryDetails.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def access_type(self):
        """Gets the access_type of this DockerRepositoryDetails.  # noqa: E501


        :return: The access_type of this DockerRepositoryDetails.  # noqa: E501
        :rtype: DockerAccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this DockerRepositoryDetails.


        :param access_type: The access_type of this DockerRepositoryDetails.  # noqa: E501
        :type access_type: DockerAccessType
        """
        if self.local_vars_configuration.client_side_validation and access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def secret_key(self):
        """Gets the secret_key of this DockerRepositoryDetails.  # noqa: E501


        :return: The secret_key of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this DockerRepositoryDetails.


        :param secret_key: The secret_key of this DockerRepositoryDetails.  # noqa: E501
        :type secret_key: str
        """

        self._secret_key = secret_key

    @property
    def username(self):
        """Gets the username of this DockerRepositoryDetails.  # noqa: E501


        :return: The username of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DockerRepositoryDetails.


        :param username: The username of this DockerRepositoryDetails.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this DockerRepositoryDetails.  # noqa: E501


        :return: The password of this DockerRepositoryDetails.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DockerRepositoryDetails.


        :param password: The password of this DockerRepositoryDetails.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def linked_images_count(self):
        """Gets the linked_images_count of this DockerRepositoryDetails.  # noqa: E501


        :return: The linked_images_count of this DockerRepositoryDetails.  # noqa: E501
        :rtype: int
        """
        return self._linked_images_count

    @linked_images_count.setter
    def linked_images_count(self, linked_images_count):
        """Sets the linked_images_count of this DockerRepositoryDetails.


        :param linked_images_count: The linked_images_count of this DockerRepositoryDetails.  # noqa: E501
        :type linked_images_count: int
        """
        if self.local_vars_configuration.client_side_validation and linked_images_count is None:  # noqa: E501
            raise ValueError("Invalid value for `linked_images_count`, must not be `None`")  # noqa: E501

        self._linked_images_count = linked_images_count

    @property
    def creation_date(self):
        """Gets the creation_date of this DockerRepositoryDetails.  # noqa: E501


        :return: The creation_date of this DockerRepositoryDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this DockerRepositoryDetails.


        :param creation_date: The creation_date of this DockerRepositoryDetails.  # noqa: E501
        :type creation_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and creation_date is None:  # noqa: E501
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def updated_at(self):
        """Gets the updated_at of this DockerRepositoryDetails.  # noqa: E501


        :return: The updated_at of this DockerRepositoryDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DockerRepositoryDetails.


        :param updated_at: The updated_at of this DockerRepositoryDetails.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def is_unregistered(self):
        """Gets the is_unregistered of this DockerRepositoryDetails.  # noqa: E501


        :return: The is_unregistered of this DockerRepositoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_unregistered

    @is_unregistered.setter
    def is_unregistered(self, is_unregistered):
        """Sets the is_unregistered of this DockerRepositoryDetails.


        :param is_unregistered: The is_unregistered of this DockerRepositoryDetails.  # noqa: E501
        :type is_unregistered: bool
        """
        if self.local_vars_configuration.client_side_validation and is_unregistered is None:  # noqa: E501
            raise ValueError("Invalid value for `is_unregistered`, must not be `None`")  # noqa: E501

        self._is_unregistered = is_unregistered

    @property
    def is_editable(self):
        """Gets the is_editable of this DockerRepositoryDetails.  # noqa: E501


        :return: The is_editable of this DockerRepositoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this DockerRepositoryDetails.


        :param is_editable: The is_editable of this DockerRepositoryDetails.  # noqa: E501
        :type is_editable: bool
        """

        self._is_editable = is_editable

    @property
    def is_internal(self):
        """Gets the is_internal of this DockerRepositoryDetails.  # noqa: E501


        :return: The is_internal of this DockerRepositoryDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this DockerRepositoryDetails.


        :param is_internal: The is_internal of this DockerRepositoryDetails.  # noqa: E501
        :type is_internal: bool
        """

        self._is_internal = is_internal

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerRepositoryDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerRepositoryDetails):
            return True

        return self.to_dict() != other.to_dict()
