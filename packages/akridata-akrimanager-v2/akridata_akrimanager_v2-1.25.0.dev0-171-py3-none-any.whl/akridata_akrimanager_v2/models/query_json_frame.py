# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class QueryJSONFrame(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'frame_idx_in_file': 'str',
        'file_name': 'str',
        'file_path': 'str',
        'frame_height': 'str',
        'frame_width': 'str',
        'ts_in_video': 'str',
        'native_fps': 'str',
        'attributes': 'list[object]',
        'frame_identifiers': 'FrameIdentifierColumns',
        'thumbnail_url': 'str',
        'high_res_url': 'str'
    }

    attribute_map = {
        'file_id': 'file_id',
        'frame_idx_in_file': 'frame_idx_in_file',
        'file_name': 'file_name',
        'file_path': 'file_path',
        'frame_height': 'frame_height',
        'frame_width': 'frame_width',
        'ts_in_video': 'ts_in_video',
        'native_fps': 'native_fps',
        'attributes': 'attributes',
        'frame_identifiers': 'frame_identifiers',
        'thumbnail_url': 'thumbnail_url',
        'high_res_url': 'high_res_url'
    }

    def __init__(self, file_id=None, frame_idx_in_file=None, file_name=None, file_path=None, frame_height=None, frame_width=None, ts_in_video=None, native_fps=None, attributes=[], frame_identifiers=None, thumbnail_url=None, high_res_url=None, local_vars_configuration=None):  # noqa: E501
        """QueryJSONFrame - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._frame_idx_in_file = None
        self._file_name = None
        self._file_path = None
        self._frame_height = None
        self._frame_width = None
        self._ts_in_video = None
        self._native_fps = None
        self._attributes = None
        self._frame_identifiers = None
        self._thumbnail_url = None
        self._high_res_url = None
        self.discriminator = None

        if file_id is not None:
            self.file_id = file_id
        if frame_idx_in_file is not None:
            self.frame_idx_in_file = frame_idx_in_file
        if file_name is not None:
            self.file_name = file_name
        if file_path is not None:
            self.file_path = file_path
        if frame_height is not None:
            self.frame_height = frame_height
        if frame_width is not None:
            self.frame_width = frame_width
        if ts_in_video is not None:
            self.ts_in_video = ts_in_video
        if native_fps is not None:
            self.native_fps = native_fps
        if attributes is not None:
            self.attributes = attributes
        if frame_identifiers is not None:
            self.frame_identifiers = frame_identifiers
        if thumbnail_url is not None:
            self.thumbnail_url = thumbnail_url
        if high_res_url is not None:
            self.high_res_url = high_res_url

    @property
    def file_id(self):
        """Gets the file_id of this QueryJSONFrame.  # noqa: E501


        :return: The file_id of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this QueryJSONFrame.


        :param file_id: The file_id of this QueryJSONFrame.  # noqa: E501
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def frame_idx_in_file(self):
        """Gets the frame_idx_in_file of this QueryJSONFrame.  # noqa: E501


        :return: The frame_idx_in_file of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._frame_idx_in_file

    @frame_idx_in_file.setter
    def frame_idx_in_file(self, frame_idx_in_file):
        """Sets the frame_idx_in_file of this QueryJSONFrame.


        :param frame_idx_in_file: The frame_idx_in_file of this QueryJSONFrame.  # noqa: E501
        :type frame_idx_in_file: str
        """

        self._frame_idx_in_file = frame_idx_in_file

    @property
    def file_name(self):
        """Gets the file_name of this QueryJSONFrame.  # noqa: E501


        :return: The file_name of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this QueryJSONFrame.


        :param file_name: The file_name of this QueryJSONFrame.  # noqa: E501
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def file_path(self):
        """Gets the file_path of this QueryJSONFrame.  # noqa: E501


        :return: The file_path of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this QueryJSONFrame.


        :param file_path: The file_path of this QueryJSONFrame.  # noqa: E501
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def frame_height(self):
        """Gets the frame_height of this QueryJSONFrame.  # noqa: E501


        :return: The frame_height of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._frame_height

    @frame_height.setter
    def frame_height(self, frame_height):
        """Sets the frame_height of this QueryJSONFrame.


        :param frame_height: The frame_height of this QueryJSONFrame.  # noqa: E501
        :type frame_height: str
        """

        self._frame_height = frame_height

    @property
    def frame_width(self):
        """Gets the frame_width of this QueryJSONFrame.  # noqa: E501


        :return: The frame_width of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._frame_width

    @frame_width.setter
    def frame_width(self, frame_width):
        """Sets the frame_width of this QueryJSONFrame.


        :param frame_width: The frame_width of this QueryJSONFrame.  # noqa: E501
        :type frame_width: str
        """

        self._frame_width = frame_width

    @property
    def ts_in_video(self):
        """Gets the ts_in_video of this QueryJSONFrame.  # noqa: E501


        :return: The ts_in_video of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._ts_in_video

    @ts_in_video.setter
    def ts_in_video(self, ts_in_video):
        """Sets the ts_in_video of this QueryJSONFrame.


        :param ts_in_video: The ts_in_video of this QueryJSONFrame.  # noqa: E501
        :type ts_in_video: str
        """

        self._ts_in_video = ts_in_video

    @property
    def native_fps(self):
        """Gets the native_fps of this QueryJSONFrame.  # noqa: E501


        :return: The native_fps of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._native_fps

    @native_fps.setter
    def native_fps(self, native_fps):
        """Sets the native_fps of this QueryJSONFrame.


        :param native_fps: The native_fps of this QueryJSONFrame.  # noqa: E501
        :type native_fps: str
        """

        self._native_fps = native_fps

    @property
    def attributes(self):
        """Gets the attributes of this QueryJSONFrame.  # noqa: E501


        :return: The attributes of this QueryJSONFrame.  # noqa: E501
        :rtype: list[object]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this QueryJSONFrame.


        :param attributes: The attributes of this QueryJSONFrame.  # noqa: E501
        :type attributes: list[object]
        """

        self._attributes = attributes

    @property
    def frame_identifiers(self):
        """Gets the frame_identifiers of this QueryJSONFrame.  # noqa: E501


        :return: The frame_identifiers of this QueryJSONFrame.  # noqa: E501
        :rtype: FrameIdentifierColumns
        """
        return self._frame_identifiers

    @frame_identifiers.setter
    def frame_identifiers(self, frame_identifiers):
        """Sets the frame_identifiers of this QueryJSONFrame.


        :param frame_identifiers: The frame_identifiers of this QueryJSONFrame.  # noqa: E501
        :type frame_identifiers: FrameIdentifierColumns
        """

        self._frame_identifiers = frame_identifiers

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this QueryJSONFrame.  # noqa: E501


        :return: The thumbnail_url of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this QueryJSONFrame.


        :param thumbnail_url: The thumbnail_url of this QueryJSONFrame.  # noqa: E501
        :type thumbnail_url: str
        """

        self._thumbnail_url = thumbnail_url

    @property
    def high_res_url(self):
        """Gets the high_res_url of this QueryJSONFrame.  # noqa: E501


        :return: The high_res_url of this QueryJSONFrame.  # noqa: E501
        :rtype: str
        """
        return self._high_res_url

    @high_res_url.setter
    def high_res_url(self, high_res_url):
        """Sets the high_res_url of this QueryJSONFrame.


        :param high_res_url: The high_res_url of this QueryJSONFrame.  # noqa: E501
        :type high_res_url: str
        """

        self._high_res_url = high_res_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryJSONFrame):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QueryJSONFrame):
            return True

        return self.to_dict() != other.to_dict()
