# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class StatManLine(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'line_id': 'str',
        'line_name': 'str',
        'line_description': 'str',
        'location_id': 'str',
        'manager_email': 'str',
        'line_created_at': 'datetime',
        'is_alert': 'bool',
        'kpi_alerts': 'list[KPIAlert]'
    }

    attribute_map = {
        'line_id': 'line_id',
        'line_name': 'line_name',
        'line_description': 'line_description',
        'location_id': 'location_id',
        'manager_email': 'manager_email',
        'line_created_at': 'line_created_at',
        'is_alert': 'is_alert',
        'kpi_alerts': 'kpi_alerts'
    }

    def __init__(self, line_id=None, line_name=None, line_description=None, location_id=None, manager_email=None, line_created_at=None, is_alert=None, kpi_alerts=None, local_vars_configuration=None):  # noqa: E501
        """StatManLine - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._line_id = None
        self._line_name = None
        self._line_description = None
        self._location_id = None
        self._manager_email = None
        self._line_created_at = None
        self._is_alert = None
        self._kpi_alerts = None
        self.discriminator = None

        self.line_id = line_id
        self.line_name = line_name
        self.line_description = line_description
        self.location_id = location_id
        if manager_email is not None:
            self.manager_email = manager_email
        if line_created_at is not None:
            self.line_created_at = line_created_at
        if is_alert is not None:
            self.is_alert = is_alert
        if kpi_alerts is not None:
            self.kpi_alerts = kpi_alerts

    @property
    def line_id(self):
        """Gets the line_id of this StatManLine.  # noqa: E501


        :return: The line_id of this StatManLine.  # noqa: E501
        :rtype: str
        """
        return self._line_id

    @line_id.setter
    def line_id(self, line_id):
        """Sets the line_id of this StatManLine.


        :param line_id: The line_id of this StatManLine.  # noqa: E501
        :type line_id: str
        """
        if self.local_vars_configuration.client_side_validation and line_id is None:  # noqa: E501
            raise ValueError("Invalid value for `line_id`, must not be `None`")  # noqa: E501

        self._line_id = line_id

    @property
    def line_name(self):
        """Gets the line_name of this StatManLine.  # noqa: E501


        :return: The line_name of this StatManLine.  # noqa: E501
        :rtype: str
        """
        return self._line_name

    @line_name.setter
    def line_name(self, line_name):
        """Sets the line_name of this StatManLine.


        :param line_name: The line_name of this StatManLine.  # noqa: E501
        :type line_name: str
        """
        if self.local_vars_configuration.client_side_validation and line_name is None:  # noqa: E501
            raise ValueError("Invalid value for `line_name`, must not be `None`")  # noqa: E501

        self._line_name = line_name

    @property
    def line_description(self):
        """Gets the line_description of this StatManLine.  # noqa: E501


        :return: The line_description of this StatManLine.  # noqa: E501
        :rtype: str
        """
        return self._line_description

    @line_description.setter
    def line_description(self, line_description):
        """Sets the line_description of this StatManLine.


        :param line_description: The line_description of this StatManLine.  # noqa: E501
        :type line_description: str
        """
        if self.local_vars_configuration.client_side_validation and line_description is None:  # noqa: E501
            raise ValueError("Invalid value for `line_description`, must not be `None`")  # noqa: E501

        self._line_description = line_description

    @property
    def location_id(self):
        """Gets the location_id of this StatManLine.  # noqa: E501


        :return: The location_id of this StatManLine.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this StatManLine.


        :param location_id: The location_id of this StatManLine.  # noqa: E501
        :type location_id: str
        """
        if self.local_vars_configuration.client_side_validation and location_id is None:  # noqa: E501
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def manager_email(self):
        """Gets the manager_email of this StatManLine.  # noqa: E501


        :return: The manager_email of this StatManLine.  # noqa: E501
        :rtype: str
        """
        return self._manager_email

    @manager_email.setter
    def manager_email(self, manager_email):
        """Sets the manager_email of this StatManLine.


        :param manager_email: The manager_email of this StatManLine.  # noqa: E501
        :type manager_email: str
        """

        self._manager_email = manager_email

    @property
    def line_created_at(self):
        """Gets the line_created_at of this StatManLine.  # noqa: E501


        :return: The line_created_at of this StatManLine.  # noqa: E501
        :rtype: datetime
        """
        return self._line_created_at

    @line_created_at.setter
    def line_created_at(self, line_created_at):
        """Sets the line_created_at of this StatManLine.


        :param line_created_at: The line_created_at of this StatManLine.  # noqa: E501
        :type line_created_at: datetime
        """

        self._line_created_at = line_created_at

    @property
    def is_alert(self):
        """Gets the is_alert of this StatManLine.  # noqa: E501


        :return: The is_alert of this StatManLine.  # noqa: E501
        :rtype: bool
        """
        return self._is_alert

    @is_alert.setter
    def is_alert(self, is_alert):
        """Sets the is_alert of this StatManLine.


        :param is_alert: The is_alert of this StatManLine.  # noqa: E501
        :type is_alert: bool
        """

        self._is_alert = is_alert

    @property
    def kpi_alerts(self):
        """Gets the kpi_alerts of this StatManLine.  # noqa: E501


        :return: The kpi_alerts of this StatManLine.  # noqa: E501
        :rtype: list[KPIAlert]
        """
        return self._kpi_alerts

    @kpi_alerts.setter
    def kpi_alerts(self, kpi_alerts):
        """Sets the kpi_alerts of this StatManLine.


        :param kpi_alerts: The kpi_alerts of this StatManLine.  # noqa: E501
        :type kpi_alerts: list[KPIAlert]
        """

        self._kpi_alerts = kpi_alerts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatManLine):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StatManLine):
            return True

        return self.to_dict() != other.to_dict()
