# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class Container(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace': 'str',
        'name': 'str',
        'url': 'str',
        'container_id': 'str',
        'latest_version': 'str',
        'versions': 'list[OpenapiServerDataSchemaContainersListContainerRespVersion]',
        'is_scratchpad': 'bool',
        'is_demo': 'bool'
    }

    attribute_map = {
        'namespace': 'namespace',
        'name': 'name',
        'url': 'url',
        'container_id': 'container_id',
        'latest_version': 'latest_version',
        'versions': 'versions',
        'is_scratchpad': 'is_scratchpad',
        'is_demo': 'is_demo'
    }

    def __init__(self, namespace=None, name=None, url=None, container_id=None, latest_version=None, versions=None, is_scratchpad=None, is_demo=False, local_vars_configuration=None):  # noqa: E501
        """Container - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._namespace = None
        self._name = None
        self._url = None
        self._container_id = None
        self._latest_version = None
        self._versions = None
        self._is_scratchpad = None
        self._is_demo = None
        self.discriminator = None

        self.namespace = namespace
        self.name = name
        if url is not None:
            self.url = url
        if container_id is not None:
            self.container_id = container_id
        self.latest_version = latest_version
        self.versions = versions
        if is_scratchpad is not None:
            self.is_scratchpad = is_scratchpad
        if is_demo is not None:
            self.is_demo = is_demo

    @property
    def namespace(self):
        """Gets the namespace of this Container.  # noqa: E501


        :return: The namespace of this Container.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this Container.


        :param namespace: The namespace of this Container.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def name(self):
        """Gets the name of this Container.  # noqa: E501


        :return: The name of this Container.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self):
        """Gets the url of this Container.  # noqa: E501


        :return: The url of this Container.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Container.


        :param url: The url of this Container.  # noqa: E501
        :type url: str
        """

        self._url = url

    @property
    def container_id(self):
        """Gets the container_id of this Container.  # noqa: E501


        :return: The container_id of this Container.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this Container.


        :param container_id: The container_id of this Container.  # noqa: E501
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def latest_version(self):
        """Gets the latest_version of this Container.  # noqa: E501


        :return: The latest_version of this Container.  # noqa: E501
        :rtype: str
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this Container.


        :param latest_version: The latest_version of this Container.  # noqa: E501
        :type latest_version: str
        """
        if self.local_vars_configuration.client_side_validation and latest_version is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_version`, must not be `None`")  # noqa: E501

        self._latest_version = latest_version

    @property
    def versions(self):
        """Gets the versions of this Container.  # noqa: E501


        :return: The versions of this Container.  # noqa: E501
        :rtype: list[OpenapiServerDataSchemaContainersListContainerRespVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this Container.


        :param versions: The versions of this Container.  # noqa: E501
        :type versions: list[OpenapiServerDataSchemaContainersListContainerRespVersion]
        """
        if self.local_vars_configuration.client_side_validation and versions is None:  # noqa: E501
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    @property
    def is_scratchpad(self):
        """Gets the is_scratchpad of this Container.  # noqa: E501


        :return: The is_scratchpad of this Container.  # noqa: E501
        :rtype: bool
        """
        return self._is_scratchpad

    @is_scratchpad.setter
    def is_scratchpad(self, is_scratchpad):
        """Sets the is_scratchpad of this Container.


        :param is_scratchpad: The is_scratchpad of this Container.  # noqa: E501
        :type is_scratchpad: bool
        """

        self._is_scratchpad = is_scratchpad

    @property
    def is_demo(self):
        """Gets the is_demo of this Container.  # noqa: E501


        :return: The is_demo of this Container.  # noqa: E501
        :rtype: bool
        """
        return self._is_demo

    @is_demo.setter
    def is_demo(self, is_demo):
        """Sets the is_demo of this Container.


        :param is_demo: The is_demo of this Container.  # noqa: E501
        :type is_demo: bool
        """

        self._is_demo = is_demo

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Container):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Container):
            return True

        return self.to_dict() != other.to_dict()
