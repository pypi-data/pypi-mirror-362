# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class Pipeline(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pipeline_id': 'str',
        'pipeline_name': 'str',
        'pipeline_type': 'str',
        'is_attached': 'bool',
        'is_supported': 'bool',
        'policy_details': 'AttachmentPolicyResp',
        'background_catalog_status': 'BCJobStatus',
        'pipeline_internal_id': 'int'
    }

    attribute_map = {
        'pipeline_id': 'pipeline_id',
        'pipeline_name': 'pipeline_name',
        'pipeline_type': 'pipeline_type',
        'is_attached': 'is_attached',
        'is_supported': 'is_supported',
        'policy_details': 'policy_details',
        'background_catalog_status': 'background_catalog_status',
        'pipeline_internal_id': 'pipeline_internal_id'
    }

    def __init__(self, pipeline_id=None, pipeline_name=None, pipeline_type=None, is_attached=None, is_supported=None, policy_details=None, background_catalog_status=None, pipeline_internal_id=0, local_vars_configuration=None):  # noqa: E501
        """Pipeline - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pipeline_id = None
        self._pipeline_name = None
        self._pipeline_type = None
        self._is_attached = None
        self._is_supported = None
        self._policy_details = None
        self._background_catalog_status = None
        self._pipeline_internal_id = None
        self.discriminator = None

        self.pipeline_id = pipeline_id
        self.pipeline_name = pipeline_name
        self.pipeline_type = pipeline_type
        self.is_attached = is_attached
        self.is_supported = is_supported
        self.policy_details = policy_details
        if background_catalog_status is not None:
            self.background_catalog_status = background_catalog_status
        if pipeline_internal_id is not None:
            self.pipeline_internal_id = pipeline_internal_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this Pipeline.  # noqa: E501


        :return: The pipeline_id of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this Pipeline.


        :param pipeline_id: The pipeline_id of this Pipeline.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this Pipeline.  # noqa: E501


        :return: The pipeline_name of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this Pipeline.


        :param pipeline_name: The pipeline_name of this Pipeline.  # noqa: E501
        :type pipeline_name: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_name is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this Pipeline.  # noqa: E501


        :return: The pipeline_type of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this Pipeline.


        :param pipeline_type: The pipeline_type of this Pipeline.  # noqa: E501
        :type pipeline_type: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_type is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_type`, must not be `None`")  # noqa: E501

        self._pipeline_type = pipeline_type

    @property
    def is_attached(self):
        """Gets the is_attached of this Pipeline.  # noqa: E501


        :return: The is_attached of this Pipeline.  # noqa: E501
        :rtype: bool
        """
        return self._is_attached

    @is_attached.setter
    def is_attached(self, is_attached):
        """Sets the is_attached of this Pipeline.


        :param is_attached: The is_attached of this Pipeline.  # noqa: E501
        :type is_attached: bool
        """
        if self.local_vars_configuration.client_side_validation and is_attached is None:  # noqa: E501
            raise ValueError("Invalid value for `is_attached`, must not be `None`")  # noqa: E501

        self._is_attached = is_attached

    @property
    def is_supported(self):
        """Gets the is_supported of this Pipeline.  # noqa: E501


        :return: The is_supported of this Pipeline.  # noqa: E501
        :rtype: bool
        """
        return self._is_supported

    @is_supported.setter
    def is_supported(self, is_supported):
        """Sets the is_supported of this Pipeline.


        :param is_supported: The is_supported of this Pipeline.  # noqa: E501
        :type is_supported: bool
        """
        if self.local_vars_configuration.client_side_validation and is_supported is None:  # noqa: E501
            raise ValueError("Invalid value for `is_supported`, must not be `None`")  # noqa: E501

        self._is_supported = is_supported

    @property
    def policy_details(self):
        """Gets the policy_details of this Pipeline.  # noqa: E501


        :return: The policy_details of this Pipeline.  # noqa: E501
        :rtype: AttachmentPolicyResp
        """
        return self._policy_details

    @policy_details.setter
    def policy_details(self, policy_details):
        """Sets the policy_details of this Pipeline.


        :param policy_details: The policy_details of this Pipeline.  # noqa: E501
        :type policy_details: AttachmentPolicyResp
        """
        if self.local_vars_configuration.client_side_validation and policy_details is None:  # noqa: E501
            raise ValueError("Invalid value for `policy_details`, must not be `None`")  # noqa: E501

        self._policy_details = policy_details

    @property
    def background_catalog_status(self):
        """Gets the background_catalog_status of this Pipeline.  # noqa: E501


        :return: The background_catalog_status of this Pipeline.  # noqa: E501
        :rtype: BCJobStatus
        """
        return self._background_catalog_status

    @background_catalog_status.setter
    def background_catalog_status(self, background_catalog_status):
        """Sets the background_catalog_status of this Pipeline.


        :param background_catalog_status: The background_catalog_status of this Pipeline.  # noqa: E501
        :type background_catalog_status: BCJobStatus
        """

        self._background_catalog_status = background_catalog_status

    @property
    def pipeline_internal_id(self):
        """Gets the pipeline_internal_id of this Pipeline.  # noqa: E501


        :return: The pipeline_internal_id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_internal_id

    @pipeline_internal_id.setter
    def pipeline_internal_id(self, pipeline_internal_id):
        """Sets the pipeline_internal_id of this Pipeline.


        :param pipeline_internal_id: The pipeline_internal_id of this Pipeline.  # noqa: E501
        :type pipeline_internal_id: int
        """

        self._pipeline_internal_id = pipeline_internal_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pipeline):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Pipeline):
            return True

        return self.to_dict() != other.to_dict()
