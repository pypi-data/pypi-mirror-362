# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'region': 'str',
        'etag_checksum_enable': 'bool',
        'server_side_encryption_algorithm': 'str',
        'credentials_provider': 'AWSCredentialsProvider',
        'sts_endpoint': 'str',
        'sts_region': 'str',
        'role_credential_provider': 'AWSRoleCredentialsProvider',
        'path_style_access': 'bool',
        'endpoint': 'str'
    }

    attribute_map = {
        'region': 'region',
        'etag_checksum_enable': 'etag_checksum_enable',
        'server_side_encryption_algorithm': 'server_side_encryption_algorithm',
        'credentials_provider': 'credentials_provider',
        'sts_endpoint': 'sts_endpoint',
        'sts_region': 'sts_region',
        'role_credential_provider': 'role_credential_provider',
        'path_style_access': 'path_style_access',
        'endpoint': 'endpoint'
    }

    def __init__(self, region=None, etag_checksum_enable=None, server_side_encryption_algorithm=None, credentials_provider=None, sts_endpoint=None, sts_region=None, role_credential_provider=None, path_style_access=None, endpoint=None, local_vars_configuration=None):  # noqa: E501
        """OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._region = None
        self._etag_checksum_enable = None
        self._server_side_encryption_algorithm = None
        self._credentials_provider = None
        self._sts_endpoint = None
        self._sts_region = None
        self._role_credential_provider = None
        self._path_style_access = None
        self._endpoint = None
        self.discriminator = None

        if region is not None:
            self.region = region
        if etag_checksum_enable is not None:
            self.etag_checksum_enable = etag_checksum_enable
        if server_side_encryption_algorithm is not None:
            self.server_side_encryption_algorithm = server_side_encryption_algorithm
        if credentials_provider is not None:
            self.credentials_provider = credentials_provider
        if sts_endpoint is not None:
            self.sts_endpoint = sts_endpoint
        if sts_region is not None:
            self.sts_region = sts_region
        if role_credential_provider is not None:
            self.role_credential_provider = role_credential_provider
        if path_style_access is not None:
            self.path_style_access = path_style_access
        if endpoint is not None:
            self.endpoint = endpoint

    @property
    def region(self):
        """Gets the region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param region: The region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type region: str
        """

        self._region = region

    @property
    def etag_checksum_enable(self):
        """Gets the etag_checksum_enable of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The etag_checksum_enable of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: bool
        """
        return self._etag_checksum_enable

    @etag_checksum_enable.setter
    def etag_checksum_enable(self, etag_checksum_enable):
        """Sets the etag_checksum_enable of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param etag_checksum_enable: The etag_checksum_enable of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type etag_checksum_enable: bool
        """

        self._etag_checksum_enable = etag_checksum_enable

    @property
    def server_side_encryption_algorithm(self):
        """Gets the server_side_encryption_algorithm of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The server_side_encryption_algorithm of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: str
        """
        return self._server_side_encryption_algorithm

    @server_side_encryption_algorithm.setter
    def server_side_encryption_algorithm(self, server_side_encryption_algorithm):
        """Sets the server_side_encryption_algorithm of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param server_side_encryption_algorithm: The server_side_encryption_algorithm of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type server_side_encryption_algorithm: str
        """

        self._server_side_encryption_algorithm = server_side_encryption_algorithm

    @property
    def credentials_provider(self):
        """Gets the credentials_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The credentials_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: AWSCredentialsProvider
        """
        return self._credentials_provider

    @credentials_provider.setter
    def credentials_provider(self, credentials_provider):
        """Sets the credentials_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param credentials_provider: The credentials_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type credentials_provider: AWSCredentialsProvider
        """

        self._credentials_provider = credentials_provider

    @property
    def sts_endpoint(self):
        """Gets the sts_endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The sts_endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: str
        """
        return self._sts_endpoint

    @sts_endpoint.setter
    def sts_endpoint(self, sts_endpoint):
        """Sets the sts_endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param sts_endpoint: The sts_endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type sts_endpoint: str
        """

        self._sts_endpoint = sts_endpoint

    @property
    def sts_region(self):
        """Gets the sts_region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The sts_region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: str
        """
        return self._sts_region

    @sts_region.setter
    def sts_region(self, sts_region):
        """Sets the sts_region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param sts_region: The sts_region of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type sts_region: str
        """

        self._sts_region = sts_region

    @property
    def role_credential_provider(self):
        """Gets the role_credential_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The role_credential_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: AWSRoleCredentialsProvider
        """
        return self._role_credential_provider

    @role_credential_provider.setter
    def role_credential_provider(self, role_credential_provider):
        """Sets the role_credential_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param role_credential_provider: The role_credential_provider of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type role_credential_provider: AWSRoleCredentialsProvider
        """

        self._role_credential_provider = role_credential_provider

    @property
    def path_style_access(self):
        """Gets the path_style_access of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The path_style_access of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: bool
        """
        return self._path_style_access

    @path_style_access.setter
    def path_style_access(self, path_style_access):
        """Sets the path_style_access of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param path_style_access: The path_style_access of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type path_style_access: bool
        """

        self._path_style_access = path_style_access

    @property
    def endpoint(self):
        """Gets the endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501


        :return: The endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.


        :param endpoint: The endpoint of this OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys.  # noqa: E501
        :type endpoint: str
        """

        self._endpoint = endpoint

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenapiServerDataSchemaContainersGetContainerRespAWSDataStoreKeys):
            return True

        return self.to_dict() != other.to_dict()
