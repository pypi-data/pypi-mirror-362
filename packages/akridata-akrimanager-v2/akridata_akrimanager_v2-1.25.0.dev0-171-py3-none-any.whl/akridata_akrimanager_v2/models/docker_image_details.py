# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class DockerImageDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'version': 'str',
        'image_name': 'str',
        'image_tag': 'str',
        'filter_type': 'str',
        'gpu_filter': 'bool',
        'gpu_mem_fraction': 'float',
        'allow_no_gpu': 'bool',
        'repository_id': 'str',
        'repository_name': 'str',
        'repository_url': 'str',
        'repository_type': 'str',
        'secret_key': 'str',
        'secret_type': 'str',
        'username': 'str',
        'password': 'str',
        'output_fields': 'list[OutputField]',
        'filter_properties': 'dict(str, str)',
        'output_port_properties': 'dict(str, object)',
        'command': 'str',
        'versions': 'list[DockerImageVersionItem]',
        'is_editable': 'bool',
        'is_internal': 'bool',
        'is_deprecated': 'bool',
        'description': 'str',
        'license_name': 'str',
        'license_url': 'str',
        'python_exec_info': 'PythonExecModifyDetails',
        'dpu_info': 'DockerImageDpuInfo',
        'with_metadata': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'version': 'version',
        'image_name': 'image_name',
        'image_tag': 'image_tag',
        'filter_type': 'filter_type',
        'gpu_filter': 'gpu_filter',
        'gpu_mem_fraction': 'gpu_mem_fraction',
        'allow_no_gpu': 'allow_no_gpu',
        'repository_id': 'repository_id',
        'repository_name': 'repository_name',
        'repository_url': 'repository_url',
        'repository_type': 'repository_type',
        'secret_key': 'secret_key',
        'secret_type': 'secret_type',
        'username': 'username',
        'password': 'password',
        'output_fields': 'output_fields',
        'filter_properties': 'filter_properties',
        'output_port_properties': 'output_port_properties',
        'command': 'command',
        'versions': 'versions',
        'is_editable': 'is_editable',
        'is_internal': 'is_internal',
        'is_deprecated': 'is_deprecated',
        'description': 'description',
        'license_name': 'license_name',
        'license_url': 'license_url',
        'python_exec_info': 'python_exec_info',
        'dpu_info': 'dpu_info',
        'with_metadata': 'with_metadata'
    }

    def __init__(self, id=None, name=None, namespace=None, version=None, image_name=None, image_tag=None, filter_type=None, gpu_filter=None, gpu_mem_fraction=None, allow_no_gpu=None, repository_id=None, repository_name=None, repository_url=None, repository_type=None, secret_key=None, secret_type=None, username=None, password=None, output_fields=None, filter_properties=None, output_port_properties=None, command=None, versions=None, is_editable=True, is_internal=False, is_deprecated=False, description=None, license_name=None, license_url=None, python_exec_info=None, dpu_info=None, with_metadata=None, local_vars_configuration=None):  # noqa: E501
        """DockerImageDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._namespace = None
        self._version = None
        self._image_name = None
        self._image_tag = None
        self._filter_type = None
        self._gpu_filter = None
        self._gpu_mem_fraction = None
        self._allow_no_gpu = None
        self._repository_id = None
        self._repository_name = None
        self._repository_url = None
        self._repository_type = None
        self._secret_key = None
        self._secret_type = None
        self._username = None
        self._password = None
        self._output_fields = None
        self._filter_properties = None
        self._output_port_properties = None
        self._command = None
        self._versions = None
        self._is_editable = None
        self._is_internal = None
        self._is_deprecated = None
        self._description = None
        self._license_name = None
        self._license_url = None
        self._python_exec_info = None
        self._dpu_info = None
        self._with_metadata = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.namespace = namespace
        self.version = version
        self.image_name = image_name
        self.image_tag = image_tag
        self.filter_type = filter_type
        self.gpu_filter = gpu_filter
        if gpu_mem_fraction is not None:
            self.gpu_mem_fraction = gpu_mem_fraction
        if allow_no_gpu is not None:
            self.allow_no_gpu = allow_no_gpu
        if repository_id is not None:
            self.repository_id = repository_id
        if repository_name is not None:
            self.repository_name = repository_name
        self.repository_url = repository_url
        self.repository_type = repository_type
        if secret_key is not None:
            self.secret_key = secret_key
        if secret_type is not None:
            self.secret_type = secret_type
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if output_fields is not None:
            self.output_fields = output_fields
        if filter_properties is not None:
            self.filter_properties = filter_properties
        if output_port_properties is not None:
            self.output_port_properties = output_port_properties
        if command is not None:
            self.command = command
        if versions is not None:
            self.versions = versions
        if is_editable is not None:
            self.is_editable = is_editable
        if is_internal is not None:
            self.is_internal = is_internal
        if is_deprecated is not None:
            self.is_deprecated = is_deprecated
        if description is not None:
            self.description = description
        if license_name is not None:
            self.license_name = license_name
        if license_url is not None:
            self.license_url = license_url
        if python_exec_info is not None:
            self.python_exec_info = python_exec_info
        if dpu_info is not None:
            self.dpu_info = dpu_info
        if with_metadata is not None:
            self.with_metadata = with_metadata

    @property
    def id(self):
        """Gets the id of this DockerImageDetails.  # noqa: E501


        :return: The id of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DockerImageDetails.


        :param id: The id of this DockerImageDetails.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DockerImageDetails.  # noqa: E501


        :return: The name of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DockerImageDetails.


        :param name: The name of this DockerImageDetails.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this DockerImageDetails.  # noqa: E501


        :return: The namespace of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DockerImageDetails.


        :param namespace: The namespace of this DockerImageDetails.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def version(self):
        """Gets the version of this DockerImageDetails.  # noqa: E501


        :return: The version of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DockerImageDetails.


        :param version: The version of this DockerImageDetails.  # noqa: E501
        :type version: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def image_name(self):
        """Gets the image_name of this DockerImageDetails.  # noqa: E501


        :return: The image_name of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this DockerImageDetails.


        :param image_name: The image_name of this DockerImageDetails.  # noqa: E501
        :type image_name: str
        """
        if self.local_vars_configuration.client_side_validation and image_name is None:  # noqa: E501
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    @property
    def image_tag(self):
        """Gets the image_tag of this DockerImageDetails.  # noqa: E501


        :return: The image_tag of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._image_tag

    @image_tag.setter
    def image_tag(self, image_tag):
        """Sets the image_tag of this DockerImageDetails.


        :param image_tag: The image_tag of this DockerImageDetails.  # noqa: E501
        :type image_tag: str
        """
        if self.local_vars_configuration.client_side_validation and image_tag is None:  # noqa: E501
            raise ValueError("Invalid value for `image_tag`, must not be `None`")  # noqa: E501

        self._image_tag = image_tag

    @property
    def filter_type(self):
        """Gets the filter_type of this DockerImageDetails.  # noqa: E501


        :return: The filter_type of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this DockerImageDetails.


        :param filter_type: The filter_type of this DockerImageDetails.  # noqa: E501
        :type filter_type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501

        self._filter_type = filter_type

    @property
    def gpu_filter(self):
        """Gets the gpu_filter of this DockerImageDetails.  # noqa: E501


        :return: The gpu_filter of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._gpu_filter

    @gpu_filter.setter
    def gpu_filter(self, gpu_filter):
        """Sets the gpu_filter of this DockerImageDetails.


        :param gpu_filter: The gpu_filter of this DockerImageDetails.  # noqa: E501
        :type gpu_filter: bool
        """
        if self.local_vars_configuration.client_side_validation and gpu_filter is None:  # noqa: E501
            raise ValueError("Invalid value for `gpu_filter`, must not be `None`")  # noqa: E501

        self._gpu_filter = gpu_filter

    @property
    def gpu_mem_fraction(self):
        """Gets the gpu_mem_fraction of this DockerImageDetails.  # noqa: E501


        :return: The gpu_mem_fraction of this DockerImageDetails.  # noqa: E501
        :rtype: float
        """
        return self._gpu_mem_fraction

    @gpu_mem_fraction.setter
    def gpu_mem_fraction(self, gpu_mem_fraction):
        """Sets the gpu_mem_fraction of this DockerImageDetails.


        :param gpu_mem_fraction: The gpu_mem_fraction of this DockerImageDetails.  # noqa: E501
        :type gpu_mem_fraction: float
        """

        self._gpu_mem_fraction = gpu_mem_fraction

    @property
    def allow_no_gpu(self):
        """Gets the allow_no_gpu of this DockerImageDetails.  # noqa: E501


        :return: The allow_no_gpu of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._allow_no_gpu

    @allow_no_gpu.setter
    def allow_no_gpu(self, allow_no_gpu):
        """Sets the allow_no_gpu of this DockerImageDetails.


        :param allow_no_gpu: The allow_no_gpu of this DockerImageDetails.  # noqa: E501
        :type allow_no_gpu: bool
        """

        self._allow_no_gpu = allow_no_gpu

    @property
    def repository_id(self):
        """Gets the repository_id of this DockerImageDetails.  # noqa: E501


        :return: The repository_id of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this DockerImageDetails.


        :param repository_id: The repository_id of this DockerImageDetails.  # noqa: E501
        :type repository_id: str
        """

        self._repository_id = repository_id

    @property
    def repository_name(self):
        """Gets the repository_name of this DockerImageDetails.  # noqa: E501


        :return: The repository_name of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this DockerImageDetails.


        :param repository_name: The repository_name of this DockerImageDetails.  # noqa: E501
        :type repository_name: str
        """

        self._repository_name = repository_name

    @property
    def repository_url(self):
        """Gets the repository_url of this DockerImageDetails.  # noqa: E501


        :return: The repository_url of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """Sets the repository_url of this DockerImageDetails.


        :param repository_url: The repository_url of this DockerImageDetails.  # noqa: E501
        :type repository_url: str
        """
        if self.local_vars_configuration.client_side_validation and repository_url is None:  # noqa: E501
            raise ValueError("Invalid value for `repository_url`, must not be `None`")  # noqa: E501

        self._repository_url = repository_url

    @property
    def repository_type(self):
        """Gets the repository_type of this DockerImageDetails.  # noqa: E501


        :return: The repository_type of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this DockerImageDetails.


        :param repository_type: The repository_type of this DockerImageDetails.  # noqa: E501
        :type repository_type: str
        """
        if self.local_vars_configuration.client_side_validation and repository_type is None:  # noqa: E501
            raise ValueError("Invalid value for `repository_type`, must not be `None`")  # noqa: E501

        self._repository_type = repository_type

    @property
    def secret_key(self):
        """Gets the secret_key of this DockerImageDetails.  # noqa: E501


        :return: The secret_key of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this DockerImageDetails.


        :param secret_key: The secret_key of this DockerImageDetails.  # noqa: E501
        :type secret_key: str
        """

        self._secret_key = secret_key

    @property
    def secret_type(self):
        """Gets the secret_type of this DockerImageDetails.  # noqa: E501


        :return: The secret_type of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._secret_type

    @secret_type.setter
    def secret_type(self, secret_type):
        """Sets the secret_type of this DockerImageDetails.


        :param secret_type: The secret_type of this DockerImageDetails.  # noqa: E501
        :type secret_type: str
        """

        self._secret_type = secret_type

    @property
    def username(self):
        """Gets the username of this DockerImageDetails.  # noqa: E501


        :return: The username of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DockerImageDetails.


        :param username: The username of this DockerImageDetails.  # noqa: E501
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this DockerImageDetails.  # noqa: E501


        :return: The password of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DockerImageDetails.


        :param password: The password of this DockerImageDetails.  # noqa: E501
        :type password: str
        """

        self._password = password

    @property
    def output_fields(self):
        """Gets the output_fields of this DockerImageDetails.  # noqa: E501


        :return: The output_fields of this DockerImageDetails.  # noqa: E501
        :rtype: list[OutputField]
        """
        return self._output_fields

    @output_fields.setter
    def output_fields(self, output_fields):
        """Sets the output_fields of this DockerImageDetails.


        :param output_fields: The output_fields of this DockerImageDetails.  # noqa: E501
        :type output_fields: list[OutputField]
        """

        self._output_fields = output_fields

    @property
    def filter_properties(self):
        """Gets the filter_properties of this DockerImageDetails.  # noqa: E501


        :return: The filter_properties of this DockerImageDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._filter_properties

    @filter_properties.setter
    def filter_properties(self, filter_properties):
        """Sets the filter_properties of this DockerImageDetails.


        :param filter_properties: The filter_properties of this DockerImageDetails.  # noqa: E501
        :type filter_properties: dict(str, str)
        """

        self._filter_properties = filter_properties

    @property
    def output_port_properties(self):
        """Gets the output_port_properties of this DockerImageDetails.  # noqa: E501


        :return: The output_port_properties of this DockerImageDetails.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._output_port_properties

    @output_port_properties.setter
    def output_port_properties(self, output_port_properties):
        """Sets the output_port_properties of this DockerImageDetails.


        :param output_port_properties: The output_port_properties of this DockerImageDetails.  # noqa: E501
        :type output_port_properties: dict(str, object)
        """

        self._output_port_properties = output_port_properties

    @property
    def command(self):
        """Gets the command of this DockerImageDetails.  # noqa: E501


        :return: The command of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DockerImageDetails.


        :param command: The command of this DockerImageDetails.  # noqa: E501
        :type command: str
        """

        self._command = command

    @property
    def versions(self):
        """Gets the versions of this DockerImageDetails.  # noqa: E501


        :return: The versions of this DockerImageDetails.  # noqa: E501
        :rtype: list[DockerImageVersionItem]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DockerImageDetails.


        :param versions: The versions of this DockerImageDetails.  # noqa: E501
        :type versions: list[DockerImageVersionItem]
        """

        self._versions = versions

    @property
    def is_editable(self):
        """Gets the is_editable of this DockerImageDetails.  # noqa: E501


        :return: The is_editable of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this DockerImageDetails.


        :param is_editable: The is_editable of this DockerImageDetails.  # noqa: E501
        :type is_editable: bool
        """

        self._is_editable = is_editable

    @property
    def is_internal(self):
        """Gets the is_internal of this DockerImageDetails.  # noqa: E501


        :return: The is_internal of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this DockerImageDetails.


        :param is_internal: The is_internal of this DockerImageDetails.  # noqa: E501
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this DockerImageDetails.  # noqa: E501


        :return: The is_deprecated of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this DockerImageDetails.


        :param is_deprecated: The is_deprecated of this DockerImageDetails.  # noqa: E501
        :type is_deprecated: bool
        """

        self._is_deprecated = is_deprecated

    @property
    def description(self):
        """Gets the description of this DockerImageDetails.  # noqa: E501


        :return: The description of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DockerImageDetails.


        :param description: The description of this DockerImageDetails.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def license_name(self):
        """Gets the license_name of this DockerImageDetails.  # noqa: E501


        :return: The license_name of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this DockerImageDetails.


        :param license_name: The license_name of this DockerImageDetails.  # noqa: E501
        :type license_name: str
        """

        self._license_name = license_name

    @property
    def license_url(self):
        """Gets the license_url of this DockerImageDetails.  # noqa: E501


        :return: The license_url of this DockerImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._license_url

    @license_url.setter
    def license_url(self, license_url):
        """Sets the license_url of this DockerImageDetails.


        :param license_url: The license_url of this DockerImageDetails.  # noqa: E501
        :type license_url: str
        """

        self._license_url = license_url

    @property
    def python_exec_info(self):
        """Gets the python_exec_info of this DockerImageDetails.  # noqa: E501


        :return: The python_exec_info of this DockerImageDetails.  # noqa: E501
        :rtype: PythonExecModifyDetails
        """
        return self._python_exec_info

    @python_exec_info.setter
    def python_exec_info(self, python_exec_info):
        """Sets the python_exec_info of this DockerImageDetails.


        :param python_exec_info: The python_exec_info of this DockerImageDetails.  # noqa: E501
        :type python_exec_info: PythonExecModifyDetails
        """

        self._python_exec_info = python_exec_info

    @property
    def dpu_info(self):
        """Gets the dpu_info of this DockerImageDetails.  # noqa: E501


        :return: The dpu_info of this DockerImageDetails.  # noqa: E501
        :rtype: DockerImageDpuInfo
        """
        return self._dpu_info

    @dpu_info.setter
    def dpu_info(self, dpu_info):
        """Sets the dpu_info of this DockerImageDetails.


        :param dpu_info: The dpu_info of this DockerImageDetails.  # noqa: E501
        :type dpu_info: DockerImageDpuInfo
        """

        self._dpu_info = dpu_info

    @property
    def with_metadata(self):
        """Gets the with_metadata of this DockerImageDetails.  # noqa: E501


        :return: The with_metadata of this DockerImageDetails.  # noqa: E501
        :rtype: bool
        """
        return self._with_metadata

    @with_metadata.setter
    def with_metadata(self, with_metadata):
        """Sets the with_metadata of this DockerImageDetails.


        :param with_metadata: The with_metadata of this DockerImageDetails.  # noqa: E501
        :type with_metadata: bool
        """

        self._with_metadata = with_metadata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DockerImageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DockerImageDetails):
            return True

        return self.to_dict() != other.to_dict()
