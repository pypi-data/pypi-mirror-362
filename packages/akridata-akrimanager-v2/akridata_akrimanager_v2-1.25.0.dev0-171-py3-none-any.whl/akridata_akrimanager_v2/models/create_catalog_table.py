# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class CreateCatalogTable(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'pipeline_id': 'str',
        'catalog_table': 'ExternalCatalogTable',
        'schema_provider': 'CatalogTableSchemaProvider',
        'import_data_format': 'CatalogTableImportDataFormat',
        'udts_info': 'list[UDTInfo]',
        'file_type': 'FileType',
        'task_type': 'TaskType',
        'add_identifier_column': 'bool',
        'import_feature_details': 'ImportFeatureDetails',
        'table_type': 'TableTypes',
        'is_internal': 'bool',
        'add_import_ts': 'bool',
        'status': 'EntityStatus'
    }

    attribute_map = {
        'dataset_id': 'dataset_id',
        'pipeline_id': 'pipeline_id',
        'catalog_table': 'catalog_table',
        'schema_provider': 'schema_provider',
        'import_data_format': 'import_data_format',
        'udts_info': 'udts_info',
        'file_type': 'file_type',
        'task_type': 'task_type',
        'add_identifier_column': 'add_identifier_column',
        'import_feature_details': 'import_feature_details',
        'table_type': 'table_type',
        'is_internal': 'is_internal',
        'add_import_ts': 'add_import_ts',
        'status': 'status'
    }

    def __init__(self, dataset_id=None, pipeline_id=None, catalog_table=None, schema_provider=None, import_data_format=None, udts_info=None, file_type=None, task_type=None, add_identifier_column=False, import_feature_details=None, table_type=None, is_internal=False, add_import_ts=False, status=None, local_vars_configuration=None):  # noqa: E501
        """CreateCatalogTable - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._pipeline_id = None
        self._catalog_table = None
        self._schema_provider = None
        self._import_data_format = None
        self._udts_info = None
        self._file_type = None
        self._task_type = None
        self._add_identifier_column = None
        self._import_feature_details = None
        self._table_type = None
        self._is_internal = None
        self._add_import_ts = None
        self._status = None
        self.discriminator = None

        self.dataset_id = dataset_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        self.catalog_table = catalog_table
        if schema_provider is not None:
            self.schema_provider = schema_provider
        if import_data_format is not None:
            self.import_data_format = import_data_format
        if udts_info is not None:
            self.udts_info = udts_info
        if file_type is not None:
            self.file_type = file_type
        if task_type is not None:
            self.task_type = task_type
        if add_identifier_column is not None:
            self.add_identifier_column = add_identifier_column
        if import_feature_details is not None:
            self.import_feature_details = import_feature_details
        if table_type is not None:
            self.table_type = table_type
        if is_internal is not None:
            self.is_internal = is_internal
        if add_import_ts is not None:
            self.add_import_ts = add_import_ts
        if status is not None:
            self.status = status

    @property
    def dataset_id(self):
        """Gets the dataset_id of this CreateCatalogTable.  # noqa: E501


        :return: The dataset_id of this CreateCatalogTable.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this CreateCatalogTable.


        :param dataset_id: The dataset_id of this CreateCatalogTable.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CreateCatalogTable.  # noqa: E501


        :return: The pipeline_id of this CreateCatalogTable.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CreateCatalogTable.


        :param pipeline_id: The pipeline_id of this CreateCatalogTable.  # noqa: E501
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    @property
    def catalog_table(self):
        """Gets the catalog_table of this CreateCatalogTable.  # noqa: E501


        :return: The catalog_table of this CreateCatalogTable.  # noqa: E501
        :rtype: ExternalCatalogTable
        """
        return self._catalog_table

    @catalog_table.setter
    def catalog_table(self, catalog_table):
        """Sets the catalog_table of this CreateCatalogTable.


        :param catalog_table: The catalog_table of this CreateCatalogTable.  # noqa: E501
        :type catalog_table: ExternalCatalogTable
        """
        if self.local_vars_configuration.client_side_validation and catalog_table is None:  # noqa: E501
            raise ValueError("Invalid value for `catalog_table`, must not be `None`")  # noqa: E501

        self._catalog_table = catalog_table

    @property
    def schema_provider(self):
        """Gets the schema_provider of this CreateCatalogTable.  # noqa: E501


        :return: The schema_provider of this CreateCatalogTable.  # noqa: E501
        :rtype: CatalogTableSchemaProvider
        """
        return self._schema_provider

    @schema_provider.setter
    def schema_provider(self, schema_provider):
        """Sets the schema_provider of this CreateCatalogTable.


        :param schema_provider: The schema_provider of this CreateCatalogTable.  # noqa: E501
        :type schema_provider: CatalogTableSchemaProvider
        """

        self._schema_provider = schema_provider

    @property
    def import_data_format(self):
        """Gets the import_data_format of this CreateCatalogTable.  # noqa: E501


        :return: The import_data_format of this CreateCatalogTable.  # noqa: E501
        :rtype: CatalogTableImportDataFormat
        """
        return self._import_data_format

    @import_data_format.setter
    def import_data_format(self, import_data_format):
        """Sets the import_data_format of this CreateCatalogTable.


        :param import_data_format: The import_data_format of this CreateCatalogTable.  # noqa: E501
        :type import_data_format: CatalogTableImportDataFormat
        """

        self._import_data_format = import_data_format

    @property
    def udts_info(self):
        """Gets the udts_info of this CreateCatalogTable.  # noqa: E501


        :return: The udts_info of this CreateCatalogTable.  # noqa: E501
        :rtype: list[UDTInfo]
        """
        return self._udts_info

    @udts_info.setter
    def udts_info(self, udts_info):
        """Sets the udts_info of this CreateCatalogTable.


        :param udts_info: The udts_info of this CreateCatalogTable.  # noqa: E501
        :type udts_info: list[UDTInfo]
        """

        self._udts_info = udts_info

    @property
    def file_type(self):
        """Gets the file_type of this CreateCatalogTable.  # noqa: E501


        :return: The file_type of this CreateCatalogTable.  # noqa: E501
        :rtype: FileType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this CreateCatalogTable.


        :param file_type: The file_type of this CreateCatalogTable.  # noqa: E501
        :type file_type: FileType
        """

        self._file_type = file_type

    @property
    def task_type(self):
        """Gets the task_type of this CreateCatalogTable.  # noqa: E501


        :return: The task_type of this CreateCatalogTable.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CreateCatalogTable.


        :param task_type: The task_type of this CreateCatalogTable.  # noqa: E501
        :type task_type: TaskType
        """

        self._task_type = task_type

    @property
    def add_identifier_column(self):
        """Gets the add_identifier_column of this CreateCatalogTable.  # noqa: E501


        :return: The add_identifier_column of this CreateCatalogTable.  # noqa: E501
        :rtype: bool
        """
        return self._add_identifier_column

    @add_identifier_column.setter
    def add_identifier_column(self, add_identifier_column):
        """Sets the add_identifier_column of this CreateCatalogTable.


        :param add_identifier_column: The add_identifier_column of this CreateCatalogTable.  # noqa: E501
        :type add_identifier_column: bool
        """

        self._add_identifier_column = add_identifier_column

    @property
    def import_feature_details(self):
        """Gets the import_feature_details of this CreateCatalogTable.  # noqa: E501


        :return: The import_feature_details of this CreateCatalogTable.  # noqa: E501
        :rtype: ImportFeatureDetails
        """
        return self._import_feature_details

    @import_feature_details.setter
    def import_feature_details(self, import_feature_details):
        """Sets the import_feature_details of this CreateCatalogTable.


        :param import_feature_details: The import_feature_details of this CreateCatalogTable.  # noqa: E501
        :type import_feature_details: ImportFeatureDetails
        """

        self._import_feature_details = import_feature_details

    @property
    def table_type(self):
        """Gets the table_type of this CreateCatalogTable.  # noqa: E501


        :return: The table_type of this CreateCatalogTable.  # noqa: E501
        :rtype: TableTypes
        """
        return self._table_type

    @table_type.setter
    def table_type(self, table_type):
        """Sets the table_type of this CreateCatalogTable.


        :param table_type: The table_type of this CreateCatalogTable.  # noqa: E501
        :type table_type: TableTypes
        """

        self._table_type = table_type

    @property
    def is_internal(self):
        """Gets the is_internal of this CreateCatalogTable.  # noqa: E501


        :return: The is_internal of this CreateCatalogTable.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal

    @is_internal.setter
    def is_internal(self, is_internal):
        """Sets the is_internal of this CreateCatalogTable.


        :param is_internal: The is_internal of this CreateCatalogTable.  # noqa: E501
        :type is_internal: bool
        """

        self._is_internal = is_internal

    @property
    def add_import_ts(self):
        """Gets the add_import_ts of this CreateCatalogTable.  # noqa: E501


        :return: The add_import_ts of this CreateCatalogTable.  # noqa: E501
        :rtype: bool
        """
        return self._add_import_ts

    @add_import_ts.setter
    def add_import_ts(self, add_import_ts):
        """Sets the add_import_ts of this CreateCatalogTable.


        :param add_import_ts: The add_import_ts of this CreateCatalogTable.  # noqa: E501
        :type add_import_ts: bool
        """

        self._add_import_ts = add_import_ts

    @property
    def status(self):
        """Gets the status of this CreateCatalogTable.  # noqa: E501


        :return: The status of this CreateCatalogTable.  # noqa: E501
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateCatalogTable.


        :param status: The status of this CreateCatalogTable.  # noqa: E501
        :type status: EntityStatus
        """

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCatalogTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCatalogTable):
            return True

        return self.to_dict() != other.to_dict()
