# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SubscriptionUsageUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_id': 'str',
        'operation': 'UpdateOperation',
        'quantity': 'float'
    }

    attribute_map = {
        'event_id': 'event_id',
        'operation': 'operation',
        'quantity': 'quantity'
    }

    def __init__(self, event_id=None, operation=None, quantity=None, local_vars_configuration=None):  # noqa: E501
        """SubscriptionUsageUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._event_id = None
        self._operation = None
        self._quantity = None
        self.discriminator = None

        self.event_id = event_id
        self.operation = operation
        self.quantity = quantity

    @property
    def event_id(self):
        """Gets the event_id of this SubscriptionUsageUpdate.  # noqa: E501


        :return: The event_id of this SubscriptionUsageUpdate.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this SubscriptionUsageUpdate.


        :param event_id: The event_id of this SubscriptionUsageUpdate.  # noqa: E501
        :type event_id: str
        """
        if self.local_vars_configuration.client_side_validation and event_id is None:  # noqa: E501
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def operation(self):
        """Gets the operation of this SubscriptionUsageUpdate.  # noqa: E501


        :return: The operation of this SubscriptionUsageUpdate.  # noqa: E501
        :rtype: UpdateOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SubscriptionUsageUpdate.


        :param operation: The operation of this SubscriptionUsageUpdate.  # noqa: E501
        :type operation: UpdateOperation
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def quantity(self):
        """Gets the quantity of this SubscriptionUsageUpdate.  # noqa: E501


        :return: The quantity of this SubscriptionUsageUpdate.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubscriptionUsageUpdate.


        :param quantity: The quantity of this SubscriptionUsageUpdate.  # noqa: E501
        :type quantity: float
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionUsageUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionUsageUpdate):
            return True

        return self.to_dict() != other.to_dict()
