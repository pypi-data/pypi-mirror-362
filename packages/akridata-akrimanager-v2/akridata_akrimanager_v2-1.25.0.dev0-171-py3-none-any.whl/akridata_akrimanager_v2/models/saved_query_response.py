# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class SavedQueryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'saved_query_id': 'str',
        'dataset_id': 'str',
        'name': 'str',
        'description': 'str',
        'query_json': 'object',
        'source_type': 'SourceType',
        'created_by': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'saved_query_id': 'saved_query_id',
        'dataset_id': 'dataset_id',
        'name': 'name',
        'description': 'description',
        'query_json': 'query_json',
        'source_type': 'source_type',
        'created_by': 'created_by',
        'created_at': 'created_at'
    }

    def __init__(self, saved_query_id=None, dataset_id=None, name=None, description=None, query_json=None, source_type=None, created_by=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """SavedQueryResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._saved_query_id = None
        self._dataset_id = None
        self._name = None
        self._description = None
        self._query_json = None
        self._source_type = None
        self._created_by = None
        self._created_at = None
        self.discriminator = None

        self.saved_query_id = saved_query_id
        if dataset_id is not None:
            self.dataset_id = dataset_id
        self.name = name
        if description is not None:
            self.description = description
        self.query_json = query_json
        self.source_type = source_type
        self.created_by = created_by
        self.created_at = created_at

    @property
    def saved_query_id(self):
        """Gets the saved_query_id of this SavedQueryResponse.  # noqa: E501


        :return: The saved_query_id of this SavedQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._saved_query_id

    @saved_query_id.setter
    def saved_query_id(self, saved_query_id):
        """Sets the saved_query_id of this SavedQueryResponse.


        :param saved_query_id: The saved_query_id of this SavedQueryResponse.  # noqa: E501
        :type saved_query_id: str
        """
        if self.local_vars_configuration.client_side_validation and saved_query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `saved_query_id`, must not be `None`")  # noqa: E501

        self._saved_query_id = saved_query_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SavedQueryResponse.  # noqa: E501


        :return: The dataset_id of this SavedQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SavedQueryResponse.


        :param dataset_id: The dataset_id of this SavedQueryResponse.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def name(self):
        """Gets the name of this SavedQueryResponse.  # noqa: E501


        :return: The name of this SavedQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SavedQueryResponse.


        :param name: The name of this SavedQueryResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SavedQueryResponse.  # noqa: E501


        :return: The description of this SavedQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SavedQueryResponse.


        :param description: The description of this SavedQueryResponse.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def query_json(self):
        """Gets the query_json of this SavedQueryResponse.  # noqa: E501


        :return: The query_json of this SavedQueryResponse.  # noqa: E501
        :rtype: object
        """
        return self._query_json

    @query_json.setter
    def query_json(self, query_json):
        """Sets the query_json of this SavedQueryResponse.


        :param query_json: The query_json of this SavedQueryResponse.  # noqa: E501
        :type query_json: object
        """
        if self.local_vars_configuration.client_side_validation and query_json is None:  # noqa: E501
            raise ValueError("Invalid value for `query_json`, must not be `None`")  # noqa: E501

        self._query_json = query_json

    @property
    def source_type(self):
        """Gets the source_type of this SavedQueryResponse.  # noqa: E501


        :return: The source_type of this SavedQueryResponse.  # noqa: E501
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this SavedQueryResponse.


        :param source_type: The source_type of this SavedQueryResponse.  # noqa: E501
        :type source_type: SourceType
        """
        if self.local_vars_configuration.client_side_validation and source_type is None:  # noqa: E501
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def created_by(self):
        """Gets the created_by of this SavedQueryResponse.  # noqa: E501


        :return: The created_by of this SavedQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SavedQueryResponse.


        :param created_by: The created_by of this SavedQueryResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this SavedQueryResponse.  # noqa: E501


        :return: The created_at of this SavedQueryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SavedQueryResponse.


        :param created_at: The created_at of this SavedQueryResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SavedQueryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SavedQueryResponse):
            return True

        return self.to_dict() != other.to_dict()
