# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_akrimanager_v2.configuration import Configuration


class EditViewRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_name': 'str',
        'description': 'str',
        'table_info': 'list[list[QMSTableInfo]]',
        'udfs_info': 'list[ViewUDFInfo]',
        'projections_info': 'list[ProjectionInfo]',
        'task_type': 'TaskType',
        'is_default': 'bool',
        'join_type': 'ViewJoinType',
        'status': 'EntityStatus'
    }

    attribute_map = {
        'view_name': 'view_name',
        'description': 'description',
        'table_info': 'table_info',
        'udfs_info': 'udfs_info',
        'projections_info': 'projections_info',
        'task_type': 'task_type',
        'is_default': 'is_default',
        'join_type': 'join_type',
        'status': 'status'
    }

    def __init__(self, view_name=None, description=None, table_info=None, udfs_info=None, projections_info=None, task_type=None, is_default=False, join_type=None, status=None, local_vars_configuration=None):  # noqa: E501
        """EditViewRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._view_name = None
        self._description = None
        self._table_info = None
        self._udfs_info = None
        self._projections_info = None
        self._task_type = None
        self._is_default = None
        self._join_type = None
        self._status = None
        self.discriminator = None

        self.view_name = view_name
        self.description = description
        self.table_info = table_info
        if udfs_info is not None:
            self.udfs_info = udfs_info
        if projections_info is not None:
            self.projections_info = projections_info
        if task_type is not None:
            self.task_type = task_type
        if is_default is not None:
            self.is_default = is_default
        if join_type is not None:
            self.join_type = join_type
        if status is not None:
            self.status = status

    @property
    def view_name(self):
        """Gets the view_name of this EditViewRequest.  # noqa: E501


        :return: The view_name of this EditViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this EditViewRequest.


        :param view_name: The view_name of this EditViewRequest.  # noqa: E501
        :type view_name: str
        """
        if self.local_vars_configuration.client_side_validation and view_name is None:  # noqa: E501
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def description(self):
        """Gets the description of this EditViewRequest.  # noqa: E501


        :return: The description of this EditViewRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditViewRequest.


        :param description: The description of this EditViewRequest.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def table_info(self):
        """Gets the table_info of this EditViewRequest.  # noqa: E501


        :return: The table_info of this EditViewRequest.  # noqa: E501
        :rtype: list[list[QMSTableInfo]]
        """
        return self._table_info

    @table_info.setter
    def table_info(self, table_info):
        """Sets the table_info of this EditViewRequest.


        :param table_info: The table_info of this EditViewRequest.  # noqa: E501
        :type table_info: list[list[QMSTableInfo]]
        """
        if self.local_vars_configuration.client_side_validation and table_info is None:  # noqa: E501
            raise ValueError("Invalid value for `table_info`, must not be `None`")  # noqa: E501

        self._table_info = table_info

    @property
    def udfs_info(self):
        """Gets the udfs_info of this EditViewRequest.  # noqa: E501


        :return: The udfs_info of this EditViewRequest.  # noqa: E501
        :rtype: list[ViewUDFInfo]
        """
        return self._udfs_info

    @udfs_info.setter
    def udfs_info(self, udfs_info):
        """Sets the udfs_info of this EditViewRequest.


        :param udfs_info: The udfs_info of this EditViewRequest.  # noqa: E501
        :type udfs_info: list[ViewUDFInfo]
        """

        self._udfs_info = udfs_info

    @property
    def projections_info(self):
        """Gets the projections_info of this EditViewRequest.  # noqa: E501


        :return: The projections_info of this EditViewRequest.  # noqa: E501
        :rtype: list[ProjectionInfo]
        """
        return self._projections_info

    @projections_info.setter
    def projections_info(self, projections_info):
        """Sets the projections_info of this EditViewRequest.


        :param projections_info: The projections_info of this EditViewRequest.  # noqa: E501
        :type projections_info: list[ProjectionInfo]
        """

        self._projections_info = projections_info

    @property
    def task_type(self):
        """Gets the task_type of this EditViewRequest.  # noqa: E501


        :return: The task_type of this EditViewRequest.  # noqa: E501
        :rtype: TaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this EditViewRequest.


        :param task_type: The task_type of this EditViewRequest.  # noqa: E501
        :type task_type: TaskType
        """

        self._task_type = task_type

    @property
    def is_default(self):
        """Gets the is_default of this EditViewRequest.  # noqa: E501


        :return: The is_default of this EditViewRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this EditViewRequest.


        :param is_default: The is_default of this EditViewRequest.  # noqa: E501
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def join_type(self):
        """Gets the join_type of this EditViewRequest.  # noqa: E501


        :return: The join_type of this EditViewRequest.  # noqa: E501
        :rtype: ViewJoinType
        """
        return self._join_type

    @join_type.setter
    def join_type(self, join_type):
        """Sets the join_type of this EditViewRequest.


        :param join_type: The join_type of this EditViewRequest.  # noqa: E501
        :type join_type: ViewJoinType
        """

        self._join_type = join_type

    @property
    def status(self):
        """Gets the status of this EditViewRequest.  # noqa: E501


        :return: The status of this EditViewRequest.  # noqa: E501
        :rtype: EntityStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EditViewRequest.


        :param status: The status of this EditViewRequest.  # noqa: E501
        :type status: EntityStatus
        """

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditViewRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditViewRequest):
            return True

        return self.to_dict() != other.to_dict()
