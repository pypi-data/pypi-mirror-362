# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_akrimanager_v2.api_client import ApiClient
from akridata_akrimanager_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ExternalCatalogApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_external_catalog(self, add_update_catalog_request, **kwargs):  # noqa: E501
        """Add external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_external_catalog(add_update_catalog_request, async_req=True)
        >>> result = thread.get()

        :param add_update_catalog_request: (required)
        :type add_update_catalog_request: AddUpdateCatalogRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_external_catalog_with_http_info(add_update_catalog_request, **kwargs)  # noqa: E501

    def create_external_catalog_with_http_info(self, add_update_catalog_request, **kwargs):  # noqa: E501
        """Add external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_external_catalog_with_http_info(add_update_catalog_request, async_req=True)
        >>> result = thread.get()

        :param add_update_catalog_request: (required)
        :type add_update_catalog_request: AddUpdateCatalogRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'add_update_catalog_request',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_catalog" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'add_update_catalog_request' is set
        if self.api_client.client_side_validation and ('add_update_catalog_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['add_update_catalog_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `add_update_catalog_request` when calling `create_external_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_update_catalog_request' in local_var_params:
            body_params = local_var_params['add_update_catalog_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_external_catalog(self, catalog_id, **kwargs):  # noqa: E501
        """Delete external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_external_catalog(catalog_id, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be deleted (required)
        :type catalog_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_external_catalog_with_http_info(catalog_id, **kwargs)  # noqa: E501

    def delete_external_catalog_with_http_info(self, catalog_id, **kwargs):  # noqa: E501
        """Delete external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_external_catalog_with_http_info(catalog_id, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be deleted (required)
        :type catalog_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'catalog_id',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_external_catalog" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if self.api_client.client_side_validation and ('catalog_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['catalog_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `catalog_id` when calling `delete_external_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'catalog_id' in local_var_params:
            path_params['catalog_id'] = local_var_params['catalog_id']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            202: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/{catalog_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def explore_catalog(self, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.explore_catalog(async_req=True)
        >>> result = thread.get()

        :param cluster_id: id of the cluster need to be explored
        :type cluster_id: int
        :param catalog: to get the details of a specific catalog
        :type catalog: str
        :param schema: to get the details of a specific schema
        :type schema: str
        :param table: to get the details of a specific table
        :type table: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[object]
        """
        kwargs['_return_http_data_only'] = True
        return self.explore_catalog_with_http_info(**kwargs)  # noqa: E501

    def explore_catalog_with_http_info(self, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.explore_catalog_with_http_info(async_req=True)
        >>> result = thread.get()

        :param cluster_id: id of the cluster need to be explored
        :type cluster_id: int
        :param catalog: to get the details of a specific catalog
        :type catalog: str
        :param schema: to get the details of a specific schema
        :type schema: str
        :param table: to get the details of a specific table
        :type table: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[object], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'cluster_id',
            'catalog',
            'schema',
            'table',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method explore_catalog" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in local_var_params and local_var_params['cluster_id'] is not None:  # noqa: E501
            query_params.append(('cluster_id', local_var_params['cluster_id']))  # noqa: E501
        if 'catalog' in local_var_params and local_var_params['catalog'] is not None:  # noqa: E501
            query_params.append(('catalog', local_var_params['catalog']))  # noqa: E501
        if 'schema' in local_var_params and local_var_params['schema'] is not None:  # noqa: E501
            query_params.append(('schema', local_var_params['schema']))  # noqa: E501
        if 'table' in local_var_params and local_var_params['table'] is not None:  # noqa: E501
            query_params.append(('table', local_var_params['table']))  # noqa: E501
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[object]",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/explore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_external_catalog(self, catalog_id, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_catalog(catalog_id, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be fetched (required)
        :type catalog_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCatalogResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_external_catalog_with_http_info(catalog_id, **kwargs)  # noqa: E501

    def get_external_catalog_with_http_info(self, catalog_id, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_catalog_with_http_info(catalog_id, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be fetched (required)
        :type catalog_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCatalogResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'catalog_id',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_external_catalog" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if self.api_client.client_side_validation and ('catalog_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['catalog_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `catalog_id` when calling `get_external_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'catalog_id' in local_var_params:
            path_params['catalog_id'] = local_var_params['catalog_id']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetCatalogResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/{catalog_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_external_catalog_acl(self, catalog_name, **kwargs):  # noqa: E501
        """Get the acl of the catalog.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_catalog_acl(catalog_name, async_req=True)
        >>> result = thread.get()

        :param catalog_name: Catalog name (required)
        :type catalog_name: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CatalogAclPayload
        """
        kwargs['_return_http_data_only'] = True
        return self.get_external_catalog_acl_with_http_info(catalog_name, **kwargs)  # noqa: E501

    def get_external_catalog_acl_with_http_info(self, catalog_name, **kwargs):  # noqa: E501
        """Get the acl of the catalog.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_external_catalog_acl_with_http_info(catalog_name, async_req=True)
        >>> result = thread.get()

        :param catalog_name: Catalog name (required)
        :type catalog_name: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CatalogAclPayload, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'catalog_name',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_external_catalog_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'catalog_name' is set
        if self.api_client.client_side_validation and ('catalog_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['catalog_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `catalog_name` when calling `get_external_catalog_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'catalog_name' in local_var_params:
            path_params['catalog_name'] = local_var_params['catalog_name']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "CatalogAclPayload",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/acl/{catalog_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_external_catalogs(self, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_external_catalogs(async_req=True)
        >>> result = thread.get()

        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListCatalogsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_external_catalogs_with_http_info(**kwargs)  # noqa: E501

    def list_external_catalogs_with_http_info(self, **kwargs):  # noqa: E501
        """List external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_external_catalogs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListCatalogsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_external_catalogs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "ListCatalogsResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_external_catalog_acl(self, catalog_acl_payload, **kwargs):  # noqa: E501
        """Set/change the acl of the catalog to PUBLIC or RESTRICTED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_external_catalog_acl(catalog_acl_payload, async_req=True)
        >>> result = thread.get()

        :param catalog_acl_payload: (required)
        :type catalog_acl_payload: CatalogAclPayload
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.set_external_catalog_acl_with_http_info(catalog_acl_payload, **kwargs)  # noqa: E501

    def set_external_catalog_acl_with_http_info(self, catalog_acl_payload, **kwargs):  # noqa: E501
        """Set/change the acl of the catalog to PUBLIC or RESTRICTED  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_external_catalog_acl_with_http_info(catalog_acl_payload, async_req=True)
        >>> result = thread.get()

        :param catalog_acl_payload: (required)
        :type catalog_acl_payload: CatalogAclPayload
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'catalog_acl_payload',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_external_catalog_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'catalog_acl_payload' is set
        if self.api_client.client_side_validation and ('catalog_acl_payload' not in local_var_params or  # noqa: E501
                                                        local_var_params['catalog_acl_payload'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `catalog_acl_payload` when calling `set_external_catalog_acl`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'catalog_acl_payload' in local_var_params:
            body_params = local_var_params['catalog_acl_payload']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/acl', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_external_catalog(self, catalog_id, add_update_catalog_request, **kwargs):  # noqa: E501
        """Update external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_external_catalog(catalog_id, add_update_catalog_request, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be updated (required)
        :type catalog_id: str
        :param add_update_catalog_request: (required)
        :type add_update_catalog_request: AddUpdateCatalogRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_external_catalog_with_http_info(catalog_id, add_update_catalog_request, **kwargs)  # noqa: E501

    def update_external_catalog_with_http_info(self, catalog_id, add_update_catalog_request, **kwargs):  # noqa: E501
        """Update external catalogs in vcs-manager  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_external_catalog_with_http_info(catalog_id, add_update_catalog_request, async_req=True)
        >>> result = thread.get()

        :param catalog_id: catalog_id of catalog to be updated (required)
        :type catalog_id: str
        :param add_update_catalog_request: (required)
        :type add_update_catalog_request: AddUpdateCatalogRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'catalog_id',
            'add_update_catalog_request',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'akri_app_mode',
            'x_akri_workspace',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_external_catalog" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'catalog_id' is set
        if self.api_client.client_side_validation and ('catalog_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['catalog_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `catalog_id` when calling `update_external_catalog`")  # noqa: E501
        # verify the required parameter 'add_update_catalog_request' is set
        if self.api_client.client_side_validation and ('add_update_catalog_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['add_update_catalog_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `add_update_catalog_request` when calling `update_external_catalog`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'catalog_id' in local_var_params:
            path_params['catalog_id'] = local_var_params['catalog_id']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_update_catalog_request' in local_var_params:
            body_params = local_var_params['add_update_catalog_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/external-catalog/catalogs/{catalog_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
