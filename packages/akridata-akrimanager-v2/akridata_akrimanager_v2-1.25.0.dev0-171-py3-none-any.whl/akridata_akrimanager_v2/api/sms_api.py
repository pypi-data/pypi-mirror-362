# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_akrimanager_v2.api_client import ApiClient
from akridata_akrimanager_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SmsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_sms_secret(self, sms_add_secret_request, **kwargs):  # noqa: E501
        """Add secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sms_secret(sms_add_secret_request, async_req=True)
        >>> result = thread.get()

        :param sms_add_secret_request: (required)
        :type sms_add_secret_request: SMSAddSecretRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SMSSecretResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_sms_secret_with_http_info(sms_add_secret_request, **kwargs)  # noqa: E501

    def create_sms_secret_with_http_info(self, sms_add_secret_request, **kwargs):  # noqa: E501
        """Add secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sms_secret_with_http_info(sms_add_secret_request, async_req=True)
        >>> result = thread.get()

        :param sms_add_secret_request: (required)
        :type sms_add_secret_request: SMSAddSecretRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SMSSecretResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'sms_add_secret_request',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sms_secret" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sms_add_secret_request' is set
        if self.api_client.client_side_validation and ('sms_add_secret_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_add_secret_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_add_secret_request` when calling `create_sms_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sms_add_secret_request' in local_var_params:
            body_params = local_var_params['sms_add_secret_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "SMSSecretResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_sms_secret(self, secret_id, **kwargs):  # noqa: E501
        """Delete secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_sms_secret(secret_id, async_req=True)
        >>> result = thread.get()

        :param secret_id: (required)
        :type secret_id: int
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_sms_secret_with_http_info(secret_id, **kwargs)  # noqa: E501

    def delete_sms_secret_with_http_info(self, secret_id, **kwargs):  # noqa: E501
        """Delete secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_sms_secret_with_http_info(secret_id, async_req=True)
        >>> result = thread.get()

        :param secret_id: (required)
        :type secret_id: int
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'secret_id',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sms_secret" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'secret_id' is set
        if self.api_client.client_side_validation and ('secret_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['secret_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `secret_id` when calling `delete_sms_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_id' in local_var_params:
            path_params['secret_id'] = local_var_params['secret_id']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            202: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms/{secret_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_sms_secrets(self, sms_namespace, sms_key, **kwargs):  # noqa: E501
        """Get secret from SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sms_secrets(sms_namespace, sms_key, async_req=True)
        >>> result = thread.get()

        :param sms_namespace: (required)
        :type sms_namespace: str
        :param sms_key: (required)
        :type sms_key: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SMSSecretDetailedResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sms_secrets_with_http_info(sms_namespace, sms_key, **kwargs)  # noqa: E501

    def get_sms_secrets_with_http_info(self, sms_namespace, sms_key, **kwargs):  # noqa: E501
        """Get secret from SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sms_secrets_with_http_info(sms_namespace, sms_key, async_req=True)
        >>> result = thread.get()

        :param sms_namespace: (required)
        :type sms_namespace: str
        :param sms_key: (required)
        :type sms_key: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SMSSecretDetailedResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'sms_namespace',
            'sms_key',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sms_secrets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sms_namespace' is set
        if self.api_client.client_side_validation and ('sms_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_namespace` when calling `get_sms_secrets`")  # noqa: E501
        # verify the required parameter 'sms_key' is set
        if self.api_client.client_side_validation and ('sms_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_key` when calling `get_sms_secrets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sms_namespace' in local_var_params and local_var_params['sms_namespace'] is not None:  # noqa: E501
            query_params.append(('sms_namespace', local_var_params['sms_namespace']))  # noqa: E501
        if 'sms_key' in local_var_params and local_var_params['sms_key'] is not None:  # noqa: E501
            query_params.append(('sms_key', local_var_params['sms_key']))  # noqa: E501
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SMSSecretDetailedResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms/secret', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_sms_secrets_info(self, sms_namespace, sms_key, **kwargs):  # noqa: E501
        """Get secret info from SMS  # noqa: E501

        This API is called by UI to get SMS secret info without any sensitive data. Below is what is sent by this API cred type wise - 1. Basic Auth - username 2. Azure - nothing 3. GCP - nothing 4. AWS Credentials - username (containing access key) 5. AWS Delegated IAM - data with external_id and role_arn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sms_secrets_info(sms_namespace, sms_key, async_req=True)
        >>> result = thread.get()

        :param sms_namespace: (required)
        :type sms_namespace: str
        :param sms_key: (required)
        :type sms_key: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SMSSecretDetailedResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sms_secrets_info_with_http_info(sms_namespace, sms_key, **kwargs)  # noqa: E501

    def get_sms_secrets_info_with_http_info(self, sms_namespace, sms_key, **kwargs):  # noqa: E501
        """Get secret info from SMS  # noqa: E501

        This API is called by UI to get SMS secret info without any sensitive data. Below is what is sent by this API cred type wise - 1. Basic Auth - username 2. Azure - nothing 3. GCP - nothing 4. AWS Credentials - username (containing access key) 5. AWS Delegated IAM - data with external_id and role_arn  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sms_secrets_info_with_http_info(sms_namespace, sms_key, async_req=True)
        >>> result = thread.get()

        :param sms_namespace: (required)
        :type sms_namespace: str
        :param sms_key: (required)
        :type sms_key: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SMSSecretDetailedResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'sms_namespace',
            'sms_key',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sms_secrets_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'sms_namespace' is set
        if self.api_client.client_side_validation and ('sms_namespace' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_namespace'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_namespace` when calling `get_sms_secrets_info`")  # noqa: E501
        # verify the required parameter 'sms_key' is set
        if self.api_client.client_side_validation and ('sms_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_key` when calling `get_sms_secrets_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sms_namespace' in local_var_params and local_var_params['sms_namespace'] is not None:  # noqa: E501
            query_params.append(('sms_namespace', local_var_params['sms_namespace']))  # noqa: E501
        if 'sms_key' in local_var_params and local_var_params['sms_key'] is not None:  # noqa: E501
            query_params.append(('sms_key', local_var_params['sms_key']))  # noqa: E501
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SMSSecretDetailedResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms/secret/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_sms_secrets(self, **kwargs):  # noqa: E501
        """List secrets from SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sms_secrets(async_req=True)
        >>> result = thread.get()

        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SMSSecretsResponseList
        """
        kwargs['_return_http_data_only'] = True
        return self.list_sms_secrets_with_http_info(**kwargs)  # noqa: E501

    def list_sms_secrets_with_http_info(self, **kwargs):  # noqa: E501
        """List secrets from SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_sms_secrets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SMSSecretsResponseList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sms_secrets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SMSSecretsResponseList",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_sms_secret(self, secret_id, sms_add_secret_request, **kwargs):  # noqa: E501
        """Update secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_sms_secret(secret_id, sms_add_secret_request, async_req=True)
        >>> result = thread.get()

        :param secret_id: (required)
        :type secret_id: int
        :param sms_add_secret_request: (required)
        :type sms_add_secret_request: SMSAddSecretRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SMSSecretResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_sms_secret_with_http_info(secret_id, sms_add_secret_request, **kwargs)  # noqa: E501

    def update_sms_secret_with_http_info(self, secret_id, sms_add_secret_request, **kwargs):  # noqa: E501
        """Update secret in SMS  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_sms_secret_with_http_info(secret_id, sms_add_secret_request, async_req=True)
        >>> result = thread.get()

        :param secret_id: (required)
        :type secret_id: int
        :param sms_add_secret_request: (required)
        :type sms_add_secret_request: SMSAddSecretRequest
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SMSSecretResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'secret_id',
            'sms_add_secret_request',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_sms_secret" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'secret_id' is set
        if self.api_client.client_side_validation and ('secret_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['secret_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `secret_id` when calling `update_sms_secret`")  # noqa: E501
        # verify the required parameter 'sms_add_secret_request' is set
        if self.api_client.client_side_validation and ('sms_add_secret_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['sms_add_secret_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `sms_add_secret_request` when calling `update_sms_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'secret_id' in local_var_params:
            path_params['secret_id'] = local_var_params['secret_id']  # noqa: E501

        query_params = []
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sms_add_secret_request' in local_var_params:
            body_params = local_var_params['sms_add_secret_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            201: "SMSSecretResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            404: "ErrorResponse",
            500: None,
        }

        return self.api_client.call_api(
            '/v2/sms/{secret_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
