# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_akrimanager_v2.api_client import ApiClient
from akridata_akrimanager_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorkflowsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_workflow(self, workflow_id, **kwargs):  # noqa: E501
        """Delete saved workflow.  # noqa: E501

        Delete workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflow(workflow_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: workflow id (required)
        :type workflow_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_workflow_with_http_info(workflow_id, **kwargs)  # noqa: E501

    def delete_workflow_with_http_info(self, workflow_id, **kwargs):  # noqa: E501
        """Delete saved workflow.  # noqa: E501

        Delete workflow.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workflow_with_http_info(workflow_id, async_req=True)
        >>> result = thread.get()

        :param workflow_id: workflow id (required)
        :type workflow_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'workflow_id',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workflow_id' is set
        if self.api_client.client_side_validation and ('workflow_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['workflow_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workflow_id` when calling `delete_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workflow_id' in local_var_params:
            path_params['workflow_id'] = local_var_params['workflow_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/{workflow_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def generate_presigned_url_for_workflow_files(self, **kwargs):  # noqa: E501
        """Generate presigned url for workflow related file.  # noqa: E501

        Generate presigned url for workflow related file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_presigned_url_for_workflow_files(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset Identifier
        :type dataset_id: str
        :param file_types: List of file types for which presigned url needs to be generated
        :type file_types: list[DatastoreFileType]
        :param session_id: Session Identifier
        :type session_id: str
        :param partition_id: Partition Identifier
        :type partition_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListPreSignedUrlResponseWithOperation
        """
        kwargs['_return_http_data_only'] = True
        return self.generate_presigned_url_for_workflow_files_with_http_info(**kwargs)  # noqa: E501

    def generate_presigned_url_for_workflow_files_with_http_info(self, **kwargs):  # noqa: E501
        """Generate presigned url for workflow related file.  # noqa: E501

        Generate presigned url for workflow related file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_presigned_url_for_workflow_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset Identifier
        :type dataset_id: str
        :param file_types: List of file types for which presigned url needs to be generated
        :type file_types: list[DatastoreFileType]
        :param session_id: Session Identifier
        :type session_id: str
        :param partition_id: Partition Identifier
        :type partition_id: str
        :param sync:
        :type sync: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListPreSignedUrlResponseWithOperation, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'dataset_id',
            'file_types',
            'session_id',
            'partition_id',
            'sync',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_presigned_url_for_workflow_files" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset_id' in local_var_params and local_var_params['dataset_id'] is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if 'file_types' in local_var_params and local_var_params['file_types'] is not None:  # noqa: E501
            query_params.append(('file_types', local_var_params['file_types']))  # noqa: E501
            collection_formats['file_types'] = 'multi'  # noqa: E501
        if 'session_id' in local_var_params and local_var_params['session_id'] is not None:  # noqa: E501
            query_params.append(('session_id', local_var_params['session_id']))  # noqa: E501
        if 'partition_id' in local_var_params and local_var_params['partition_id'] is not None:  # noqa: E501
            query_params.append(('partition_id', local_var_params['partition_id']))  # noqa: E501
        if 'sync' in local_var_params and local_var_params['sync'] is not None:  # noqa: E501
            query_params.append(('sync', local_var_params['sync']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "ListPreSignedUrlResponseWithOperation",
            422: "ErrorResponse",
            400: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/presignedurl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_akrisdk_details(self, **kwargs):  # noqa: E501
        """Get akrisdk details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_akrisdk_details(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset Identifier
        :type dataset_id: str
        :param pipeline_id: Pipeline Identifier
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AkriSDKWorkflowResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_akrisdk_details_with_http_info(**kwargs)  # noqa: E501

    def get_akrisdk_details_with_http_info(self, **kwargs):  # noqa: E501
        """Get akrisdk details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_akrisdk_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset Identifier
        :type dataset_id: str
        :param pipeline_id: Pipeline Identifier
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AkriSDKWorkflowResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'dataset_id',
            'pipeline_id',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_akrisdk_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset_id' in local_var_params and local_var_params['dataset_id'] is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if 'pipeline_id' in local_var_params and local_var_params['pipeline_id'] is not None:  # noqa: E501
            query_params.append(('pipeline_id', local_var_params['pipeline_id']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "AkriSDKWorkflowResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/akrisdk', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_anomaly_segmentation_workflow(self, anomaly_segmentation_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation  # noqa: E501

        Get anomaly segmentation workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anomaly_segmentation_workflow(anomaly_segmentation_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anomaly_segmentation_workflow_request: (required)
        :type anomaly_segmentation_workflow_request: AnomalySegmentationWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegWorkflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anomaly_segmentation_workflow_with_http_info(anomaly_segmentation_workflow_request, **kwargs)  # noqa: E501

    def get_anomaly_segmentation_workflow_with_http_info(self, anomaly_segmentation_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation  # noqa: E501

        Get anomaly segmentation workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anomaly_segmentation_workflow_with_http_info(anomaly_segmentation_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anomaly_segmentation_workflow_request: (required)
        :type anomaly_segmentation_workflow_request: AnomalySegmentationWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegWorkflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'anomaly_segmentation_workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomaly_segmentation_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'anomaly_segmentation_workflow_request' is set
        if self.api_client.client_side_validation and ('anomaly_segmentation_workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['anomaly_segmentation_workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `anomaly_segmentation_workflow_request` when calling `get_anomaly_segmentation_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'anomaly_segmentation_workflow_request' in local_var_params:
            body_params = local_var_params['anomaly_segmentation_workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "AnomalySegWorkflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/anomaly-segmentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_anoseg_featurizer_inference_workflow(self, anoseg_featurizer_inference_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation featurizer inference  # noqa: E501

        Get anomaly segmentation inference workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anoseg_featurizer_inference_workflow(anoseg_featurizer_inference_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anoseg_featurizer_inference_workflow_request: (required)
        :type anoseg_featurizer_inference_workflow_request: AnosegFeaturizerInferenceWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegWorkflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anoseg_featurizer_inference_workflow_with_http_info(anoseg_featurizer_inference_workflow_request, **kwargs)  # noqa: E501

    def get_anoseg_featurizer_inference_workflow_with_http_info(self, anoseg_featurizer_inference_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation featurizer inference  # noqa: E501

        Get anomaly segmentation inference workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anoseg_featurizer_inference_workflow_with_http_info(anoseg_featurizer_inference_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anoseg_featurizer_inference_workflow_request: (required)
        :type anoseg_featurizer_inference_workflow_request: AnosegFeaturizerInferenceWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegWorkflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'anoseg_featurizer_inference_workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anoseg_featurizer_inference_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'anoseg_featurizer_inference_workflow_request' is set
        if self.api_client.client_side_validation and ('anoseg_featurizer_inference_workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['anoseg_featurizer_inference_workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `anoseg_featurizer_inference_workflow_request` when calling `get_anoseg_featurizer_inference_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'anoseg_featurizer_inference_workflow_request' in local_var_params:
            body_params = local_var_params['anoseg_featurizer_inference_workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "AnomalySegWorkflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/anomaly-segmentation/featurizer-inference', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_anoseg_featurizer_training_workflow(self, anoseg_featurizer_training_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation featurizer training  # noqa: E501

        Get anomaly segmentation workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anoseg_featurizer_training_workflow(anoseg_featurizer_training_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anoseg_featurizer_training_workflow_request: (required)
        :type anoseg_featurizer_training_workflow_request: AnosegFeaturizerTrainingWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegWorkflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anoseg_featurizer_training_workflow_with_http_info(anoseg_featurizer_training_workflow_request, **kwargs)  # noqa: E501

    def get_anoseg_featurizer_training_workflow_with_http_info(self, anoseg_featurizer_training_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for anomaly segmentation featurizer training  # noqa: E501

        Get anomaly segmentation workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anoseg_featurizer_training_workflow_with_http_info(anoseg_featurizer_training_workflow_request, async_req=True)
        >>> result = thread.get()

        :param anoseg_featurizer_training_workflow_request: (required)
        :type anoseg_featurizer_training_workflow_request: AnosegFeaturizerTrainingWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegWorkflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'anoseg_featurizer_training_workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anoseg_featurizer_training_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'anoseg_featurizer_training_workflow_request' is set
        if self.api_client.client_side_validation and ('anoseg_featurizer_training_workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['anoseg_featurizer_training_workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `anoseg_featurizer_training_workflow_request` when calling `get_anoseg_featurizer_training_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'anoseg_featurizer_training_workflow_request' in local_var_params:
            body_params = local_var_params['anoseg_featurizer_training_workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "AnomalySegWorkflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/anomaly-segmentation/featurizer-training', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auto_label_workflow(self, auto_label_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for auto label  # noqa: E501

        Get auto label workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_label_workflow(auto_label_workflow_request, async_req=True)
        >>> result = thread.get()

        :param auto_label_workflow_request: (required)
        :type auto_label_workflow_request: AutoLabelWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auto_label_workflow_with_http_info(auto_label_workflow_request, **kwargs)  # noqa: E501

    def get_auto_label_workflow_with_http_info(self, auto_label_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for auto label  # noqa: E501

        Get auto label workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auto_label_workflow_with_http_info(auto_label_workflow_request, async_req=True)
        >>> result = thread.get()

        :param auto_label_workflow_request: (required)
        :type auto_label_workflow_request: AutoLabelWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'auto_label_workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_label_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'auto_label_workflow_request' is set
        if self.api_client.client_side_validation and ('auto_label_workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['auto_label_workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `auto_label_workflow_request` when calling `get_auto_label_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'auto_label_workflow_request' in local_var_params:
            body_params = local_var_params['auto_label_workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Workflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/auto-label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_dataset_workflows(self, workflow_request, **kwargs):  # noqa: E501
        """Get workflows for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_workflows(workflow_request, async_req=True)
        >>> result = thread.get()

        :param workflow_request: (required)
        :type workflow_request: WorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_dataset_workflows_with_http_info(workflow_request, **kwargs)  # noqa: E501

    def get_dataset_workflows_with_http_info(self, workflow_request, **kwargs):  # noqa: E501
        """Get workflows for a dataset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_dataset_workflows_with_http_info(workflow_request, async_req=True)
        >>> result = thread.get()

        :param workflow_request: (required)
        :type workflow_request: WorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_workflows" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'workflow_request' is set
        if self.api_client.client_side_validation and ('workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `workflow_request` when calling `get_dataset_workflows`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'workflow_request' in local_var_params:
            body_params = local_var_params['workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Workflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_model_training_datagen_workflow(self, tao_training_wf_request, **kwargs):  # noqa: E501
        """Get workflows for model training data generator  # noqa: E501

        Get model training data generator workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_training_datagen_workflow(tao_training_wf_request, async_req=True)
        >>> result = thread.get()

        :param tao_training_wf_request: (required)
        :type tao_training_wf_request: TaoTrainingWfRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModelTrainingDatagenWorkflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_training_datagen_workflow_with_http_info(tao_training_wf_request, **kwargs)  # noqa: E501

    def get_model_training_datagen_workflow_with_http_info(self, tao_training_wf_request, **kwargs):  # noqa: E501
        """Get workflows for model training data generator  # noqa: E501

        Get model training data generator workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_training_datagen_workflow_with_http_info(tao_training_wf_request, async_req=True)
        >>> result = thread.get()

        :param tao_training_wf_request: (required)
        :type tao_training_wf_request: TaoTrainingWfRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModelTrainingDatagenWorkflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'tao_training_wf_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_training_datagen_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tao_training_wf_request' is set
        if self.api_client.client_side_validation and ('tao_training_wf_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['tao_training_wf_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `tao_training_wf_request` when calling `get_model_training_datagen_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tao_training_wf_request' in local_var_params:
            body_params = local_var_params['tao_training_wf_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "ModelTrainingDatagenWorkflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/model-training/datagen', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_saliency_map_workflow(self, saliency_map_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for saliency map  # noqa: E501

        Get saliency map workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_saliency_map_workflow(saliency_map_workflow_request, async_req=True)
        >>> result = thread.get()

        :param saliency_map_workflow_request: (required)
        :type saliency_map_workflow_request: SaliencyMapWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workflows
        """
        kwargs['_return_http_data_only'] = True
        return self.get_saliency_map_workflow_with_http_info(saliency_map_workflow_request, **kwargs)  # noqa: E501

    def get_saliency_map_workflow_with_http_info(self, saliency_map_workflow_request, **kwargs):  # noqa: E501
        """Get workflows for saliency map  # noqa: E501

        Get saliency map workflow  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_saliency_map_workflow_with_http_info(saliency_map_workflow_request, async_req=True)
        >>> result = thread.get()

        :param saliency_map_workflow_request: (required)
        :type saliency_map_workflow_request: SaliencyMapWorkflowRequest
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workflows, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'saliency_map_workflow_request',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_saliency_map_workflow" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'saliency_map_workflow_request' is set
        if self.api_client.client_side_validation and ('saliency_map_workflow_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['saliency_map_workflow_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `saliency_map_workflow_request` when calling `get_saliency_map_workflow`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'saliency_map_workflow_request' in local_var_params:
            body_params = local_var_params['saliency_map_workflow_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Workflows",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/workflows/resultset/saliency-map', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
