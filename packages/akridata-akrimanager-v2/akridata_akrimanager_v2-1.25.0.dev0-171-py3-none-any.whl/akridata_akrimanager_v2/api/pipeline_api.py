# coding: utf-8

"""
    Akrimanager Backend v2

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_akrimanager_v2.api_client import ApiClient
from akridata_akrimanager_v2.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PipelineApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_pipeline_to_datasets(self, pipeline_id, pipeline_attach_body, **kwargs):  # noqa: E501
        """Attach pipeline to datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attach_pipeline_to_datasets(pipeline_id, pipeline_attach_body, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_attach_body: (required)
        :type pipeline_attach_body: PipelineAttachBody
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.attach_pipeline_to_datasets_with_http_info(pipeline_id, pipeline_attach_body, **kwargs)  # noqa: E501

    def attach_pipeline_to_datasets_with_http_info(self, pipeline_id, pipeline_attach_body, **kwargs):  # noqa: E501
        """Attach pipeline to datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.attach_pipeline_to_datasets_with_http_info(pipeline_id, pipeline_attach_body, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_attach_body: (required)
        :type pipeline_attach_body: PipelineAttachBody
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'pipeline_attach_body',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_pipeline_to_datasets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `attach_pipeline_to_datasets`")  # noqa: E501
        # verify the required parameter 'pipeline_attach_body' is set
        if self.api_client.client_side_validation and ('pipeline_attach_body' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_attach_body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_attach_body` when calling `attach_pipeline_to_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_attach_body' in local_var_params:
            body_params = local_var_params['pipeline_attach_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}/attach', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_pipeline(self, pipeline_details, **kwargs):  # noqa: E501
        """Create pipeline  # noqa: E501

        Create a Pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline(pipeline_details, async_req=True)
        >>> result = thread.get()

        :param pipeline_details: (required)
        :type pipeline_details: PipelineDetails
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PostPipelineResp
        """
        kwargs['_return_http_data_only'] = True
        return self.create_pipeline_with_http_info(pipeline_details, **kwargs)  # noqa: E501

    def create_pipeline_with_http_info(self, pipeline_details, **kwargs):  # noqa: E501
        """Create pipeline  # noqa: E501

        Create a Pipeline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_with_http_info(pipeline_details, async_req=True)
        >>> result = thread.get()

        :param pipeline_details: (required)
        :type pipeline_details: PipelineDetails
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PostPipelineResp, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_details',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_details' is set
        if self.api_client.client_side_validation and ('pipeline_details' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_details'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_details` when calling `create_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_details' in local_var_params:
            body_params = local_var_params['pipeline_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "PostPipelineResp",
            422: "HTTPValidationError",
            409: "ErrorResponse",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_pipeline_version(self, pipeline_id, pipeline_version_details, **kwargs):  # noqa: E501
        """Create new pipeline version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_version(pipeline_id, pipeline_version_details, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_version_details: (required)
        :type pipeline_version_details: PipelineVersionDetails
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PostPipelineResp
        """
        kwargs['_return_http_data_only'] = True
        return self.create_pipeline_version_with_http_info(pipeline_id, pipeline_version_details, **kwargs)  # noqa: E501

    def create_pipeline_version_with_http_info(self, pipeline_id, pipeline_version_details, **kwargs):  # noqa: E501
        """Create new pipeline version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_version_with_http_info(pipeline_id, pipeline_version_details, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_version_details: (required)
        :type pipeline_version_details: PipelineVersionDetails
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PostPipelineResp, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'pipeline_version_details',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `create_pipeline_version`")  # noqa: E501
        # verify the required parameter 'pipeline_version_details' is set
        if self.api_client.client_side_validation and ('pipeline_version_details' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_version_details'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_version_details` when calling `create_pipeline_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_version_details' in local_var_params:
            body_params = local_var_params['pipeline_version_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "PostPipelineResp",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}/versions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_pipeline(self, pipeline_id, **kwargs):  # noqa: E501
        """Delete pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pipeline(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_pipeline_with_http_info(pipeline_id, **kwargs)  # noqa: E501

    def delete_pipeline_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Delete pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pipeline_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_pipeline" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `delete_pipeline`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def detach_pipeline_from_datasets(self, pipeline_id, pipeline_detach_body, **kwargs):  # noqa: E501
        """Attach pipeline to datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detach_pipeline_from_datasets(pipeline_id, pipeline_detach_body, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_detach_body: (required)
        :type pipeline_detach_body: PipelineDetachBody
        :param detach_all: Detach all
        :type detach_all: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.detach_pipeline_from_datasets_with_http_info(pipeline_id, pipeline_detach_body, **kwargs)  # noqa: E501

    def detach_pipeline_from_datasets_with_http_info(self, pipeline_id, pipeline_detach_body, **kwargs):  # noqa: E501
        """Attach pipeline to datasets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detach_pipeline_from_datasets_with_http_info(pipeline_id, pipeline_detach_body, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param pipeline_detach_body: (required)
        :type pipeline_detach_body: PipelineDetachBody
        :param detach_all: Detach all
        :type detach_all: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'pipeline_detach_body',
            'detach_all',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_pipeline_from_datasets" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `detach_pipeline_from_datasets`")  # noqa: E501
        # verify the required parameter 'pipeline_detach_body' is set
        if self.api_client.client_side_validation and ('pipeline_detach_body' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_detach_body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_detach_body` when calling `detach_pipeline_from_datasets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'detach_all' in local_var_params and local_var_params['detach_all'] is not None:  # noqa: E501
            query_params.append(('detach_all', local_var_params['detach_all']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pipeline_detach_body' in local_var_params:
            body_params = local_var_params['pipeline_detach_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "SuccessResponse",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}/detach', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_all_pipelines(self, **kwargs):  # noqa: E501
        """Get all pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_pipelines(async_req=True)
        >>> result = thread.get()

        :param filter_by_name: pipeline name
        :type filter_by_name: str
        :param filter_by_data_type: pipeline datatype
        :type filter_by_data_type: str
        :param filter_by_docker_image_ids: docker image ids
        :type filter_by_docker_image_ids: list[str]
        :param filter_by_ids: filter by IDs
        :type filter_by_ids: list[str]
        :param search_str: search name
        :type search_str: str
        :param sort_by_updated_date: sort by updated date
        :type sort_by_updated_date: SortOrder
        :param sort_by_name: sort by name
        :type sort_by_name: SortOrder
        :param sort_by_recommended: sort by recommendation
        :type sort_by_recommended: bool
        :param internal: Fetch only internal pipelines
        :type internal: bool
        :param show_deprecated: Fetch deprecated pipelines also
        :type show_deprecated: bool
        :param show_datagen: If set to None then fetches all pipelines, if true then fetch only datagen pipelines and if false then exclude metadata pipelines
        :type show_datagen: bool
        :param filter_by_internal_id: pipeline internal id
        :type filter_by_internal_id: int
        :param page_num:
        :type page_num: int
        :param max_per_page:
        :type max_per_page: int
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Pipelines
        """
        kwargs['_return_http_data_only'] = True
        return self.get_all_pipelines_with_http_info(**kwargs)  # noqa: E501

    def get_all_pipelines_with_http_info(self, **kwargs):  # noqa: E501
        """Get all pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_pipelines_with_http_info(async_req=True)
        >>> result = thread.get()

        :param filter_by_name: pipeline name
        :type filter_by_name: str
        :param filter_by_data_type: pipeline datatype
        :type filter_by_data_type: str
        :param filter_by_docker_image_ids: docker image ids
        :type filter_by_docker_image_ids: list[str]
        :param filter_by_ids: filter by IDs
        :type filter_by_ids: list[str]
        :param search_str: search name
        :type search_str: str
        :param sort_by_updated_date: sort by updated date
        :type sort_by_updated_date: SortOrder
        :param sort_by_name: sort by name
        :type sort_by_name: SortOrder
        :param sort_by_recommended: sort by recommendation
        :type sort_by_recommended: bool
        :param internal: Fetch only internal pipelines
        :type internal: bool
        :param show_deprecated: Fetch deprecated pipelines also
        :type show_deprecated: bool
        :param show_datagen: If set to None then fetches all pipelines, if true then fetch only datagen pipelines and if false then exclude metadata pipelines
        :type show_datagen: bool
        :param filter_by_internal_id: pipeline internal id
        :type filter_by_internal_id: int
        :param page_num:
        :type page_num: int
        :param max_per_page:
        :type max_per_page: int
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Pipelines, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'filter_by_name',
            'filter_by_data_type',
            'filter_by_docker_image_ids',
            'filter_by_ids',
            'search_str',
            'sort_by_updated_date',
            'sort_by_name',
            'sort_by_recommended',
            'internal',
            'show_deprecated',
            'show_datagen',
            'filter_by_internal_id',
            'page_num',
            'max_per_page',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_pipelines" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'page_num' in local_var_params and local_var_params['page_num'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_num` when calling `get_all_pipelines`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_by_name' in local_var_params and local_var_params['filter_by_name'] is not None:  # noqa: E501
            query_params.append(('filter_by_name', local_var_params['filter_by_name']))  # noqa: E501
        if 'filter_by_data_type' in local_var_params and local_var_params['filter_by_data_type'] is not None:  # noqa: E501
            query_params.append(('filter_by_data_type', local_var_params['filter_by_data_type']))  # noqa: E501
        if 'filter_by_docker_image_ids' in local_var_params and local_var_params['filter_by_docker_image_ids'] is not None:  # noqa: E501
            query_params.append(('filter_by_docker_image_ids', local_var_params['filter_by_docker_image_ids']))  # noqa: E501
            collection_formats['filter_by_docker_image_ids'] = 'multi'  # noqa: E501
        if 'filter_by_ids' in local_var_params and local_var_params['filter_by_ids'] is not None:  # noqa: E501
            query_params.append(('filter_by_ids', local_var_params['filter_by_ids']))  # noqa: E501
            collection_formats['filter_by_ids'] = 'multi'  # noqa: E501
        if 'search_str' in local_var_params and local_var_params['search_str'] is not None:  # noqa: E501
            query_params.append(('search_str', local_var_params['search_str']))  # noqa: E501
        if 'sort_by_updated_date' in local_var_params and local_var_params['sort_by_updated_date'] is not None:  # noqa: E501
            query_params.append(('sort_by_updated_date', local_var_params['sort_by_updated_date']))  # noqa: E501
        if 'sort_by_name' in local_var_params and local_var_params['sort_by_name'] is not None:  # noqa: E501
            query_params.append(('sort_by_name', local_var_params['sort_by_name']))  # noqa: E501
        if 'sort_by_recommended' in local_var_params and local_var_params['sort_by_recommended'] is not None:  # noqa: E501
            query_params.append(('sort_by_recommended', local_var_params['sort_by_recommended']))  # noqa: E501
        if 'internal' in local_var_params and local_var_params['internal'] is not None:  # noqa: E501
            query_params.append(('internal', local_var_params['internal']))  # noqa: E501
        if 'show_deprecated' in local_var_params and local_var_params['show_deprecated'] is not None:  # noqa: E501
            query_params.append(('show_deprecated', local_var_params['show_deprecated']))  # noqa: E501
        if 'show_datagen' in local_var_params and local_var_params['show_datagen'] is not None:  # noqa: E501
            query_params.append(('show_datagen', local_var_params['show_datagen']))  # noqa: E501
        if 'filter_by_internal_id' in local_var_params and local_var_params['filter_by_internal_id'] is not None:  # noqa: E501
            query_params.append(('filter_by_internal_id', local_var_params['filter_by_internal_id']))  # noqa: E501
        if 'page_num' in local_var_params and local_var_params['page_num'] is not None:  # noqa: E501
            query_params.append(('page_num', local_var_params['page_num']))  # noqa: E501
        if 'max_per_page' in local_var_params and local_var_params['max_per_page'] is not None:  # noqa: E501
            query_params.append(('max_per_page', local_var_params['max_per_page']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "Pipelines",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_active_attachments(self, pipeline_id, **kwargs):  # noqa: E501
        """Get active attachments for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_active_attachments(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param dataset_search_str: search by dataset name
        :type dataset_search_str: str
        :param page_num:
        :type page_num: int
        :param max_per_page:
        :type max_per_page: int
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[DatasetPipelineAttachment]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_active_attachments_with_http_info(pipeline_id, **kwargs)  # noqa: E501

    def get_pipeline_active_attachments_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get active attachments for a pipeline  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_active_attachments_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param dataset_search_str: search by dataset name
        :type dataset_search_str: str
        :param page_num:
        :type page_num: int
        :param max_per_page:
        :type max_per_page: int
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[DatasetPipelineAttachment], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'dataset_search_str',
            'page_num',
            'max_per_page',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_active_attachments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_active_attachments`")  # noqa: E501

        if self.api_client.client_side_validation and 'page_num' in local_var_params and local_var_params['page_num'] < 0:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `page_num` when calling `get_pipeline_active_attachments`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []
        if 'dataset_search_str' in local_var_params and local_var_params['dataset_search_str'] is not None:  # noqa: E501
            query_params.append(('dataset_search_str', local_var_params['dataset_search_str']))  # noqa: E501
        if 'page_num' in local_var_params and local_var_params['page_num'] is not None:  # noqa: E501
            query_params.append(('page_num', local_var_params['page_num']))  # noqa: E501
        if 'max_per_page' in local_var_params and local_var_params['max_per_page'] is not None:  # noqa: E501
            query_params.append(('max_per_page', local_var_params['max_per_page']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "list[DatasetPipelineAttachment]",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_by_id(self, pipeline_id, **kwargs):  # noqa: E501
        """Get pipeline by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_by_id(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetPipelineResp
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_by_id_with_http_info(pipeline_id, **kwargs)  # noqa: E501

    def get_pipeline_by_id_with_http_info(self, pipeline_id, **kwargs):  # noqa: E501
        """Get pipeline by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_by_id_with_http_info(pipeline_id, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetPipelineResp, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetPipelineResp",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipeline_by_version(self, pipeline_id, version, **kwargs):  # noqa: E501
        """Get pipeline by id and version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_by_version(pipeline_id, version, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param version: pipeline version (required)
        :type version: str
        :param verbose: detailed response field
        :type verbose: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetPipelineVersionResp
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipeline_by_version_with_http_info(pipeline_id, version, **kwargs)  # noqa: E501

    def get_pipeline_by_version_with_http_info(self, pipeline_id, version, **kwargs):  # noqa: E501
        """Get pipeline by id and version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_by_version_with_http_info(pipeline_id, version, async_req=True)
        >>> result = thread.get()

        :param pipeline_id: Pipeline ID (required)
        :type pipeline_id: str
        :param version: pipeline version (required)
        :type version: str
        :param verbose: detailed response field
        :type verbose: bool
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetPipelineVersionResp, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'pipeline_id',
            'version',
            'verbose',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_by_version" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'pipeline_id' is set
        if self.api_client.client_side_validation and ('pipeline_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['pipeline_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `pipeline_id` when calling `get_pipeline_by_version`")  # noqa: E501
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and ('version' not in local_var_params or  # noqa: E501
                                                        local_var_params['version'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `get_pipeline_by_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pipeline_id' in local_var_params:
            path_params['pipeline_id'] = local_var_params['pipeline_id']  # noqa: E501
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501

        query_params = []
        if 'verbose' in local_var_params and local_var_params['verbose'] is not None:  # noqa: E501
            query_params.append(('verbose', local_var_params['verbose']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "GetPipelineVersionResp",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            404: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/{pipeline_id}/versions/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_pipelines_count(self, **kwargs):  # noqa: E501
        """Get count of pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipelines_count(async_req=True)
        >>> result = thread.get()

        :param filter_by_name: pipeline name
        :type filter_by_name: str
        :param filter_by_data_type: pipeline datatype
        :type filter_by_data_type: str
        :param filter_by_docker_image_id: docker image id
        :type filter_by_docker_image_id: str
        :param search_str: search name
        :type search_str: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PipelineCount
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pipelines_count_with_http_info(**kwargs)  # noqa: E501

    def get_pipelines_count_with_http_info(self, **kwargs):  # noqa: E501
        """Get count of pipelines  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipelines_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param filter_by_name: pipeline name
        :type filter_by_name: str
        :param filter_by_data_type: pipeline datatype
        :type filter_by_data_type: str
        :param filter_by_docker_image_id: docker image id
        :type filter_by_docker_image_id: str
        :param search_str: search name
        :type search_str: str
        :param akri_org_name:
        :type akri_org_name: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PipelineCount, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'filter_by_name',
            'filter_by_data_type',
            'filter_by_docker_image_id',
            'search_str',
            'akri_org_name',
            'x_akri_auth',
            'x_akri_workspace',
            'akri_app_mode',
            'x_api_key'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipelines_count" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_by_name' in local_var_params and local_var_params['filter_by_name'] is not None:  # noqa: E501
            query_params.append(('filter_by_name', local_var_params['filter_by_name']))  # noqa: E501
        if 'filter_by_data_type' in local_var_params and local_var_params['filter_by_data_type'] is not None:  # noqa: E501
            query_params.append(('filter_by_data_type', local_var_params['filter_by_data_type']))  # noqa: E501
        if 'filter_by_docker_image_id' in local_var_params and local_var_params['filter_by_docker_image_id'] is not None:  # noqa: E501
            query_params.append(('filter_by_docker_image_id', local_var_params['filter_by_docker_image_id']))  # noqa: E501
        if 'search_str' in local_var_params and local_var_params['search_str'] is not None:  # noqa: E501
            query_params.append(('search_str', local_var_params['search_str']))  # noqa: E501

        header_params = {}
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'x_akri_auth' in local_var_params:
            header_params['x-akri-auth'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['x-akri-workspace'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501
        
        response_types_map = {
            200: "PipelineCount",
            422: "HTTPValidationError",
            400: "ErrorResponse",
            401: "ErrorResponse",
            403: "ErrorResponse",
            500: "ErrorResponse",
        }

        return self.api_client.call_api(
            '/v2/pipelines/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
