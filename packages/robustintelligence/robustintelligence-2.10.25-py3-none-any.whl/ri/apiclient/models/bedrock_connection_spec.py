# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.body import Body
from ri.apiclient.models.id import ID
from typing import Optional, Set
from typing_extensions import Self

class BedrockConnectionSpec(BaseModel):
    """
    BedrockConnectionSpec defines the information needed to make and parse a request to AWS Bedrock.
    """ # noqa: E501
    aws_integration_id: Optional[ID] = Field(default=None, alias="awsIntegrationId")
    body: Optional[Body] = None
    model_id: Optional[StrictStr] = Field(default=None, description="Specifies the model id to use.", alias="modelId")
    response_json_path: Optional[StrictStr] = Field(default=None, description="A json path specifying where in the response json payload we can find the LLM's response response string. Note that the path must point to a string value in the json payload. Whitespace and other special characters can be encoded as unicode (\\u0020). Periods in json fields can be escaped with a backslash.", alias="responseJsonPath")
    __properties: ClassVar[List[str]] = ["awsIntegrationId", "body", "modelId", "responseJsonPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BedrockConnectionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_integration_id
        if self.aws_integration_id:
            _dict['awsIntegrationId'] = self.aws_integration_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BedrockConnectionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsIntegrationId": ID.from_dict(obj["awsIntegrationId"]) if obj.get("awsIntegrationId") is not None else None,
            "body": Body.from_dict(obj["body"]) if obj.get("body") is not None else None,
            "modelId": obj.get("modelId"),
            "responseJsonPath": obj.get("responseJsonPath")
        })
        return _obj


