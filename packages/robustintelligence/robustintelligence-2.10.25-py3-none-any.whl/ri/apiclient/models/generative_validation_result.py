# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `rime-api-key` header.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ri.apiclient.models.attack_objective import AttackObjective
from ri.apiclient.models.example import Example
from ri.apiclient.models.generative_severity import GenerativeSeverity
from ri.apiclient.models.id import ID
from ri.apiclient.models.objective_sub_category import ObjectiveSubCategory
from ri.apiclient.models.standard_info import StandardInfo
from ri.apiclient.models.threat import Threat
from typing import Optional, Set
from typing_extensions import Self

class GenerativeValidationResult(BaseModel):
    """
    GenerativeValidationResult represents a single result of testing a Generative model with attack prompts. The model output is sent to a detection layer, which indicates whether it contains objectionable content. There is a single test result for the \"attack_technique\", \"attack_objective\", and \"objective_sub_category\" combination.
    """ # noqa: E501
    attack_objective: Optional[AttackObjective] = None
    attack_technique: Optional[StrictStr] = Field(default=None, description="The attack technique used in the prompt. This is a string because the types of attacks changes frequently over time depending on our threat intelligence.", alias="attackTechnique")
    attacks_attempted: Optional[StrictInt] = Field(default=None, description="The number of attacks attempted for these results.", alias="attacksAttempted")
    failing_examples: Optional[List[Example]] = Field(default=None, description="List of failing examples to demonstrate failures in this category.", alias="failingExamples")
    id: Optional[ID] = None
    mitre_standards: Optional[List[StandardInfo]] = Field(default=None, description="List of the MITRE AI risk standards associated with the attacks in these results.", alias="mitreStandards")
    nist_standards: Optional[List[StandardInfo]] = Field(default=None, description="List of the NIST AI risk standards associated with the attacks in these results.", alias="nistStandards")
    objective_sub_category: Optional[ObjectiveSubCategory] = None
    owasp_standards: Optional[List[StandardInfo]] = Field(default=None, description="List of the OWASP AI risk standards associated with the attacks in these results.", alias="owaspStandards")
    severity: Optional[GenerativeSeverity] = None
    skipped_reason: Optional[StrictStr] = Field(default=None, description="Indicates that the test was skipped and provides a reason. If the test was not skipped this will be the empty string.", alias="skippedReason")
    successful_attacks: Optional[StrictInt] = Field(default=None, description="The number of successful attacks completed for these results.", alias="successfulAttacks")
    test_run_id: Optional[ID] = Field(default=None, alias="testRunId")
    threat: Optional[Threat] = None
    __properties: ClassVar[List[str]] = ["attackObjective", "attackTechnique", "attacksAttempted", "failingExamples", "id", "mitreStandards", "nistStandards", "objectiveSubCategory", "owaspStandards", "severity", "skippedReason", "successfulAttacks", "testRunId", "threat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerativeValidationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in failing_examples (list)
        _items = []
        if self.failing_examples:
            for _item in self.failing_examples:
                if _item:
                    _items.append(_item.to_dict())
            _dict['failingExamples'] = _items
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mitre_standards (list)
        _items = []
        if self.mitre_standards:
            for _item in self.mitre_standards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mitreStandards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nist_standards (list)
        _items = []
        if self.nist_standards:
            for _item in self.nist_standards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nistStandards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in owasp_standards (list)
        _items = []
        if self.owasp_standards:
            for _item in self.owasp_standards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['owaspStandards'] = _items
        # override the default output from pydantic by calling `to_dict()` of test_run_id
        if self.test_run_id:
            _dict['testRunId'] = self.test_run_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerativeValidationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attackObjective": obj.get("attackObjective"),
            "attackTechnique": obj.get("attackTechnique"),
            "attacksAttempted": obj.get("attacksAttempted"),
            "failingExamples": [Example.from_dict(_item) for _item in obj["failingExamples"]] if obj.get("failingExamples") is not None else None,
            "id": ID.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "mitreStandards": [StandardInfo.from_dict(_item) for _item in obj["mitreStandards"]] if obj.get("mitreStandards") is not None else None,
            "nistStandards": [StandardInfo.from_dict(_item) for _item in obj["nistStandards"]] if obj.get("nistStandards") is not None else None,
            "objectiveSubCategory": obj.get("objectiveSubCategory"),
            "owaspStandards": [StandardInfo.from_dict(_item) for _item in obj["owaspStandards"]] if obj.get("owaspStandards") is not None else None,
            "severity": obj.get("severity"),
            "skippedReason": obj.get("skippedReason"),
            "successfulAttacks": obj.get("successfulAttacks"),
            "testRunId": ID.from_dict(obj["testRunId"]) if obj.get("testRunId") is not None else None,
            "threat": obj.get("threat")
        })
        return _obj


