# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header. Your AI Firewall Agent domain forms the base of the URL for REST API calls. To find the Agent domain in the Robust Intelligence UI, click AI Firewall: Settings icon: Firewall Settings. Find your agent in the Firewall Agent Status: Agents Setup page, and copy its URL from the table.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ri.fwclient.models.code_detection_rule_config import CodeDetectionRuleConfig
from ri.fwclient.models.language_detection_rule_config import LanguageDetectionRuleConfig
from ri.fwclient.models.off_topic_rule_config import OffTopicRuleConfig
from ri.fwclient.models.pii_detection_rule_config import PiiDetectionRuleConfig
from ri.fwclient.models.prompt_injection_rule_config import PromptInjectionRuleConfig
from ri.fwclient.models.token_counter_rule_config import TokenCounterRuleConfig
from ri.fwclient.models.toxicity_rule_config import ToxicityRuleConfig
from ri.fwclient.models.unknown_external_source_rule_config import UnknownExternalSourceRuleConfig
from typing import Optional, Set
from typing_extensions import Self

class IndividualRulesConfig(BaseModel):
    """
    IndividualRulesConfig contains configuration parameters for each individual rule.
    """ # noqa: E501
    code_detection: Optional[CodeDetectionRuleConfig] = Field(default=None, alias="codeDetection")
    language_detection: Optional[LanguageDetectionRuleConfig] = Field(default=None, alias="languageDetection")
    off_topic: Optional[OffTopicRuleConfig] = Field(default=None, alias="offTopic")
    pii_detection_input: Optional[PiiDetectionRuleConfig] = Field(default=None, alias="piiDetectionInput")
    pii_detection_output: Optional[PiiDetectionRuleConfig] = Field(default=None, alias="piiDetectionOutput")
    prompt_injection: Optional[PromptInjectionRuleConfig] = Field(default=None, alias="promptInjection")
    token_counter_input: Optional[TokenCounterRuleConfig] = Field(default=None, alias="tokenCounterInput")
    token_counter_output: Optional[TokenCounterRuleConfig] = Field(default=None, alias="tokenCounterOutput")
    toxicity_rule_config_input: Optional[ToxicityRuleConfig] = Field(default=None, alias="toxicityRuleConfigInput")
    toxicity_rule_config_output: Optional[ToxicityRuleConfig] = Field(default=None, alias="toxicityRuleConfigOutput")
    unknown_external_source: Optional[UnknownExternalSourceRuleConfig] = Field(default=None, alias="unknownExternalSource")
    __properties: ClassVar[List[str]] = ["codeDetection", "languageDetection", "offTopic", "piiDetectionInput", "piiDetectionOutput", "promptInjection", "tokenCounterInput", "tokenCounterOutput", "toxicityRuleConfigInput", "toxicityRuleConfigOutput", "unknownExternalSource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndividualRulesConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of code_detection
        if self.code_detection:
            _dict['codeDetection'] = self.code_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_detection
        if self.language_detection:
            _dict['languageDetection'] = self.language_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of off_topic
        if self.off_topic:
            _dict['offTopic'] = self.off_topic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii_detection_input
        if self.pii_detection_input:
            _dict['piiDetectionInput'] = self.pii_detection_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii_detection_output
        if self.pii_detection_output:
            _dict['piiDetectionOutput'] = self.pii_detection_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prompt_injection
        if self.prompt_injection:
            _dict['promptInjection'] = self.prompt_injection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_counter_input
        if self.token_counter_input:
            _dict['tokenCounterInput'] = self.token_counter_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_counter_output
        if self.token_counter_output:
            _dict['tokenCounterOutput'] = self.token_counter_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_rule_config_input
        if self.toxicity_rule_config_input:
            _dict['toxicityRuleConfigInput'] = self.toxicity_rule_config_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_rule_config_output
        if self.toxicity_rule_config_output:
            _dict['toxicityRuleConfigOutput'] = self.toxicity_rule_config_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unknown_external_source
        if self.unknown_external_source:
            _dict['unknownExternalSource'] = self.unknown_external_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndividualRulesConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codeDetection": CodeDetectionRuleConfig.from_dict(obj["codeDetection"]) if obj.get("codeDetection") is not None else None,
            "languageDetection": LanguageDetectionRuleConfig.from_dict(obj["languageDetection"]) if obj.get("languageDetection") is not None else None,
            "offTopic": OffTopicRuleConfig.from_dict(obj["offTopic"]) if obj.get("offTopic") is not None else None,
            "piiDetectionInput": PiiDetectionRuleConfig.from_dict(obj["piiDetectionInput"]) if obj.get("piiDetectionInput") is not None else None,
            "piiDetectionOutput": PiiDetectionRuleConfig.from_dict(obj["piiDetectionOutput"]) if obj.get("piiDetectionOutput") is not None else None,
            "promptInjection": PromptInjectionRuleConfig.from_dict(obj["promptInjection"]) if obj.get("promptInjection") is not None else None,
            "tokenCounterInput": TokenCounterRuleConfig.from_dict(obj["tokenCounterInput"]) if obj.get("tokenCounterInput") is not None else None,
            "tokenCounterOutput": TokenCounterRuleConfig.from_dict(obj["tokenCounterOutput"]) if obj.get("tokenCounterOutput") is not None else None,
            "toxicityRuleConfigInput": ToxicityRuleConfig.from_dict(obj["toxicityRuleConfigInput"]) if obj.get("toxicityRuleConfigInput") is not None else None,
            "toxicityRuleConfigOutput": ToxicityRuleConfig.from_dict(obj["toxicityRuleConfigOutput"]) if obj.get("toxicityRuleConfigOutput") is not None else None,
            "unknownExternalSource": UnknownExternalSourceRuleConfig.from_dict(obj["unknownExternalSource"]) if obj.get("unknownExternalSource") is not None else None
        })
        return _obj


