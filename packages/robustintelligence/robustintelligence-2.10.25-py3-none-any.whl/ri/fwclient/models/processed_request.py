# coding: utf-8

"""
    Robust Intelligence Firewall REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` header. Your AI Firewall Agent domain forms the base of the URL for REST API calls. To find the Agent domain in the Robust Intelligence UI, click AI Firewall: Settings icon: Firewall Settings. Find your agent in the Firewall Agent Status: Agents Setup page, and copy its URL from the table.

    The version of the OpenAPI document: 1.0
    Contact: dev@robustintelligence.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProcessedRequest(BaseModel):
    """
    ProcessedRequest
    """ # noqa: E501
    contexts: Optional[List[StrictStr]] = Field(default=None, description="Information about the `contexts`. The contexts are truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.")
    contexts_token_count: Optional[StrictInt] = Field(default=None, alias="contextsTokenCount")
    input_token_count: Optional[StrictInt] = Field(default=None, alias="inputTokenCount")
    output_text: Optional[StrictStr] = Field(default=None, description="Information about the `output_text`. The output text is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.", alias="outputText")
    output_token_count: Optional[StrictInt] = Field(default=None, alias="outputTokenCount")
    request_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the request.", alias="requestId")
    user_input_text: Optional[StrictStr] = Field(default=None, description="Information about the `user_input_text`. The raw input is truncated if it exceeds a certain token length so we do not denial of service downstream logging and data systems.", alias="userInputText")
    __properties: ClassVar[List[str]] = ["contexts", "contextsTokenCount", "inputTokenCount", "outputText", "outputTokenCount", "requestId", "userInputText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessedRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessedRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contexts": obj.get("contexts"),
            "contextsTokenCount": obj.get("contextsTokenCount"),
            "inputTokenCount": obj.get("inputTokenCount"),
            "outputText": obj.get("outputText"),
            "outputTokenCount": obj.get("outputTokenCount"),
            "requestId": obj.get("requestId"),
            "userInputText": obj.get("userInputText")
        })
        return _obj


