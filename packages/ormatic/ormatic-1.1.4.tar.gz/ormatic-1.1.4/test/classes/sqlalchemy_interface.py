# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column, DeclarativeBase
from typing_extensions import Optional, List, Type

import classes.example_classes
import datetime
from classes.example_classes import Element

from ormatic.dao import DataAccessObject
from ormatic.custom_types import TypeType

class Base(DeclarativeBase):
    type_mappings = {
        Type: TypeType,
        classes.example_classes.PhysicalObject: classes.example_classes.ConceptType,
    }


class AtomDAO(Base, DataAccessObject[classes.example_classes.Atom]):
    __tablename__ = 'AtomDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    element: Mapped[classes.example_classes.Element]
    type: Mapped[int]
    charge: Mapped[float]
    timestamp: Mapped[datetime.datetime]





class ParentDAO(Base, DataAccessObject[classes.example_classes.Parent]):
    __tablename__ = 'ParentDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    name: Mapped[str]
    polymorphic_type: Mapped[str]




    __mapper_args__ = {
        'polymorphic_on': 'polymorphic_type',
        'polymorphic_identity': 'ParentDAO',
    }

class CustomEntityDAO(Base, DataAccessObject[classes.example_classes.CustomEntity]):
    __tablename__ = 'CustomEntityDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    overwritten_name: Mapped[str]
    polymorphic_type: Mapped[str]




    __mapper_args__ = {
        'polymorphic_on': 'polymorphic_type',
        'polymorphic_identity': 'CustomEntityDAO',
    }

class DoublePositionAggregatorDAO(Base, DataAccessObject[classes.example_classes.DoublePositionAggregator]):
    __tablename__ = 'DoublePositionAggregatorDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)




    positions1: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.doublepositionaggregatordao_positions1_id]')
    positions2: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.doublepositionaggregatordao_positions2_id]')


class EntityAssociationDAO(Base, DataAccessObject[classes.example_classes.EntityAssociation]):
    __tablename__ = 'EntityAssociationDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)


    a: Mapped[List[str]] = mapped_column(JSON, nullable=False)

    entity_id: Mapped[int] = mapped_column(ForeignKey('CustomEntityDAO.id'), nullable=False, post_update=True)

    entity: Mapped[CustomEntityDAO] = relationship('CustomEntityDAO', uselist=False, foreign_keys=[entity_id])


class KinematicChainDAO(Base, DataAccessObject[classes.example_classes.KinematicChain]):
    __tablename__ = 'KinematicChainDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    name: Mapped[str]
    polymorphic_type: Mapped[str]


    torsodao_kinematic_chains_id: Mapped[Optional[int]] = mapped_column(ForeignKey('TorsoDAO.id'))


    __mapper_args__ = {
        'polymorphic_on': 'polymorphic_type',
        'polymorphic_identity': 'KinematicChainDAO',
    }

class NodeDAO(Base, DataAccessObject[classes.example_classes.Node]):
    __tablename__ = 'NodeDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)



    parent_id: Mapped[Optional[int]] = mapped_column(ForeignKey('NodeDAO.id'), nullable=True, post_update=True)

    parent: Mapped[NodeDAO] = relationship('NodeDAO', uselist=False, foreign_keys=[parent_id])


class OrientationDAO(Base, DataAccessObject[classes.example_classes.Orientation]):
    __tablename__ = 'OrientationDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    w: Mapped[Optional[float]]





class OriginalSimulatedObjectDAO(Base, DataAccessObject[classes.example_classes.OriginalSimulatedObject]):
    __tablename__ = 'OriginalSimulatedObjectDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    placeholder: Mapped[float]

    concept: Mapped[classes.example_classes.ConceptType] = mapped_column(classes.example_classes.ConceptType, nullable=False)




class PoseDAO(Base, DataAccessObject[classes.example_classes.Pose]):
    __tablename__ = 'PoseDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)



    position_id: Mapped[int] = mapped_column(ForeignKey('PositionDAO.id'), nullable=False, post_update=True)
    orientation_id: Mapped[int] = mapped_column(ForeignKey('OrientationDAO.id'), nullable=False, post_update=True)

    position: Mapped[PositionDAO] = relationship('PositionDAO', uselist=False, foreign_keys=[position_id])
    orientation: Mapped[OrientationDAO] = relationship('OrientationDAO', uselist=False, foreign_keys=[orientation_id])


class PositionDAO(Base, DataAccessObject[classes.example_classes.Position]):
    __tablename__ = 'PositionDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    polymorphic_type: Mapped[str]


    doublepositionaggregatordao_positions1_id: Mapped[Optional[int]] = mapped_column(ForeignKey('DoublePositionAggregatorDAO.id'))
    doublepositionaggregatordao_positions2_id: Mapped[Optional[int]] = mapped_column(ForeignKey('DoublePositionAggregatorDAO.id'))
    positionsdao_positions_id: Mapped[Optional[int]] = mapped_column(ForeignKey('PositionsDAO.id'))


    __mapper_args__ = {
        'polymorphic_on': 'polymorphic_type',
        'polymorphic_identity': 'PositionDAO',
    }

class PositionTypeWrapperDAO(Base, DataAccessObject[classes.example_classes.PositionTypeWrapper]):
    __tablename__ = 'PositionTypeWrapperDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)


    position_type: Mapped[TypeType] = mapped_column(TypeType, nullable=False)




class PositionsDAO(Base, DataAccessObject[classes.example_classes.Positions]):
    __tablename__ = 'PositionsDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)


    some_strings: Mapped[List[str]] = mapped_column(JSON, nullable=False)


    positions: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.positionsdao_positions_id]')


class ChildMappedDAO(ParentDAO, DataAccessObject[classes.example_classes.ChildMapped]):
    __tablename__ = 'ChildMappedDAO'

    id: Mapped[int] = mapped_column(ForeignKey(ParentDAO.id), primary_key=True)

    attribute1: Mapped[int]




    __mapper_args__ = {
        'polymorphic_identity': 'ChildMappedDAO',
        'inherit_condition': id == ParentDAO.id,
    }

class DerivedEntityDAO(CustomEntityDAO, DataAccessObject[classes.example_classes.DerivedEntity]):
    __tablename__ = 'DerivedEntityDAO'

    id: Mapped[int] = mapped_column(ForeignKey(CustomEntityDAO.id), primary_key=True)

    description: Mapped[str]




    __mapper_args__ = {
        'polymorphic_identity': 'DerivedEntityDAO',
        'inherit_condition': id == CustomEntityDAO.id,
    }

class TorsoDAO(KinematicChainDAO, DataAccessObject[classes.example_classes.Torso]):
    __tablename__ = 'TorsoDAO'

    id: Mapped[int] = mapped_column(ForeignKey(KinematicChainDAO.id), primary_key=True)




    kinematic_chains: Mapped[List[KinematicChainDAO]] = relationship('KinematicChainDAO', foreign_keys='[KinematicChainDAO.torsodao_kinematic_chains_id]')

    __mapper_args__ = {
        'polymorphic_identity': 'TorsoDAO',
        'inherit_condition': id == KinematicChainDAO.id,
    }

class Position4DDAO(PositionDAO, DataAccessObject[classes.example_classes.Position4D]):
    __tablename__ = 'Position4DDAO'

    id: Mapped[int] = mapped_column(ForeignKey(PositionDAO.id), primary_key=True)

    w: Mapped[float]




    __mapper_args__ = {
        'polymorphic_identity': 'Position4DDAO',
        'inherit_condition': id == PositionDAO.id,
    }

