[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ollama-openai-proxy"
dynamic = ["version"]
description = "A proxy service that translates Ollama API requests to OpenAI-compatible backends"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Development Team", email = "dev@example.com"},
]
keywords = ["ollama", "openai", "proxy", "api", "translation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "httpx>=0.25.0",
    "structlog>=23.2.0",
    "python-multipart>=0.0.6",
    "psutil>=5.9.0",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "httpx-mock>=0.10.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
]

[project.scripts]
ollama-openai-proxy = "src.main:main"

[project.urls]
"Homepage" = "https://github.com/eyalrot/ollama_openai"
"Bug Reports" = "https://github.com/eyalrot/ollama_openai/issues"
"Source" = "https://github.com/eyalrot/ollama_openai"
"Documentation" = "https://github.com/eyalrot/ollama_openai#readme"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools]
# Include standalone Python files that aren't in packages
py-modules = ["_version", "config", "models", "main"]

[tool.setuptools.dynamic]
version = {attr = "_version.__version__"}

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/conftest.py",
    "*/setup.py",
    "*/manage.py",
    "*/.pytest_cache/*",
    "*/htmlcov/*",
    "*/.coverage*",
    "*/build/*",
    "*/dist/*",
    "*/.tox/*",
]

[tool.coverage.report]
# Fail if coverage is below 10%
fail_under = 10
show_missing = true
skip_covered = false
precision = 1
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "pass",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Ollama-OpenAI Proxy Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Quality Gates Configuration
[tool.coverage.threshold]
# Global thresholds
total = 10        # Overall project coverage
new_code = 10     # New code coverage (for PR analysis)

# Per-module thresholds (stricter for core components)
[tool.coverage.threshold.modules]
"src.config" = 10              # Configuration management (critical)
"src.models" = 10              # Data models (high importance)
"src.translators" = 10         # Translation logic (high importance)
"src.routers" = 10             # API routes (medium-high importance)
"src.utils" = 10               # Utilities (medium importance)

# Development quality gates
[tool.coverage.quality_gates]
# Coverage trend analysis (for CI/CD)
max_coverage_drop = 5      # Maximum allowed coverage drop in percentage points
coverage_trend_window = 10  # Number of commits to analyze for trends

# Black Code Formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff Linting Configuration
[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (handled by complexity check)
    "B904",  # raise ... from err (will fix separately)
    "UP035", # typing.Dict/List deprecated (will fix systematically)
    "UP006", # Use dict/list instead of Dict/List (will fix systematically)
    "SIM108", # Use ternary operator (will fix separately)
    "SIM102", # Use single if statement (will fix separately)
    "SIM117", # Use single with statement (will fix separately)
    "F841",  # Local variable assigned but never used (will fix separately)
    "B007",  # Loop control variable not used (will fix separately)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S603", "PLR2004"]  # Allow asserts and magic values in tests

[tool.ruff.lint.isort]
known-first-party = ["src"]

# MyPy Type Checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing adoption
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "httpx_mock.*",
    "memory_profiler.*",
    "psutil.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "always::UserWarning:src.config",
]