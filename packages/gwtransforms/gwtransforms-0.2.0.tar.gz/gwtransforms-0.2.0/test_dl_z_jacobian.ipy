import numpy as np
from astropy.cosmology import Planck18

from gwtransforms.transforms import (
    construct_jacobian,
    ComponentMassesToTotalMassAndMassRatio,
    TotalMassAndMassRatioToChirpMassAndSymmetricMassRatio,
    ComponentMassesToChirpMassAndSymmetricMassRatio,
    RedshiftToLuminosityDistance,
)


batch_shape = (100,)
m1 = 30 * np.ones(batch_shape)
m2 = 20 * np.ones(batch_shape)
redshift = np.geomspace(1e-4, 1e0, batch_shape[0])
params = np.stack((m1, m2, redshift), axis=-1)
dims = {"mass_1": 0, "mass_2": 1, "redshift": 2}
redshift_to_luminosity_distance_transform = RedshiftToLuminosityDistance(
    cosmology=Planck18
)
transforms = [
    ComponentMassesToTotalMassAndMassRatio(),
    TotalMassAndMassRatioToChirpMassAndSymmetricMassRatio(),
    redshift_to_luminosity_distance_transform,
]
new_params, new_dims, jacobian = construct_jacobian(transforms, params, dims)
new_masses, combined_mass_jacobian = (
    ComponentMassesToChirpMassAndSymmetricMassRatio().transform_and_jacobian(
        params[:, :2]  # (m1, m2)
    )
)
dl, ddl_dz = redshift_to_luminosity_distance_transform.transform_and_jacobian(
    params[:, -1]
)
assert np.allclose(new_masses, new_params[:, :2])
assert np.allclose(combined_mass_jacobian, jacobian[:, :2, :2])
assert np.allclose(jacobian[:, :2, -1], 0)
assert np.allclose(jacobian[:, -1, :2], 0)
assert np.allclose(dl, new_params[:, -1])
assert np.allclose(jacobian[:, -1, -1], ddl_dz[:, -1, -1])
