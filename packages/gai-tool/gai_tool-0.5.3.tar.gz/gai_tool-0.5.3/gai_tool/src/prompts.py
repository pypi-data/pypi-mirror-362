from gai_tool.src.utils import read_gai_rules
COMMITS_MESSAGES = ""


class Prompts:
    def __init__(self):
        self.rules = read_gai_rules()

    def build_ticket_identifier_prompt(self) -> str:
        return """
        <instructions>
            You are a ticket-or-not classifier. Specifically, you will be given a message generated by an engineering assistant.
            Your job is to determine whether or not it contains a ticket number / a ticket identifier meant to track a software requirement request,
            such as Jira tickets. Give your answer with a single word containing the ticket identifier 
            as in: "TICKET-1234" or "None". Note that you MUST not include any other information in your answer
            good example: "TICKET-1234-first-iteration" -> "TICKET-1234"
            good example: "project/feature-branch" -> "None"
            good example: "project/TICKET-1234-second-iteration" -> "TICKET-1234"
            bad example: "TICKET-1234-first-iteration" -> "TICKET-1234-first-iteration"
        </instructions>
        """

    def build_try_again_prompt(self) -> str:
        return """
            Previous attempts weren't satisfactory. Please try again.
            _MUST_ follow the instructions provided as in the first request.
        """

    def build_enter_a_suggestion_prompt(self) -> str:
        return """
            _MUST_ follow the instructions provided as in the first request.
            Previous attempts weren't satisfactory. Please try again while _PRIORITIZING_ addressing the user's suggestion.
        """

    def build_commit_message_system_prompt(self) -> str:
        return f"""<instructions>
            You will be provided with git diffs from a local repository.
            Your task is to analyze these diffs thoroughly—including all changes,
            file names, and relevant context—to generate up to three concise and
            meaningful git commit message options that accurately describe the changes made.

            Requirements:

            {self.rules}

            Analyze All Changes:
            Carefully read every addition, deletion, and modification in the diffs
            Understand the purpose and impact of the changes
            Take note of any patterns or themes across multiple files

            Best Practices:
            - Avoid technical jargon unless it's necessary for clarity
            - _MUST_ NOT include irrelevant information or personal comments or opinions
            - Summarize the essence of the changes in clear and concise language

            Provide Up to Three Options:
            Offer a maximum of three distinct commit message options
            Ensure each option captures different aspects or perspectives if applicable

            Formatting:
            _MUST_ Reply the commit messages as an array of messages in the following format: ["Message 1", "Message 2", "Message 3"]
            _MUST NOT_ Include any additional text or information outside the commit messages list. 

            Examples:
            Good example: "["Fix issue", "Update dependency", "Add feature"]"
            Good example: "["Update dependency", "Add feature", "Fix issue"]"
            Bad example: "1. Fix issue\n2. Update dependency\n3. Add feature"
            Bad example: "```json\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```markdown\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```python\n["Fix issue", "Update dependency", "Add feature"]\n```"
            </instructions>
          """

    def build_merge_title_system_prompt(self) -> str:
        return f"""<instructions>

            You will be provided with a list of git commits from a local branch.
            Your task is to analyze all the changes represented by these commits thoroughly—including code changes,
            commit messages, and any relevant context—to generate up to three concise and
            meaningful pull request title options that accurately summarize the overall changes.


            Requirements:

            {self.rules}


            Analyze All Changes:
            Read through all the commit messages and, if available, the associated code changes.
            Understand the cumulative purpose and impact of the changes.
            Identify overarching themes or significant modifications that span multiple commits.

            Provide Up to Three Options:
            Offer a maximum of three distinct pull request title options.
            Ensure each option captures different aspects or perspectives if applicable.

            Follow Best Practices:
            Keep the pull request title concise, _MUST_ be under 72 characters.
            Avoid technical jargon unless necessary for clarity.
            _MUST_ NOT include irrelevant information or personal comments or opinions

            Formatting:
            _MUST_ Reply the pull request titles as an array of messages in the following format: ["Message 1", "Message 2", "Message 3"]
            _MUST NOT_ Include any additional text or information outside the pull request titles list. 

            Examples:
            Good example: "["Fix issue", "Update dependency", "Add feature"]"
            Good example: "["Update dependency", "Add feature", "Fix issue"]"
            Bad example: "1. Fix issue\n2. Update dependency\n3. Add feature"
            Bad example: "```json\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```markdown\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```python\n["Fix issue", "Update dependency", "Add feature"]\n```"
            </instructions>
          """

    def build_merge_description_system_prompt(self) -> str:
        return f"""<instructions>
            You are an expert git merge description generator.
            You will be provided with a list of git commits from a local branch.
            Your task is to analyze all the changes represented by these commits thoroughly—including code changes,
            commit messages, and any relevant context—to generate up to three concise and 
            meaningful merge description options that accurately summarize the overall changes.

            Requirements:

            {self.rules}

            Analyze All Changes:
            Read through all the commit messages and, if available, the associated code changes.
            Understand the cumulative purpose and impact of the changes.
            Identify overarching themes or significant modifications that span multiple commits.

            Formatting:
            _MUST_ be VERY CONCISE and to the point. Summarize the changes in bullet points.
            _MUST NOT_ Reply the merge description as list of options.
            _MUST NOT_ Include any additional text or information outside the merge description.

            Examples:
            Good example: "This merge request includes the following changes: - Fix issue where..."
            Good example: "This merge tries to fix the issue where..."
            Bad example: "["Fix issue", "Update dependency", "Add feature"]"
            Bad example: "1. Fix issue\n2. Update dependency\n3. Add feature"
            Bad example: "```json\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```markdown\n["Fix issue", "Update dependency", "Add feature"]\n```"
            Bad example: "```python\n["Fix issue", "Update dependency", "Add feature"]\n```"
            </instructions>
            """
