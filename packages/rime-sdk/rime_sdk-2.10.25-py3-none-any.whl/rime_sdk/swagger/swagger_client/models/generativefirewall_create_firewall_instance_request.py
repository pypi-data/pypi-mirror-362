# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativefirewallCreateFirewallInstanceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'config': 'GenerativefirewallFirewallRuleConfig',
        'description': 'str',
        'spec': 'GenerativefirewallFirewallInstanceDeploymentConfig',
        'firewall_instance_id': 'RimeUUID'
    }

    attribute_map = {
        'config': 'config',
        'description': 'description',
        'spec': 'spec',
        'firewall_instance_id': 'firewallInstanceId'
    }

    def __init__(self, config=None, description=None, spec=None, firewall_instance_id=None):  # noqa: E501
        """GenerativefirewallCreateFirewallInstanceRequest - a model defined in Swagger"""  # noqa: E501
        self._config = None
        self._description = None
        self._spec = None
        self._firewall_instance_id = None
        self.discriminator = None
        if config is not None:
            self.config = config
        if description is not None:
            self.description = description
        if spec is not None:
            self.spec = spec
        if firewall_instance_id is not None:
            self.firewall_instance_id = firewall_instance_id

    @property
    def config(self):
        """Gets the config of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501


        :return: The config of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :rtype: GenerativefirewallFirewallRuleConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this GenerativefirewallCreateFirewallInstanceRequest.


        :param config: The config of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :type: GenerativefirewallFirewallRuleConfig
        """

        self._config = config

    @property
    def description(self):
        """Gets the description of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501

        Optional human-readable description of the firewall instance.  # noqa: E501

        :return: The description of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GenerativefirewallCreateFirewallInstanceRequest.

        Optional human-readable description of the firewall instance.  # noqa: E501

        :param description: The description of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def spec(self):
        """Gets the spec of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501


        :return: The spec of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :rtype: GenerativefirewallFirewallInstanceDeploymentConfig
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this GenerativefirewallCreateFirewallInstanceRequest.


        :param spec: The spec of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :type: GenerativefirewallFirewallInstanceDeploymentConfig
        """

        self._spec = spec

    @property
    def firewall_instance_id(self):
        """Gets the firewall_instance_id of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501


        :return: The firewall_instance_id of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :rtype: RimeUUID
        """
        return self._firewall_instance_id

    @firewall_instance_id.setter
    def firewall_instance_id(self, firewall_instance_id):
        """Sets the firewall_instance_id of this GenerativefirewallCreateFirewallInstanceRequest.


        :param firewall_instance_id: The firewall_instance_id of this GenerativefirewallCreateFirewallInstanceRequest.  # noqa: E501
        :type: RimeUUID
        """

        self._firewall_instance_id = firewall_instance_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativefirewallCreateFirewallInstanceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativefirewallCreateFirewallInstanceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
