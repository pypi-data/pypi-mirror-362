# coding: utf-8

"""
    AIoD - RAIL

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.20240209-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest

from aiod_rail_sdk.models.publication import Publication


class TestPublication(unittest.TestCase):
    """Publication unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Publication:
        """Test Publication
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Publication`
        """
        model = Publication()
        if include_optional:
            return Publication(
                platform = 'example',
                platform_resource_identifier = '1',
                name = 'The name of this resource',
                date_published = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                same_as = 'https://www.example.com/resource/this_resource',
                is_accessible_for_free = True,
                version = '1.1.0',
                permanent_identifier = 'http://dx.doi.org/10.1093/ajae/aaq063',
                isbn = '9783161484100',
                issn = '20493630',
                ai_asset_identifier = 56,
                ai_resource_identifier = 56,
                aiod_entry = aiod_rail_sdk.models.aio_d_entry_read.AIoDEntryRead(
                    editor = [],
                    status = 'draft',
                    date_modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                alternate_name = ["alias 1","alias 2"],
                application_area = ["Fraud Prevention","Voice Assistance","Disease Classification"],
                citation = [],
                contact = [],
                content = aiod_rail_sdk.models.text.Text(
                    plain = 'Plain text.',
                    html = '<p>Text with <strong>html formatting</strong>.</p>', ),
                creator = [],
                description = aiod_rail_sdk.models.text.Text(
                    plain = 'Plain text.',
                    html = '<p>Text with <strong>html formatting</strong>.</p>', ),
                distribution = [],
                documents = [],
                has_part = [],
                industrial_sector = ["Finance","eCommerce","Healthcare"],
                is_part_of = [],
                keyword = ["keyword1","keyword2"],
                license = 'https://creativecommons.org/share-your-work/public-domain/cc0/',
                media = [],
                note = [],
                relevant_link = ["https://www.example.com/a_relevant_link","https://www.example.com/another_relevant_link"],
                relevant_resource = [],
                relevant_to = [],
                research_area = ["Explainable AI","Physical AI"],
                scientific_domain = ["Anomaly Detection","Voice Recognition","Computer Vision."],
                type = 'journal',
                identifier = 56
            )
        else:
            return Publication(
                name = 'The name of this resource',
                identifier = 56,
        )
        """

    def testPublication(self):
        """Test Publication"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
