# coding: utf-8

"""
    AIoD - RAIL

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.20240603-beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from aiod_rail_sdk.models.run_state import RunState
from pydantic import (
    BaseModel,
    ConfigDict,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class ExperimentRunResponse(BaseModel):
    """
    ExperimentRunResponse
    """  # noqa: E501

    id: StrictStr
    experiment_id: StrictStr
    created_at: datetime
    updated_at: datetime
    retry_count: StrictInt
    state: RunState
    metrics: Dict[str, Union[StrictFloat, StrictInt]]
    is_public: StrictBool
    is_archived: StrictBool
    is_mine: StrictBool
    __properties: ClassVar[List[str]] = [
        "id",
        "experiment_id",
        "created_at",
        "updated_at",
        "retry_count",
        "state",
        "metrics",
        "is_public",
        "is_archived",
        "is_mine",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExperimentRunResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExperimentRunResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "experiment_id": obj.get("experiment_id"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "retry_count": obj.get("retry_count"),
                "state": obj.get("state"),
                "metrics": obj.get("metrics"),
                "is_public": obj.get("is_public"),
                "is_archived": obj.get("is_archived"),
                "is_mine": obj.get("is_mine"),
            }
        )
        return _obj
