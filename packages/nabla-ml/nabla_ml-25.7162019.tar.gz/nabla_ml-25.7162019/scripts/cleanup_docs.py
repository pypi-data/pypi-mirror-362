#!/usr/bin/env python3
"""
Safe cleanup of docs/api directory.

This script removes old/duplicate API documentation files while preserving
the new structured documentation.
"""

import os
from pathlib import Path


def safe_cleanup():
    """Safely remove old API documentation files."""
    api_dir = Path("docs/api")

    if not api_dir.exists():
        print("❌ docs/api directory not found!")
        return

    # Files to keep (our new structured docs)
    keep_dirs = {"core", "nn", "ops", "transforms", "utils"}
    keep_files = {"index.md"}  # The main API index

    removed_count = 0
    kept_count = 0

    print("🧹 Cleaning up docs/api directory...")
    print("\n📁 Keeping these directories (new structured docs):")
    for dir_name in keep_dirs:
        if (api_dir / dir_name).exists():
            print(f"  ✅ {dir_name}/")
            kept_count += 1

    print("\n📄 Keeping these files:")
    for file_name in keep_files:
        if (api_dir / file_name).exists():
            print(f"  ✅ {file_name}")
            kept_count += 1

    print("\n🗑️  Removing old/duplicate files:")

    # Remove old individual .md files (generated by autosummary)
    for item in api_dir.iterdir():
        if item.is_file():
            if item.name not in keep_files:
                print(f"  🗑️  {item.name}")
                item.unlink()
                removed_count += 1
        elif item.is_dir():
            if item.name not in keep_dirs:
                print(f"  🗑️  {item.name}/ (directory)")
                import shutil

                shutil.rmtree(item)
                removed_count += 1

    print("\n✨ Cleanup complete!")
    print(f"   📊 Kept: {kept_count} items")
    print(f"   🗑️  Removed: {removed_count} old/duplicate items")
    print("\n📁 Final structure:")

    # Show the final clean structure
    for item in sorted(api_dir.iterdir()):
        if item.is_dir():
            print(f"   📁 {item.name}/")
            # Show a few items in each directory
            subitems = list(item.iterdir())[:3]
            for subitem in subitems:
                print(f"      📄 {subitem.name}")
            if len(list(item.iterdir())) > 3:
                print(f"      ... and {len(list(item.iterdir())) - 3} more")
        else:
            print(f"   📄 {item.name}")


if __name__ == "__main__":
    # Change to the project root
    os.chdir(Path(__file__).parent.parent)
    safe_cleanup()
