[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "meltano-state-backend-snowflake"
version = "0.1.0"
description = "Meltano State Backend for Snowflake"
readme = "README.md"
license = "MIT"
license-files = [
  "LICENSE",
]
authors = [
  { name = "Taylor Murphy", email = "taylor@arch.dev" },
]
requires-python = ">=3.9"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "meltano>=3.7",
  "snowflake-connector-python>=3,<4",
]

[project.entry-points."meltano.settings"]
snowflake_account = "meltano_state_backend_snowflake.backend:SNOWFLAKE_ACCOUNT"
snowflake_database = "meltano_state_backend_snowflake.backend:SNOWFLAKE_DATABASE"
snowflake_password = "meltano_state_backend_snowflake.backend:SNOWFLAKE_PASSWORD"
snowflake_role = "meltano_state_backend_snowflake.backend:SNOWFLAKE_ROLE"
snowflake_schema = "meltano_state_backend_snowflake.backend:SNOWFLAKE_SCHEMA"
snowflake_user = "meltano_state_backend_snowflake.backend:SNOWFLAKE_USER"
snowflake_warehouse = "meltano_state_backend_snowflake.backend:SNOWFLAKE_WAREHOUSE"

[project.entry-points."meltano.state_backends"]
snowflake = "meltano_state_backend_snowflake.backend:SnowflakeStateStoreManager"

[dependency-groups]
dev = [
  { include-group = "lint" },
  { include-group = "tests" },
  { include-group = "types" },
]
lint = [
  "ruff>=0.12.3",
]
tests = [
  "coverage[toml]>=7.9",
  "pytest>=8.4.1",
]
types = [
  "mypy>=1.17",
]

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "COM",  # flake8-commas
  "D",    # pydocstyle/flake8-docstrings
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle (error)
  "EM",   # flake8-errmsg
  "ERA",  # flake8-eradicate
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TC",   # flake8-type-checking
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle (warning)
  "YTT",  # flake8-2020
]
ignore = [
  "COM812", # Handled by the Ruff formatter
  "ISC001", # Handled by the Ruff formatter
]
per-file-ignores."tests/**" = [
  "D1",
  "INP",  # Don't require __init__.py files in tests directories
  "S101", # Allow 'assert' in tests
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = [
  "--durations=10",
]

[tool.coverage.paths]
package = [
  "src/meltano_state_backend_snowflake/",
  "*/site-packages/meltano_state_backend_snowflake/",
]

[tool.coverage.run]
branch = true
source = [
  "meltano_state_backend_snowflake",
  "tests",
]
parallel = true
relative_files = true

[tool.coverage.report]
exclude_also = [
  '''if (t\.)?TYPE_CHECKING:''',
]
fail_under = 100

[tool.tox]
min_version = "4.22"
requires = [ "tox", "tox-uv" ]
env_list = [
  "types",
  "lint",
  "3.13",
  "3.12",
  "3.11",
  "3.10",
  "3.9",
  "coverage",
]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
dependency_groups = [ "tests" ]
commands = [ [ "coverage", "run", "-m", "pytest", { replace = "posargs", default = [ "tests" ], extend = true } ] ]

[tool.tox.env.coverage]
depends = [
  "3.9",
  "3.10",
  "3.11",
  "3.12",
  "3.13",
]
dependency_groups = [ "tests" ]
commands = [
  [ "coverage", "combine", "--debug=pathmap" ],
  [ "coverage", "report", "--show-missing" ],
  [ "coverage", "xml" ],
]

[tool.tox.env.lint]
dependency_groups = [ "lint" ]
skip_install = true
commands = [
  [ "ruff", "check", "--fix", "--show-fixes", "--exit-non-zero-on-fix" ],
  [ "ruff", "format", "--exit-non-zero-on-format" ],
]

[tool.tox.env.types]
dependency_groups = [ "tests", "types" ]
commands = [
  [
    "mypy",
    "--strict",
    { replace = "posargs", default = [
      "src/meltano_state_backend_snowflake",
      "tests",
    ], extend = true },
  ],
]
