[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "networkx-mcp-server"
version = "2.0.0"  # Security Fortress release
description = "NetworkX MCP Server with Security Fortress - Enterprise-grade secure graph analysis with AI-powered threat detection"
readme = "README.md"
license = {text = "MIT"}
keywords = ["networkx", "graph", "analysis", "mcp", "ai", "claude", "visualization", "network", "centrality", "community", "security", "fortress", "threat-detection", "zero-trust", "enterprise"]
authors = [{name = "Bright Liu", email = "brightliu@college.harvard.edu"}]
maintainers = [{name = "Bright Liu", email = "brightliu@college.harvard.edu"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Environment :: Console",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"
dependencies = [
    "networkx>=3.0",
    "numpy>=1.21.0",  # Required for NetworkX and core algorithms
    "matplotlib>=3.5.0",  # Required for graph visualization
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",  # For coverage testing
    "coverage>=7.0.0",  # For coverage reporting
    "black>=24.0.0",
    "ruff>=0.8.0",
    "psutil>=5.9.0",  # For memory testing
    "hypothesis>=6.0.0",  # For property-based testing
    "pandas>=1.3.0",  # For IO handler tests
    "requests>=2.28.0",  # For integration tests
]

# I/O format support (adds 35MB!)
excel = [
    "pandas>=1.3.0",
    "openpyxl>=3.0.0",
]

# Scientific computing support (adds 15MB!)
scipy = [
    "scipy>=1.7.0",
]

# Enterprise security and production features (adds 35MB)
enterprise = [
    "authlib>=1.3.0",          # OAuth 2.1 with PKCE compliance
    "pyjwt>=2.8.0",            # JWT token handling
    "pydantic>=2.5.0",         # Input validation and settings
    "pydantic-settings>=2.1.0", # Configuration management
    "structlog>=23.2.0",       # Structured logging
    "prometheus-client>=0.19.0", # Metrics collection
    "aiohttp>=3.9.0",          # Async HTTP server
    "slowapi>=0.1.9",          # Rate limiting
    "cryptography>=41.0.0",    # Security primitives
    "psutil>=5.9.0",           # System monitoring for sandbox
    "docker>=7.0.0",           # Container orchestration (optional)
]

# Full installation with all features (adds 95MB!)
full = [
    "pandas>=1.3.0",
    "scipy>=1.7.0",
    "matplotlib>=3.4.0",
    "openpyxl>=3.0.0",
    # Include enterprise features
    "authlib>=1.3.0",
    "pyjwt>=2.8.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "aiohttp>=3.9.0",
    "slowapi>=0.1.9",
    "cryptography>=41.0.0",
    "psutil>=5.9.0",
    "docker>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/Bright-L01/networkx-mcp-server"
Repository = "https://github.com/Bright-L01/networkx-mcp-server"
Issues = "https://github.com/Bright-L01/networkx-mcp-server/issues"

[project.scripts]
networkx-mcp = "networkx_mcp.server_minimal:main"           # Default: truly minimal
networkx-mcp-full = "networkx_mcp.server:main"              # With pandas/scipy support  
networkx-mcp-enterprise = "networkx_mcp.enterprise.server:main"  # Enterprise edition
networkx-mcp-fortress = "networkx_mcp.security_fortress.fortress_server:main"  # Security Fortress

[tool.setuptools.packages.find]
where = ["src"]
include = ["networkx_mcp*"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
]
ignore = ["E501"]  # line too long

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "-v",
]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'