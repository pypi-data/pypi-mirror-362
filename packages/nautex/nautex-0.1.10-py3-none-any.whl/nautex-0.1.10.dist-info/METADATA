Metadata-Version: 2.4
Name: nautex
Version: 0.1.10
Summary: Nautex AI MCP server that works as Product and Project manager for coding agents
Author-email: Ivan Makarov <ivan@nautex.ai>
License-Expression: MIT
Project-URL: Homepage, https://github.com/hmldns/nautex
Project-URL: Repository, https://github.com/hmldns/nautex
Project-URL: Documentation, https://github.com/hmldns/nautex#readme
Project-URL: Bug Reports, https://github.com/hmldns/nautex/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Utilities
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic<3.0.0,>=2.0.0
Requires-Dist: pydantic-settings<3.0.0,>=2.0.0
Requires-Dist: aiohttp<4.0.0,>=3.9.0
Requires-Dist: textual<5.0.0,>=3.0.0
Requires-Dist: fastmcp>=2.8.1
Requires-Dist: python-dotenv<2.0.0,>=1.0.0
Requires-Dist: aiofiles>=20.0.0
Provides-Extra: dev
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: build>=0.10.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Dynamic: license-file


This is an MCP server that integrates PRD and TRD building tool [Nautex AI](https://nautex.ai) with the Cursor IDE. 

# Motivation

Since LLM Coding Agents do not attend team meetings, this tool addresses the challenge of conveying the product and 
technical vision to them.

# How It Works 


Nautex AI acts as an Architect, Technical Product Manager, and Project Manager for coding agents, 
speeding up AI-assisted development by communicating requirements effectively. 
This MCP server pulls guidance instructions from Nautex AI; tasks contain to-do items, 
references to the affected files, and requirements that are automatically synced for the Coding Agent's availability.


By [Ivan Makarov](https://x.com/ivan_mkrv)

# Setup

## Via Terminal UI

1. Go to the new project folder and run in the terminal:
```bash
uvx nautex setup
```

<details>
<summary>How to Install uv</summary>

On macOS and linux:
```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

On Windows
```bash
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```

Check the latest instruction from [UV repo](https://github.com/astral-sh/uv) for details and updates
</details>

You should see the terminal user interface

![Setup Screenshot](doc/setup_screen.png)

2. Follow the guidelines via UI 
 - go [Nautex.ai](https://app.nautex.ai/settings/nautex-api) to sign up and create API token
 - In the web app, create PRD and TRD documents:
   - Chat with the bot for capturing requirements. 
   - After initial documents generation Create files map of the project inside the map.
   - Then, after reviewing resulted map create implementation plan.
   - Go back to the CLI UI
- Select project
- Select implementation plan
- Ensure you've got right MCP config in `.cursor/mcp.json`, manually or via TUI (it will merge with any existing config)

```json
{
  "mcpServers": {
    "nautex": {
      "command": "uvx",
      "args": [
        "nautex",
        "mcp"
      ]
    }
  }
}
```
- Ensure nautex workflow rules are in `.cursor/rules/` folder via TUI command.

3. (Optional) Check MCP server response ```uvx nautex mcp test next_scope```

4. Tell cursor in Agent mode: 
 > Pull nautex rules and proceed to the next scope

5. Proceed with the plan by reviewing progress and supporting the Agent with validation feedback and inputs.

