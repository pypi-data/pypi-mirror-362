# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class UpdateCableDesignAssignedItemInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cd_item_id': 'int',
        'cable_type_id': 'int',
        'cable_type_name': 'str',
        'inventory_id': 'int',
        'inventory_tag': 'str',
        'is_installed': 'bool'
    }

    attribute_map = {
        'cd_item_id': 'cdItemId',
        'cable_type_id': 'cableTypeId',
        'cable_type_name': 'cableTypeName',
        'inventory_id': 'inventoryId',
        'inventory_tag': 'inventoryTag',
        'is_installed': 'isInstalled'
    }

    def __init__(self, cd_item_id=None, cable_type_id=None, cable_type_name=None, inventory_id=None, inventory_tag=None, is_installed=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCableDesignAssignedItemInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cd_item_id = None
        self._cable_type_id = None
        self._cable_type_name = None
        self._inventory_id = None
        self._inventory_tag = None
        self._is_installed = None
        self.discriminator = None

        if cd_item_id is not None:
            self.cd_item_id = cd_item_id
        if cable_type_id is not None:
            self.cable_type_id = cable_type_id
        if cable_type_name is not None:
            self.cable_type_name = cable_type_name
        if inventory_id is not None:
            self.inventory_id = inventory_id
        if inventory_tag is not None:
            self.inventory_tag = inventory_tag
        if is_installed is not None:
            self.is_installed = is_installed

    @property
    def cd_item_id(self):
        """Gets the cd_item_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The cd_item_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: int
        """
        return self._cd_item_id

    @cd_item_id.setter
    def cd_item_id(self, cd_item_id):
        """Sets the cd_item_id of this UpdateCableDesignAssignedItemInformation.


        :param cd_item_id: The cd_item_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: int
        """

        self._cd_item_id = cd_item_id

    @property
    def cable_type_id(self):
        """Gets the cable_type_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The cable_type_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: int
        """
        return self._cable_type_id

    @cable_type_id.setter
    def cable_type_id(self, cable_type_id):
        """Sets the cable_type_id of this UpdateCableDesignAssignedItemInformation.


        :param cable_type_id: The cable_type_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: int
        """

        self._cable_type_id = cable_type_id

    @property
    def cable_type_name(self):
        """Gets the cable_type_name of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The cable_type_name of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: str
        """
        return self._cable_type_name

    @cable_type_name.setter
    def cable_type_name(self, cable_type_name):
        """Sets the cable_type_name of this UpdateCableDesignAssignedItemInformation.


        :param cable_type_name: The cable_type_name of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: str
        """

        self._cable_type_name = cable_type_name

    @property
    def inventory_id(self):
        """Gets the inventory_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The inventory_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: int
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """Sets the inventory_id of this UpdateCableDesignAssignedItemInformation.


        :param inventory_id: The inventory_id of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: int
        """

        self._inventory_id = inventory_id

    @property
    def inventory_tag(self):
        """Gets the inventory_tag of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The inventory_tag of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: str
        """
        return self._inventory_tag

    @inventory_tag.setter
    def inventory_tag(self, inventory_tag):
        """Sets the inventory_tag of this UpdateCableDesignAssignedItemInformation.


        :param inventory_tag: The inventory_tag of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: str
        """

        self._inventory_tag = inventory_tag

    @property
    def is_installed(self):
        """Gets the is_installed of this UpdateCableDesignAssignedItemInformation.  # noqa: E501


        :return: The is_installed of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :rtype: bool
        """
        return self._is_installed

    @is_installed.setter
    def is_installed(self, is_installed):
        """Sets the is_installed of this UpdateCableDesignAssignedItemInformation.


        :param is_installed: The is_installed of this UpdateCableDesignAssignedItemInformation.  # noqa: E501
        :type: bool
        """

        self._is_installed = is_installed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCableDesignAssignedItemInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCableDesignAssignedItemInformation):
            return True

        return self.to_dict() != other.to_dict()
