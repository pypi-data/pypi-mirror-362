# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class MachineDesignConnectorListObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_connector': 'ItemConnector',
        'connected_cables': 'list[ItemDomainCableDesign]',
        'connected_items': 'list[Item]',
        'connected_to_items_string': 'str',
        'connected_cables_string': 'str',
        'connector_name': 'str'
    }

    attribute_map = {
        'item_connector': 'itemConnector',
        'connected_cables': 'connectedCables',
        'connected_items': 'connectedItems',
        'connected_to_items_string': 'connectedToItemsString',
        'connected_cables_string': 'connectedCablesString',
        'connector_name': 'connectorName'
    }

    def __init__(self, item_connector=None, connected_cables=None, connected_items=None, connected_to_items_string=None, connected_cables_string=None, connector_name=None, local_vars_configuration=None):  # noqa: E501
        """MachineDesignConnectorListObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_connector = None
        self._connected_cables = None
        self._connected_items = None
        self._connected_to_items_string = None
        self._connected_cables_string = None
        self._connector_name = None
        self.discriminator = None

        if item_connector is not None:
            self.item_connector = item_connector
        if connected_cables is not None:
            self.connected_cables = connected_cables
        if connected_items is not None:
            self.connected_items = connected_items
        if connected_to_items_string is not None:
            self.connected_to_items_string = connected_to_items_string
        if connected_cables_string is not None:
            self.connected_cables_string = connected_cables_string
        if connector_name is not None:
            self.connector_name = connector_name

    @property
    def item_connector(self):
        """Gets the item_connector of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The item_connector of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: ItemConnector
        """
        return self._item_connector

    @item_connector.setter
    def item_connector(self, item_connector):
        """Sets the item_connector of this MachineDesignConnectorListObject.


        :param item_connector: The item_connector of this MachineDesignConnectorListObject.  # noqa: E501
        :type: ItemConnector
        """

        self._item_connector = item_connector

    @property
    def connected_cables(self):
        """Gets the connected_cables of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The connected_cables of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: list[ItemDomainCableDesign]
        """
        return self._connected_cables

    @connected_cables.setter
    def connected_cables(self, connected_cables):
        """Sets the connected_cables of this MachineDesignConnectorListObject.


        :param connected_cables: The connected_cables of this MachineDesignConnectorListObject.  # noqa: E501
        :type: list[ItemDomainCableDesign]
        """

        self._connected_cables = connected_cables

    @property
    def connected_items(self):
        """Gets the connected_items of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The connected_items of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: list[Item]
        """
        return self._connected_items

    @connected_items.setter
    def connected_items(self, connected_items):
        """Sets the connected_items of this MachineDesignConnectorListObject.


        :param connected_items: The connected_items of this MachineDesignConnectorListObject.  # noqa: E501
        :type: list[Item]
        """

        self._connected_items = connected_items

    @property
    def connected_to_items_string(self):
        """Gets the connected_to_items_string of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The connected_to_items_string of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: str
        """
        return self._connected_to_items_string

    @connected_to_items_string.setter
    def connected_to_items_string(self, connected_to_items_string):
        """Sets the connected_to_items_string of this MachineDesignConnectorListObject.


        :param connected_to_items_string: The connected_to_items_string of this MachineDesignConnectorListObject.  # noqa: E501
        :type: str
        """

        self._connected_to_items_string = connected_to_items_string

    @property
    def connected_cables_string(self):
        """Gets the connected_cables_string of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The connected_cables_string of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: str
        """
        return self._connected_cables_string

    @connected_cables_string.setter
    def connected_cables_string(self, connected_cables_string):
        """Sets the connected_cables_string of this MachineDesignConnectorListObject.


        :param connected_cables_string: The connected_cables_string of this MachineDesignConnectorListObject.  # noqa: E501
        :type: str
        """

        self._connected_cables_string = connected_cables_string

    @property
    def connector_name(self):
        """Gets the connector_name of this MachineDesignConnectorListObject.  # noqa: E501


        :return: The connector_name of this MachineDesignConnectorListObject.  # noqa: E501
        :rtype: str
        """
        return self._connector_name

    @connector_name.setter
    def connector_name(self, connector_name):
        """Sets the connector_name of this MachineDesignConnectorListObject.


        :param connector_name: The connector_name of this MachineDesignConnectorListObject.  # noqa: E501
        :type: str
        """

        self._connector_name = connector_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineDesignConnectorListObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MachineDesignConnectorListObject):
            return True

        return self.to_dict() != other.to_dict()
