# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class NewMAARCInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'entity_type_list': 'list[EntityType]',
        'item_projects_list': 'list[ItemProject]',
        'owner_user': 'UserInfo',
        'owner_group': 'UserGroup',
        'parent_item_id': 'int',
        'parent_element_name': 'str',
        'experiment_file_path': 'str',
        'experiment_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'entity_type_list': 'entityTypeList',
        'item_projects_list': 'itemProjectsList',
        'owner_user': 'ownerUser',
        'owner_group': 'ownerGroup',
        'parent_item_id': 'parentItemId',
        'parent_element_name': 'parentElementName',
        'experiment_file_path': 'experimentFilePath',
        'experiment_name': 'experimentName'
    }

    def __init__(self, name=None, description=None, entity_type_list=None, item_projects_list=None, owner_user=None, owner_group=None, parent_item_id=None, parent_element_name=None, experiment_file_path=None, experiment_name=None, local_vars_configuration=None):  # noqa: E501
        """NewMAARCInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._entity_type_list = None
        self._item_projects_list = None
        self._owner_user = None
        self._owner_group = None
        self._parent_item_id = None
        self._parent_element_name = None
        self._experiment_file_path = None
        self._experiment_name = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if entity_type_list is not None:
            self.entity_type_list = entity_type_list
        if item_projects_list is not None:
            self.item_projects_list = item_projects_list
        if owner_user is not None:
            self.owner_user = owner_user
        if owner_group is not None:
            self.owner_group = owner_group
        if parent_item_id is not None:
            self.parent_item_id = parent_item_id
        if parent_element_name is not None:
            self.parent_element_name = parent_element_name
        if experiment_file_path is not None:
            self.experiment_file_path = experiment_file_path
        if experiment_name is not None:
            self.experiment_name = experiment_name

    @property
    def name(self):
        """Gets the name of this NewMAARCInformation.  # noqa: E501


        :return: The name of this NewMAARCInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NewMAARCInformation.


        :param name: The name of this NewMAARCInformation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this NewMAARCInformation.  # noqa: E501


        :return: The description of this NewMAARCInformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewMAARCInformation.


        :param description: The description of this NewMAARCInformation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_type_list(self):
        """Gets the entity_type_list of this NewMAARCInformation.  # noqa: E501


        :return: The entity_type_list of this NewMAARCInformation.  # noqa: E501
        :rtype: list[EntityType]
        """
        return self._entity_type_list

    @entity_type_list.setter
    def entity_type_list(self, entity_type_list):
        """Sets the entity_type_list of this NewMAARCInformation.


        :param entity_type_list: The entity_type_list of this NewMAARCInformation.  # noqa: E501
        :type: list[EntityType]
        """

        self._entity_type_list = entity_type_list

    @property
    def item_projects_list(self):
        """Gets the item_projects_list of this NewMAARCInformation.  # noqa: E501


        :return: The item_projects_list of this NewMAARCInformation.  # noqa: E501
        :rtype: list[ItemProject]
        """
        return self._item_projects_list

    @item_projects_list.setter
    def item_projects_list(self, item_projects_list):
        """Sets the item_projects_list of this NewMAARCInformation.


        :param item_projects_list: The item_projects_list of this NewMAARCInformation.  # noqa: E501
        :type: list[ItemProject]
        """

        self._item_projects_list = item_projects_list

    @property
    def owner_user(self):
        """Gets the owner_user of this NewMAARCInformation.  # noqa: E501


        :return: The owner_user of this NewMAARCInformation.  # noqa: E501
        :rtype: UserInfo
        """
        return self._owner_user

    @owner_user.setter
    def owner_user(self, owner_user):
        """Sets the owner_user of this NewMAARCInformation.


        :param owner_user: The owner_user of this NewMAARCInformation.  # noqa: E501
        :type: UserInfo
        """

        self._owner_user = owner_user

    @property
    def owner_group(self):
        """Gets the owner_group of this NewMAARCInformation.  # noqa: E501


        :return: The owner_group of this NewMAARCInformation.  # noqa: E501
        :rtype: UserGroup
        """
        return self._owner_group

    @owner_group.setter
    def owner_group(self, owner_group):
        """Sets the owner_group of this NewMAARCInformation.


        :param owner_group: The owner_group of this NewMAARCInformation.  # noqa: E501
        :type: UserGroup
        """

        self._owner_group = owner_group

    @property
    def parent_item_id(self):
        """Gets the parent_item_id of this NewMAARCInformation.  # noqa: E501


        :return: The parent_item_id of this NewMAARCInformation.  # noqa: E501
        :rtype: int
        """
        return self._parent_item_id

    @parent_item_id.setter
    def parent_item_id(self, parent_item_id):
        """Sets the parent_item_id of this NewMAARCInformation.


        :param parent_item_id: The parent_item_id of this NewMAARCInformation.  # noqa: E501
        :type: int
        """

        self._parent_item_id = parent_item_id

    @property
    def parent_element_name(self):
        """Gets the parent_element_name of this NewMAARCInformation.  # noqa: E501


        :return: The parent_element_name of this NewMAARCInformation.  # noqa: E501
        :rtype: str
        """
        return self._parent_element_name

    @parent_element_name.setter
    def parent_element_name(self, parent_element_name):
        """Sets the parent_element_name of this NewMAARCInformation.


        :param parent_element_name: The parent_element_name of this NewMAARCInformation.  # noqa: E501
        :type: str
        """

        self._parent_element_name = parent_element_name

    @property
    def experiment_file_path(self):
        """Gets the experiment_file_path of this NewMAARCInformation.  # noqa: E501


        :return: The experiment_file_path of this NewMAARCInformation.  # noqa: E501
        :rtype: str
        """
        return self._experiment_file_path

    @experiment_file_path.setter
    def experiment_file_path(self, experiment_file_path):
        """Sets the experiment_file_path of this NewMAARCInformation.


        :param experiment_file_path: The experiment_file_path of this NewMAARCInformation.  # noqa: E501
        :type: str
        """

        self._experiment_file_path = experiment_file_path

    @property
    def experiment_name(self):
        """Gets the experiment_name of this NewMAARCInformation.  # noqa: E501


        :return: The experiment_name of this NewMAARCInformation.  # noqa: E501
        :rtype: str
        """
        return self._experiment_name

    @experiment_name.setter
    def experiment_name(self, experiment_name):
        """Sets the experiment_name of this NewMAARCInformation.


        :param experiment_name: The experiment_name of this NewMAARCInformation.  # noqa: E501
        :type: str
        """

        self._experiment_name = experiment_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewMAARCInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewMAARCInformation):
            return True

        return self.to_dict() != other.to_dict()
