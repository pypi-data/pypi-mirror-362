# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemDomainCableDesignAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connection_list': 'list[CableDesignConnectionListSummaryObject]',
        'catalog_item': 'ItemDomainCableCatalog',
        'inventory_item': 'ItemDomainCableInventory',
        'assigned_item': 'Item',
        'technical_system_list': 'list[ItemCategory]',
        'alternate_name': 'str',
        'is_housed': 'bool'
    }

    attribute_map = {
        'connection_list': 'connectionList',
        'catalog_item': 'catalogItem',
        'inventory_item': 'inventoryItem',
        'assigned_item': 'assignedItem',
        'technical_system_list': 'technicalSystemList',
        'alternate_name': 'alternateName',
        'is_housed': 'isHoused'
    }

    def __init__(self, connection_list=None, catalog_item=None, inventory_item=None, assigned_item=None, technical_system_list=None, alternate_name=None, is_housed=None, local_vars_configuration=None):  # noqa: E501
        """ItemDomainCableDesignAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connection_list = None
        self._catalog_item = None
        self._inventory_item = None
        self._assigned_item = None
        self._technical_system_list = None
        self._alternate_name = None
        self._is_housed = None
        self.discriminator = None

        if connection_list is not None:
            self.connection_list = connection_list
        if catalog_item is not None:
            self.catalog_item = catalog_item
        if inventory_item is not None:
            self.inventory_item = inventory_item
        if assigned_item is not None:
            self.assigned_item = assigned_item
        if technical_system_list is not None:
            self.technical_system_list = technical_system_list
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if is_housed is not None:
            self.is_housed = is_housed

    @property
    def connection_list(self):
        """Gets the connection_list of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The connection_list of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: list[CableDesignConnectionListSummaryObject]
        """
        return self._connection_list

    @connection_list.setter
    def connection_list(self, connection_list):
        """Sets the connection_list of this ItemDomainCableDesignAllOf.


        :param connection_list: The connection_list of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: list[CableDesignConnectionListSummaryObject]
        """

        self._connection_list = connection_list

    @property
    def catalog_item(self):
        """Gets the catalog_item of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The catalog_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: ItemDomainCableCatalog
        """
        return self._catalog_item

    @catalog_item.setter
    def catalog_item(self, catalog_item):
        """Sets the catalog_item of this ItemDomainCableDesignAllOf.


        :param catalog_item: The catalog_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: ItemDomainCableCatalog
        """

        self._catalog_item = catalog_item

    @property
    def inventory_item(self):
        """Gets the inventory_item of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The inventory_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: ItemDomainCableInventory
        """
        return self._inventory_item

    @inventory_item.setter
    def inventory_item(self, inventory_item):
        """Sets the inventory_item of this ItemDomainCableDesignAllOf.


        :param inventory_item: The inventory_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: ItemDomainCableInventory
        """

        self._inventory_item = inventory_item

    @property
    def assigned_item(self):
        """Gets the assigned_item of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The assigned_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: Item
        """
        return self._assigned_item

    @assigned_item.setter
    def assigned_item(self, assigned_item):
        """Sets the assigned_item of this ItemDomainCableDesignAllOf.


        :param assigned_item: The assigned_item of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: Item
        """

        self._assigned_item = assigned_item

    @property
    def technical_system_list(self):
        """Gets the technical_system_list of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The technical_system_list of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: list[ItemCategory]
        """
        return self._technical_system_list

    @technical_system_list.setter
    def technical_system_list(self, technical_system_list):
        """Sets the technical_system_list of this ItemDomainCableDesignAllOf.


        :param technical_system_list: The technical_system_list of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: list[ItemCategory]
        """

        self._technical_system_list = technical_system_list

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The alternate_name of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ItemDomainCableDesignAllOf.


        :param alternate_name: The alternate_name of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def is_housed(self):
        """Gets the is_housed of this ItemDomainCableDesignAllOf.  # noqa: E501


        :return: The is_housed of this ItemDomainCableDesignAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_housed

    @is_housed.setter
    def is_housed(self, is_housed):
        """Sets the is_housed of this ItemDomainCableDesignAllOf.


        :param is_housed: The is_housed of this ItemDomainCableDesignAllOf.  # noqa: E501
        :type: bool
        """

        self._is_housed = is_housed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDomainCableDesignAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemDomainCableDesignAllOf):
            return True

        return self.to_dict() != other.to_dict()
