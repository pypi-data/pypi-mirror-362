# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemMetadataIOC(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'machine_tag': 'str',
        'function_tag': 'str',
        'deployment_status': 'str',
        'pre_boot': 'str',
        'post_boot': 'str',
        'power_cycle': 'str',
        'additional_md': 'str',
        'boot_instructions': 'str',
        'core_metadata_property_value': 'PropertyValue'
    }

    attribute_map = {
        'machine_tag': 'machineTag',
        'function_tag': 'functionTag',
        'deployment_status': 'deploymentStatus',
        'pre_boot': 'preBoot',
        'post_boot': 'postBoot',
        'power_cycle': 'powerCycle',
        'additional_md': 'additionalMd',
        'boot_instructions': 'bootInstructions',
        'core_metadata_property_value': 'coreMetadataPropertyValue'
    }

    def __init__(self, machine_tag=None, function_tag=None, deployment_status=None, pre_boot=None, post_boot=None, power_cycle=None, additional_md=None, boot_instructions=None, core_metadata_property_value=None, local_vars_configuration=None):  # noqa: E501
        """ItemMetadataIOC - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._machine_tag = None
        self._function_tag = None
        self._deployment_status = None
        self._pre_boot = None
        self._post_boot = None
        self._power_cycle = None
        self._additional_md = None
        self._boot_instructions = None
        self._core_metadata_property_value = None
        self.discriminator = None

        if machine_tag is not None:
            self.machine_tag = machine_tag
        if function_tag is not None:
            self.function_tag = function_tag
        if deployment_status is not None:
            self.deployment_status = deployment_status
        if pre_boot is not None:
            self.pre_boot = pre_boot
        if post_boot is not None:
            self.post_boot = post_boot
        if power_cycle is not None:
            self.power_cycle = power_cycle
        if additional_md is not None:
            self.additional_md = additional_md
        if boot_instructions is not None:
            self.boot_instructions = boot_instructions
        if core_metadata_property_value is not None:
            self.core_metadata_property_value = core_metadata_property_value

    @property
    def machine_tag(self):
        """Gets the machine_tag of this ItemMetadataIOC.  # noqa: E501


        :return: The machine_tag of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._machine_tag

    @machine_tag.setter
    def machine_tag(self, machine_tag):
        """Sets the machine_tag of this ItemMetadataIOC.


        :param machine_tag: The machine_tag of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._machine_tag = machine_tag

    @property
    def function_tag(self):
        """Gets the function_tag of this ItemMetadataIOC.  # noqa: E501


        :return: The function_tag of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._function_tag

    @function_tag.setter
    def function_tag(self, function_tag):
        """Sets the function_tag of this ItemMetadataIOC.


        :param function_tag: The function_tag of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._function_tag = function_tag

    @property
    def deployment_status(self):
        """Gets the deployment_status of this ItemMetadataIOC.  # noqa: E501


        :return: The deployment_status of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this ItemMetadataIOC.


        :param deployment_status: The deployment_status of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._deployment_status = deployment_status

    @property
    def pre_boot(self):
        """Gets the pre_boot of this ItemMetadataIOC.  # noqa: E501


        :return: The pre_boot of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._pre_boot

    @pre_boot.setter
    def pre_boot(self, pre_boot):
        """Sets the pre_boot of this ItemMetadataIOC.


        :param pre_boot: The pre_boot of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._pre_boot = pre_boot

    @property
    def post_boot(self):
        """Gets the post_boot of this ItemMetadataIOC.  # noqa: E501


        :return: The post_boot of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._post_boot

    @post_boot.setter
    def post_boot(self, post_boot):
        """Sets the post_boot of this ItemMetadataIOC.


        :param post_boot: The post_boot of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._post_boot = post_boot

    @property
    def power_cycle(self):
        """Gets the power_cycle of this ItemMetadataIOC.  # noqa: E501


        :return: The power_cycle of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._power_cycle

    @power_cycle.setter
    def power_cycle(self, power_cycle):
        """Sets the power_cycle of this ItemMetadataIOC.


        :param power_cycle: The power_cycle of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._power_cycle = power_cycle

    @property
    def additional_md(self):
        """Gets the additional_md of this ItemMetadataIOC.  # noqa: E501


        :return: The additional_md of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._additional_md

    @additional_md.setter
    def additional_md(self, additional_md):
        """Sets the additional_md of this ItemMetadataIOC.


        :param additional_md: The additional_md of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._additional_md = additional_md

    @property
    def boot_instructions(self):
        """Gets the boot_instructions of this ItemMetadataIOC.  # noqa: E501


        :return: The boot_instructions of this ItemMetadataIOC.  # noqa: E501
        :rtype: str
        """
        return self._boot_instructions

    @boot_instructions.setter
    def boot_instructions(self, boot_instructions):
        """Sets the boot_instructions of this ItemMetadataIOC.


        :param boot_instructions: The boot_instructions of this ItemMetadataIOC.  # noqa: E501
        :type: str
        """

        self._boot_instructions = boot_instructions

    @property
    def core_metadata_property_value(self):
        """Gets the core_metadata_property_value of this ItemMetadataIOC.  # noqa: E501


        :return: The core_metadata_property_value of this ItemMetadataIOC.  # noqa: E501
        :rtype: PropertyValue
        """
        return self._core_metadata_property_value

    @core_metadata_property_value.setter
    def core_metadata_property_value(self, core_metadata_property_value):
        """Sets the core_metadata_property_value of this ItemMetadataIOC.


        :param core_metadata_property_value: The core_metadata_property_value of this ItemMetadataIOC.  # noqa: E501
        :type: PropertyValue
        """

        self._core_metadata_property_value = core_metadata_property_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemMetadataIOC):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemMetadataIOC):
            return True

        return self.to_dict() != other.to_dict()
