# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemDomainCableDesignMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cable_design_id': 'int',
        'external_cable_name': 'str',
        'import_cable_id': 'str',
        'alternate_cable_id': 'str',
        'laying': 'str',
        'voltage': 'str',
        'routed_length': 'str',
        'route': 'str',
        'total_req_length': 'str',
        'notes': 'str',
        'endpoint1_description': 'str',
        'endpoint1_route': 'str',
        'endpoint1_end_length': 'str',
        'endpoint1_termination': 'str',
        'endpoint1_pinlist': 'str',
        'endpoint1_notes': 'str',
        'endpoint1_drawing': 'str',
        'endpoint2_description': 'str',
        'endpoint2_route': 'str',
        'endpoint2_end_length': 'str',
        'endpoint2_termination': 'str',
        'endpoint2_pinlist': 'str',
        'endpoint2_notes': 'str',
        'endpoint2_drawing': 'str'
    }

    attribute_map = {
        'cable_design_id': 'cableDesignId',
        'external_cable_name': 'externalCableName',
        'import_cable_id': 'importCableId',
        'alternate_cable_id': 'alternateCableId',
        'laying': 'laying',
        'voltage': 'voltage',
        'routed_length': 'routedLength',
        'route': 'route',
        'total_req_length': 'totalReqLength',
        'notes': 'notes',
        'endpoint1_description': 'endpoint1Description',
        'endpoint1_route': 'endpoint1Route',
        'endpoint1_end_length': 'endpoint1EndLength',
        'endpoint1_termination': 'endpoint1Termination',
        'endpoint1_pinlist': 'endpoint1Pinlist',
        'endpoint1_notes': 'endpoint1Notes',
        'endpoint1_drawing': 'endpoint1Drawing',
        'endpoint2_description': 'endpoint2Description',
        'endpoint2_route': 'endpoint2Route',
        'endpoint2_end_length': 'endpoint2EndLength',
        'endpoint2_termination': 'endpoint2Termination',
        'endpoint2_pinlist': 'endpoint2Pinlist',
        'endpoint2_notes': 'endpoint2Notes',
        'endpoint2_drawing': 'endpoint2Drawing'
    }

    def __init__(self, cable_design_id=None, external_cable_name=None, import_cable_id=None, alternate_cable_id=None, laying=None, voltage=None, routed_length=None, route=None, total_req_length=None, notes=None, endpoint1_description=None, endpoint1_route=None, endpoint1_end_length=None, endpoint1_termination=None, endpoint1_pinlist=None, endpoint1_notes=None, endpoint1_drawing=None, endpoint2_description=None, endpoint2_route=None, endpoint2_end_length=None, endpoint2_termination=None, endpoint2_pinlist=None, endpoint2_notes=None, endpoint2_drawing=None, local_vars_configuration=None):  # noqa: E501
        """ItemDomainCableDesignMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cable_design_id = None
        self._external_cable_name = None
        self._import_cable_id = None
        self._alternate_cable_id = None
        self._laying = None
        self._voltage = None
        self._routed_length = None
        self._route = None
        self._total_req_length = None
        self._notes = None
        self._endpoint1_description = None
        self._endpoint1_route = None
        self._endpoint1_end_length = None
        self._endpoint1_termination = None
        self._endpoint1_pinlist = None
        self._endpoint1_notes = None
        self._endpoint1_drawing = None
        self._endpoint2_description = None
        self._endpoint2_route = None
        self._endpoint2_end_length = None
        self._endpoint2_termination = None
        self._endpoint2_pinlist = None
        self._endpoint2_notes = None
        self._endpoint2_drawing = None
        self.discriminator = None

        if cable_design_id is not None:
            self.cable_design_id = cable_design_id
        if external_cable_name is not None:
            self.external_cable_name = external_cable_name
        if import_cable_id is not None:
            self.import_cable_id = import_cable_id
        if alternate_cable_id is not None:
            self.alternate_cable_id = alternate_cable_id
        if laying is not None:
            self.laying = laying
        if voltage is not None:
            self.voltage = voltage
        if routed_length is not None:
            self.routed_length = routed_length
        if route is not None:
            self.route = route
        if total_req_length is not None:
            self.total_req_length = total_req_length
        if notes is not None:
            self.notes = notes
        if endpoint1_description is not None:
            self.endpoint1_description = endpoint1_description
        if endpoint1_route is not None:
            self.endpoint1_route = endpoint1_route
        if endpoint1_end_length is not None:
            self.endpoint1_end_length = endpoint1_end_length
        if endpoint1_termination is not None:
            self.endpoint1_termination = endpoint1_termination
        if endpoint1_pinlist is not None:
            self.endpoint1_pinlist = endpoint1_pinlist
        if endpoint1_notes is not None:
            self.endpoint1_notes = endpoint1_notes
        if endpoint1_drawing is not None:
            self.endpoint1_drawing = endpoint1_drawing
        if endpoint2_description is not None:
            self.endpoint2_description = endpoint2_description
        if endpoint2_route is not None:
            self.endpoint2_route = endpoint2_route
        if endpoint2_end_length is not None:
            self.endpoint2_end_length = endpoint2_end_length
        if endpoint2_termination is not None:
            self.endpoint2_termination = endpoint2_termination
        if endpoint2_pinlist is not None:
            self.endpoint2_pinlist = endpoint2_pinlist
        if endpoint2_notes is not None:
            self.endpoint2_notes = endpoint2_notes
        if endpoint2_drawing is not None:
            self.endpoint2_drawing = endpoint2_drawing

    @property
    def cable_design_id(self):
        """Gets the cable_design_id of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The cable_design_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: int
        """
        return self._cable_design_id

    @cable_design_id.setter
    def cable_design_id(self, cable_design_id):
        """Sets the cable_design_id of this ItemDomainCableDesignMetadata.


        :param cable_design_id: The cable_design_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: int
        """

        self._cable_design_id = cable_design_id

    @property
    def external_cable_name(self):
        """Gets the external_cable_name of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The external_cable_name of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._external_cable_name

    @external_cable_name.setter
    def external_cable_name(self, external_cable_name):
        """Sets the external_cable_name of this ItemDomainCableDesignMetadata.


        :param external_cable_name: The external_cable_name of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._external_cable_name = external_cable_name

    @property
    def import_cable_id(self):
        """Gets the import_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The import_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._import_cable_id

    @import_cable_id.setter
    def import_cable_id(self, import_cable_id):
        """Sets the import_cable_id of this ItemDomainCableDesignMetadata.


        :param import_cable_id: The import_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._import_cable_id = import_cable_id

    @property
    def alternate_cable_id(self):
        """Gets the alternate_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The alternate_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._alternate_cable_id

    @alternate_cable_id.setter
    def alternate_cable_id(self, alternate_cable_id):
        """Sets the alternate_cable_id of this ItemDomainCableDesignMetadata.


        :param alternate_cable_id: The alternate_cable_id of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._alternate_cable_id = alternate_cable_id

    @property
    def laying(self):
        """Gets the laying of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The laying of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._laying

    @laying.setter
    def laying(self, laying):
        """Sets the laying of this ItemDomainCableDesignMetadata.


        :param laying: The laying of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._laying = laying

    @property
    def voltage(self):
        """Gets the voltage of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The voltage of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._voltage

    @voltage.setter
    def voltage(self, voltage):
        """Sets the voltage of this ItemDomainCableDesignMetadata.


        :param voltage: The voltage of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._voltage = voltage

    @property
    def routed_length(self):
        """Gets the routed_length of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The routed_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._routed_length

    @routed_length.setter
    def routed_length(self, routed_length):
        """Sets the routed_length of this ItemDomainCableDesignMetadata.


        :param routed_length: The routed_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._routed_length = routed_length

    @property
    def route(self):
        """Gets the route of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this ItemDomainCableDesignMetadata.


        :param route: The route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._route = route

    @property
    def total_req_length(self):
        """Gets the total_req_length of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The total_req_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._total_req_length

    @total_req_length.setter
    def total_req_length(self, total_req_length):
        """Sets the total_req_length of this ItemDomainCableDesignMetadata.


        :param total_req_length: The total_req_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._total_req_length = total_req_length

    @property
    def notes(self):
        """Gets the notes of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ItemDomainCableDesignMetadata.


        :param notes: The notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def endpoint1_description(self):
        """Gets the endpoint1_description of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_description of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_description

    @endpoint1_description.setter
    def endpoint1_description(self, endpoint1_description):
        """Sets the endpoint1_description of this ItemDomainCableDesignMetadata.


        :param endpoint1_description: The endpoint1_description of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_description = endpoint1_description

    @property
    def endpoint1_route(self):
        """Gets the endpoint1_route of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_route

    @endpoint1_route.setter
    def endpoint1_route(self, endpoint1_route):
        """Sets the endpoint1_route of this ItemDomainCableDesignMetadata.


        :param endpoint1_route: The endpoint1_route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_route = endpoint1_route

    @property
    def endpoint1_end_length(self):
        """Gets the endpoint1_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_end_length

    @endpoint1_end_length.setter
    def endpoint1_end_length(self, endpoint1_end_length):
        """Sets the endpoint1_end_length of this ItemDomainCableDesignMetadata.


        :param endpoint1_end_length: The endpoint1_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_end_length = endpoint1_end_length

    @property
    def endpoint1_termination(self):
        """Gets the endpoint1_termination of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_termination of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_termination

    @endpoint1_termination.setter
    def endpoint1_termination(self, endpoint1_termination):
        """Sets the endpoint1_termination of this ItemDomainCableDesignMetadata.


        :param endpoint1_termination: The endpoint1_termination of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_termination = endpoint1_termination

    @property
    def endpoint1_pinlist(self):
        """Gets the endpoint1_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_pinlist

    @endpoint1_pinlist.setter
    def endpoint1_pinlist(self, endpoint1_pinlist):
        """Sets the endpoint1_pinlist of this ItemDomainCableDesignMetadata.


        :param endpoint1_pinlist: The endpoint1_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_pinlist = endpoint1_pinlist

    @property
    def endpoint1_notes(self):
        """Gets the endpoint1_notes of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_notes

    @endpoint1_notes.setter
    def endpoint1_notes(self, endpoint1_notes):
        """Sets the endpoint1_notes of this ItemDomainCableDesignMetadata.


        :param endpoint1_notes: The endpoint1_notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_notes = endpoint1_notes

    @property
    def endpoint1_drawing(self):
        """Gets the endpoint1_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint1_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint1_drawing

    @endpoint1_drawing.setter
    def endpoint1_drawing(self, endpoint1_drawing):
        """Sets the endpoint1_drawing of this ItemDomainCableDesignMetadata.


        :param endpoint1_drawing: The endpoint1_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint1_drawing = endpoint1_drawing

    @property
    def endpoint2_description(self):
        """Gets the endpoint2_description of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_description of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_description

    @endpoint2_description.setter
    def endpoint2_description(self, endpoint2_description):
        """Sets the endpoint2_description of this ItemDomainCableDesignMetadata.


        :param endpoint2_description: The endpoint2_description of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_description = endpoint2_description

    @property
    def endpoint2_route(self):
        """Gets the endpoint2_route of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_route

    @endpoint2_route.setter
    def endpoint2_route(self, endpoint2_route):
        """Sets the endpoint2_route of this ItemDomainCableDesignMetadata.


        :param endpoint2_route: The endpoint2_route of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_route = endpoint2_route

    @property
    def endpoint2_end_length(self):
        """Gets the endpoint2_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_end_length

    @endpoint2_end_length.setter
    def endpoint2_end_length(self, endpoint2_end_length):
        """Sets the endpoint2_end_length of this ItemDomainCableDesignMetadata.


        :param endpoint2_end_length: The endpoint2_end_length of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_end_length = endpoint2_end_length

    @property
    def endpoint2_termination(self):
        """Gets the endpoint2_termination of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_termination of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_termination

    @endpoint2_termination.setter
    def endpoint2_termination(self, endpoint2_termination):
        """Sets the endpoint2_termination of this ItemDomainCableDesignMetadata.


        :param endpoint2_termination: The endpoint2_termination of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_termination = endpoint2_termination

    @property
    def endpoint2_pinlist(self):
        """Gets the endpoint2_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_pinlist

    @endpoint2_pinlist.setter
    def endpoint2_pinlist(self, endpoint2_pinlist):
        """Sets the endpoint2_pinlist of this ItemDomainCableDesignMetadata.


        :param endpoint2_pinlist: The endpoint2_pinlist of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_pinlist = endpoint2_pinlist

    @property
    def endpoint2_notes(self):
        """Gets the endpoint2_notes of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_notes

    @endpoint2_notes.setter
    def endpoint2_notes(self, endpoint2_notes):
        """Sets the endpoint2_notes of this ItemDomainCableDesignMetadata.


        :param endpoint2_notes: The endpoint2_notes of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_notes = endpoint2_notes

    @property
    def endpoint2_drawing(self):
        """Gets the endpoint2_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501


        :return: The endpoint2_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501
        :rtype: str
        """
        return self._endpoint2_drawing

    @endpoint2_drawing.setter
    def endpoint2_drawing(self, endpoint2_drawing):
        """Sets the endpoint2_drawing of this ItemDomainCableDesignMetadata.


        :param endpoint2_drawing: The endpoint2_drawing of this ItemDomainCableDesignMetadata.  # noqa: E501
        :type: str
        """

        self._endpoint2_drawing = endpoint2_drawing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDomainCableDesignMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemDomainCableDesignMetadata):
            return True

        return self.to_dict() != other.to_dict()
