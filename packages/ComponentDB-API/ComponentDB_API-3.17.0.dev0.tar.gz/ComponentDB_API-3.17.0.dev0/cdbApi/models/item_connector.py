# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemConnector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'label': 'str',
        'quantity': 'int',
        'connector': 'Connector'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'quantity': 'quantity',
        'connector': 'connector'
    }

    def __init__(self, id=None, label=None, quantity=None, connector=None, local_vars_configuration=None):  # noqa: E501
        """ItemConnector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._label = None
        self._quantity = None
        self._connector = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if quantity is not None:
            self.quantity = quantity
        if connector is not None:
            self.connector = connector

    @property
    def id(self):
        """Gets the id of this ItemConnector.  # noqa: E501


        :return: The id of this ItemConnector.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemConnector.


        :param id: The id of this ItemConnector.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this ItemConnector.  # noqa: E501


        :return: The label of this ItemConnector.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ItemConnector.


        :param label: The label of this ItemConnector.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                label is not None and len(label) > 64):
            raise ValueError("Invalid value for `label`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                label is not None and len(label) < 0):
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `0`")  # noqa: E501

        self._label = label

    @property
    def quantity(self):
        """Gets the quantity of this ItemConnector.  # noqa: E501


        :return: The quantity of this ItemConnector.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ItemConnector.


        :param quantity: The quantity of this ItemConnector.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def connector(self):
        """Gets the connector of this ItemConnector.  # noqa: E501


        :return: The connector of this ItemConnector.  # noqa: E501
        :rtype: Connector
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this ItemConnector.


        :param connector: The connector of this ItemConnector.  # noqa: E501
        :type: Connector
        """

        self._connector = connector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemConnector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemConnector):
            return True

        return self.to_dict() != other.to_dict()
