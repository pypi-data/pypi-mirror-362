# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cdbApi.api_client import ApiClient
from cdbApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CableDesignItemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_or_update_cable_design(self, **kwargs):  # noqa: E501
        """add_or_update_cable_design  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_cable_design(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: DB ID of the cable. When none specified, item will be created.
        :param str name: Cable design name
        :param int qr_id: Cable design qrId (-1 to clear)
        :param str alternate_name: Cable design alternate name
        :param str description: Description of the cable design
        :param list[int] item_project_ids: Project Ids
        :param list[int] technical_system_ids: Technical System Ids
        :param int cable_type_id: Cable Type Id (-1 to clear)
        :param int end1_machine_design_id: Endpoint 1 machine design id.  (Must be specified to make any changes to endpoint 1)
        :param str end1_device_port_name: Endpoint 1 device port name
        :param str end1_connector_name: Endpoint 1 connector name
        :param int end2_machine_design_id: Endpoint 2 machine design id.  (Must be specified to make any changes to endpoint 2)
        :param str end2_device_port_name: Endpoint 2 device port name
        :param str end2_connector_name: Endpoint 2 connector name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_or_update_cable_design_with_http_info(**kwargs)  # noqa: E501

    def add_or_update_cable_design_with_http_info(self, **kwargs):  # noqa: E501
        """add_or_update_cable_design  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_cable_design_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: DB ID of the cable. When none specified, item will be created.
        :param str name: Cable design name
        :param int qr_id: Cable design qrId (-1 to clear)
        :param str alternate_name: Cable design alternate name
        :param str description: Description of the cable design
        :param list[int] item_project_ids: Project Ids
        :param list[int] technical_system_ids: Technical System Ids
        :param int cable_type_id: Cable Type Id (-1 to clear)
        :param int end1_machine_design_id: Endpoint 1 machine design id.  (Must be specified to make any changes to endpoint 1)
        :param str end1_device_port_name: Endpoint 1 device port name
        :param str end1_connector_name: Endpoint 1 connector name
        :param int end2_machine_design_id: Endpoint 2 machine design id.  (Must be specified to make any changes to endpoint 2)
        :param str end2_device_port_name: Endpoint 2 device port name
        :param str end2_connector_name: Endpoint 2 connector name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'name',
            'qr_id',
            'alternate_name',
            'description',
            'item_project_ids',
            'technical_system_ids',
            'cable_type_id',
            'end1_machine_design_id',
            'end1_device_port_name',
            'end1_connector_name',
            'end2_machine_design_id',
            'end2_device_port_name',
            'end2_connector_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_or_update_cable_design" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'qr_id' in local_var_params and local_var_params['qr_id'] is not None:  # noqa: E501
            query_params.append(('qrId', local_var_params['qr_id']))  # noqa: E501
        if 'alternate_name' in local_var_params and local_var_params['alternate_name'] is not None:  # noqa: E501
            query_params.append(('alternateName', local_var_params['alternate_name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'item_project_ids' in local_var_params and local_var_params['item_project_ids'] is not None:  # noqa: E501
            query_params.append(('itemProjectIds', local_var_params['item_project_ids']))  # noqa: E501
            collection_formats['itemProjectIds'] = 'multi'  # noqa: E501
        if 'technical_system_ids' in local_var_params and local_var_params['technical_system_ids'] is not None:  # noqa: E501
            query_params.append(('technicalSystemIds', local_var_params['technical_system_ids']))  # noqa: E501
            collection_formats['technicalSystemIds'] = 'multi'  # noqa: E501
        if 'cable_type_id' in local_var_params and local_var_params['cable_type_id'] is not None:  # noqa: E501
            query_params.append(('cableTypeId', local_var_params['cable_type_id']))  # noqa: E501
        if 'end1_machine_design_id' in local_var_params and local_var_params['end1_machine_design_id'] is not None:  # noqa: E501
            query_params.append(('end1MachineDesignId', local_var_params['end1_machine_design_id']))  # noqa: E501
        if 'end1_device_port_name' in local_var_params and local_var_params['end1_device_port_name'] is not None:  # noqa: E501
            query_params.append(('end1DevicePortName', local_var_params['end1_device_port_name']))  # noqa: E501
        if 'end1_connector_name' in local_var_params and local_var_params['end1_connector_name'] is not None:  # noqa: E501
            query_params.append(('end1ConnectorName', local_var_params['end1_connector_name']))  # noqa: E501
        if 'end2_machine_design_id' in local_var_params and local_var_params['end2_machine_design_id'] is not None:  # noqa: E501
            query_params.append(('end2MachineDesignId', local_var_params['end2_machine_design_id']))  # noqa: E501
        if 'end2_device_port_name' in local_var_params and local_var_params['end2_device_port_name'] is not None:  # noqa: E501
            query_params.append(('end2DevicePortName', local_var_params['end2_device_port_name']))  # noqa: E501
        if 'end2_connector_name' in local_var_params and local_var_params['end2_connector_name'] is not None:  # noqa: E501
            query_params.append(('end2ConnectorName', local_var_params['end2_connector_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/CableDesignAddUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_or_update_cable_design_endpoint(self, **kwargs):  # noqa: E501
        """add_or_update_cable_design_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_cable_design_endpoint(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: DB ID of the cable.
        :param int endpoint_relationship_id: DB ID of the cable relationship. Update when provided or create.
        :param int cable_end: Cable End - 1 or 2. Required for new endpoints.
        :param int machine_design_id: Endpoint Machine design id
        :param str device_port_name: Device port name
        :param str connector_name: Connector name
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_or_update_cable_design_endpoint_with_http_info(**kwargs)  # noqa: E501

    def add_or_update_cable_design_endpoint_with_http_info(self, **kwargs):  # noqa: E501
        """add_or_update_cable_design_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_cable_design_endpoint_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: DB ID of the cable.
        :param int endpoint_relationship_id: DB ID of the cable relationship. Update when provided or create.
        :param int cable_end: Cable End - 1 or 2. Required for new endpoints.
        :param int machine_design_id: Endpoint Machine design id
        :param str device_port_name: Device port name
        :param str connector_name: Connector name
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cable_design_id',
            'endpoint_relationship_id',
            'cable_end',
            'machine_design_id',
            'device_port_name',
            'connector_name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_or_update_cable_design_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cable_design_id' in local_var_params and local_var_params['cable_design_id'] is not None:  # noqa: E501
            query_params.append(('cableDesignId', local_var_params['cable_design_id']))  # noqa: E501
        if 'endpoint_relationship_id' in local_var_params and local_var_params['endpoint_relationship_id'] is not None:  # noqa: E501
            query_params.append(('endpointRelationshipId', local_var_params['endpoint_relationship_id']))  # noqa: E501
        if 'cable_end' in local_var_params and local_var_params['cable_end'] is not None:  # noqa: E501
            query_params.append(('cableEnd', local_var_params['cable_end']))  # noqa: E501
        if 'machine_design_id' in local_var_params and local_var_params['machine_design_id'] is not None:  # noqa: E501
            query_params.append(('machineDesignId', local_var_params['machine_design_id']))  # noqa: E501
        if 'device_port_name' in local_var_params and local_var_params['device_port_name'] is not None:  # noqa: E501
            query_params.append(('devicePortName', local_var_params['device_port_name']))  # noqa: E501
        if 'connector_name' in local_var_params and local_var_params['connector_name'] is not None:  # noqa: E501
            query_params.append(('connectorName', local_var_params['connector_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/CableDesignEndpointAddUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_assigned_inventory(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Clear assigned inventory and installation status for cable design item given cable design id. Cable design will retain existing cable type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_assigned_inventory(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.clear_assigned_inventory_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def clear_assigned_inventory_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Clear assigned inventory and installation status for cable design item given cable design id. Cable design will retain existing cable type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_assigned_inventory_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_assigned_inventory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `clear_assigned_inventory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/ClearAssignedInventory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_cable_type(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Clear cable type for cable design item given cable design id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_cable_type(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.clear_cable_type_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def clear_cable_type_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Clear cable type for cable design item given cable design id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_cable_type_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_cable_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `clear_cable_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/ClearCableType', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cable_design_endpoint(self, **kwargs):  # noqa: E501
        """delete_cable_design_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cable_design_endpoint(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: DB ID of the cable.
        :param int endpoint_relationship_id: DB ID of the cable relationship
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_cable_design_endpoint_with_http_info(**kwargs)  # noqa: E501

    def delete_cable_design_endpoint_with_http_info(self, **kwargs):  # noqa: E501
        """delete_cable_design_endpoint  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cable_design_endpoint_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: DB ID of the cable.
        :param int endpoint_relationship_id: DB ID of the cable relationship
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cable_design_id',
            'endpoint_relationship_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cable_design_endpoint" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cable_design_id' in local_var_params and local_var_params['cable_design_id'] is not None:  # noqa: E501
            query_params.append(('cableDesignId', local_var_params['cable_design_id']))  # noqa: E501
        if 'endpoint_relationship_id' in local_var_params and local_var_params['endpoint_relationship_id'] is not None:  # noqa: E501
            query_params.append(('endpointRelationshipId', local_var_params['endpoint_relationship_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/CableDesignEndpoint', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_connection_list(self, cable_design_id, **kwargs):  # noqa: E501
        """get_cable_design_connection_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_connection_list(cable_design_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[CableDesignConnectionListObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_connection_list_with_http_info(cable_design_id, **kwargs)  # noqa: E501

    def get_cable_design_connection_list_with_http_info(self, cable_design_id, **kwargs):  # noqa: E501
        """get_cable_design_connection_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_connection_list_with_http_info(cable_design_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[CableDesignConnectionListObject], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cable_design_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_connection_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cable_design_id' is set
        if self.api_client.client_side_validation and ('cable_design_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cable_design_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cable_design_id` when calling `get_cable_design_connection_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cable_design_id' in local_var_params:
            path_params['cableDesignId'] = local_var_params['cable_design_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/ConnectionList/{cableDesignId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CableDesignConnectionListObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_id_list(self, item_domain_cable_design_id_list_request, **kwargs):  # noqa: E501
        """get_cable_design_id_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_id_list(item_domain_cable_design_id_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ItemDomainCableDesignIdListRequest item_domain_cable_design_id_list_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_id_list_with_http_info(item_domain_cable_design_id_list_request, **kwargs)  # noqa: E501

    def get_cable_design_id_list_with_http_info(self, item_domain_cable_design_id_list_request, **kwargs):  # noqa: E501
        """get_cable_design_id_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_id_list_with_http_info(item_domain_cable_design_id_list_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ItemDomainCableDesignIdListRequest item_domain_cable_design_id_list_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[int], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_domain_cable_design_id_list_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_id_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_domain_cable_design_id_list_request' is set
        if self.api_client.client_side_validation and ('item_domain_cable_design_id_list_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_domain_cable_design_id_list_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_domain_cable_design_id_list_request` when calling `get_cable_design_id_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item_domain_cable_design_id_list_request' in local_var_params:
            body_params = local_var_params['item_domain_cable_design_id_list_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/IdList', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_item_by_id(self, id, **kwargs):  # noqa: E501
        """get_cable_design_item_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_by_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_item_by_id_with_http_info(id, **kwargs)  # noqa: E501

    def get_cable_design_item_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_cable_design_item_by_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_by_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_item_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_cable_design_item_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/ById/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_item_by_name(self, name, **kwargs):  # noqa: E501
        """get_cable_design_item_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_by_name(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_item_by_name_with_http_info(name, **kwargs)  # noqa: E501

    def get_cable_design_item_by_name_with_http_info(self, name, **kwargs):  # noqa: E501
        """get_cable_design_item_by_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_by_name_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'name'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_item_by_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `get_cable_design_item_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/ByName/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_item_list(self, **kwargs):  # noqa: E501
        """get_cable_design_item_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool include_connections: Optional bool to specify if connections should be included. Can be accessed by `connectionList` of the cable design item.
        :param bool include_md_locations: Optional bool to specify if connection endpoints should include locations. If true, connections will be automatically included.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ItemDomainCableDesign]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_item_list_with_http_info(**kwargs)  # noqa: E501

    def get_cable_design_item_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_cable_design_item_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_item_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool include_connections: Optional bool to specify if connections should be included. Can be accessed by `connectionList` of the cable design item.
        :param bool include_md_locations: Optional bool to specify if connection endpoints should include locations. If true, connections will be automatically included.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ItemDomainCableDesign], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'include_connections',
            'include_md_locations'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_item_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include_connections' in local_var_params and local_var_params['include_connections'] is not None:  # noqa: E501
            query_params.append(('includeConnections', local_var_params['include_connections']))  # noqa: E501
        if 'include_md_locations' in local_var_params and local_var_params['include_md_locations'] is not None:  # noqa: E501
            query_params.append(('includeMdLocations', local_var_params['include_md_locations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ItemDomainCableDesign]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cable_design_metadata(self, cable_design_id, **kwargs):  # noqa: E501
        """get_cable_design_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_metadata(cable_design_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesignMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_cable_design_metadata_with_http_info(cable_design_id, **kwargs)  # noqa: E501

    def get_cable_design_metadata_with_http_info(self, cable_design_id, **kwargs):  # noqa: E501
        """get_cable_design_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cable_design_metadata_with_http_info(cable_design_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int cable_design_id: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesignMetadata, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'cable_design_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cable_design_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cable_design_id' is set
        if self.api_client.client_side_validation and ('cable_design_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['cable_design_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `cable_design_id` when calling `get_cable_design_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cable_design_id' in local_var_params:
            path_params['cableDesignId'] = local_var_params['cable_design_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/CableDesignMetadata/{cableDesignId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesignMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_assigned_inventory_id(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update assigned inventory and installation status for cable design item given cable design id, inventory item id, and installation status. Note this operation might change the cable design item's cable type if inventory is of different type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assigned_inventory_id(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_assigned_inventory_id_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def update_assigned_inventory_id_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update assigned inventory and installation status for cable design item given cable design id, inventory item id, and installation status. Note this operation might change the cable design item's cable type if inventory is of different type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assigned_inventory_id_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assigned_inventory_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `update_assigned_inventory_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/UpdateAssignedInventoryId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_assigned_inventory_name(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update assigned inventory and installation status for cable design item given cable design id, inventory tag/name, and installation status.  Cable type id or name is optional and if not specified the inventory look up by name uses current cable type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assigned_inventory_name(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_assigned_inventory_name_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def update_assigned_inventory_name_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update assigned inventory and installation status for cable design item given cable design id, inventory tag/name, and installation status.  Cable type id or name is optional and if not specified the inventory look up by name uses current cable type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assigned_inventory_name_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assigned_inventory_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `update_assigned_inventory_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/UpdateAssignedInventoryName', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cable_design_metadata(self, item_domain_cable_design_metadata, **kwargs):  # noqa: E501
        """update_cable_design_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_design_metadata(item_domain_cable_design_metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ItemDomainCableDesignMetadata item_domain_cable_design_metadata: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesignMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_cable_design_metadata_with_http_info(item_domain_cable_design_metadata, **kwargs)  # noqa: E501

    def update_cable_design_metadata_with_http_info(self, item_domain_cable_design_metadata, **kwargs):  # noqa: E501
        """update_cable_design_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_design_metadata_with_http_info(item_domain_cable_design_metadata, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param ItemDomainCableDesignMetadata item_domain_cable_design_metadata: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesignMetadata, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'item_domain_cable_design_metadata'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cable_design_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'item_domain_cable_design_metadata' is set
        if self.api_client.client_side_validation and ('item_domain_cable_design_metadata' not in local_var_params or  # noqa: E501
                                                        local_var_params['item_domain_cable_design_metadata'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `item_domain_cable_design_metadata` when calling `update_cable_design_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'item_domain_cable_design_metadata' in local_var_params:
            body_params = local_var_params['item_domain_cable_design_metadata']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/CableDesignMetadataUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesignMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cable_type_id(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update cable type for cable design item given cable design id and cable type id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_type_id(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_cable_type_id_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def update_cable_type_id_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update cable type for cable design item given cable design id and cable type id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_type_id_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cable_type_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `update_cable_type_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/UpdateCableTypeId', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cable_type_name(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update cable type for cable design item given cable design id and cable type name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_type_name(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_cable_type_name_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def update_cable_type_name_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update cable type for cable design item given cable design id and cable type name.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cable_type_name_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cable_type_name" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `update_cable_type_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/UpdateCableTypeName', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_installation_status(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update installation status for cable design item given cable design id and installation status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installation_status(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainCableDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_installation_status_with_http_info(update_cable_design_assigned_item_information, **kwargs)  # noqa: E501

    def update_installation_status_with_http_info(self, update_cable_design_assigned_item_information, **kwargs):  # noqa: E501
        """Update installation status for cable design item given cable design id and installation status.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_installation_status_with_http_info(update_cable_design_assigned_item_information, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param UpdateCableDesignAssignedItemInformation update_cable_design_assigned_item_information: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainCableDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'update_cable_design_assigned_item_information'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_installation_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'update_cable_design_assigned_item_information' is set
        if self.api_client.client_side_validation and ('update_cable_design_assigned_item_information' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_cable_design_assigned_item_information'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_cable_design_assigned_item_information` when calling `update_installation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_cable_design_assigned_item_information' in local_var_params:
            body_params = local_var_params['update_cable_design_assigned_item_information']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/CableDesignItems/UpdateInstallationStatus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainCableDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
