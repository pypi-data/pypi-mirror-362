# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.16.2
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cdbApi.api_client import ApiClient
from cdbApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class IOCItemsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_or_update_ioc(self, **kwargs):  # noqa: E501
        """Add or update IOC item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_ioc(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: DB ID of the IOC. When none specified, a new item will be created.
        :param str name: IOC name (required for new items, optional for updates)
        :param str description: Description of the IOC (optional, updated when specified)
        :param list[int] item_project_ids: Project IDs to assign (required for new items, replaces existing assignments when specified)
        :param int parent_machine_id: Parent Machine ID (-1 to clear parent, optional)
        :param str machine_tag: Machine Tag (required for new items, updated when specified)
        :param str function_tag: Function Tag (required for new items, updated when specified)
        :param str deployment_status: Deployment Status (required for new items, updated when specified)
        :param str preboot_instructions: Preboot Instructions (optional, updated when specified)
        :param str postboot_instructions: Postboot Instructions (optional, updated when specified)
        :param str power_cycle_instructions: Power Cycle Instructions (optional, updated when specified)
        :param str additional_instructions: Additional Instructions (optional, updated when specified)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainMachineDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.add_or_update_ioc_with_http_info(**kwargs)  # noqa: E501

    def add_or_update_ioc_with_http_info(self, **kwargs):  # noqa: E501
        """Add or update IOC item.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_ioc_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: DB ID of the IOC. When none specified, a new item will be created.
        :param str name: IOC name (required for new items, optional for updates)
        :param str description: Description of the IOC (optional, updated when specified)
        :param list[int] item_project_ids: Project IDs to assign (required for new items, replaces existing assignments when specified)
        :param int parent_machine_id: Parent Machine ID (-1 to clear parent, optional)
        :param str machine_tag: Machine Tag (required for new items, updated when specified)
        :param str function_tag: Function Tag (required for new items, updated when specified)
        :param str deployment_status: Deployment Status (required for new items, updated when specified)
        :param str preboot_instructions: Preboot Instructions (optional, updated when specified)
        :param str postboot_instructions: Postboot Instructions (optional, updated when specified)
        :param str power_cycle_instructions: Power Cycle Instructions (optional, updated when specified)
        :param str additional_instructions: Additional Instructions (optional, updated when specified)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainMachineDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'name',
            'description',
            'item_project_ids',
            'parent_machine_id',
            'machine_tag',
            'function_tag',
            'deployment_status',
            'preboot_instructions',
            'postboot_instructions',
            'power_cycle_instructions',
            'additional_instructions'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_or_update_ioc" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in local_var_params and local_var_params['id'] is not None:  # noqa: E501
            query_params.append(('id', local_var_params['id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'description' in local_var_params and local_var_params['description'] is not None:  # noqa: E501
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'item_project_ids' in local_var_params and local_var_params['item_project_ids'] is not None:  # noqa: E501
            query_params.append(('itemProjectIds', local_var_params['item_project_ids']))  # noqa: E501
            collection_formats['itemProjectIds'] = 'multi'  # noqa: E501
        if 'parent_machine_id' in local_var_params and local_var_params['parent_machine_id'] is not None:  # noqa: E501
            query_params.append(('parentMachineId', local_var_params['parent_machine_id']))  # noqa: E501
        if 'machine_tag' in local_var_params and local_var_params['machine_tag'] is not None:  # noqa: E501
            query_params.append(('machineTag', local_var_params['machine_tag']))  # noqa: E501
        if 'function_tag' in local_var_params and local_var_params['function_tag'] is not None:  # noqa: E501
            query_params.append(('functionTag', local_var_params['function_tag']))  # noqa: E501
        if 'deployment_status' in local_var_params and local_var_params['deployment_status'] is not None:  # noqa: E501
            query_params.append(('deploymentStatus', local_var_params['deployment_status']))  # noqa: E501
        if 'preboot_instructions' in local_var_params and local_var_params['preboot_instructions'] is not None:  # noqa: E501
            query_params.append(('prebootInstructions', local_var_params['preboot_instructions']))  # noqa: E501
        if 'postboot_instructions' in local_var_params and local_var_params['postboot_instructions'] is not None:  # noqa: E501
            query_params.append(('postbootInstructions', local_var_params['postboot_instructions']))  # noqa: E501
        if 'power_cycle_instructions' in local_var_params and local_var_params['power_cycle_instructions'] is not None:  # noqa: E501
            query_params.append(('powerCycleInstructions', local_var_params['power_cycle_instructions']))  # noqa: E501
        if 'additional_instructions' in local_var_params and local_var_params['additional_instructions'] is not None:  # noqa: E501
            query_params.append(('additionalInstructions', local_var_params['additional_instructions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/IOCAddUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainMachineDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def convert_machine_to_ioc(self, md_id, **kwargs):  # noqa: E501
        """Move machine to a new parent.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_machine_to_ioc(md_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int md_id: (required)
        :param str machine_tag: Machine Tag
        :param str function_tag: Function Tag
        :param str deployment_status: Deployment Status
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainMachineDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.convert_machine_to_ioc_with_http_info(md_id, **kwargs)  # noqa: E501

    def convert_machine_to_ioc_with_http_info(self, md_id, **kwargs):  # noqa: E501
        """Move machine to a new parent.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_machine_to_ioc_with_http_info(md_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int md_id: (required)
        :param str machine_tag: Machine Tag
        :param str function_tag: Function Tag
        :param str deployment_status: Deployment Status
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainMachineDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'md_id',
            'machine_tag',
            'function_tag',
            'deployment_status'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_machine_to_ioc" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'md_id' is set
        if self.api_client.client_side_validation and ('md_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['md_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `md_id` when calling `convert_machine_to_ioc`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'md_id' in local_var_params:
            path_params['mdId'] = local_var_params['md_id']  # noqa: E501

        query_params = []
        if 'machine_tag' in local_var_params and local_var_params['machine_tag'] is not None:  # noqa: E501
            query_params.append(('machineTag', local_var_params['machine_tag']))  # noqa: E501
        if 'function_tag' in local_var_params and local_var_params['function_tag'] is not None:  # noqa: E501
            query_params.append(('functionTag', local_var_params['function_tag']))  # noqa: E501
        if 'deployment_status' in local_var_params and local_var_params['deployment_status'] is not None:  # noqa: E501
            query_params.append(('deploymentStatus', local_var_params['deployment_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/convertToIOC/{mdId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainMachineDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_allowed_deployment_statuses(self, **kwargs):  # noqa: E501
        """get_allowed_deployment_statuses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_deployment_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AllowedPropertyMetadataValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_allowed_deployment_statuses_with_http_info(**kwargs)  # noqa: E501

    def get_allowed_deployment_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """get_allowed_deployment_statuses  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_deployment_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AllowedPropertyMetadataValue], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allowed_deployment_statuses" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/allowedValues/deploymentStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowedPropertyMetadataValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_allowed_function_tags(self, **kwargs):  # noqa: E501
        """get_allowed_function_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_function_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AllowedPropertyMetadataValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_allowed_function_tags_with_http_info(**kwargs)  # noqa: E501

    def get_allowed_function_tags_with_http_info(self, **kwargs):  # noqa: E501
        """get_allowed_function_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_function_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AllowedPropertyMetadataValue], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allowed_function_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/allowedValues/functionTag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowedPropertyMetadataValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_allowed_machine_tags(self, **kwargs):  # noqa: E501
        """get_allowed_machine_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_machine_tags(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AllowedPropertyMetadataValue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_allowed_machine_tags_with_http_info(**kwargs)  # noqa: E501

    def get_allowed_machine_tags_with_http_info(self, **kwargs):  # noqa: E501
        """get_allowed_machine_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_allowed_machine_tags_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AllowedPropertyMetadataValue], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allowed_machine_tags" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/allowedValues/machineTag', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowedPropertyMetadataValue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ioc_item_core_property_type(self, **kwargs):  # noqa: E501
        """get_ioc_item_core_property_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_item_core_property_type(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PropertyType
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ioc_item_core_property_type_with_http_info(**kwargs)  # noqa: E501

    def get_ioc_item_core_property_type_with_http_info(self, **kwargs):  # noqa: E501
        """get_ioc_item_core_property_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_item_core_property_type_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PropertyType, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ioc_item_core_property_type" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/coreMetadataPropertyType', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PropertyType',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ioc_item_list(self, **kwargs):  # noqa: E501
        """get_ioc_item_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_item_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[ItemDomainMachineDesign]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ioc_item_list_with_http_info(**kwargs)  # noqa: E501

    def get_ioc_item_list_with_http_info(self, **kwargs):  # noqa: E501
        """get_ioc_item_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ioc_item_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[ItemDomainMachineDesign], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ioc_item_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ItemDomainMachineDesign]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ioc_info(self, ioc_id, **kwargs):  # noqa: E501
        """Update IOC Info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ioc_info(ioc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int ioc_id: (required)
        :param str machine_tag: Machine Tag
        :param str function_tag: Function Tag
        :param str deployment_status: Deployment Status
        :param str preboot_instructions: Preboot Instructions
        :param str postboot_instructions: Postboot Instructions
        :param str power_cycle_instructions: Power Cycle Instructions
        :param str additional_instructions: Additional Instructions
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ItemDomainMachineDesign
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_ioc_info_with_http_info(ioc_id, **kwargs)  # noqa: E501

    def update_ioc_info_with_http_info(self, ioc_id, **kwargs):  # noqa: E501
        """Update IOC Info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ioc_info_with_http_info(ioc_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int ioc_id: (required)
        :param str machine_tag: Machine Tag
        :param str function_tag: Function Tag
        :param str deployment_status: Deployment Status
        :param str preboot_instructions: Preboot Instructions
        :param str postboot_instructions: Postboot Instructions
        :param str power_cycle_instructions: Power Cycle Instructions
        :param str additional_instructions: Additional Instructions
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ItemDomainMachineDesign, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'ioc_id',
            'machine_tag',
            'function_tag',
            'deployment_status',
            'preboot_instructions',
            'postboot_instructions',
            'power_cycle_instructions',
            'additional_instructions'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ioc_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'ioc_id' is set
        if self.api_client.client_side_validation and ('ioc_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['ioc_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `ioc_id` when calling `update_ioc_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ioc_id' in local_var_params:
            path_params['iocId'] = local_var_params['ioc_id']  # noqa: E501

        query_params = []
        if 'machine_tag' in local_var_params and local_var_params['machine_tag'] is not None:  # noqa: E501
            query_params.append(('machineTag', local_var_params['machine_tag']))  # noqa: E501
        if 'function_tag' in local_var_params and local_var_params['function_tag'] is not None:  # noqa: E501
            query_params.append(('functionTag', local_var_params['function_tag']))  # noqa: E501
        if 'deployment_status' in local_var_params and local_var_params['deployment_status'] is not None:  # noqa: E501
            query_params.append(('deploymentStatus', local_var_params['deployment_status']))  # noqa: E501
        if 'preboot_instructions' in local_var_params and local_var_params['preboot_instructions'] is not None:  # noqa: E501
            query_params.append(('prebootInstructions', local_var_params['preboot_instructions']))  # noqa: E501
        if 'postboot_instructions' in local_var_params and local_var_params['postboot_instructions'] is not None:  # noqa: E501
            query_params.append(('postbootInstructions', local_var_params['postboot_instructions']))  # noqa: E501
        if 'power_cycle_instructions' in local_var_params and local_var_params['power_cycle_instructions'] is not None:  # noqa: E501
            query_params.append(('powerCycleInstructions', local_var_params['power_cycle_instructions']))  # noqa: E501
        if 'additional_instructions' in local_var_params and local_var_params['additional_instructions'] is not None:  # noqa: E501
            query_params.append(('additionalInstructions', local_var_params['additional_instructions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['cdbAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/IOCItems/updateIOCInfo/{iocId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ItemDomainMachineDesign',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
