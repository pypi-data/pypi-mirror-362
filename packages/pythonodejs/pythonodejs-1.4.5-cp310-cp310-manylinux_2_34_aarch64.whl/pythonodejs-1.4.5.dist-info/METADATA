Metadata-Version: 2.4
Name: pythonodejs
Version: 1.4.5
Summary: Embed Node.js natively in your Python code.
Author: 0880880
License: Copyright 2025 0880880
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# pythonodejs 🐍➕🟢

[![PyPI version](https://img.shields.io/pypi/v/pythonodejs.svg)](https://pypi.org/project/pythonodejs/)
[![Python versions](https://img.shields.io/pypi/pyversions/pythonodejs.svg)](https://pypi.org/project/pythonodejs/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Downloads](https://img.shields.io/pypi/dm/pythonodejs.svg)](https://pypi.org/project/pythonodejs/)

**Embed Node.js natively in Python with seamless integration.**

## 📋 Overview

`pythonodejs` lets you harness the power of the Node.js ecosystem directly within your Python applications. Run JavaScript code, use NPM packages, and leverage the best of both worlds in a single application.

## 🚀 Installation

```bash
pip install pythonodejs
```

## 🔍 Quick Example

```python
from pythonodejs import node_eval

# Execute JavaScript directly
node_eval("console.log('Hello from Node.js in Python!')")
# > Hello from Node.js in Python!

# Create and return JavaScript functions
read_file = node_eval("""
const fs = require('fs');

function readFile(filePath) {
    return fs.readFileSync(filePath, 'utf8');
}

readFile; // Return the function
""")

# Call JavaScript functions from Python
content = read_file("example.txt")
print(content)
```

<details>
<summary>More Examples</summary>

### 🔄 Integration with NPM

```bash
npm init -y
npm install lodash express axios
```

```python
from pythonodejs import node_eval

result = node_eval("""
const _ = require('lodash');
const numbers = [1, 2, 3, 4, 5];
_.sum(numbers);
""")
print(f"Sum: {result}")

node_eval("""
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello from Express running in Python!');
});

app.listen(3000, () => {
  console.log('Express server running on port 3000');
});
""")
```

### 🔧 Advanced Usage

**Working with JS Objects**

```python
person = node_eval("""
const person = {
  name: 'John',
  age: 30,
  greet: function() {
    return `Hello, my name is ${this.name}`;
  }
};
person;
""")
print(person['name'])
print(person['greet']())
```

**Passing Python → JS**

```python
process_data = node_eval("""
function processData(data) {
  return {
    processed: true,
    items: data.items.map(x => x * 2),
    message: `Processed ${data.items.length} items`
  };
}
processData;
""")

result = process_data({'items': [1, 2, 3, 4, 5]})
print(result)
```

</details>

## ✅ ToDo

* [x] Stable release
* [ ] Loading ES Modules
* [ ] Automatic npm install on dependency detection
* [ ] Better error logging

## 🏗️ Building from Source

1. Install **SConstruct** and **Clang**
2. Run `pip install -r requirements.txt`
3. Run `scons`

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📜 License

This project is licensed under the [MIT License](LICENSE).

## 🙏 Special Thanks

A special thanks to [M-logique](https://github.com/M-logique) for their contribution to this project.
