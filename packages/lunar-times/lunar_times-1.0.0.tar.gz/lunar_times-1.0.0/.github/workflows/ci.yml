# Lunar Times Continuous Integration
# Comprehensive testing and quality assurance workflow

name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'

env:
  FORCE_COLOR: 1  # Force colored output in CI

jobs:
  # Quick validation job for fast feedback
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run quick checks
      run: make quick-check

  # Comprehensive testing across Python versions
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: quick-check
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run comprehensive checks
      run: make check

    - name: Run tests with coverage
      run: make test-coverage

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.8'
      uses: codecov/codecov-action@v3
      with:
        file: .coverage
        flags: unittests
        name: codecov-umbrella

  # Build and package verification
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [quick-check, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Build package
      run: make build-package

    - name: Check package
      run: make check-package

    - name: Store package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.sha }}
        path: dist/
        retention-days: 7

    - name: Test package installation
      run: |
        cd /tmp
        pip install ${{ github.workspace }}/dist/*.whl
        lunar-times --help || echo "Help command not available"
        python -c "import lunar_times.cli; print('Package imports successfully')"

  # Multi-OS testing for critical functionality
  cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: quick-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run core tests
      run: make test

    - name: Test debug mode functionality
      shell: bash
      run: |
        timeout 10s uv run lunar-times -d || echo "Debug mode test completed"

  # Security and dependency scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quick-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install uv
      run: pip install uv

    - name: Install dependencies
      run: uv sync --extra dev

    - name: Run security scan with safety
      run: |
        uv add --dev safety
        uv run safety check || echo "Security scan completed with warnings"

    - name: Check for known vulnerabilities
      run: |
        uv export --format requirements-txt > requirements.txt
        curl -X POST https://osv.dev/v1/querybatch -d @requirements.txt || echo "OSV scan completed"

  # Status check for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quick-check, test, build]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.quick-check.result }}" == "success" && \
              "${{ needs.test.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" ]]; then
          echo "All CI checks passed!"
          exit 0
        else
          echo "Some CI checks failed"
          exit 1
        fi 