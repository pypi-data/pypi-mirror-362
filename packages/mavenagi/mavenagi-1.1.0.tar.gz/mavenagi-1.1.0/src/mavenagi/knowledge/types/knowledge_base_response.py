# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions
from ...commons.types.entity_id import EntityId
from ...core.pydantic_utilities import IS_PYDANTIC_V2
from ...core.serialization import FieldMetadata
from .knowledge_base_properties import KnowledgeBaseProperties
from .knowledge_base_type import KnowledgeBaseType


class KnowledgeBaseResponse(KnowledgeBaseProperties):
    """
    Examples
    --------
    from mavenagi.commons import EntityId
    from mavenagi.knowledge import KnowledgeBaseResponse

    KnowledgeBaseResponse(
        knowledge_base_id=EntityId(
            reference_id="help-center",
            app_id="readme",
            organization_id="acme",
            agent_id="support",
            type="KNOWLEDGE_BASE",
        ),
        name="Help center",
        type="API",
        metadata={"key": "value"},
    )
    """

    knowledge_base_id: typing_extensions.Annotated[EntityId, FieldMetadata(alias="knowledgeBaseId")] = pydantic.Field()
    """
    ID that uniquely identifies this knowledge base
    """

    type: KnowledgeBaseType = pydantic.Field()
    """
    The type of the knowledge base. Can not be changed once created.
    """

    metadata: typing.Dict[str, str] = pydantic.Field()
    """
    Metadata for the knowledge base.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from ...commons.types.precondition_group import PreconditionGroup  # noqa: E402, F401, I001
