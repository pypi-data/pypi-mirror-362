# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..commons.errors.bad_request_error import BadRequestError
from ..commons.errors.not_found_error import NotFoundError
from ..commons.errors.server_error import ServerError
from ..commons.types.entity_id import EntityId
from ..commons.types.entity_id_base import EntityIdBase
from ..commons.types.entity_id_without_agent import EntityIdWithoutAgent
from ..commons.types.error_message import ErrorMessage
from ..commons.types.precondition import Precondition
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from .types.knowledge_base_response import KnowledgeBaseResponse
from .types.knowledge_base_version import KnowledgeBaseVersion
from .types.knowledge_base_version_finalize_status import KnowledgeBaseVersionFinalizeStatus
from .types.knowledge_base_version_status import KnowledgeBaseVersionStatus
from .types.knowledge_base_version_type import KnowledgeBaseVersionType
from .types.knowledge_document_content_type import KnowledgeDocumentContentType
from .types.knowledge_document_response import KnowledgeDocumentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawKnowledgeClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_or_update_knowledge_base(
        self,
        *,
        knowledge_base_id: EntityIdBase,
        name: str,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        precondition: typing.Optional[Precondition] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[KnowledgeBaseResponse]:
        """
        Update a knowledge base or create it if it doesn't exist.

        Parameters
        ----------
        knowledge_base_id : EntityIdBase
            ID that uniquely identifies this knowledge base

        name : str
            The name of the knowledge base

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge base.

        precondition : typing.Optional[Precondition]
            (Beta) The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to limit knowledge to certain types of users.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeBaseResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/knowledge",
            method="PUT",
            json={
                "knowledgeBaseId": convert_and_respect_annotation_metadata(
                    object_=knowledge_base_id, annotation=EntityIdBase, direction="write"
                ),
                "metadata": metadata,
                "name": name,
                "precondition": convert_and_respect_annotation_metadata(
                    object_=precondition, annotation=Precondition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseResponse,
                    parse_obj_as(
                        type_=KnowledgeBaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_knowledge_base(
        self, knowledge_base_reference_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[KnowledgeBaseResponse]:
        """
        Get an existing knowledge base by its supplied ID

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to get. All other entity ID fields are inferred from the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeBaseResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseResponse,
                    parse_obj_as(
                        type_=KnowledgeBaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_knowledge_base_version(
        self,
        knowledge_base_reference_id: str,
        *,
        version_id: EntityId,
        type: KnowledgeBaseVersionType,
        status: KnowledgeBaseVersionStatus,
        error_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[KnowledgeBaseVersion]:
        """
        Create a new knowledge base version.

        If an existing version is in progress, then that version will be finalized in an error state.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to create a version for. All other entity ID fields are inferred from the request.

        version_id : EntityId
            The unique ID of the knowledge base version.

        type : KnowledgeBaseVersionType
            Indicates whether the completed version constitutes a full or partial refresh of the knowledge base. Deleting and updating documents is only supported for partial refreshes.

        status : KnowledgeBaseVersionStatus
            The status of the knowledge base version

        error_message : typing.Optional[str]
            A user-facing error message that provides more details about a version failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeBaseVersion]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/version",
            method="POST",
            json={
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityId, direction="write"
                ),
                "type": type,
                "status": status,
                "errorMessage": error_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseVersion,
                    parse_obj_as(
                        type_=KnowledgeBaseVersion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def finalize_knowledge_base_version(
        self,
        knowledge_base_reference_id: str,
        *,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        status: typing.Optional[KnowledgeBaseVersionFinalizeStatus] = OMIT,
        error_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[KnowledgeBaseVersion]:
        """
        Finalize the latest knowledge base version. Required to indicate the version is complete. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to finalize a version for. All other entity ID fields are inferred from the request.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to finalize. If not provided will use the most recent version of the knowledge base.

        status : typing.Optional[KnowledgeBaseVersionFinalizeStatus]
            Whether the knowledge base version processing was successful or not.

        error_message : typing.Optional[str]
            A user-facing error message that provides more details about a version failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeBaseVersion]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/version/finalize",
            method="POST",
            json={
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "status": status,
                "errorMessage": error_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseVersion,
                    parse_obj_as(
                        type_=KnowledgeBaseVersion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        *,
        knowledge_document_id: EntityIdBase,
        content_type: KnowledgeDocumentContentType,
        content: str,
        title: str,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        url: typing.Optional[str] = OMIT,
        language: typing.Optional[str] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        author: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[KnowledgeDocumentResponse]:
        """
        Create knowledge document. Requires an existing knowledge base with an in progress version. Will throw an exception if the latest version is not in progress.

        <Tip>
        This API maintains document version history. If for the same reference ID neither the `title` nor `text` fields
        have changed, a new document version will not be created. The existing version will be reused.
        </Tip>

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to create a document for. All other entity ID fields are inferred from the request.

        knowledge_document_id : EntityIdBase
            ID that uniquely identifies this knowledge document within its knowledge base

        content_type : KnowledgeDocumentContentType

        content : str
            The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.

        title : str
            The title of the document. Will be shown as part of answers.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge document.

        url : typing.Optional[str]
            The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.

        language : typing.Optional[str]
            The document language. Must be a valid ISO 639-1 language code.

        created_at : typing.Optional[dt.datetime]
            The time at which this document was created.

        updated_at : typing.Optional[dt.datetime]
            The time at which this document was last modified.

        author : typing.Optional[str]
            The name of the author who created this document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeDocumentResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/document",
            method="POST",
            json={
                "knowledgeDocumentId": convert_and_respect_annotation_metadata(
                    object_=knowledge_document_id, annotation=EntityIdBase, direction="write"
                ),
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "contentType": content_type,
                "content": content,
                "metadata": metadata,
                "title": title,
                "url": url,
                "language": language,
                "createdAt": created_at,
                "updatedAt": updated_at,
                "author": author,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeDocumentResponse,
                    parse_obj_as(
                        type_=KnowledgeDocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        *,
        knowledge_document_id: EntityIdBase,
        content_type: KnowledgeDocumentContentType,
        content: str,
        title: str,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        url: typing.Optional[str] = OMIT,
        language: typing.Optional[str] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        author: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[KnowledgeDocumentResponse]:
        """
        Not yet implemented. Update knowledge document. Requires an existing knowledge base with an in progress version of type PARTIAL. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base that contains the document to update. All other entity ID fields are inferred from the request.

        knowledge_document_id : EntityIdBase
            ID that uniquely identifies this knowledge document within its knowledge base

        content_type : KnowledgeDocumentContentType

        content : str
            The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.

        title : str
            The title of the document. Will be shown as part of answers.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge document.

        url : typing.Optional[str]
            The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.

        language : typing.Optional[str]
            The document language. Must be a valid ISO 639-1 language code.

        created_at : typing.Optional[dt.datetime]
            The time at which this document was created.

        updated_at : typing.Optional[dt.datetime]
            The time at which this document was last modified.

        author : typing.Optional[str]
            The name of the author who created this document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KnowledgeDocumentResponse]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/document",
            method="PUT",
            json={
                "knowledgeDocumentId": convert_and_respect_annotation_metadata(
                    object_=knowledge_document_id, annotation=EntityIdBase, direction="write"
                ),
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "contentType": content_type,
                "content": content,
                "metadata": metadata,
                "title": title,
                "url": url,
                "language": language,
                "createdAt": created_at,
                "updatedAt": updated_at,
                "author": author,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeDocumentResponse,
                    parse_obj_as(
                        type_=KnowledgeDocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        knowledge_document_reference_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[None]:
        """
        Not yet implemented. Delete knowledge document. Requires an existing knowledge base with an in progress version of type PARTIAL. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base that contains the document to delete. All other entity ID fields are inferred from the request

        knowledge_document_reference_id : str
            The reference ID of the knowledge document to delete. All other entity ID fields are inferred from the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/{jsonable_encoder(knowledge_document_reference_id)}/document",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawKnowledgeClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_or_update_knowledge_base(
        self,
        *,
        knowledge_base_id: EntityIdBase,
        name: str,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        precondition: typing.Optional[Precondition] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[KnowledgeBaseResponse]:
        """
        Update a knowledge base or create it if it doesn't exist.

        Parameters
        ----------
        knowledge_base_id : EntityIdBase
            ID that uniquely identifies this knowledge base

        name : str
            The name of the knowledge base

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge base.

        precondition : typing.Optional[Precondition]
            (Beta) The preconditions that must be met for knowledge base be relevant to a conversation. Can be used to limit knowledge to certain types of users.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeBaseResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/knowledge",
            method="PUT",
            json={
                "knowledgeBaseId": convert_and_respect_annotation_metadata(
                    object_=knowledge_base_id, annotation=EntityIdBase, direction="write"
                ),
                "metadata": metadata,
                "name": name,
                "precondition": convert_and_respect_annotation_metadata(
                    object_=precondition, annotation=Precondition, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseResponse,
                    parse_obj_as(
                        type_=KnowledgeBaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_knowledge_base(
        self, knowledge_base_reference_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[KnowledgeBaseResponse]:
        """
        Get an existing knowledge base by its supplied ID

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to get. All other entity ID fields are inferred from the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeBaseResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseResponse,
                    parse_obj_as(
                        type_=KnowledgeBaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_knowledge_base_version(
        self,
        knowledge_base_reference_id: str,
        *,
        version_id: EntityId,
        type: KnowledgeBaseVersionType,
        status: KnowledgeBaseVersionStatus,
        error_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[KnowledgeBaseVersion]:
        """
        Create a new knowledge base version.

        If an existing version is in progress, then that version will be finalized in an error state.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to create a version for. All other entity ID fields are inferred from the request.

        version_id : EntityId
            The unique ID of the knowledge base version.

        type : KnowledgeBaseVersionType
            Indicates whether the completed version constitutes a full or partial refresh of the knowledge base. Deleting and updating documents is only supported for partial refreshes.

        status : KnowledgeBaseVersionStatus
            The status of the knowledge base version

        error_message : typing.Optional[str]
            A user-facing error message that provides more details about a version failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeBaseVersion]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/version",
            method="POST",
            json={
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityId, direction="write"
                ),
                "type": type,
                "status": status,
                "errorMessage": error_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseVersion,
                    parse_obj_as(
                        type_=KnowledgeBaseVersion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def finalize_knowledge_base_version(
        self,
        knowledge_base_reference_id: str,
        *,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        status: typing.Optional[KnowledgeBaseVersionFinalizeStatus] = OMIT,
        error_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[KnowledgeBaseVersion]:
        """
        Finalize the latest knowledge base version. Required to indicate the version is complete. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to finalize a version for. All other entity ID fields are inferred from the request.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to finalize. If not provided will use the most recent version of the knowledge base.

        status : typing.Optional[KnowledgeBaseVersionFinalizeStatus]
            Whether the knowledge base version processing was successful or not.

        error_message : typing.Optional[str]
            A user-facing error message that provides more details about a version failure.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeBaseVersion]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/version/finalize",
            method="POST",
            json={
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "status": status,
                "errorMessage": error_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeBaseVersion,
                    parse_obj_as(
                        type_=KnowledgeBaseVersion,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        *,
        knowledge_document_id: EntityIdBase,
        content_type: KnowledgeDocumentContentType,
        content: str,
        title: str,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        url: typing.Optional[str] = OMIT,
        language: typing.Optional[str] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        author: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[KnowledgeDocumentResponse]:
        """
        Create knowledge document. Requires an existing knowledge base with an in progress version. Will throw an exception if the latest version is not in progress.

        <Tip>
        This API maintains document version history. If for the same reference ID neither the `title` nor `text` fields
        have changed, a new document version will not be created. The existing version will be reused.
        </Tip>

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base to create a document for. All other entity ID fields are inferred from the request.

        knowledge_document_id : EntityIdBase
            ID that uniquely identifies this knowledge document within its knowledge base

        content_type : KnowledgeDocumentContentType

        content : str
            The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.

        title : str
            The title of the document. Will be shown as part of answers.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge document.

        url : typing.Optional[str]
            The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.

        language : typing.Optional[str]
            The document language. Must be a valid ISO 639-1 language code.

        created_at : typing.Optional[dt.datetime]
            The time at which this document was created.

        updated_at : typing.Optional[dt.datetime]
            The time at which this document was last modified.

        author : typing.Optional[str]
            The name of the author who created this document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeDocumentResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/document",
            method="POST",
            json={
                "knowledgeDocumentId": convert_and_respect_annotation_metadata(
                    object_=knowledge_document_id, annotation=EntityIdBase, direction="write"
                ),
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "contentType": content_type,
                "content": content,
                "metadata": metadata,
                "title": title,
                "url": url,
                "language": language,
                "createdAt": created_at,
                "updatedAt": updated_at,
                "author": author,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeDocumentResponse,
                    parse_obj_as(
                        type_=KnowledgeDocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        *,
        knowledge_document_id: EntityIdBase,
        content_type: KnowledgeDocumentContentType,
        content: str,
        title: str,
        version_id: typing.Optional[EntityIdWithoutAgent] = OMIT,
        metadata: typing.Optional[typing.Dict[str, str]] = OMIT,
        url: typing.Optional[str] = OMIT,
        language: typing.Optional[str] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        author: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[KnowledgeDocumentResponse]:
        """
        Not yet implemented. Update knowledge document. Requires an existing knowledge base with an in progress version of type PARTIAL. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base that contains the document to update. All other entity ID fields are inferred from the request.

        knowledge_document_id : EntityIdBase
            ID that uniquely identifies this knowledge document within its knowledge base

        content_type : KnowledgeDocumentContentType

        content : str
            The content of the document. Not shown directly to users. May be provided in HTML or markdown. HTML will be converted to markdown automatically. Images are not currently supported and will be ignored.

        title : str
            The title of the document. Will be shown as part of answers.

        version_id : typing.Optional[EntityIdWithoutAgent]
            ID that uniquely identifies which knowledge base version to create the document in. If not provided will use the most recent version of the knowledge base.

        metadata : typing.Optional[typing.Dict[str, str]]
            Metadata for the knowledge document.

        url : typing.Optional[str]
            The URL of the document. Should be visible to end users. Will be shown as part of answers. Not used for crawling.

        language : typing.Optional[str]
            The document language. Must be a valid ISO 639-1 language code.

        created_at : typing.Optional[dt.datetime]
            The time at which this document was created.

        updated_at : typing.Optional[dt.datetime]
            The time at which this document was last modified.

        author : typing.Optional[str]
            The name of the author who created this document.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KnowledgeDocumentResponse]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/document",
            method="PUT",
            json={
                "knowledgeDocumentId": convert_and_respect_annotation_metadata(
                    object_=knowledge_document_id, annotation=EntityIdBase, direction="write"
                ),
                "versionId": convert_and_respect_annotation_metadata(
                    object_=version_id, annotation=EntityIdWithoutAgent, direction="write"
                ),
                "contentType": content_type,
                "content": content,
                "metadata": metadata,
                "title": title,
                "url": url,
                "language": language,
                "createdAt": created_at,
                "updatedAt": updated_at,
                "author": author,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KnowledgeDocumentResponse,
                    parse_obj_as(
                        type_=KnowledgeDocumentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_knowledge_document(
        self,
        knowledge_base_reference_id: str,
        knowledge_document_reference_id: str,
        *,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[None]:
        """
        Not yet implemented. Delete knowledge document. Requires an existing knowledge base with an in progress version of type PARTIAL. Will throw an exception if the latest version is not in progress.

        Parameters
        ----------
        knowledge_base_reference_id : str
            The reference ID of the knowledge base that contains the document to delete. All other entity ID fields are inferred from the request

        knowledge_document_reference_id : str
            The reference ID of the knowledge document to delete. All other entity ID fields are inferred from the request.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/knowledge/{jsonable_encoder(knowledge_base_reference_id)}/{jsonable_encoder(knowledge_document_reference_id)}/document",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise ServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        ErrorMessage,
                        parse_obj_as(
                            type_=ErrorMessage,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
