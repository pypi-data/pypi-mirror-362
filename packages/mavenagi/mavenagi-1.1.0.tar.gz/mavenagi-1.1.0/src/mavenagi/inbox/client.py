# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..commons.types.inbox_item import InboxItem
from ..commons.types.inbox_item_fix import InboxItemFix
from ..commons.types.inbox_item_fix_type import InboxItemFixType
from ..commons.types.inbox_item_status import InboxItemStatus
from ..commons.types.inbox_item_type import InboxItemType
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawInboxClient, RawInboxClient
from .types.add_document_fix_request import AddDocumentFixRequest
from .types.inbox_search_response import InboxSearchResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InboxClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInboxClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInboxClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInboxClient
        """
        return self._raw_client

    def search(
        self,
        *,
        statuses: typing.Optional[typing.Sequence[InboxItemStatus]] = OMIT,
        type: typing.Optional[typing.Sequence[InboxItemType]] = OMIT,
        created_after: typing.Optional[dt.datetime] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
        sort_id: typing.Optional[str] = OMIT,
        sort_desc: typing.Optional[bool] = OMIT,
        page: typing.Optional[int] = OMIT,
        size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxSearchResponse:
        """
        Retrieve a paginated list of inbox items for an agent.

        Parameters
        ----------
        statuses : typing.Optional[typing.Sequence[InboxItemStatus]]
            List of inbox item statuses to filter by.

        type : typing.Optional[typing.Sequence[InboxItemType]]
            List of inbox item types to filter by.

        created_after : typing.Optional[dt.datetime]
            Filter for items created after this timestamp.

        created_before : typing.Optional[dt.datetime]
            Filter for items created before this timestamp.

        sort_id : typing.Optional[str]
            The field to sort by, defaults to created timestamp.

        sort_desc : typing.Optional[bool]
            Whether to sort descending, defaults to true.

        page : typing.Optional[int]
            Page number to return, defaults to 0

        size : typing.Optional[int]
            The size of the page to return, defaults to 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxSearchResponse

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.search()
        """
        _response = self._raw_client.search(
            statuses=statuses,
            type=type,
            created_after=created_after,
            created_before=created_before,
            sort_id=sort_id,
            sort_desc=sort_desc,
            page=page,
            size=size,
            request_options=request_options,
        )
        return _response.data

    def get(
        self,
        inbox_item_id: str,
        *,
        app_id: str,
        item_type: InboxItemType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxItem:
        """
        Retrieve details of a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            The ID of the inbox item to get. All other entity ID fields are inferred from the request.

        app_id : str
            The App ID of the inbox item to retrieve

        item_type : InboxItemType
            The type of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItem
            Details of the specified inbox item.

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.get(
            inbox_item_id="inboxItemId",
            app_id="appId",
            item_type="DUPLICATE_DOCUMENT",
        )
        """
        _response = self._raw_client.get(
            inbox_item_id, app_id=app_id, item_type=item_type, request_options=request_options
        )
        return _response.data

    def get_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        fix_type: InboxItemFixType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxItemFix:
        """
        Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str
            The App ID of the inbox item fix to retrieve

        fix_type : InboxItemFixType
            The type of the inbox item fix to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItemFix
            Details of the specified inbox item fix.

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.get_fix(
            inbox_item_fix_id="inboxItemFixId",
            app_id="appId",
            fix_type="REMOVE_DOCUMENT",
        )
        """
        _response = self._raw_client.get_fix(
            inbox_item_fix_id, app_id=app_id, fix_type=fix_type, request_options=request_options
        )
        return _response.data

    def apply_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        fix_type: InboxItemFixType,
        add_document_request: typing.Optional[AddDocumentFixRequest] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a fix to an inbox item with a specific document.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str

        fix_type : InboxItemFixType
            The type of the inbox item fix to retrieve

        add_document_request : typing.Optional[AddDocumentFixRequest]
            Content for Add Document fixes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.apply_fix(
            inbox_item_fix_id="inboxItemFixId",
            app_id="appId",
            fix_type="REMOVE_DOCUMENT",
        )
        """
        _response = self._raw_client.apply_fix(
            inbox_item_fix_id,
            app_id=app_id,
            fix_type=fix_type,
            add_document_request=add_document_request,
            request_options=request_options,
        )
        return _response.data

    def ignore(
        self,
        inbox_item_id: str,
        *,
        app_id: str,
        item_type: InboxItemType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ignore a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            Unique identifier for the inbox item.

        app_id : str
            The App ID of the inbox item fix to ignore

        item_type : InboxItemType
            The type of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from mavenagi import MavenAGI

        client = MavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )
        client.inbox.ignore(
            inbox_item_id="inboxItemId",
            app_id="appId",
            item_type="DUPLICATE_DOCUMENT",
        )
        """
        _response = self._raw_client.ignore(
            inbox_item_id, app_id=app_id, item_type=item_type, request_options=request_options
        )
        return _response.data


class AsyncInboxClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInboxClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInboxClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInboxClient
        """
        return self._raw_client

    async def search(
        self,
        *,
        statuses: typing.Optional[typing.Sequence[InboxItemStatus]] = OMIT,
        type: typing.Optional[typing.Sequence[InboxItemType]] = OMIT,
        created_after: typing.Optional[dt.datetime] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
        sort_id: typing.Optional[str] = OMIT,
        sort_desc: typing.Optional[bool] = OMIT,
        page: typing.Optional[int] = OMIT,
        size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxSearchResponse:
        """
        Retrieve a paginated list of inbox items for an agent.

        Parameters
        ----------
        statuses : typing.Optional[typing.Sequence[InboxItemStatus]]
            List of inbox item statuses to filter by.

        type : typing.Optional[typing.Sequence[InboxItemType]]
            List of inbox item types to filter by.

        created_after : typing.Optional[dt.datetime]
            Filter for items created after this timestamp.

        created_before : typing.Optional[dt.datetime]
            Filter for items created before this timestamp.

        sort_id : typing.Optional[str]
            The field to sort by, defaults to created timestamp.

        sort_desc : typing.Optional[bool]
            Whether to sort descending, defaults to true.

        page : typing.Optional[int]
            Page number to return, defaults to 0

        size : typing.Optional[int]
            The size of the page to return, defaults to 20

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxSearchResponse

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.search()


        asyncio.run(main())
        """
        _response = await self._raw_client.search(
            statuses=statuses,
            type=type,
            created_after=created_after,
            created_before=created_before,
            sort_id=sort_id,
            sort_desc=sort_desc,
            page=page,
            size=size,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self,
        inbox_item_id: str,
        *,
        app_id: str,
        item_type: InboxItemType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxItem:
        """
        Retrieve details of a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            The ID of the inbox item to get. All other entity ID fields are inferred from the request.

        app_id : str
            The App ID of the inbox item to retrieve

        item_type : InboxItemType
            The type of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItem
            Details of the specified inbox item.

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.get(
                inbox_item_id="inboxItemId",
                app_id="appId",
                item_type="DUPLICATE_DOCUMENT",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            inbox_item_id, app_id=app_id, item_type=item_type, request_options=request_options
        )
        return _response.data

    async def get_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        fix_type: InboxItemFixType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InboxItemFix:
        """
        Retrieve a suggested fix. Includes document information if the fix is a Missing Knowledge suggestion.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str
            The App ID of the inbox item fix to retrieve

        fix_type : InboxItemFixType
            The type of the inbox item fix to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InboxItemFix
            Details of the specified inbox item fix.

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.get_fix(
                inbox_item_fix_id="inboxItemFixId",
                app_id="appId",
                fix_type="REMOVE_DOCUMENT",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_fix(
            inbox_item_fix_id, app_id=app_id, fix_type=fix_type, request_options=request_options
        )
        return _response.data

    async def apply_fix(
        self,
        inbox_item_fix_id: str,
        *,
        app_id: str,
        fix_type: InboxItemFixType,
        add_document_request: typing.Optional[AddDocumentFixRequest] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Apply a fix to an inbox item with a specific document.

        Parameters
        ----------
        inbox_item_fix_id : str
            Unique identifier for the inbox fix.

        app_id : str

        fix_type : InboxItemFixType
            The type of the inbox item fix to retrieve

        add_document_request : typing.Optional[AddDocumentFixRequest]
            Content for Add Document fixes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.apply_fix(
                inbox_item_fix_id="inboxItemFixId",
                app_id="appId",
                fix_type="REMOVE_DOCUMENT",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.apply_fix(
            inbox_item_fix_id,
            app_id=app_id,
            fix_type=fix_type,
            add_document_request=add_document_request,
            request_options=request_options,
        )
        return _response.data

    async def ignore(
        self,
        inbox_item_id: str,
        *,
        app_id: str,
        item_type: InboxItemType,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Ignore a specific inbox item by its ID.

        Parameters
        ----------
        inbox_item_id : str
            Unique identifier for the inbox item.

        app_id : str
            The App ID of the inbox item fix to ignore

        item_type : InboxItemType
            The type of the inbox item to retrieve

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from mavenagi import AsyncMavenAGI

        client = AsyncMavenAGI(
            organization_id="YOUR_ORGANIZATION_ID",
            agent_id="YOUR_AGENT_ID",
            app_id="YOUR_APP_ID",
            app_secret="YOUR_APP_SECRET",
        )


        async def main() -> None:
            await client.inbox.ignore(
                inbox_item_id="inboxItemId",
                app_id="appId",
                item_type="DUPLICATE_DOCUMENT",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.ignore(
            inbox_item_id, app_id=app_id, item_type=item_type, request_options=request_options
        )
        return _response.data
