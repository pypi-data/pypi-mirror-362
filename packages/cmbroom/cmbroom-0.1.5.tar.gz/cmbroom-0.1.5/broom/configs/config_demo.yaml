# ==================================== PARAMETERS ==================================== #


# ==== GENERAL ==== #
#Minimum multipole where power is injected in simulations and considered in component separation. Default: 2.
lmin: 2

# Nside parameter. Used to generate simulations (if requested) and produce outputs from component separation.
nside: 64
# If simulations for compsep are not generated with broom package, it specifies the nside of the input data.
# If not provided, it will be set to nside.
# When running component separation and maps are provided, it will be directly inferred from them.
nside_in: null

#Maximum multipole used to generate simulations (if requested) and to run component separation. Default: 2 * nside.
lmax: 150

# Data type. Used to set how simulations must be returned (and/or saved), if generated, 
# and which kind of data you are passing to compsep.
data_type: "alms" # "maps" or "alms"

# Resolution at which input data are brought before running component separation (if bring_to_common_resolution is True).
# Default is 2.5 * pixel_size, where pixel_size is the pixel size corresponding to the nside parameter.
fwhm_out: 30. 

# Number identifying the initial simulation of the set you may want to run.
# In general, the simulation number is used to generate (and/or save) simulations and to save compsep outputs. 
# Default: 0.
nsim_start: 0 

# Number of simulations to run. 
# It can be used to generate multiple simulations and to run compsep and/or save its outputs. 
# At the moment broom routines are not written to run multiple simulations.
# You can use this parameter to run broom routines on multiple simulations in your own python script.
# Default: 1.
nsims: 1

# If True, routines are parallelized (either among simulations or across needlet bands). Not implemented yet.
parallelize: False # 

# Verbosity
# If True, the code will print information about the run. Default: False.
verbose: False

# ==== DATA AND INSTRUMENT ==== #

# list of PySM foreground models. Used to generate foreground simulations and get proper MC-ILC tracers. 
# Default: ["d0","s0"].
foreground_models: ["d1","s1"] 

# Path (including filename) of the yaml file where the instrument configuration is stored.
# It should contain an attribute with the same name as the experiment specified below.
# By defaul it will be the 'utils/instrument_config.yaml' in broom package.
experiments_file: ""

# Considered experiment. 
# Used to generate simulations, MC-ILC tracers and 
# to properly account for beams and bandpasses in compsep.
# A dictionary with the same name must be present in the experiments_file. 
# See examples in the utils/experiments.yaml file in broom package.
# It should include the following keys:
# - frequency: list of central observed frequencies in GHz
# - depth_I: list of noise depths in muK-arcmin for intensity maps (if not provided, they will be depth_P/sqrt(2)).
#        Used if 'generate_input_noise' is True and 'path_depth_maps' is not provided.
# - depth_P: list of noise depths in muK-arcmin for polarization maps (if not provided, they will be depth_I * sqrt(2))
#        Used if 'generate_input_noise' is True and 'path_depth_maps' is not provided.
#        If 'path_depth_maps' is not provided, at least one of 'depth_I' or 'depth_P' must be provided.
# - fwhm: list of FWHMs of Gaussian beams for the different frequency channels (in arcmin)
# - channel_tags: list of tags for the frequency channels. Used to look for files of beams, depth_maps, 
#        bandpasses and hits maps (see below) and to save component separation products with multifrequency outcomes. 
#        If not provided, it will be generated from the frequency list (e.g. "40.0GHz" for 40 GHz channel).
# - path_depth_maps: Full path to the depth maps, used if generate_input_noise is True.
#        Maps are loaded from {path_depth_maps} + '_{frequency_tag}.fits' files. 
#        There should be one file for each frequency channel.
#        They could be either 2 (I and P) fields per file or a single field (assumed to refer to P and I is scaled accordingly).
#        If provided, depth_I and depth_P will be ignored.
# - path_hits_maps: Full path to hits maps, used if generate_input_noise is True and path_depth_maps is not provided.
#       It will load the hits maps (assumed to be a .fits file) and weight the noise maps by the relative hits counts.
#       Generated noise maps will be divided by the square root of the normalized hits map. 
#       it can either:
#        - include the filename itself (ending with '.fits') and a single hits map will be assumed for all frequencies
#        - it will look for different {path_hits_maps} + '_{frequency_tag}.fits' files.
# - bandwidth: list of relative bandwidths for top-hat bandpasses (e.g. 0.3 for 30% bandwidth) in intensity units.
#         Used if path_bandpasses is not provided and bandpass_integrate is True (see below).
# - path_bandpasses: path to the bandpasses if different shapes from top-hat are needed.
#        Used if bandpass_integrate is True.
#        Bandpasses will be loaded from {path_bandpasses} + '_{frequency_tag}.npy' files.
#        Provided bandpasses are assumed to be in intensity units.
#        Each file should include a 2D array with frequency (GHz) and frequency response.
# - beams: type of beams used to smooth simulations and to bring maps to a common resolution before compsep (if needed).
#          It can be "gaussian", "file_l" (symmetric but not gaussian beams) or "file_lm" (asymmetric beams).
# - path_beams: path to the beams if input_beams is not "gaussian". 
#          The code will load a .fits file named {path_beams} + '_{frequency_tag}.fits' for each frequency channel.
# - ell_knee: lists of knee multipoles of the noise power spectrum for the 1/f noise component. One value for each frequency channel. 
#          It can be:
#            - a single list of multipoles, in which case 1/f noise is injected only in temperature
#            - a list of 2 lists, in which case the first list is for temperature and the second one for polarization.
#          If not provided, white noise is assumed.
# - alpha_knee: list of slopes of the noise power spectrum in multipole space for the 1/f noise component. 
#          It can be:
#            - a single list of slopes, in which case 1/f noise is injected only in temperature (if ell_knee is a single list) or
#                  in temperature and polarization (if ell_knee is a list of 2 lists) with same values.
#            - a list of 2 lists, in which case the first list is for temperature and the second one for polarization.
#             If not provided, white noise is assumed.
experiment: "LiteBIRD_PTEP" 

# Units of the data. Used to generate simulations and in component separation to compute CMB and moments SEDs.
# Methods reconstructing CMB signal will return products in uk_CMB units.
# Methods reconstructing foregrounds will return products in the same units as the input data.
# Default: "uK_CMB".
units: "uK_CMB"

# Assumed sky coordinate system. Default: Galactic ("G"). Other options: 'E' (ecliptic) or 'C' (equatorial).
# Used to generate simulated foreground maps.
# They should match the coordinate system of hits/depths maps, if provided.
coordinates: "G" 

# ==== INPUT SIMULATIONS ==== #

# Keywords for input simulations. Most of these parameters are not needed for the compsep runs.

# If True, the input foregrounds are generated. 
# If False, the input foregrounds are loaded from the paths specified below, if needed.
# Default: True.
generate_input_foregrounds: False #True #

# If True, when generating/loading input foregrounds, 
# it will store/load the single components (e.g. dust, synchrotron) of the foregrounds. Default: False.
return_fgd_components: True

# If True, input foreground and CMB maps are obtained after bandpass integration. Default: False.
# Bandpasses shapes depend on the instrument dictionary in experiments_file.
# You can either provide 'path_bandpasses' or 'bandwidth' in the experiment dictionary.
# Both of them are assumed to be in intensity units. 
bandpass_integrate: False

# If True, the input noise maps are generated. 
# If False, the input noise maps are loaded from the paths specified below. Default: True.
generate_input_noise: False #True #
# If not null, input noise maps will be generated starting from the provided seed. It must be integer. 
# Default: null.
# For multiple simulations, the seed will be incremented by the simulation number.
seed_noise: null

# If True, the input CMB maps are generated from the angular power spectrum specified in cls_cmb_path. 
# If False, the input CMB maps are loaded from the paths specified below. Default: True.
generate_input_cmb: False #True #
# If not null, input CMB maps will be generated starting from the provided seed. It must be integer. Default: null.
# For multiple simulations, the seed will be incremented by the simulation number.
seed_cmb: null
# Path to the theoretical CMB power spectra. Used to generate CMB simulations. 
# If not provided, the default Planck 2018 best-fit is used (stored in broom package 'utils' folder).
# It must be in muK_CMB^2 units.
cls_cmb_path: ""
# If True (default), it assumes that theoretical CMB power spectra in cls_cmb_path are ordered as [TT, EE, BB, TE, EB, TB].
# If False, it assumes they are ordered as [TT, TE, TB, EE, EB, BB].
cls_cmb_new_ordered: True

# If True, the input coadded maps will be generated as the sum of loaded or generated foreground, noise and CMB. 
# If False, the input total data are loaded from the path specified below. 
# Default: True.
generate_input_data: False #True #

# If True, the input components, if generated, are saved in the paths specified below. Default: False.
save_inputs: True #False # 

# Input pixel window function. Default: False.
# If True, the input maps/alms are convolved for the pixel window function
# If True, input data are corrected for it before component separation.
pixel_window_in: False


# Paths to input total data, foregrounds, CMB and noise simulations.
# Used to save/load simulations.
# They have to include the filename. 
# If nsim is provided it will add the number of the simulation 
#    to the filename at the end when saving/loading total, CMB and noise maps.

# Full path to total input maps. Used save/load total simulations.
# If nsim is provided, it will add the number of the simulation to the filename at the end.
data_path: "inputs/LiteBIRD_PTEP/total/total_alms_ns64"
# Full path to foreground input maps. Used to save/load foreground simulations.
# The foreground model specified in foreground_models will be added to the filename at the end.
fgds_path: "inputs/LiteBIRD_PTEP/foregrounds/d1s1/foregrounds_alms_ns64"
# Full path to the CMB input maps. Used to save/load CMB simulations. 
# If nsim is provided, it will add the number of the simulation to the filename at the end.
cmb_path: "inputs/LiteBIRD_PTEP/cmb/cmb_alms_ns64"
# Full path to the noise input maps. Used to save/load noise simulations.
# If nsim is provided, it will add the number of the simulation to the filename at the end.
noise_path: "inputs/LiteBIRD_PTEP/noise/noise_alms_ns64"


# ==== COMPONENT SEPARATION ==== #

# Input fields provided to compsep as alms or maps. 
# It can be in ["T","E","B","QU","TQU","EB","TEB"] for maps and in ["T","E","B","EB","TEB"] for alms.
field_in: "TQU"  

# Output fields to be returned (and/or saved) by compsep run. 
# It can be in ["T","E","B","QU","QU_E","QU_B","TQU","EB","TEB"], 
# where "QU_E" and "QU_B" are Stokes maps made of only E-modes and B-modes, respectively.
# If null, the output fields will be 'field_in'
field_out: "TEB" 

# If True, the input maps/alms will be brought to a common resolution (set in fwhm_out) before running compsep. 
# If False, the maps will be used as they are. Default: True.
bring_to_common_resolution: True 

# Output pixel window function. 
# If True:
#    output compsep maps are convolved for the pixel window function associated to the nside parameter. 
#    spectra loaded from the outputs are corrected for the corresponding pixel window function.
# Default: False.
pixel_window_out: False

# Full path to the HEALPix .fits mask which mask the pixels which are not observed by the instrument.
# It can be apodized, if you need to correct for EB-leakage with Namster purification
# Default: None
mask_observations: null #"data/norm_nHits_SA_35FOV_ns512.fits"

# Full path to HEALPix .fits file for a mask to be used in component separation.
# Pixels with zero values are not considered in component separation and will be masked in the outputs.
# A non-binary mask can be used to weigh differently pixels in covariance computation.
# Pixels which are 0 in mask_observations will be set to 0 in mask_covariance.
mask_covariance: None # 

# If provided, polarization maps will be corrected for EB-leakage before running component separation on E-modes and/or B-modes. 
# It is used only if 'mask_observations' is provided.
# Default: null.
# It can be ["EB", "B"] followed by "_purify" or "_recycling".
# If "_purify" is chosen, the standard purification procedure is implemented through the pymaster package.
# If "_recycling" is chosen, the recycling correction is implemented. See https://arxiv.org/abs/2208.12059 for details.
# In "_recycling" case you can also apply an iterative procedure by adding e.g. "_iterations3" (3 iterations) at the end.
# Examples: "B_purify", "B_recycling" (no iterations), "B_recycling_iterations3" (3 iterations).
leakage_correction: null

# If True, the output maps are saved in the path specified with path_outputs. Default: False.
# The products will be save in subfolders of path_ouputs with name specifying univocally the compsep run.
save_compsep_products: True 
# If True, the output maps are returned by compsep functions. Default: True.
return_compsep_products: False # True #

# Full root path where outputs from compsep are saved (change with your path)
path_outputs: "outputs/LiteBIRD_PTEP/d1s1" 

# Component separation runs
# Each run is specified by a dictionary with the following keys:
# - method: method to be used for component separation. 
#     It can be "ilc", "mcilc", "mc_ilc", "gilc", "cilc", "c_ilc", "pilc", "cpilc", "c_pilc", "gpilc".
#       - "ilc": standard ILC method to be applied on scalar fields (T, E, B). It comprises: ILC, NILC (if needlet domain is used).
#       - "mcilc": Multi-clustering ILC method to be applied on scalar fields (T, E, B). 
#           It comprises: MC-ILC, MC-NILC (if needlet domain is used).
#       - "mc_ilc": It applies Multi-clustering only on selected needlet bands (specified in special_nls).
#       - "gilc": Generalized ILC method to be applied on scalar fields (T, E, B). 
#           It comprises: GILC, GNILC (if needlet domain is used). 
#           Used to reconstruct foreground emission at different frequencies.
#       - "cilc": Constrained moment ILC method on scalar fields (T, E, B). It can be applied both in pixel and needlet domain. 
#           Used to deproject moments.
#       - "c_ilc": deproject moments only on selected needlet bands (specified in special_nls).
#       - "mc_cilc": It applies Multi-clustering only on selected needlet bands (specified in special_nls) 
#           and moments deprojection in other needlets
#       - "pilc": Polarization ILC method to be applied on QU maps. It can be applied both in pixel and needlet domain.
#       - "cpilc": Constrained moment PILC method to be applied on QU maps. It can be applied both in pixel and needlet domain.
#          It can be used to deproject moments on QU maps.
#       - "c_pilc": deproject moments only on selected needlet bands (specified in special_nls).
#       - "gpilc": Generalized PILC method to be applied on QU maps. It can be applied both in pixel and needlet domain.  
#           Used to reconstruct foregrounds at different frequencies.
#       - "fgd_diagnostic": It provides diagnostic of foreground complexity for scalar fields given the provided instrumental configuration.
#           See https://arxiv.org/abs/2402.17579 for details.
#       - "fgd_P_diagnostic": It provides diagnostic of foreground complexity for P maps given the provided instrumental configuration.

# - domain: domain in which the method is applied. It can be "pixel" or "needlet".

# - needlet_config: list of dictionaries which specifies the needlet configuration to be adopted. It is used only if domain is "needlet".
#       It can include the following keys: 
#         - needlet_windows: type of needlet windows to be used. It can be "mexican", "cosine", "standard".
#         - width: width of the needlet windows. It is used only if needlet_windows is "mexican" or "standard". 
#         - merging_needlets: list of needlet bins to be merged together. 
#             If e.g. [0, 7, 13], the needlet bands from 0 to 6 (included) and from 7 to 12 will be merged together.
#             It is used only if needlet_windows is "mexican" or "standard".
#         - ell_peaks: list of multipoles where the cosine needlet windows are peaked. Used only if needlet_windows is "cosine".

# - ilc_bias: amount of residual ILC bias. It is used to set the size of domain where covariance is computed. 
#       If 0., covariance is computed as the average over the full sky/patch. Default: 0.0
#       The final ILC_bias will be such that std_bias = ilc_bias * std_cmb, where std_cmb is the standard deviation of the input CMB signal.
# - reduce_ilc_bias: if True, the ILC bias is reduced by computing the covariance in each pixel avoiding a region around it.
# - b_squared: if True, needlet bands are squared. Therefore needlet transformation is performed just once before component separation.
# - adapt_nside: if True, the HEALPix resolution of needlet maps is adapted to the sampled range of multipoles.
# - save_needlets: if True, needlet bands are saved in the method specific path.
# - save_weights: if True, the weights used to reconstruct the maps are saved in the method specific path.
# - special_nls: list of needlet bands indexes where either multiclustering or moment deprojections
#       has to be applied. Used only if method is "mc_ilc", "c_ilc", "c_pilc".
# - cov_noise_debias: (float, list) Noise covariance debiasing factor. It can be used for all methods except MC-ILC. 
#       If different from 0. it will debias the covariance matrix by a factor cov_noise_debias * noise_covariance.
#       It should be a list with the same length as the number of needlet scales if domain is "needlet", otherwise a single float.

compsep:
# ILC in pixel domain
  - method: "ilc"
    domain: "pixel"
    ilc_bias: 0.001
    cov_noise_debias: 0.0 # 0.0, 0.1, 0.2, ...

# ILC in needlet domain (NILC) with mexican needlets (similar dictionary for standard needlets)
  - method: "ilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    ilc_bias: 0.001
    reduce_ilc_bias: False
#    b_squared: False
    adapt_nside: True
    save_needlets: True
    save_weights: True
    cov_noise_debias: [0., 0., 0., 0.]

# ILC in needlet domain (NILC) with cosine needlets
  - method: "ilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "cosine"
      - ell_peaks: [0,50,100,150]
    ilc_bias: 0.0
#    b_squared: False
    adapt_nside: False
    save_needlets: True
    save_weights: True

# Keywords for MC-ILC
# - mc_type: type of MC-ILC to be applied. It can be "cea_ideal", "rp_ideal", "cea_real", "rp_real". Used only if method is "mcilc" or "mc_ilc".
#       'cea' stands for (Clusters with Equal Area) and runs faster than 'rp' (Random Partition) but with similar results.
#        'ideal' will construct clusters internally from foreground maps while 'real' will use the clusters constructed with "get_and_save_real_tracers_B" from broom.clusters.
# - path_tracers: full path where the MC-ILC tracers are stored. Used only if mc_type is "cea_real" or "rp_real".
# - channels_tracers: list of indexes of the frequency channels to be used to construct the clusters. Needed only for "mc_ilc" and "mcilc" methods.
# - reduce_mcilc_bias: if True, the MC-ILC bias is reduced by computing the covariance in each pixel avoiding a region around it. 
#       Used only if method is "mcilc" or "mc_ilc".
# - save_patches: if True, it will save the patches in the output_folder. Patches will be saved just if nsim is None or config.nsim_start.

# Configuration fro MC-NILC with ideal tracer. 
# If you want to use real tracer change 'ideal' to 'real' in mc_type. 
# Note that you need to run 'get_and_save_real_tracers_B' from broom.clusters in adavance in 'real' case.
# Real tracer will be loaded from the path specified in path_tracers.
# If you do not want to suffer of MC-ILC bias, keep 'reduce_mcilc_bias' to True.
# For details see https://arxiv.org/abs/2212.04456.
  - method: "mcilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    reduce_mcilc_bias: True
    adapt_nside: False
    mc_type: "cea_ideal" # "cea_ideal", "rp_ideal", "cea_real", "rp_real"
    channels_tracers: [20,12] # indexes of the frequency channels to be used to construct the frequency ration and buld clusters

# With this configuration MC-ILC is applied only in the needlet bands specified by 'special_nls'.
# In the remaining needlet bands standard NILC is applied.
  - method: "mc_ilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    reduce_mcilc_bias: True
    adapt_nside: False
    mc_type: "cea_real" # "cea_ideal", "rp_ideal", "cea_real", "rp_real"
    path_tracers: "outputs/LiteBIRD_PTEP/d1s1/tracers" # if mc_type is "cea_ideal" or "rp_ideal", this path is not needed
    channels_tracers: [20,12] # indexes of the frequency channels to be used to construct the clusters
    special_nls: [0]
    save_patches: False 

# With this configuration MC-ILC is applied only in the needlet bands specified by 'special_nls'.
# In the remaining needlet bands cMILC is applied.
  - method: "mc_cilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    reduce_mcilc_bias: True
    adapt_nside: False
    mc_type: "cea_real" # "cea_ideal", "rp_ideal", "cea_real", "rp_real"
    path_tracers: "outputs/LiteBIRD_PTEP/d1s1/tracers" # if mc_type is "cea_ideal" or "rp_ideal", this path is not needed
    channels_tracers: [20,12] # indexes of the frequency channels to be used to construct the clusters
    special_nls: [0]
    save_patches: False 

# Parameters for running GILC, GPILC and fgd diagnostic

# - channels_out: list of indexes of the frequency channels to be reconstructed with GILC and GPILC. Used only if method is "gilc" or "gpilc".
# - cmb_nuisance: if False, the CMB is excluded from the computation of the nuisance covariance in GILC, GPILC and fgd_diagnostic.
#     Default: True.
# - depro_cmb: list. If an element of the list (depro_cmb[j]) is not null, in the corresponding j-th needlet band CMB will be deprojected such that 
#       its residual in the output maps will be equal to depro_cmb[j] * CMB.
#       If depro_cmb is null, no CMB deprojection is performed.
#       Used only if method is "gilc" or "gpilc".
# - m_bias: list of floats. If an element of the list (m_bias[j]) is not null, in the corresponding j-th needlet band
#      m_bias[j] more/less foreground modes will be reconstructed in GILC maps.
#      If m_bias is null, no additional foreground modes are reconstructed.
#      If e.g. m_bias > 0, foreground signal will be better reconstructed at the price of higher noise and CMB residues.      
#      Used only if method is "gilc" or "gpilc".

# Configuration for running GILC.
  - method: "gilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0,10,14,17,34] # [0,12,15,20,25,34] #
    ilc_bias: 0.01
#    b_squared: False
    adapt_nside: True
    cmb_nuisance: True
    reduce_ilc_bias: False
#    depro_cmb: [null,0.,0.]
#    m_bias: [0,1,1,1]
#    channels_out: [0,1,2,3,4,5]  indices of channels you want to be reconstructed with GNILC. If not provided, all channels are reconstructed.
    save_needlets: True

# Parameters for moments deprojection in 'cilc', 'c_ilc', 'cpilc', 'c_pilc' methods.
# - constraints: list of dictionaries specifying the moments to be deprojected. 
#       Used only if method is "cilc", "c_ilc", "cpilc", "c_pilc".
#       It must include the following keys:
#         - moments: list of moments to be deprojected. 
#             They can be in ["0d", "0s", "1bd", "1bs", "1Td", 2bd', '2bs', '2Td', '2bdTd', '2Tdbd'].
#             The list can include any zero, first and second order moments for dust and synchrotron
#             It can be a list of lists if you want to deproject different moments in different needlet bands.
# In constraints you can also specify the beta_d, T_d, beta_s indices used for dust and synchrotron moments computation. 
#   If floats are provided, they will be used for all needlet bands. 
#   If lists are provided, each value will be used for the corresponding needlet band.
#   Defaults are beta_d = 1.54, T_d = 20., beta_s = -3..
# In constraints, you can also specify 'deprojection'. It set the residue level in a needlet band to deprojection * input_moment.
#   It can be a single list or a list of lists and 
#   specifies the deprojection to be applied in each needlet band to each moment. Default is 0. for all moments in all needlet bands,
#   which means full deprojection.

# Constrained moment ILC. The moments to deproject are specified in constraints attribute. 
# You can deproject different moments in different needlets, providing a list of lists of moments.
  - method: "cilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    ilc_bias: 0.001
    constraints:
      - moments: ["0d","0s","1bd","1bs","1Td"]
      - beta_d: 1.54 # or [1.54, 1.5, 1.6, 1.55] for each needlet band
      - T_d: 20. # or [20., 19., 21., 20.] for each needlet band
      - beta_s: -3. # or [-3., -2.5, -3.5, -3.] for each needlet band
      - deprojection: [0., 0., 0., 0., 0.] # or [[0., 0., 0., 0., 0.], [0.1, 0.1, 0.1, 0.1, 0.1]] for each needlet band

# Constrained moment ILC on first two needlet bands (the bands have to be specified in special_nls), standard NILC in the others.
  - method: "c_ilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    ilc_bias: 0.001
    constraints:
      - moments: ["0d","0s","1bd","1bs","1Td"]
    special_nls: [0,1]

# Polarization ILC (PILC) in pixel domain. Variance minimization applied to QU maps.
  - method: "pilc"
    domain: "pixel"
    ilc_bias: 0.001

# Polarization ILC (PILC) in needlet domain. Variance minimization applied to QU maps.
  - method: "pilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    ilc_bias: 0.001
#    b_squared: False
    save_needlets: True
    save_weights: True

# Constrained moment PILC. 
  - method: "cpilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 19, 40]
    ilc_bias: 0.001
    constraints:
      - moments: ["0d","0s","1bd","1bs","1Td"]

# Constrained moment PILC only in the first two needlet bands (the bands have to be specified in special_nls), standard PILC in the others.
  - method: "cpilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0, 14, 17, 34]
    ilc_bias: 0.001
    constraints:
      - moments: ["0d","0s","1bd","1bs","1Td"]
    special_nls: [0,1]

# GPILC to reconstruct foregrounds. Foreground are reconstructed in QU maps.
  - method: "gpilc"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0,10,14,17,34] # [0,12,15,20,25,34] #
    ilc_bias: 0.01
#    b_squared: False
    cmb_nuisance: True
    reduce_ilc_bias: False
#    depro_cmb: [null,0.,0.]
#    m_bias: [0,1,1,1]
#    channels_out: [0,1,2,3,4,5]  indices of channels you want to be reconstructed with GNILC. If not provided, all channels are reconstructed.
    save_needlets: True

# Foreground diagnostic for scalar fields (T, E, B).
  - method: "fgd_diagnostic"
#    domain: "pixel"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0,12,15,20,25,34]
    ilc_bias: 0.001
    b_squared: False
    adapt_nside: False
    cmb_nuisance: True # It includes CMB in the nuisance covariance matrix used to compute the foreground diagnostic.

# Foreground diagnostic for polarization maps (QU).
  - method: "fgd_P_diagnostic"
#    domain: "pixel"
    domain: "needlet"
    needlet_config:
      - needlet_windows: "mexican"
      - width: 1.3
      - merging_needlets: [0,12,15,20,25,34]
    ilc_bias: 0.001
    b_squared: False
    adapt_nside: False
    cmb_nuisance: True

# Configuration to get estimate of the foreground residuals.
# In gnilc_path the code will look for the multifrequency cleaned foreground maps generated with a GILC run.
# It will load the files with fields corresponding to 'field_out' if 'field_in' is not specified in compsep_residuals.
# In compsep_path it will search for the component separation weights.
# Both to gilc_path and compsep_path, path_outputs will be added as root path. 
# The paths will therefore be {path_outputs}/{gilc_path} and {path_outputs}/{compsep_path}.
compsep_residuals:
  - gnilc_path: "outputs/LiteBIRD_PTEP/d1s1/gilc_needlet_bias0.001/cosine_0_50_100"
    compsep_path: "outputs/LiteBIRD_PTEP/d1s1/ilc_needlet_bias0.001/cosine_0_50_100"
    field_in: "TEB" # If not provided, it will use field_out from the config file.
    adapt_nside: False # If True, the HEALPix resolution of needlet maps is adapted to the sampled range of multipoles. Should match that of compsep run.

# Configuration to generate tracers for MC-ILC ratio construction
# It will save the tracers in the path '{path_tracers}'.
# The frequency channels indices of the tracers to be constructed are specified in channels_tracers.
real_mc_tracers:
  - channels_tracers: [20,12]
    path_tracers: "outputs/LiteBIRD_PTEP/d1s1/tracers"
# Full path where inputs used to generate the tracers are saved.
# Every time a new realization of CMB and noise is generated and saved in the folder specified below.
# Default: inputs_mc_tracers/{config.experiment}
    tracers_inputs_path: "mc_tracers_inputs/LiteBIRD_PTEP"

# Configuration to combine outputs from different component separation runs.
combine_outputs:
#  List of fields returned by the different component separation runs 
  - fields_in: ["E", "B"]
# Fields to be saved from the combination of the products
    fields_out: "QU"
# Path where outputs of each component separation run are stored.
# They will be added to the root path path_outputs
    paths_fields_in: ["",""]
# Path where combined products will be stored if config.save_compsep_products is True.
# It will be added to root path 'path_outputs' for the full path
    path_out: "outputs/LiteBIRD_PTEP/d1s1/ilc_combined/"
# Components saved by both component separation runs which will be combined
    components: ["output_total"]

# ==================================== Cls PARAMETERS ==================================== #

# Binning to be applied on computed power spectra.
delta_ell: 1
# Method used to compute angular power spectra: either 'anafast' or 'nanamaster'.
spectra_comp: 'anafast'
# If True, the code will return the Dls instead of the Cls.
return_Dell: False
# Fields of the angular power spectra to be computed; it can include auto power spectra only or even cross-spectra.
# Examples: "TTEEBBTEEBTB", "BB", "TTEETE"
# If cross power spectra are needed, all of them should be included in the string, 
# e.g. "TTEEBBTE" is not allowed, but "TTEEBBTEEBTB" is.
field_cls_out: "TTEEBBTEEBTB"
# If True, the code will return the computed angular power spectra
return_spectra: True
# If True, the code will save the computed angular power spectra in the method specific path for each case.
save_spectra: True
# If True, masks for some specific masking approaches will be saved. Default: False
save_mask: True

# Dictionary including the component separation runs and settings to compute angular power spectra.
compute_spectra:
   # Path to the component separation outputs. 
  # The total path will be given by {config.path_outputs} + 'path_method'.
  - path_method: "ilc_needlet_bias0.001/mexican_B1.3_j0j13_j14j16_j17j33" 
  # Components returned by the component separation run for which angular power spectra have to be computed.
  # It can include also components of the foreground residuals estimates provided as specified below.
    components_for_cls: ["output_total", "noise_residuals", "fgds_residuals", "output_cmb", 
    "fgres_templates/gilc_needlet_bias0.01_mexican_B1.3_j0j9_j10j13_j14j16_j17j33", 
    "fgres_templates_ideal/gilc_needlet_bias0.01_mexican_B1.3_j0j9_j10j13_j14j16_j17j33", 
    "fgres_templates_noise/gilc_needlet_bias0.01_mexican_B1.3_j0j9_j10j13_j14j16_j17j33"]
    # Type of mask to be used. It can be:
    # - "GAL*": Planck Galactic mask with specific fraction of sky (e.g. "GAL40" for 40% of sky).
    # - "from_fits": it will load the mask from the path specified in 'mask_path' keyword (see below).
    # - "GAL*+fgres": it will load the Planck Galactic mask with the specified fraction of sky and 
    #      further regions will be masked based on foreground residuals map upon the fsky specified with 'fsky' keyword (see below).
    # - "GAl*+fgtemp": it will load the Planck Galactic mask with the specified fraction of sky and
    #      mask further regions based on foreground residuals template map upon the fsky specified with 'fsky' keyword.
    #      The path to foreground residual template must be specified in ''fgres_temp_for_masking''.
    # - "fgres" or "fgtemp": it will threshold the foreground residuals map or template map, respectively, 
    #      to genereate the mask with final sky fraction set by 'fsky' keyword.
    # - "config": the mask specified in config.mask_covariance will be used. 
    #      If config.mask_covariance is None, but mask_observations is not None, that will be used.
    # - "config+fgres": the mask specified in config will be used and 
    #      further regions will be masked based on foreground residuals map upon the fsky specified with 'fsky' keyword.
    # - "config+fgtemp": the mask specified in config will be used and 
    #      further regions will be masked based on foreground residuals template map upon the fsky specified with 'fsky' keyword.
    mask_type: "GAL40" #"from_fits" #
    # Full path to the mask to be used. It can be a binary mask or an apodized mask. Used if mask_type is "from_fits".
    mask_path: ""
    # Fields of the outputs returned by the component separation run. 
    field_out: "B"
    # Apodization scheme for the mask. It can be "gaussian", "gaussian_nmt", "C1", "C2".
    # For the last three options, it will use 'pymaster' to perform the apodization.
    apodize_mask: null #"C1"
    # Apodization scale in degrees.
    smooth_mask: 0.
    # If not null, it will apply a smoothing with a Gaussian beam with FWHM=smooth_tracer (in deg) 
    # to the tracer (fgres or fgtemp) eventually used to generate the mask. 
    smooth_tracer: 3.
    # Desired final sky fraction for the mask. Used if "fgres" or "fgtemp" is used in mask_type.
    fsky: 0.5
    # If True and 'spectra_comp' is 'namaster', it will perform purification for B-mode power spectra computation.
    nmt_purify_B: True
    # If True and 'spectra_comp' is 'namaster', it will perform purification for E-mode power spectra computation.
    nmt_purify_E: False

