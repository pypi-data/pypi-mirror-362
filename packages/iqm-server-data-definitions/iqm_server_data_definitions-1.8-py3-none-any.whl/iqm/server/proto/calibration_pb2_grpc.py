# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import calibration_pb2 as calibration__pb2
from . import common_pb2 as common__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in calibration_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CalibrationsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCalibrationV1 = channel.unary_unary(
                '/iqm.server.Calibrations/GetCalibrationV1',
                request_serializer=calibration__pb2.CalibrationLookupV1.SerializeToString,
                response_deserializer=calibration__pb2.CalibrationMetadataV1.FromString,
                _registered_method=True)
        self.GetFullDynamicQuantumArchitectureDataV1 = channel.unary_stream(
                '/iqm.server.Calibrations/GetFullDynamicQuantumArchitectureDataV1',
                request_serializer=calibration__pb2.CalibrationLookupV1.SerializeToString,
                response_deserializer=common__pb2.DataChunk.FromString,
                _registered_method=True)
        self.GetFullQualityMetricsSetDataV1 = channel.unary_stream(
                '/iqm.server.Calibrations/GetFullQualityMetricsSetDataV1',
                request_serializer=calibration__pb2.CalibrationLookupV1.SerializeToString,
                response_deserializer=common__pb2.DataChunk.FromString,
                _registered_method=True)
        self.GetFullCalibrationDataV1 = channel.unary_stream(
                '/iqm.server.Calibrations/GetFullCalibrationDataV1',
                request_serializer=calibration__pb2.CalibrationLookupV1.SerializeToString,
                response_deserializer=common__pb2.DataChunk.FromString,
                _registered_method=True)
        self.GetLatestQuantumComputerCalibrationV1 = channel.unary_unary(
                '/iqm.server.Calibrations/GetLatestQuantumComputerCalibrationV1',
                request_serializer=calibration__pb2.LatestQuantumComputerCalibrationLookupV1.SerializeToString,
                response_deserializer=calibration__pb2.CalibrationMetadataV1.FromString,
                _registered_method=True)


class CalibrationsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCalibrationV1(self, request, context):
        """*
        Get calibration metadata.

        ## Errors

        ### Calibration set not found
        This error is returned if the CalibrationLookup does not match any existing calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFullDynamicQuantumArchitectureDataV1(self, request, context):
        """*
        Get the full dynamic architecture a given calibration set
        as byte stream with JSON representation or DQA.

        ## Errors

        ### Calibration set not found
        This error is returned if the CalibrationLookup does not match any existing calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```

        ### Dynamic architecture not found
        This error is returned if the actual DQA data doesn't exist for calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFullQualityMetricsSetDataV1(self, request, context):
        """*
        Get the full quality metrics set for a given calibration set
        as byte stream with JSON representation or metrics data.

        ## Errors

        ### Calibration set not found
        This error is returned if the CalibrationLookup does not match any existing calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```

        ### Quality metric set not found
        This error is returned if the quality metric set does not exist for a given calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```

        ### Quality metric set data not found
        This error is returned if the actual quality metrics data doesn't exist.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFullCalibrationDataV1(self, request, context):
        """*
        Get full calibration set data by calibration lookup.
        The calibration set is returned as bytes data that contains the JSON
        representation of the calibration set data.

        ## Errors

        ### Calibration set not found
        This error is returned if the CalibrationLookup does not match any existing calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```

        ### Calibration set data not found
        This error is returned if the actual calibration data doesn't exist for calibration set.
        ```
        Code = "NOT_FOUND"
        Metadata.error_code = "not_found"
        ```
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLatestQuantumComputerCalibrationV1(self, request, context):
        """*
        Deprecated.
        Get the latest calibration for a QC.
        Use GetCalibrationV1 with lookup.tag="latest" instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CalibrationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCalibrationV1': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibrationV1,
                    request_deserializer=calibration__pb2.CalibrationLookupV1.FromString,
                    response_serializer=calibration__pb2.CalibrationMetadataV1.SerializeToString,
            ),
            'GetFullDynamicQuantumArchitectureDataV1': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFullDynamicQuantumArchitectureDataV1,
                    request_deserializer=calibration__pb2.CalibrationLookupV1.FromString,
                    response_serializer=common__pb2.DataChunk.SerializeToString,
            ),
            'GetFullQualityMetricsSetDataV1': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFullQualityMetricsSetDataV1,
                    request_deserializer=calibration__pb2.CalibrationLookupV1.FromString,
                    response_serializer=common__pb2.DataChunk.SerializeToString,
            ),
            'GetFullCalibrationDataV1': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFullCalibrationDataV1,
                    request_deserializer=calibration__pb2.CalibrationLookupV1.FromString,
                    response_serializer=common__pb2.DataChunk.SerializeToString,
            ),
            'GetLatestQuantumComputerCalibrationV1': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestQuantumComputerCalibrationV1,
                    request_deserializer=calibration__pb2.LatestQuantumComputerCalibrationLookupV1.FromString,
                    response_serializer=calibration__pb2.CalibrationMetadataV1.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'iqm.server.Calibrations', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('iqm.server.Calibrations', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Calibrations(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCalibrationV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iqm.server.Calibrations/GetCalibrationV1',
            calibration__pb2.CalibrationLookupV1.SerializeToString,
            calibration__pb2.CalibrationMetadataV1.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFullDynamicQuantumArchitectureDataV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/iqm.server.Calibrations/GetFullDynamicQuantumArchitectureDataV1',
            calibration__pb2.CalibrationLookupV1.SerializeToString,
            common__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFullQualityMetricsSetDataV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/iqm.server.Calibrations/GetFullQualityMetricsSetDataV1',
            calibration__pb2.CalibrationLookupV1.SerializeToString,
            common__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFullCalibrationDataV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/iqm.server.Calibrations/GetFullCalibrationDataV1',
            calibration__pb2.CalibrationLookupV1.SerializeToString,
            common__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLatestQuantumComputerCalibrationV1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/iqm.server.Calibrations/GetLatestQuantumComputerCalibrationV1',
            calibration__pb2.LatestQuantumComputerCalibrationLookupV1.SerializeToString,
            calibration__pb2.CalibrationMetadataV1.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
