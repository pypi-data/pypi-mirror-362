# coding: utf-8

"""
    COIN Mobile Connect Rest API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DiscoveryRequestV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msisdn': 'str',
        'correlation_id': 'str'
    }

    attribute_map = {
        'msisdn': 'msisdn',
        'correlation_id': 'correlationId'
    }

    def __init__(self, msisdn:str=None, correlation_id:str=None):  # noqa: E501
        """DiscoveryRequestV3 - a model defined in Swagger"""  # noqa: E501
        self._msisdn = None
        self._correlation_id = None
        self.discriminator = None
        self.msisdn = msisdn
        if correlation_id is not None:
            self.correlation_id = correlation_id

    @property
    def msisdn(self):
        """Gets the msisdn of this DiscoveryRequestV3.  # noqa: E501

        Mobile number in the international dialing format either 31600000000, +31600000000 or 0031600000000  # noqa: E501

        :return: The msisdn of this DiscoveryRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this DiscoveryRequestV3.

        Mobile number in the international dialing format either 31600000000, +31600000000 or 0031600000000  # noqa: E501

        :param msisdn: The msisdn of this DiscoveryRequestV3.  # noqa: E501
        :type: str
        """
        if msisdn is None:
            raise ValueError("Invalid value for `msisdn`, must not be `None`")  # noqa: E501

        self._msisdn = msisdn

    @property
    def correlation_id(self):
        """Gets the correlation_id of this DiscoveryRequestV3.  # noqa: E501

        Correlates a transaction across Mobile Connect components. The value is generated by the Service Provider and must be locally unique.  This parameter should be used in conjunction with your operator partner and only for tracing and resolving issues. The recommended format is UUID4.  # noqa: E501

        :return: The correlation_id of this DiscoveryRequestV3.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this DiscoveryRequestV3.

        Correlates a transaction across Mobile Connect components. The value is generated by the Service Provider and must be locally unique.  This parameter should be used in conjunction with your operator partner and only for tracing and resolving issues. The recommended format is UUID4.  # noqa: E501

        :param correlation_id: The correlation_id of this DiscoveryRequestV3.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def correlationId(self):
        return self.correlation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        return {
            'correlationId': self.correlation_id,
            'msisdn': self.msisdn
        }

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryRequestV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
