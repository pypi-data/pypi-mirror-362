# coding: utf-8

"""
    COIN Mobile Connect Rest API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from coin_sdk.mobile_connect.v3.domain.supported_services import SupportedServicesDto


class DiscoveryResponseV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_operator_code': 'str',
        'supported_services': 'SupportedServicesDto',
        'correlation_id': 'str',
        'client_id': 'str',
        'client_secret': 'str'
    }

    attribute_map = {
        'network_operator_code': 'networkOperatorCode',
        'supported_services': 'supportedServices',
        'correlation_id': 'correlationId',
        'client_id': 'clientId',
        'client_secret': 'clientSecret'
    }

    def __init__(
            self,
            networkOperatorCode: str = None,
            supportedServices: SupportedServicesDto = None,
            correlationId: str = None,
            clientId: str = None,
            clientSecret: str = None
    ):  # noqa: E501
        """DiscoveryResponseV3 - a model defined in Swagger"""  # noqa: E501
        self._network_operator_code = None
        self._supported_services = None
        self._correlation_id = None
        self._client_id = None
        self._client_secret = None
        self.discriminator = None
        self.network_operator_code = networkOperatorCode
        self.supported_services = supportedServices
        if correlationId is not None:
            self.correlation_id = correlationId
        if clientId is not None:
            self.client_id = clientId
        if clientSecret is not None:
            self.client_secret = clientSecret

    @property
    def network_operator_code(self):
        """Gets the network_operator_code of this DiscoveryResponseV3.  # noqa: E501


        :return: The network_operator_code of this DiscoveryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._network_operator_code

    @network_operator_code.setter
    def network_operator_code(self, network_operator_code):
        """Sets the network_operator_code of this DiscoveryResponseV3.


        :param network_operator_code: The network_operator_code of this DiscoveryResponseV3.  # noqa: E501
        :type: str
        """
        if network_operator_code is None:
            raise ValueError("Invalid value for `network_operator_code`, must not be `None`")  # noqa: E501

        self._network_operator_code = network_operator_code

    @property
    def supported_services(self):
        """Gets the supported_services of this DiscoveryResponseV3.  # noqa: E501


        :return: The supported_services of this DiscoveryResponseV3.  # noqa: E501
        :rtype: SupportedServicesDto
        """
        return self._supported_services

    @supported_services.setter
    def supported_services(self, supported_services):
        """Sets the supported_services of this DiscoveryResponseV3.


        :param supported_services: The supported_services of this DiscoveryResponseV3.  # noqa: E501
        :type: SupportedServicesDto
        """
        if supported_services is None:
            raise ValueError("Invalid value for `supported_services`, must not be `None`")  # noqa: E501

        self._supported_services = supported_services

    @property
    def correlation_id(self):
        """Gets the correlation_id of this DiscoveryResponseV3.  # noqa: E501

        Correlates a transaction across Mobile Connect components. The value is generated by the Service Provider and must be locally unique.  This parameter should be used in conjunction with your operator partner and only for tracing and resolving issues. The recommended format is UUID4.  # noqa: E501

        :return: The correlation_id of this DiscoveryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this DiscoveryResponseV3.

        Correlates a transaction across Mobile Connect components. The value is generated by the Service Provider and must be locally unique.  This parameter should be used in conjunction with your operator partner and only for tracing and resolving issues. The recommended format is UUID4.  # noqa: E501

        :param correlation_id: The correlation_id of this DiscoveryResponseV3.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def client_id(self):
        """Gets the client_id of this DiscoveryResponseV3.  # noqa: E501

        Operator specific Client ID to be used by OIDC requests to the operator ID Gateway.  # noqa: E501

        :return: The client_id of this DiscoveryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DiscoveryResponseV3.

        Operator specific Client ID to be used by OIDC requests to the operator ID Gateway.  # noqa: E501

        :param client_id: The client_id of this DiscoveryResponseV3.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this DiscoveryResponseV3.  # noqa: E501

        Operator specific Client Secret to be used by OIDC requests to the operator ID Gateway.  # noqa: E501

        :return: The client_secret of this DiscoveryResponseV3.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this DiscoveryResponseV3.

        Operator specific Client Secret to be used by OIDC requests to the operator ID Gateway.  # noqa: E501

        :param client_secret: The client_secret of this DiscoveryResponseV3.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveryResponseV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveryResponseV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
