# coding: utf-8

"""
    COIN Mobile Connect Rest API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from coin_sdk.mobile_connect.v3.domain.link import LinkDto


class SupportedServicesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match': 'list[LinkDto]',
        'number_verify': 'list[LinkDto]',
        'account_takeover_protection': 'list[LinkDto]'
    }

    attribute_map = {
        'match': 'match',
        'number_verify': 'numberVerify',
        'account_takeover_protection': 'accountTakeoverProtection'
    }

    def __init__(self, match:list[LinkDto]=None, numberVerify:list[LinkDto]=None, accountTakeoverProtection:list[LinkDto]=None):  # noqa: E501
        """SupportedServicesDto - a model defined in Swagger"""  # noqa: E501
        self._match = None
        self._number_verify = None
        self._account_takeover_protection = None
        self.discriminator = None
        self.match = match
        self.number_verify = numberVerify
        self.account_takeover_protection = accountTakeoverProtection

    @property
    def match(self):
        """Gets the match of this SupportedServicesDto.  # noqa: E501


        :return: The match of this SupportedServicesDto.  # noqa: E501
        :rtype: list[LinkDto]
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this SupportedServicesDto.


        :param match: The match of this SupportedServicesDto.  # noqa: E501
        :type: list[LinkDto]
        """
        if match is None:
            raise ValueError("Invalid value for `match`, must not be `None`")  # noqa: E501

        self._match = match

    @property
    def number_verify(self):
        """Gets the number_verify of this SupportedServicesDto.  # noqa: E501


        :return: The number_verify of this SupportedServicesDto.  # noqa: E501
        :rtype: list[LinkDto]
        """
        return self._number_verify

    @number_verify.setter
    def number_verify(self, number_verify):
        """Sets the number_verify of this SupportedServicesDto.


        :param number_verify: The number_verify of this SupportedServicesDto.  # noqa: E501
        :type: list[LinkDto]
        """
        if number_verify is None:
            raise ValueError("Invalid value for `number_verify`, must not be `None`")  # noqa: E501

        self._number_verify = number_verify

    @property
    def account_takeover_protection(self):
        """Gets the account_takeover_protection of this SupportedServicesDto.  # noqa: E501


        :return: The account_takeover_protection of this SupportedServicesDto.  # noqa: E501
        :rtype: list[LinkDto]
        """
        return self._account_takeover_protection

    @account_takeover_protection.setter
    def account_takeover_protection(self, account_takeover_protection):
        """Sets the account_takeover_protection of this SupportedServicesDto.


        :param account_takeover_protection: The account_takeover_protection of this SupportedServicesDto.  # noqa: E501
        :type: list[LinkDto]
        """
        if account_takeover_protection is None:
            raise ValueError("Invalid value for `account_takeover_protection`, must not be `None`")  # noqa: E501

        self._account_takeover_protection = account_takeover_protection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportedServicesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedServicesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
