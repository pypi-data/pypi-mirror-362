# coding: utf-8

"""
    COIN Number Portability API V3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0.0
    Contact: servicedesk@coin.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six


class PortingRequestAnswerMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'header': 'Header',
        'body': 'PortingRequestAnswerBody'
    }

    attribute_map = {
        'header': 'header',
        'body': 'body'
    }

    def __init__(self, header=None, body=None):
        """PortingRequestAnswerMessage - a model defined in Swagger"""
        self._header = None
        self._body = None
        self.discriminator = None
        self.header = header
        self.body = body

    @property
    def header(self):
        """Gets the header of this PortingRequestAnswerMessage.


        :return: The header of this PortingRequestAnswerMessage.
        :rtype: Header
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this PortingRequestAnswerMessage.


        :param header: The header of this PortingRequestAnswerMessage.
        :type: Header
        """
        if header is None:
            raise ValueError("Invalid value for `header`, must not be `None`")

        self._header = header

    @property
    def body(self):
        """Gets the body of this PortingRequestAnswerMessage.


        :return: The body of this PortingRequestAnswerMessage.
        :rtype: PortingRequestAnswerBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PortingRequestAnswerMessage.


        :param body: The body of this PortingRequestAnswerMessage.
        :type: PortingRequestAnswerBody
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortingRequestAnswerMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortingRequestAnswerMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
