[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "blender-remote"
version = "1.2.4"
description = "Automate Blender workflows with external Python control, background operation, and LLM integration"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "blender-remote contributors"},
]
maintainers = [
    {name = "blender-remote contributors"},
]
keywords = ["blender", "remote-control", "3d", "automation", "mcp", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "fastmcp>=2.0.0",  # FastMCP framework for Model Context Protocol
    "click>=8.0.0", "pydantic>=2.11.7",  # for CLI tools
    "omegaconf>=2.3.0", "platformdirs", "attrs>=25.3.0",  # Advanced configuration management with YAML support
    "numpy>=1.24.0",  # 3D math operations and coordinate transformations
    "scipy>=1.16.0",  # Scientific computing and statistical functions
    "trimesh>=3.0.0",  # 3D mesh processing and GLB export functionality
    "requests>=2.32.4",  # HTTP operations for external services
    "uvicorn>=0.35.0",  # ASGI server for FastMCP
    "importlib_resources>=1.3.0",  # Fallback for older Python versions resource access
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

[project.urls]
Homepage = "https://github.com/igamenovoer/blender-remote"
Documentation = "https://igamenovoer.github.io/blender-remote/"
Repository = "https://github.com/igamenovoer/blender-remote.git"
"Bug Tracker" = "https://github.com/igamenovoer/blender-remote/issues"

[project.scripts]
blender-remote = "blender_remote.mcp_server:main"
blender-remote-cli = "blender_remote.cli:cli"

[tool.setuptools.packages.find]
where = ["src"]
include = ["blender_remote*"]
exclude = ["tests*", "context*", "tmp*", "build*", "dist*", "*.egg-info*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
"blender_remote" = ["*.py", "*.json", "*.md", "addon/**/*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []
target-version = "py311"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-ra -q --strict-markers"

[tool.coverage.run]
branch = true
source = ["src/blender_remote", "scripts"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

# Development dependencies (prefer conda when available for better performance)
[tool.pixi.dependencies]
python = ">=3.11"
# Use conda packages for development tools when possible
black = "*"
ruff = "*"
pytest = "*"
pytest-cov = "*"
mypy = "*"
pre-commit = "*"
# Documentation tools
mkdocs = "*"
mkdocs-material = "*"
# Core API dependencies
numpy = ">=1.24.0"
scipy = ">=1.16.0"
requests = ">=2.32.4,<3"
attrs = ">=25.3.0"
# Type checking stubs
scipy-stubs = "*"
fastmcp = ">=2.10.4,<3"
uvicorn = ">=0.35.0,<0.36"

# PyPI-only dependencies that don't have conda equivalents
[tool.pixi.pypi-dependencies]
blender-remote = { path = ".", editable = true }
mcp = { version = "*", extras = ["cli"] }  # MCP CLI tools

# Platform-specific dependencies
[tool.pixi.target.win-64.dependencies]
pywin32 = "*"  # Required for mcp on Windows

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }

[tool.pixi.feature.dev.dependencies]
# Additional dev-specific conda packages
jupyter = "*"
ipython = "*"

[tool.pixi.feature.test.dependencies]
# Test-specific conda packages

[tool.pixi.feature.docs.dependencies]
# Documentation-specific packages

[tool.pixi.tasks]
# Development tasks
install-dev = "pip install -e ."
format = "black src tests"
lint = "ruff check src tests"
type-check = "mypy src"
test = "pytest tests/ -v"
test-cov = "pytest tests/ --cov=blender_remote --cov-report=html"
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"
# Combined tasks
check = { depends-on = ["format", "lint", "type-check", "test"] }
# Blender-specific tasks
test-blender = "python tests/manual_test_example.py"
mcp-server = "python -m blender_remote.mcp_server"

[dependency-groups]
dev = ["blender-mcp>=1.2,<2", "claude-usage-monitor>=1.0.6,<2"]
