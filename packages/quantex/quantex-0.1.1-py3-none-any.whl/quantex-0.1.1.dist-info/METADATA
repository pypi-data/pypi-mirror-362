Metadata-Version: 2.3
Name: quantex
Version: 0.1.1
Summary: A simple quant strategy creation and backtesting package.
License: MIT
Author: Daniel Green
Author-email: dangreen07@outlook.com
Requires-Python: >=3.13,<4
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Requires-Dist: fastparquet (>=2024.11.0,<2025.0.0)
Requires-Dist: matplotlib (>=3.10.3,<4.0.0)
Requires-Dist: mkdocs-material (>=9.6.15,<10.0.0)
Requires-Dist: mkdocs-mermaid2-plugin (>=1.2.1,<2.0.0)
Requires-Dist: mkdocs-print-site-plugin (>=2.7.3,<3.0.0)
Requires-Dist: mkdocs-to-pdf (>=0.10.1,<0.11.0)
Requires-Dist: pandas (>=2.3.0,<3.0.0)
Requires-Dist: pyarrow (>=20.0.0,<21.0.0)
Requires-Dist: pytest-xdist (>=3.8.0,<4.0.0)
Requires-Dist: tqdm (>=4.67.1,<5.0.0)
Description-Content-Type: text/markdown

# Quantex

A simple quant strategy creation and back-testing package written in Python.  
Quantex aims to provide a lightweight foundation for building trading
strategies, ingesting historical market data, and evaluating performance –
all without the heavy overhead of larger, more opinionated quant libraries.

---

## Table of Contents
1. [Features](#features)
2. [Project Layout](#project-layout)
3. [Installation](#installation)
4. [Running Tests](#running-tests)
5. [Development](#development)
6. [Contributing](#contributing)

---

## Features
* **Data Abstraction** – A generic `DataSource` interface that you can
  subclass to plug in CSVs, Parquet files, live feeds, databases, etc.
* **Back-testing Support** – A `BacktestingDataSource` base class to drive
  offline simulations.
* **Strategy Skeleton** – Extendable `Strategy` base class for plug-and-play
  trading logic.
* **Core Data Models** – Immutable `Bar`, `Tick`, `Order`, `Fill`, plus
  stateful `Position` / `Portfolio` helpers for P&L accounting.
* **Black + Ruff Pre-commit** – `black` auto-formats and `ruff` lints every
  commit via *pre-commit* hooks, keeping the codebase consistent.
* **Python 3.13+** – Embraces the latest language features.
* **Poetry-managed** – Modern dependency management, packaging, and virtual
  environment handling.

> **Note:** The public API is still under heavy development and may change
> until v1.0. Feedback is welcome!

---

## Installation
Installation can be done with a single command:

```bash
pip install quantex
```

---

## Development
1. Create a new branch: `git checkout -b feature/<name>`
2. Write your code & tests.
3. Install the git hooks once per clone: `poetry run pre-commit install`.
   Hooks will run `black --check` and `ruff` automatically on every commit.
4. Ensure `poetry run pytest` passes and the pre-commit hooks are clean.

---

## Contributing
Contributions, bug reports, and feature requests are welcome! Please open an
issue to discuss what you'd like to work on or submit a pull request directly.
We follow the "fork → feature branch → pull request" workflow. By
contributing you agree to license your work under the same terms as Quantex.

