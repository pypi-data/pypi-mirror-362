[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "time-helper"
version = "0.3.0"
description = "A Python time helper library"
readme = "readme.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "Felix Geilert" },
]
maintainers = [
    { name = "Felix Geilert" },
]
keywords = ["time", "datetime", "timezone", "helper"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pytz>=2022.1",
    "tzdata>=2022.1",
    "python-dateutil>=2.8.2",
]

[project.optional-dependencies]
pandas = [
    "pandas>=1.4.1",
]
numpy = [
    "numpy>=1.22.3",
]

[project.urls]
Homepage = "https://github.com/felixnext/python-time-helper"
Repository = "https://github.com/felixnext/python-time-helper"
Issues = "https://github.com/felixnext/python-time-helper/issues"

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "ruff>=0.8.0",
    "pre-commit>=3.5.0",
    "types-python-dateutil>=2.8.0",
    "types-pytz>=2022.1",
    "pandas-stubs>=2.0.0",
    "pandas>=1.4.1",
    "numpy>=1.22.3",
]

[tool.hatch.build.targets.wheel]
packages = ["time_helper"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=time_helper --cov-report=term-missing"

[tool.ruff]
target-version = "py310"
line-length = 120

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "RET",   # flake8-return
    "RUF",   # ruff-specific rules
    "D",     # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring (conflicts with D211)
    "D213",  # Multi-line docstring summary should start at the second line (conflicts with D212)
    "E501",  # Line too long (handled by formatter)
    "E721",  # Use isinstance for type checks
    "RET503", # Missing explicit return
    "RET504", # Unnecessary assignment before return
    "B904",  # Use raise from for exceptions
    "SIM101", # Merge isinstance calls
    "UP038", # Use X | Y in isinstance
    "D200",  # One-line docstring should fit on one line
    "D417",  # Missing argument description in docstring
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "ARG", "E721"]  # Don't require docstrings in tests, allow type() comparisons

[tool.ruff.lint.isort]
known-first-party = ["time_helper"]

[tool.ruff.lint.pydocstyle]
convention = "google"
