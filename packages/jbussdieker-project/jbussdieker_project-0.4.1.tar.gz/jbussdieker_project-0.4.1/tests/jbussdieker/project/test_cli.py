import os
import tempfile
import argparse
import unittest
from io import StringIO
from contextlib import redirect_stdout, redirect_stderr
from jbussdieker.project.cli import main, register


class TestCLICreate(unittest.TestCase):
    def setUp(self):
        self.tmpdir = tempfile.TemporaryDirectory()
        self.old_cwd = os.getcwd()
        os.chdir(self.tmpdir.name)

    def tearDown(self):
        os.chdir(self.old_cwd)
        self.tmpdir.cleanup()

    def test_register_function(self):
        """Test that the register function properly configures the parser."""

        # Create a mock subparsers object
        class MockSubparsers:
            def __init__(self):
                self.parsers = {}

            def add_parser(self, name, **kwargs):
                parser = MockParser(name, **kwargs)
                self.parsers[name] = parser
                return parser

        class MockParser:
            def __init__(self, name, **kwargs):
                self.name = name
                self.kwargs = kwargs
                self.arguments = []
                self.defaults = {}

            def add_argument(self, *args, **kwargs):
                self.arguments.append((args, kwargs))

            def set_defaults(self, **kwargs):
                self.defaults.update(kwargs)

        subparsers = MockSubparsers()
        register(subparsers)

        # Verify the parser was created correctly
        self.assertIn("project", subparsers.parsers)
        parser = subparsers.parsers["project"]
        self.assertEqual(parser.name, "project")
        self.assertEqual(parser.kwargs.get("help"), "Create a new project directory")

        # Verify the name argument was added
        name_args = [arg for arg in parser.arguments if arg[0] and arg[0][0] == "name"]
        self.assertEqual(len(name_args), 1)
        self.assertEqual(name_args[0][1].get("metavar"), "NAME")
        self.assertEqual(name_args[0][1].get("help"), "Name of the new project")

        # Verify the default function was set
        self.assertIn("func", parser.defaults)

    def test_create_project_directory(self):
        project_name = "mytestproject"
        args = argparse.Namespace(name=project_name)
        config = argparse.Namespace(
            user_name="testuser",
            user_email="testuser@example.com",
            github_org="testorg",
        )
        main(args, config)
        self.assertTrue(os.path.isdir(project_name))
        self.assertTrue(os.path.isfile(os.path.join(project_name, ".gitignore")))
        self.assertTrue(
            os.path.isdir(os.path.join(project_name, ".github", "workflows"))
        )
        self.assertTrue(
            os.path.isfile(os.path.join(project_name, ".github", "workflows", "ci.yml"))
        )
        self.assertTrue(
            os.path.isfile(
                os.path.join(project_name, ".github", "workflows", "publish.yml")
            )
        )
        self.assertTrue(os.path.isfile(os.path.join(project_name, "Makefile")))
        self.assertTrue(os.path.isfile(os.path.join(project_name, "pyproject.toml")))
        self.assertTrue(os.path.isfile(os.path.join(project_name, "README.md")))
        self.assertTrue(os.path.isfile(os.path.join(project_name, "LICENSE")))
        self.assertTrue(os.path.isdir(os.path.join(project_name, "src", project_name)))
        self.assertTrue(
            os.path.isfile(
                os.path.join(project_name, "src", project_name, "__init__.py")
            )
        )
        self.assertTrue(os.path.isdir(os.path.join(project_name, "tests")))
        self.assertTrue(
            os.path.isfile(os.path.join(project_name, "tests", "__init__.py"))
        )

    def test_create_existing_directory_fails(self):
        os.makedirs("existing_project")
        buf = StringIO()
        args = argparse.Namespace(name="existing_project")
        config = argparse.Namespace(
            user_name="testuser",
            user_email="testuser@example.com",
            github_org="testorg",
        )
        with redirect_stderr(buf):
            main(args, config)
        output = buf.getvalue()
        self.assertIn("already exists", output)

    def test_generated_pyproject_toml_content(self):
        project_name = "content_test_project"

        # Create the project
        buf = StringIO()
        args = argparse.Namespace(name=project_name)
        config = argparse.Namespace(
            user_name="testuser",
            user_email="testuser@example.com",
            github_org="testorg",
        )
        with redirect_stdout(buf):
            main(args, config)

        # Read and verify pyproject.toml content
        with open(os.path.join(project_name, "pyproject.toml")) as f:
            content = f.read()

        # This would have failed with the Config object bug
        self.assertIn('description = "Generated by jbussdieker."', content)
        self.assertIn('name = "content_test_project"', content)
        self.assertIn('version = "0.0.0"', content)
