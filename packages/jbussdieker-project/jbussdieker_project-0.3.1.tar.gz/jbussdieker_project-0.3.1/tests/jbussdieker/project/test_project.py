import os
import tempfile
import unittest
from unittest.mock import patch, MagicMock

from jbussdieker.project.generator import ProjectGenerator
from jbussdieker.config.config import Config


class TestProjectGenerator(unittest.TestCase):
    def setUp(self):
        self.tmpdir = tempfile.TemporaryDirectory()
        self.old_cwd = os.getcwd()
        os.chdir(self.tmpdir.name)

    def tearDown(self):
        os.chdir(self.old_cwd)
        self.tmpdir.cleanup()

    def test_project_generator_init_with_defaults(self):
        generator = ProjectGenerator("testproject")
        self.assertEqual(generator.name, "testproject")
        self.assertEqual(generator.description, "Generated by jbussdieker.")
        self.assertEqual(generator.version, "0.0.0")
        self.assertIsInstance(generator.config, Config)

    def test_project_generator_init_with_custom_values(self):
        config = Config(user_name="Test User", user_email="test@example.com")
        generator = ProjectGenerator(
            name="testproject",
            description="Custom description",
            version="1.2.3",
            config=config,
        )
        self.assertEqual(generator.name, "testproject")
        self.assertEqual(generator.description, "Custom description")
        self.assertEqual(generator.version, "1.2.3")
        self.assertEqual(generator.config.user_name, "Test User")
        self.assertEqual(generator.config.user_email, "test@example.com")

    def test_project_generator_init_with_config_parameter(self):
        config = Config(user_name="Custom User", github_org="customorg")
        generator = ProjectGenerator("testproject", config=config)
        self.assertEqual(generator.config.user_name, "Custom User")
        self.assertEqual(generator.config.github_org, "customorg")

    @patch("jbussdieker.project.generator.get_default_branch")
    @patch("jbussdieker.project.generator.load_template")
    @patch("jbussdieker.project.generator.load_and_substitute")
    def test_project_generator_run_uses_config_values(
        self, mock_load_and_substitute, mock_load_template, mock_get_default_branch
    ):
        mock_get_default_branch.return_value = "main"
        mock_load_template.return_value = "template content"
        mock_load_and_substitute.return_value = "substituted content"

        config = Config(
            user_name="Test User", user_email="test@example.com", github_org="testorg"
        )
        generator = ProjectGenerator(
            name="testproject",
            description="Test description",
            version="1.0.0",
            config=config,
        )

        generator.run()

        # Check that the mocks were called
        self.assertTrue(mock_load_template.called, "load_template should be called")
        self.assertTrue(
            mock_get_default_branch.called, "get_default_branch should be called"
        )

        # For now, just check that the generator runs without error
        # The actual template substitution testing can be done in integration tests
        self.assertTrue(os.path.isdir("testproject"))

    def test_project_generator_run_creates_directory_structure(self):
        config = Config()
        generator = ProjectGenerator("testproject", config=config)

        generator.run()

        # Check directory structure
        self.assertTrue(os.path.isdir("testproject"))
        self.assertTrue(
            os.path.isdir(os.path.join("testproject", ".github", "workflows"))
        )
        self.assertTrue(
            os.path.isdir(os.path.join("testproject", "src", "testproject"))
        )
        self.assertTrue(os.path.isdir(os.path.join("testproject", "tests")))

    def test_project_generator_run_creates_files(self):
        config = Config()
        generator = ProjectGenerator("testproject", config=config)

        generator.run()

        # Check that key files are created
        expected_files = [
            "testproject/Makefile",
            "testproject/.gitignore",
            "testproject/.github/workflows/ci.yml",
            "testproject/.github/workflows/publish.yml",
            "testproject/pyproject.toml",
            "testproject/LICENSE",
            "testproject/README.md",
            "testproject/src/testproject/__init__.py",
            "testproject/tests/__init__.py",
            "testproject/tests/test_testproject.py",
        ]

        for file_path in expected_files:
            self.assertTrue(os.path.isfile(file_path), f"File {file_path} should exist")

    def test_project_generator_run_fails_if_directory_exists(self):
        os.makedirs("existingproject")
        config = Config()
        generator = ProjectGenerator("existingproject", config=config)

        # Should not raise an exception, but should log an error
        generator.run()

        # Directory should still exist and not be modified
        self.assertTrue(os.path.isdir("existingproject"))


if __name__ == "__main__":
    unittest.main()
