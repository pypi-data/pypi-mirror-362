{
  "id": "knowledge_management_standards",
  "name": "Knowledge Management Standards",
  "category": "knowledge",
  "tags": [
    "best-practices",
    "security",
    "automation",
    "monitoring"
  ],
  "description": "**Version:** 1.0.0",
  "sections": [
    "ðŸ“‹ Table of Contents",
    "Overview",
    "Core Principles",
    "Section Name",
    "Knowledge Architecture",
    "Documentation Standards",
    "Table of Contents",
    "Overview",
    "Core Content",
    "Implementation"
  ],
  "version": "1.0.0",
  "content": "# Knowledge Management Standards\n\n**Version:** 1.0.0\n**Last Updated:** January 2025\n**Status:** Active\n**Standard Code:** KM\n\n---\n\n## ðŸ“‹ Table of Contents\n\n1. [Overview](#overview)\n2. [Core Principles](#core-principles)\n3. [Knowledge Architecture](#knowledge-architecture)\n4. [Documentation Standards](#documentation-standards)\n5. [AI/LLM Integration](#aillm-integration)\n6. [Progressive Disclosure System](#progressive-disclosure-system)\n7. [Cross-Reference Architecture](#cross-reference-architecture)\n8. [Version Management](#version-management)\n9. [Search & Discovery](#search--discovery)\n10. [Implementation Checklist](#implementation-checklist)\n\n---\n\n## Overview\n\nThis standard defines how to create, organize, and maintain comprehensive\nknowledge management systems for software projects. It codifies the approach\nused in this standards repository and provides a blueprint for other projects\nto implement similar systems.\n\n### When to Use This Standard\n\n- Building comprehensive documentation systems\n- Creating AI-optimized knowledge bases\n- Establishing multi-project standards\n- Implementing progressive disclosure documentation\n- Managing complex technical knowledge\n\n### Prerequisites\n\n- Understanding of markdown documentation\n- Familiarity with semantic versioning\n- Basic knowledge of YAML/JSON formats\n\n### Real-World Implementation\n\nThis standard codifies the approach used in this standards repository itself.\nKey implementations include:\n\n- **CLAUDE.md** - AI router with 90% token reduction\n- **MANIFEST.yaml** - Progressive loading metadata\n- **KICKSTART_PROMPT.md** - Natural language project analysis\n- **Cross-referenced standards** - 21+ interconnected documents\n- **Machine-readable formats** - YAML/JSON for automation\n\n---\n\n## Core Principles\n\n### 1. Progressive Disclosure\n\nKnowledge should be accessible at multiple levels of detail, allowing users to start simple and dive deeper as needed.\n\n**Implementation:**\n\n```yaml\n# MANIFEST.yaml example\nstandard:\n  sections:\n    overview:\n      tokens: 500\n      priority: critical\n      description: \"High-level introduction\"\n    details:\n      tokens: 2000\n      priority: high\n      description: \"Comprehensive implementation\"\n    advanced:\n      tokens: 1500\n      priority: medium\n      description: \"Edge cases and optimizations\"\n```\n\n### 2. AI-First Design\n\nDocumentation should be optimized for both human readers and AI assistants.\n\n**Example Structure:**\n\n```markdown\n## Section Name\n\n**Summary:** One-line description for quick reference\n**Tokens:** ~500 (helps AI plan context usage)\n**Priority:** critical/high/medium/low\n\n### Details\n[Full content here]\n```\n\n### 3. Modular Architecture\n\nKnowledge should be organized in self-contained, reusable modules.\n\n```text\nstandards/\nâ”œâ”€â”€ core/\nâ”‚   â”œâ”€â”€ CODING_STANDARDS.md\nâ”‚   â””â”€â”€ TESTING_STANDARDS.md\nâ”œâ”€â”€ specialized/\nâ”‚   â”œâ”€â”€ CLOUD_NATIVE_STANDARDS.md\nâ”‚   â””â”€â”€ DATA_ENGINEERING_STANDARDS.md\nâ””â”€â”€ meta/\n    â”œâ”€â”€ KNOWLEDGE_MANAGEMENT_STANDARDS.md\n    â””â”€â”€ CREATING_STANDARDS_GUIDE.md\n```\n\n### 4. Semantic Relationships\n\nDocuments should explicitly define their relationships to other documents.\n\n```yaml\n# In document metadata\ndependencies:\n  requires: [\"CODING_STANDARDS\", \"TESTING_STANDARDS\"]\n  recommends: [\"SECURITY_STANDARDS\"]\n  conflicts: [\"LEGACY_PATTERNS\"]\n```\n\n### 5. Living Documentation\n\nAll documentation should be versioned, dated, and actively maintained.\n\n```markdown\n**Version:** 1.2.3\n**Last Updated:** January 2025\n**Status:** Active/Draft/Deprecated\n**Next Review:** March 2025\n```\n\n---\n\n## Knowledge Architecture\n\n### [REQUIRED] Repository Structure\n\n```text\nproject-root/\nâ”œâ”€â”€ README.md                    # Entry point with quick start\nâ”œâ”€â”€ CLAUDE.md                   # AI interface and routing\nâ”œâ”€â”€ MANIFEST.yaml               # Machine-readable metadata\nâ”œâ”€â”€ standards/                  # Core knowledge base\nâ”‚   â”œâ”€â”€ *.md                   # Individual standard documents\nâ”‚   â””â”€â”€ meta/                  # Meta-standards\nâ”œâ”€â”€ examples/                   # Practical implementations\nâ”‚   â”œâ”€â”€ project-templates/     # Ready-to-use templates\nâ”‚   â””â”€â”€ code-examples/         # Annotated examples\nâ”œâ”€â”€ tools/                     # Supporting tooling\nâ”‚   â”œâ”€â”€ validation/           # Quality checks\nâ”‚   â””â”€â”€ generation/           # Auto-generation scripts\nâ””â”€â”€ .github/                  # Automation\n    â””â”€â”€ workflows/            # CI/CD for standards\n```\n\n### [REQUIRED] Document Hierarchy\n\n1. **Entry Documents** (README.md)\n   - Quick start guides\n   - Navigation aids\n   - Purpose statements\n\n2. **Router Documents** (CLAUDE.md)\n   - AI optimization layers\n   - Dynamic loading patterns\n   - Context management\n\n3. **Core Standards** (*.md)\n   - Comprehensive guidelines\n   - Implementation details\n   - Code examples\n\n4. **Meta Documents** (meta/*.md)\n   - How to use the system\n   - How to contribute\n   - Architecture documentation\n\n### [RECOMMENDED] Metadata Layer\n\n```yaml\n# standards-metadata.yaml\nstandards:\n  - id: \"CS\"\n    name: \"Coding Standards\"\n    file: \"CODING_STANDARDS.md\"\n    category: \"core\"\n    tokens: 15000\n    sections: 12\n    last_updated: \"2025-01-15\"\n    dependencies: []\n    tags: [\"development\", \"quality\", \"required\"]\n```\n\n---\n\n## Documentation Standards\n\n### [REQUIRED] Document Structure\n\nEvery knowledge document must follow this structure:\n\n```markdown\n# Document Title\n\n**Version:** X.Y.Z\n**Last Updated:** YYYY-MM-DD\n**Status:** Active/Draft/Deprecated\n**Standard Code:** XX (2-4 letters)\n\n## Table of Contents\n[Auto-generated or manual]\n\n## Overview\n[Purpose, scope, and audience]\n\n## Core Content\n[Main knowledge sections]\n\n## Implementation\n[Practical examples and patterns]\n\n## References\n[Related documents and resources]\n```\n\n### [REQUIRED] Section Tagging\n\nUse explicit tags to indicate requirement levels:\n\n```markdown\n### [REQUIRED] Critical Feature\nMust be implemented for compliance.\n\n### [RECOMMENDED] Best Practice\nShould be implemented unless there's a valid reason.\n\n### [OPTIONAL] Enhancement\nCan be implemented for additional benefits.\n```\n\n### [REQUIRED] Code Examples\n\nEvery concept must include practical examples:\n\n```python\n# Good: Complete, runnable example\nfrom typing import Optional\nimport logging\n\nclass DocumentManager:\n    \"\"\"Manages document lifecycle with versioning.\"\"\"\n\n    def __init__(self, storage_backend: StorageBackend):\n        self.storage = storage_backend\n        self.logger = logging.getLogger(__name__)\n\n    def save_document(\n        self,\n        doc_id: str,\n        content: str,\n        metadata: Optional[dict] = None\n    ) -> str:\n        \"\"\"Save document with automatic versioning.\"\"\"\n        try:\n            version = self.storage.get_next_version(doc_id)\n            self.storage.save(doc_id, content, version, metadata)\n            self.logger.info(f\"Saved {doc_id} v{version}\")\n            return version\n        except StorageError as e:\n            self.logger.error(f\"Failed to save {doc_id}: {e}\")\n            raise\n```\n\n### [RECOMMENDED] Visual Aids\n\nInclude diagrams for complex relationships:\n\n```mermaid\ngraph TD\n    A[User Query] --> B{CLAUDE.md Router}\n    B --> C[Load Core Standards]\n    B --> D[Load Specific Sections]\n    B --> E[Generate Response]\n    C --> F[MANIFEST.yaml]\n    D --> F\n    F --> G[Progressive Loading]\n```\n\n---\n\n## AI/LLM Integration\n\n### [REQUIRED] Token Optimization\n\nDesign documents for efficient AI consumption:\n\n1. **Summary Sections**: 100-200 tokens for quick overview\n2. **Progressive Detail**: Structured for selective loading\n3. **Semantic Chunking**: Logical breaks every 500-1000 tokens\n4. **Inline Metadata**: Token counts and priorities\n\n### [REQUIRED] Router Document (CLAUDE.md Pattern)\n\nEvery knowledge base needs an AI router:\n\n```markdown\n# AI Knowledge Router\n\n## Quick Patterns\n@load [topic:section] - Load specific section\n@summary [topic] - Get executive summary\n@find \"natural query\" - Semantic search\n\n## Natural Language Mappings\n| User Says | System Loads | Context |\n|-----------|--------------|---------|\n| \"How do I test?\" | TS:* + CS:testing | Testing practices |\n| \"Security help\" | SEC:* + CS:security | Security standards |\n```\n\n### [RECOMMENDED] Context Windows\n\nStructure for different AI context limits:\n\n```yaml\nloading_strategies:\n  small_context:  # < 4K tokens\n    - load: [\"overview\", \"quick_reference\"]\n    - exclude: [\"examples\", \"appendices\"]\n\n  medium_context:  # 4K-32K tokens\n    - load: [\"overview\", \"core_sections\", \"examples\"]\n    - lazy_load: [\"advanced\", \"edge_cases\"]\n\n  large_context:  # > 32K tokens\n    - load: [\"*\"]\n    - optimize: [\"remove_duplicates\", \"compress_examples\"]\n```\n\n### [REQUIRED] Machine-Readable Formats\n\nProvide structured data formats:\n\n```json\n{\n  \"standards\": {\n    \"coding\": {\n      \"file\": \"CODING_STANDARDS.md\",\n      \"sections\": {\n        \"overview\": { \"tokens\": 500, \"priority\": \"critical\" },\n        \"style\": { \"tokens\": 1500, \"priority\": \"high\" },\n        \"patterns\": { \"tokens\": 2000, \"priority\": \"medium\" }\n      }\n    }\n  }\n}\n```\n\n---\n\n## Progressive Disclosure System\n\n### [REQUIRED] Information Layers\n\nImplement multiple detail levels:\n\n1. **Quick Reference** (< 100 tokens)\n\n   ```markdown\n   **Python Naming:** snake_case for functions, PascalCase for classes\n   ```\n\n2. **Summary** (100-500 tokens)\n\n   ```markdown\n   ### Python Naming Conventions\n   - Functions: snake_case (get_user_name)\n   - Classes: PascalCase (UserAccount)\n   - Constants: UPPER_SNAKE (MAX_RETRIES)\n   - Private: Leading underscore (_internal_method)\n   ```\n\n3. **Detailed** (500-2000 tokens)\n   - Full examples\n   - Edge cases\n   - Anti-patterns\n   - Migration guides\n\n4. **Comprehensive** (2000+ tokens)\n   - Academic background\n   - Historical context\n   - Alternative approaches\n   - Research references\n\n### [RECOMMENDED] Dynamic Loading\n\nImplement smart loading based on context:\n\n```typescript\ninterface LoadingStrategy {\n  assess(query: string): DetailLevel;\n  load(level: DetailLevel): Documentation;\n  expand(currentDocs: Documentation): Documentation;\n}\n\nclass ProgressiveLoader implements LoadingStrategy {\n  assess(query: string): DetailLevel {\n    if (query.includes('quick') || query.includes('summary')) {\n      return DetailLevel.Summary;\n    }\n    if (query.includes('example') || query.includes('how to')) {\n      return DetailLevel.Detailed;\n    }\n    return DetailLevel.Comprehensive;\n  }\n}\n```\n\n---\n\n## Cross-Reference Architecture\n\n### [REQUIRED] Explicit Relationships\n\nDefine clear relationships between documents:\n\n```yaml\n# In STANDARDS_GRAPH.md or metadata\nrelationships:\n  CODING_STANDARDS:\n    depends_on: []\n    required_by: [\"TESTING_STANDARDS\", \"SECURITY_STANDARDS\"]\n    related_to: [\"STYLE_GUIDE\", \"REVIEW_CHECKLIST\"]\n    conflicts_with: [\"LEGACY_PATTERNS\"]\n```\n\n### [REQUIRED] Bidirectional Links\n\nAlways create links in both directions:\n\n```markdown\n# In CODING_STANDARDS.md\nFor testing these patterns, see [TESTING_STANDARDS.md](TESTING_STANDARDS.md#unit-testing)\n\n# In TESTING_STANDARDS.md\nFor code patterns to test, see [CODING_STANDARDS.md](CODING_STANDARDS.md#patterns)\n```\n\n### [RECOMMENDED] Dependency Management\n\nTrack and validate dependencies:\n\n```python\n# dependency_validator.py\nclass DependencyValidator:\n    def validate_dependencies(self, doc: Document) -> List[Issue]:\n        issues = []\n        for dep in doc.metadata.get('dependencies', {}).get('requires', []):\n            if not self.exists(dep):\n                issues.append(f\"Missing required dependency: {dep}\")\n            elif self.is_deprecated(dep):\n                issues.append(f\"Depends on deprecated standard: {dep}\")\n        return issues\n```\n\n---\n\n## Version Management\n\n### [REQUIRED] Semantic Versioning\n\nAll documents must use semantic versioning:\n\n- **Major (X.0.0)**: Breaking changes, restructuring\n- **Minor (x.Y.0)**: New sections, significant updates\n- **Patch (x.y.Z)**: Corrections, clarifications\n\n### [REQUIRED] Change Tracking\n\nMaintain change history:\n\n```markdown\n## Changelog\n\n### [1.2.0] - 2025-01-15\n#### Added\n- New section on async patterns\n- Examples for error handling\n\n#### Changed\n- Updated testing requirements to 85%\n- Clarified naming conventions\n\n#### Deprecated\n- Legacy callback patterns (use async/await)\n```\n\n### [RECOMMENDED] Migration Guides\n\nFor major version changes:\n\n```markdown\n## Migrating from v1.x to v2.0\n\n### Breaking Changes\n1. **Removed**: Global state patterns\n   - **Old**: `global_config = Config()`\n   - **New**: Dependency injection required\n\n### Migration Steps\n1. Update all global references\n2. Implement DI container\n3. Run migration validator\n```\n\n---\n\n## Search & Discovery\n\n### [REQUIRED] Search Optimization\n\nStructure content for searchability:\n\n1. **Keywords in Headings**: Use descriptive, searchable headers\n2. **Tag System**: Add metadata tags for categorization\n3. **Synonyms**: Include alternative terms\n4. **Examples**: Real-world, searchable scenarios\n\n### [RECOMMENDED] Discovery Features\n\nImplement discovery aids:\n\n```markdown\n## Related Topics\n- See also: [TESTING_STANDARDS.md] for testing approaches\n- Related: [SECURITY_STANDARDS.md] for security patterns\n- Next: [DEPLOYMENT_STANDARDS.md] for deployment\n\n## Common Questions\n- **Q**: How do I handle errors?\n  **A**: See [Error Handling](#error-handling) section\n\n## Quick Links\n- [Most Important Section](#critical-section)\n- [Common Patterns](#patterns)\n- [Troubleshooting](#troubleshooting)\n```\n\n### [RECOMMENDED] Smart Suggestions\n\nProvide contextual recommendations:\n\n```yaml\n# suggestions.yaml\ncontext_suggestions:\n  - trigger: \"reading CODING_STANDARDS\"\n    suggest: [\"TESTING_STANDARDS\", \"CODE_REVIEW_CHECKLIST\"]\n\n  - trigger: \"searching error handling\"\n    suggest: [\"LOGGING_STANDARDS\", \"MONITORING_STANDARDS\"]\n```\n\n---\n\n## Implementation Checklist\n\n### Phase 1: Foundation (Week 1)\n\n- [ ] Create repository structure\n- [ ] Set up README.md with clear navigation\n- [ ] Create CLAUDE.md or equivalent AI router\n- [ ] Implement MANIFEST.yaml for metadata\n- [ ] Set up version control patterns\n\n### Phase 2: Core Documentation (Week 2-3)\n\n- [ ] Migrate/create core documentation\n- [ ] Add semantic versioning to all docs\n- [ ] Implement [REQUIRED]/[RECOMMENDED] tagging\n- [ ] Create cross-references between docs\n- [ ] Add code examples to all concepts\n\n### Phase 3: AI Optimization (Week 4)\n\n- [ ] Add token counts to sections\n- [ ] Implement progressive loading patterns\n- [ ] Create natural language mappings\n- [ ] Set up machine-readable formats\n- [ ] Test with various AI assistants\n\n### Phase 4: Discovery & Search (Week 5)\n\n- [ ] Implement search optimization\n- [ ] Create discovery aids\n- [ ] Add smart suggestions\n- [ ] Build dependency graph\n- [ ] Create quick reference guides\n\n### Phase 5: Automation (Week 6+)\n\n- [ ] Set up validation workflows\n- [ ] Implement auto-generation scripts\n- [ ] Create update notifications\n- [ ] Build compliance checking\n- [ ] Add metrics tracking\n\n### Validation Checklist\n\n- [ ] All documents follow standard structure\n- [ ] Version numbers are consistent\n- [ ] Cross-references are bidirectional\n- [ ] AI router handles common queries\n- [ ] Search returns relevant results\n- [ ] Progressive loading works correctly\n- [ ] Dependencies are properly tracked\n\n---\n\n## References\n\n- [CREATING_STANDARDS_GUIDE.md](./docs/guides/CREATING_STANDARDS_GUIDE.md) - How to create new standards\n- [STANDARD_TEMPLATE.md](./docs/guides/STANDARD_TEMPLATE.md) - Template for new documents\n- [CLAUDE.md](./docs/core/CLAUDE.md) - Example AI router implementation\n- [MANIFEST.yaml](./config/MANIFEST.yaml) - Metadata structure example\n\n---\n\n## Appendix: Quick Reference\n\n### Essential Files for Knowledge Management\n\n```text\nREADME.md         # Entry point and navigation\nCLAUDE.md        # AI optimization layer\nMANIFEST.yaml    # Machine-readable metadata\n*_STANDARDS.md   # Individual knowledge documents\nCHANGELOG.md     # Version history\n```\n\n### Key Commands for Validation\n\n```bash\n# Validate structure\nfind . -name \"*.md\" -exec grep -L \"Version:\" {} \\;\n\n# Check cross-references\ngrep -r \"\\[.*\\](\\./\" --include=\"*.md\" | sort | uniq\n\n# Token count estimation\nwc -w *.md | awk '{print $1/3 \" tokens (est) - \" $2}'\n```\n\n### AI Loading Patterns\n\n```text\n@load KM:*                    # Load all sections\n@load KM:architecture         # Load specific section\n@summary KM                   # Get overview only\n@find \"how to organize docs\"  # Natural language search\n```\n\n---\n\n**Note:** This standard represents best practices for knowledge management in\ntechnical projects. Adapt these patterns to your specific needs while\nmaintaining the core principles of progressive disclosure, AI optimization,\nand semantic relationships.\n\n## Related Standards\n\n- [CONTRIBUTING.md](../core/CONTRIBUTING.md) - Contributing guidelines\n- [Model Context Protocol Standards](MODEL_CONTEXT_PROTOCOL_STANDARDS.md) - Progressive loading patterns for MCP\n- [Content Standards](CONTENT_STANDARDS.md) - Content structuring guidelines\n"
}