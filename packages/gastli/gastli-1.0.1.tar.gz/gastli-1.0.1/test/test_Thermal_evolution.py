

# Import coupling module
import gastli.Thermal_evolution as therm

# Other Python modules
import numpy as np


# Create thermal evolution class
my_therm_obj = therm.thermal_evolution()

my_therm_obj.f_S = np.array([-9.0748e+13,
-4.5188e+13,
-2.4804e+13,
-1.4608e+13,
-6.0065e+12,
-4.1194e+12,
-2.9185e+12,
-2.1224e+12,
-1.5842e+12,
-9.3024e+11,
-1.2031e+12,
-9.3009e+11,
-3.8770e+11,
-1.9930e+11,
-8.8472e+10,
-3.0998e+10])

my_therm_obj.s_mean_TE = np.array([5.3541e+04,
 5.5022e+04,
 5.6120e+04,
 5.6959e+04,
 5.8490e+04,
 5.9295e+04,
 6.0149e+04,
 6.1037e+04,
 6.1928e+04,
 6.3308e+04,
 6.2820e+04,
 6.3308e+04,
 6.5245e+04,
 6.7295e+04,
 6.9744e+04,
 7.3152e+04])


my_therm_obj.s_top_TE = np.array([5.3353e+04,
5.4421e+04,
5.5440e+04,
5.6408e+04,
5.8247e+04,
5.9127e+04,
5.9999e+04,
6.0851e+04,
6.1714e+04,
6.3041e+04,
6.2566e+04,
6.3041e+04,
6.4929e+04,
6.6886e+04,
6.9032e+04,
7.1733e+04])




my_therm_obj.Tint_array = np.array([5.0000e+01,
6.0000e+01,
7.0000e+01,
8.0000e+01,
1.0000e+02,
1.1000e+02,
1.2000e+02,
1.3000e+02,
1.4000e+02,
1.6000e+02,
1.5000e+02,
1.6000e+02,
2.0000e+02,
2.4000e+02,
3.0000e+02,
4.0000e+02])



my_therm_obj.Rtot_TE = np.array([9.0142e+00,
9.4192e+00,
9.7953e+00,
1.0139e+01,
1.0872e+01,
1.1280e+01,
1.1749e+01,
1.2278e+01,
1.2838e+01,
1.3906e+01,
1.3472e+01,
1.3906e+01,
1.5906e+01,
1.8479e+01,
2.2492e+01,
3.0663e+01])


my_therm_obj.Rbulk_TE = np.array([6.6063e+00,
6.7930e+00,
6.9560e+00,
7.0952e+00,
7.3736e+00,
7.5195e+00,
7.6825e+00,
7.8590e+00,
8.0356e+00,
8.3309e+00,
8.2257e+00,
8.3309e+00,
8.7587e+00,
9.2000e+00,
9.6651e+00,
1.0218e+01])


my_therm_obj.Tsurf_TE = np.array([1.8402e+04,
1.9945e+04,
2.1509e+04,
2.3086e+04,
2.6304e+04,
2.7950e+04,
2.9630e+04,
3.1345e+04,
3.3083e+04,
3.5841e+04,
3.4856e+04,
3.5841e+04,
3.9775e+04,
4.3703e+04,
4.7794e+04,
5.2637e+04])

my_therm_obj.solve_thermal_evol_eq()


t_Gyr_expected = np.array([2.10000000e-06,1.51517230e-01,3.03032361e-01,4.54547491e-01
,6.06062621e-01,7.57577752e-01,9.09092882e-01,1.06060801e+00
,1.21212314e+00,1.36363827e+00,1.51515340e+00,1.66666853e+00
,1.81818366e+00,1.96969879e+00,2.12121392e+00,2.27272905e+00
,2.42424418e+00,2.57575932e+00,2.72727445e+00,2.87878958e+00
,3.03030471e+00,3.18181984e+00,3.33333497e+00,3.48485010e+00
,3.63636523e+00,3.78788036e+00,3.93939549e+00,4.09091062e+00
,4.24242575e+00,4.39394088e+00,4.54545601e+00,4.69697114e+00
,4.84848627e+00,5.00000140e+00,5.15151653e+00,5.30303166e+00
,5.45454679e+00,5.60606192e+00,5.75757705e+00,5.90909218e+00
,6.06060731e+00,6.21212244e+00,6.36363757e+00,6.51515270e+00
,6.66666783e+00,6.81818296e+00,6.96969809e+00,7.12121322e+00
,7.27272835e+00,7.42424348e+00,7.57575862e+00,7.72727375e+00
,7.87878888e+00,8.03030401e+00,8.18181914e+00,8.33333427e+00
,8.48484940e+00,8.63636453e+00,8.78787966e+00,8.93939479e+00
,9.09090992e+00,9.24242505e+00,9.39394018e+00,9.54545531e+00
,9.69697044e+00,9.84848557e+00,1.00000007e+01,1.01515158e+01
,1.03030310e+01,1.04545461e+01,1.06060612e+01,1.07575764e+01
,1.09090915e+01,1.10606066e+01,1.12121217e+01,1.13636369e+01
,1.15151520e+01,1.16666671e+01,1.18181823e+01,1.19696974e+01
,1.21212125e+01,1.22727277e+01,1.24242428e+01,1.25757579e+01
,1.27272730e+01,1.28787882e+01,1.30303033e+01,1.31818184e+01
,1.33333336e+01,1.34848487e+01,1.36363638e+01,1.37878790e+01
,1.39393941e+01,1.40909092e+01,1.42424243e+01,1.43939395e+01
,1.45454546e+01,1.46969697e+01,1.48484849e+01,1.50000000e+01])

age_points_expected = [4.77484915,2.64981354,1.58486814,1.00900501,0.47934532,0.34495887
,0.25490011,0.18432351,0.14968233,0.14446795,0.14633444,0.14446795
,0.13704916,0.12935924,0.12092665,0.11031322]


Rtot_solution_expected = np.array([115.58861615,12.53498818,11.43648457,10.92741042,10.62857877
,10.40339772,10.22885072,10.09766097, 9.99458902, 9.90488351
, 9.8268116,  9.75686506, 9.69185413, 9.63215722, 9.57733982
, 9.5270035  ,9.48078181, 9.43833837, 9.39863198, 9.36051158
, 9.32423972, 9.28972664, 9.2568871,  9.22564008, 9.19590828
, 9.16761821, 9.14069998, 9.11508706, 9.09071612, 9.06752695
, 9.04546235, 9.02446782, 9.00449132, 8.9854834,  8.96739722
, 8.95018804, 8.93381336, 8.91823273, 8.90340762, 8.88930141
, 8.87587923, 8.8631079,  8.85095588, 8.83939313, 8.82839114
, 8.81792269, 8.8079619,  8.79848406, 8.7894657,  8.78088458
, 8.77271949, 8.76495031, 8.75755796, 8.75052423, 8.74383163
, 8.73746359, 8.73140429, 8.72563875, 8.72015277, 8.7149328
, 8.709966,   8.70524005, 8.70074327, 8.69646455, 8.69239332
, 8.68851952, 8.68483357, 8.68132633, 8.67798916, 8.67481381
, 8.67179243, 8.66891758, 8.66618214, 8.66357935, 8.66110277
, 8.65874628, 8.65650406, 8.65437056, 8.65234052, 8.65040892
, 8.64857098, 8.64682215, 8.64515813, 8.64357482, 8.64206828
, 8.6406348,  8.63927083, 8.637973, 8.63673812, 8.63556311
, 8.63444507, 8.63338125, 8.63236901, 8.63140587, 8.63048943
, 8.62961742, 8.6287877,  8.62799821, 8.62724701, 8.62653224])


def test_answer():
    assert len(my_therm_obj.t_Gyr) == len(t_Gyr_expected)
    assert all([a - b < 1e-6 for a, b in zip(my_therm_obj.t_Gyr, t_Gyr_expected)])
    assert len(my_therm_obj.age_points) == len(age_points_expected)
    assert all([a - b < 1e-6 for a, b in zip(my_therm_obj.age_points, age_points_expected)])
    assert len(my_therm_obj.Rtot_solution) == len(Rtot_solution_expected)
    assert all([a - b < 1e-6 for a, b in zip(my_therm_obj.Rtot_solution, Rtot_solution_expected)])


