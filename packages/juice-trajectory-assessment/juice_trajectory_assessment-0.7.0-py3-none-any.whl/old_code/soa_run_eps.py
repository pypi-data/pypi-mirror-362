# """
# Created on March 15, 2019
#
# @author: Claudio Munoz Crego (ESAC)
#
# This Module allows to run soa_eps
#
# """
#
# import os
# import shutil
# import logging
#
# from soa_eps.soa_eps_run import SoaEpsRun
# from soa_eps.soa_eps_config_parser import MainParameters
#
#
# def run(root_path, scenario, experiment_type, soa_eps):
#     """
#     Not if epscfg path not provided as input, this entails this file is autogenerated.
#     In addition event file are the one generated by efinder
#     """
#
#     os_var_name = 'DATA_ROOT_PATH'
#     scenario_path = os.path.abspath(os.path.join(os.path.expandvars(root_path), scenario))
#     print('scenario_path = {}'.format(scenario_path))
#     data_root_path = os.path.join(scenario_path, experiment_type)
#     os.environ[os_var_name] = data_root_path
#
#     eps_parameters = MainParameters()
#     eps_parameters.data_root_path = data_root_path
#
#     eps_parameters.epsng = os.path.abspath(os.path.expandvars(soa_eps.epsng))
#     eps_parameters.epsdata = os.path.abspath(os.path.expandvars(soa_eps.epsdata))
#     eps_parameters.epscfg = os.path.abspath(os.path.expandvars(soa_eps.epscfg))
#
#     if hasattr(soa_eps, 'evf_data'):
#         eps_parameters.path_eps_evf = os.path.join(os.path.expandvars(soa_eps.evf_data))
#     else:
#         eps_parameters.path_eps_evf = os.path.join(data_root_path, "TOP_events.evf")
#
#     if hasattr(soa_eps, 'itl_data'):
#         eps_parameters.path_eps_itl = os.path.join(os.path.expandvars(soa_eps.itl_data))
#     else:
#         eps_parameters.path_eps_itl = os.path.join(data_root_path, "ITL/TOP_Timelines.itl")
#
#     if hasattr(soa_eps, 'edf_data'):
#         eps_parameters.path_eps_edf = os.path.join(os.path.expandvars(soa_eps.edf_data))
#     else:
#         eps_parameters.path_eps_edf = os.path.join(data_root_path, "EDF/TOP_experiments.edf")
#
#     eps_parameters.path_eps_pwr = os.path.abspath(os.path.expandvars(soa_eps.path_eps_pwr))
#     eps_parameters.path_eps_brf = os.path.abspath(os.path.expandvars(soa_eps.path_eps_brf))
#
#     eps_parameters.simu_time_step = soa_eps.simu_time_step
#     eps_parameters.report_time_step = soa_eps.report_time_step
#     eps_parameters.eps_output_dir = os.path.join(data_root_path, "eps_output")
#
#     print(eps_parameters.to_string())
#
#     if os.path.exists(eps_parameters.eps_output_dir):
#         if os.path.isdir(eps_parameters.eps_output_dir):
#             shutil.rmtree(eps_parameters.eps_output_dir)
#         else:
#             os.remove(eps_parameters.eps_output_dir)
#     else:
#         for f in os.listdir(data_root_path):
#             if f.startswith("eps_output"):
#                 source = os.path.join(data_root_path, f)
#                 if os.path.isdir(source):
#                     shutil.rmtree(source)
#                 else:
#                     os.remove(source)
#                 logging.debug('cleaning old runs {}'.format(source))
#
#     epslog = SoaEpsRun(eps_parameters).run
#
#     for f in os.listdir(data_root_path):
#         if f.startswith("eps_output"):
#             source = os.path.join(data_root_path, f)
#             break
#
#     destination = os.path.join(data_root_path, "eps_output")
#     os.rename(source, destination)
#     logging.info('New eps output created: {}'.format(destination))
