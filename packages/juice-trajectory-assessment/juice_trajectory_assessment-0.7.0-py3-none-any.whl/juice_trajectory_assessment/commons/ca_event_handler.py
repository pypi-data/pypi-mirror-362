"""
Created on September, 2020

@author: Claudio Munoz Crego (ESAC)

This Module allows to handle (parse, load) CA event files
"""

import os
import logging
import numpy as np

import sys
import pandas as pd
import datetime

from tabulate import tabulate


class EventCaHandler(object):
    """
    This Class allows read and parse CA event files against Jupiter or Icy Moons
    """

    def __init__(self, file_input, output_dir="./"):

        self.output_dir = output_dir

        self.input_file = file_input

        self.df = self.read_event_ca_file()

    def read_event_ca_file(self):
        """

        :return:
        """

        df = read_file(self.input_file)

        df['datetime (UTC)'] = pd.to_datetime(df[' event time [utc]'])
        # df.drop(df[' event time [utc]'])

        return df

    def get_moon_flyby(self, target=None):
        """
        Get CA UTC time for a given target =[Jupiter,Ganymede, Callisto, Europa]

        :param target: target os [Jupiter, Ganymede, Callisto, Europa]
        :return: df for for the target
        """

        if target is None:

            return self.df

        if target == 'Jupiter':
            acronym = 'PJ'  # PeriJove
        else:
            acronym = target[0].upper()

        df = self.df.loc[self.df['Event name'].str.contains(acronym)]

        return df


def read_file(input_file, header=[0], sep=',', col_names=None):
    """
    Read csv like file

    :param header: specify header lines; default is None
    :param input_file: path of the csv file to read
    :return: df: panda data frame instance containing input data
    """

    if not os.path.exists(input_file):
        logging.error('input file "{}" not available'.format(input_file))
        sys.exit()  # event line output routine
    else:

        if col_names:

            df = pd.read_csv(input_file, sep=sep, header=header, comment='#', names=col_names)

        else:

            df = pd.read_csv(input_file, sep=sep, header=header, comment='#')

    return df


def find_index_closest_date(df, column_name, dt):
    """
    Get index of closest datetime in df

    :param df: dataframe
    :param column_name: name of the column in dataframe
    :param dt: a given datetime object
    :return:
    """

    return df.iloc[np.argmin(np.abs(df[column_name] - dt))]


def get_rime_opp(segment_file, mission_timeline_flyby):
    """
    Get Radio Source source windows opportunities during flybys

    :param segment_file:
    :return:
    """

    # print(segment_file)

    df_express_seg = read_file(segment_file, header=None, col_names=['event', 'start UTC', 'end UTC', 'x', 'wg'])

    #
    # my_tab = tabulate(df_express_seg[:10], headers='keys', tablefmt='grid', numalign='center', stralign='center',
    #                   showindex=False)
    # print('\n' + my_tab + '\n')

    df_exp = df_express_seg.loc[df_express_seg['event'].str.contains('RIME_AJS')]

    # my_tab = tabulate(df_exp[:10], headers='keys', tablefmt='grid', numalign='center', stralign='center', showindex=False)
    # print('\n' + my_tab + '\n')

    p = EventCaHandler(mission_timeline_flyby)

    df_moon = p.get_moon_flyby()

    rime_ajs = {'GANYMEDE_FLYBY_RIME_AJS': '',
                'CALLISTO_FLYBY_RIME_AJS': '',
                'EUROPA_FLYBY_RIME_AJS': ''}
    for i in range(len(df_exp['event'].tolist())):

        event = df_exp['event'].iloc[i]
        start = df_exp['start UTC'].iloc[i][:-1]
        end = df_exp['end UTC'].iloc[i][:-1]
        dt = datetime.datetime.strptime(df_exp['start UTC'].iloc[i], '%Y-%m-%dT%H:%M:%SZ')

        df = find_index_closest_date(df_moon, 'datetime (UTC)', dt)
        # print('\ninput date: {} --> CA or sub_phase is {} [{}] '.format(
        #     dt, df['Event name'], str(df['datetime (UTC)']).split('.')[0]))
        if 'PJ' not in df['Event name']:

            if rime_ajs[event] == '':
                rime_ajs[event] = '[{}]:[{}, {}]'.format(df['Event name'], start, end)
            else:
                rime_ajs[event] = rime_ajs[event] + '\n[{}]:[{}, {}]'.format(df['Event name'], start, end)

    my_tab = tabulate(rime_ajs.items(), headers=['Parameters', 'Values'], tablefmt='grid', numalign='center',
                      stralign='center',
                      showindex=False)
    print('\n' + my_tab + '\n')

    return rime_ajs


def get_radio_source_occ_per_flyby(segment_file, mission_timeline_flyby):
    """
    Get Radio Source source windows opportunities during flybys

    :param segment_file: radio opportunity file generated by express tool
    :return:
    """

    df_express_seg = read_file(segment_file, header=None, col_names=['event', 'start UTC', 'end UTC',
                                                                     'start altitude', 'end altitude'])

    #
    # my_tab = tabulate(df_express_seg[:10], headers='keys', tablefmt='grid', numalign='center', stralign='center',
    #                   showindex=False)
    # print('\n' + my_tab + '\n')

    df_exp = df_express_seg.loc[df_express_seg['event'].str.contains('RIME_AJS')]

    # my_tab = tabulate(df_exp[:10], headers='keys', tablefmt='grid', numalign='center', stralign='center', showindex=False)
    # print('\n' + my_tab + '\n')

    from juice_trajectory_assessment.commons.mission_timeline_event_file_handler import MissionTimelineEvent
    p = MissionTimelineEvent(mission_timeline_flyby)
    df_moon = p.get_flyby_and_PE_events(output_format='dataframe')
    #
    # p = EventCaHandler(mission_timeline_flyby)
    # #
    # df_moon = p.get_moon_flyby()

    rime_ajs = {'GANYMEDE_FLYBY_RIME_AJS': '',
                'CALLISTO_FLYBY_RIME_AJS': '',
                'EUROPA_FLYBY_RIME_AJS': ''}

    col_names = ['Moon', 'Flyby', 'Radio Source occulted', 'altitudes sc-moon [km]']

    radio_occ = {'Moon': [], 'Flyby': [], 'Date CA': [], 'Radio Source occulted': [], 'sc altitudes [km]': []}

    for i in range(len(df_exp['event'].tolist())):

        event = df_exp['event'].iloc[i]
        start = df_exp['start UTC'].iloc[i][:-1]
        end = df_exp['end UTC'].iloc[i][:-1]
        start_alt = df_exp['start altitude'].iloc[i]
        end_alt = df_exp['end altitude'].iloc[i]

        dt = datetime.datetime.strptime(df_exp['start UTC'].iloc[i], '%Y-%m-%dT%H:%M:%SZ')

        fb = find_index_closest_date(df_moon, 'datetime (UTC)', dt)
        # print('>>\n', fb, '\n>>\n')
        # print(fb.keys())

        # print('\ninput date: {} --> CA or sub_phase is {} [{}] '.format(
        #     dt, df['Event name'], str(df['datetime (UTC)']).split('.')[0]))
        if 'PJ' not in fb['Event name']:

            radio_occ['Moon'].append(event.split('_')[0][:3])
            radio_occ['Flyby'].append(fb['Event name'])
            radio_occ['Date CA'].append(fb['event time [utc]'])
            radio_occ['Radio Source occulted'].append('[{}, {}]'.format(start, end))
            radio_occ['sc altitudes [km]'].append('[{}, {}]'.format(start_alt, end_alt))

    df = pd.DataFrame(radio_occ)
    # my_tab = tabulate(df, headers='keys',
    #                   tablefmt='grid', numalign='center', stralign='center', showindex=False)
    # print('\n' + my_tab + '\n')

    return df
