[project]
name = "mapFolding"
version = "0.12.3"
description = "Map folding algorithm with code transformation framework for optimizing numerical computations."
readme = "README.md"
requires-python = ">=3.12"
license = { 'text' = "CC-BY-NC-4.0" }
authors = [{ name = "Hunter Hogan", email = "HunterHogan@pm.me" }]
keywords = [
  "A000136",
  "A001415",
  "A001416",
  "A001417",
  "A001418",
  "A195646",
  "AST manipulation",
  "Numba optimization",
  "OEIS",
  "algorithmic optimization",
  "code generation",
  "code transformation",
  "combinatorics",
  "computational geometry",
  "dataclass transformation",
  "folding pattern enumeration",
  "just-in-time compilation",
  "map folding",
  "performance optimization",
  "source code analysis",
  "stamp folding",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Compilers",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
urls = { Donate = "https://www.patreon.com/integrated", Homepage = "https://github.com/hunterhogan/mapFolding", Issues = "https://github.com/hunterhogan/mapFolding/issues", Repository = "https://github.com/hunterhogan/mapFolding.git" }
scripts = { OEIS_for_n = "mapFolding.oeis:OEIS_for_n", clearOEIScache = "mapFolding.oeis:clearOEIScache", getOEISids = "mapFolding.oeis:getOEISids" }
dependencies = [
  "astToolkit>=0.5.0",
  "hunterMakesPy",
  "numba",
  "numba_progress",
  "numpy",
  "platformdirs",
]
optional-dependencies = { development = [
  "mypy",
  "pyupgrade",
  "setuptools-scm",
], testing = [
  "pytest",
  "pytest-cov",
  "pytest-env",
  "pytest-xdist",
] }

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.coverage]
report = { exclude_lines = [
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":",
  "numba.jit_module",
], ignore_errors = false }
run = { branch = true, concurrency = [
  "multiprocessing",
], data_file = "tests/coverage/.coverage", omit = [
  "getLLVMforNoReason.py",
  "mapFolding/reference/*",
  "tests/*",
  "Z0Z_*",
], parallel = true, source = [
  ".",
] }
xml = { output = "tests/coverage/coverage.xml" }

[tool.pytest.ini_options]
addopts = ["--color=auto", "-n 1"]
log_auto_indent = true
testpaths = ["tests"]

[tool.pytest_env]
# NUMBA_JIT_COVERAGE = "1" # This does not work, whether it is 0 or 1.
# NUMBA_DISABLE_JIT = "1"

[tool.setuptools]
package-data = { "*" = ["py.typed"] }
packages = { find = {  } }

[tool.updateCitation]
filenameCitationDOTcff = "CITATION.cff"
pathFilenameCitationSSOT = "citations/CITATION.cff"
