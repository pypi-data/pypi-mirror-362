[tool.poetry]
name = "prompt-craft-kit"
version = "0.1.2"
description = "A powerful toolkit for building, managing, and composing hierarchical prompts."
authors = ["David Tokar <1413david@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/DavidTokar12/PromptCraft"
homepage = "https://github.com/DavidTokar12/PromptCraft"
include = ["src/prompt_craft_kit/py.typed"]

keywords = [
    "prompt", "llm", "templating", "jinja2", "prompt-engineering", "ai", 
    "openai", "claude", "anthropic", "hierarchical prompts", "prompt management"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]


[tool.poetry.dependencies]
python = ">=3.10,<4.0"
jinja2 = "^3.1.6"

[tool.poetry.group.dev.dependencies]
ruff = "^0.7.2"
mypy = "^1.13.0"
pytest = "^8.3.3"
black = "^25.1.0"
pytest-cov = "^6.1.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
extend-exclude = [
    "test/",
]
fix = true
line-length = 88
target-version = "py310"

[tool.ruff.lint]
extend-select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "ERA",  # flake8-eradicate/eradicate
    "I",    # isort
    "N",    # pep8-naming
    "PIE",  # flake8-pie
    "PGH",  # pygrep
    "RUF",  # ruff checks
    "SIM",  # flake8-simplify
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
]
ignore = [
    "B904",   # use 'raise ... from err'
    "B905",   # use explicit 'strict=' parameter with 'zip()'
    "ERA001",
    "RUF009", # Do not perform function call in dataclass defaults
    "TCH002", # Do not use 'typing.TYPE_CHECKING' in type annotations
    "TCH001",
    "TCH003", # Do not use 'typing.TYPE_CHECKING' in imports
]
extend-safe-fixes = [
    "TCH", # move import from and to TYPE_CHECKING blocks
]
unfixable = [
    "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["poetry"]
known-third-party = ["poetry.core"]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
files = "src, tests"
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
exclude = [
    "docs/",
    "test/",
    "assets/"
]