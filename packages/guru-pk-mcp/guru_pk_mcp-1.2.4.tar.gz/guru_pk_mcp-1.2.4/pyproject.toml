[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "guru-pk-mcp"
version = "1.2.4"
description = "MCP server enabling AI expert debates - Dynamic expert generation for personalized multi-round philosophical discussions on any topic"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Ryu", email = "ryu@mitsudo.tech" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "ai",
    "expert-debate",
    "dynamic-experts",
    "intelligent-generation",
    "multi-round-debate",
    "philosophy",
    "claude-desktop",
    "cursor",
    "uvx"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: Chinese (Simplified)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
    "Topic :: Education",
    "Topic :: Text Processing :: Linguistic",
    "Framework :: AsyncIO",
    "Environment :: Console",
]
requires-python = ">=3.10"
dependencies = [
    "mcp>=1.10.1",
    "anyio>=4.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]

[project.urls]
Homepage = "https://github.com/MitsudoAI/guru-pk-mcp"
Repository = "https://github.com/MitsudoAI/guru-pk-mcp.git"
Issues = "https://github.com/MitsudoAI/guru-pk-mcp/issues"
Documentation = "https://github.com/MitsudoAI/guru-pk-mcp/blob/main/README.md"
Changelog = "https://github.com/MitsudoAI/guru-pk-mcp/releases"
"Source Code" = "https://github.com/MitsudoAI/guru-pk-mcp"
"Bug Tracker" = "https://github.com/MitsudoAI/guru-pk-mcp/issues"

[project.scripts]
guru-pk-mcp-server = "guru_pk_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/guru_pk_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]
exclude = [
    "/.git",
    "/tests",
    "/.pytest_cache",
    "/.mypy_cache",
    "/.ruff_cache",
    "/dist",
    "/build",
    "**/__pycache__",
    "*.pyc",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["guru_pk_mcp"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "twine>=6.1.0",
    "build>=1.0.0",
    "wheel>=0.40.0",
]
