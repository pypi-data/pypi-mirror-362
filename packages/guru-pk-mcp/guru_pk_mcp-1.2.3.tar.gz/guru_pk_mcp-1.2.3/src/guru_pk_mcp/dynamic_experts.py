"""
动态专家生成系统 - 提供专家推荐的原则性指导
"""

from typing import Any


class DynamicExpertManager:
    """动态专家管理器 - 管理当前会话的专家"""

    def __init__(self, data_dir: str | None = None):
        # 保留data_dir参数以兼容现有代码，但实际不使用
        self.current_experts: dict[str, Any] = {}

    def set_current_experts(self, experts: dict[str, Any]) -> None:
        """设置当前会话的专家"""
        self.current_experts = experts

    def get_current_experts(self) -> dict[str, Any]:
        """获取当前会话的专家"""
        return self.current_experts

    def clear_current_experts(self) -> None:
        """清除当前专家"""
        self.current_experts = {}

    def validate_expert_data(self, expert_data: dict[str, Any] | None) -> bool:
        """验证专家数据完整性"""
        if expert_data is None:
            return False

        required_fields = [
            "name",
            "description",
            "core_traits",
            "speaking_style",
            "base_prompt",
        ]

        for field in required_fields:
            if field not in expert_data or not expert_data[field]:
                return False

        # 添加默认emoji
        if "emoji" not in expert_data:
            expert_data["emoji"] = "👤"

        return True

    def format_expert_list(self, experts: dict[str, Any]) -> list[dict[str, Any]]:
        """格式化专家列表用于显示"""
        return [
            {
                "name": expert["name"],
                "emoji": expert.get("emoji", "👤"),
                "description": expert["description"],
                "core_traits": expert["core_traits"],
                "speaking_style": expert["speaking_style"],
                # 移除硬编码的真实人物判断，交给MCP Host端LLM处理
                # "is_real_person": self._is_likely_real_person(expert),
            }
            for expert in experts.values()
        ]


def get_question_analysis_guidance() -> str:
    """获取问题分析指导原则（供MCP Host端LLM使用）"""
    return """
# 问题分析指导原则

## 分析维度
请从以下维度分析问题：

### 1. 问题复杂度
- 简单问题：表述清晰、答案相对明确
- 中等复杂度：涉及多个因素、需要权衡
- 高复杂度：多领域交叉、存在争议、需要深度思考

### 2. 问题类型
- 方法咨询："如何"、"怎么"类问题
- 原因分析："为什么"、"原因"类问题
- 决策支持："选择"、"决策"类问题
- 趋势预测："未来"、"趋势"类问题
- 对比分析："比较"、"对比"类问题

### 3. 领域识别
识别问题所涉及的主要领域：
- 商业管理：企业经营、投资、市场营销
- 科技创新：技术发展、人工智能、数字化
- 哲学思辨：价值观、道德伦理、存在意义
- 心理行为：情绪管理、认知偏差、人际关系
- 教育成长：学习方法、知识体系、能力培养
- 社会文化：制度设计、文化传承、公共政策
- 健康生活：身心健康、生活方式、养生保健
- 创新设计：创意思维、产品设计、用户体验
- 领导管理：团队建设、决策制定、沟通协调
- 战略规划：长期发展、竞争优势、资源配置

## 分析要求
- 准确识别问题的核心要素
- 判断问题的复杂程度和讨论深度需求
- 识别相关的知识领域和专业背景
- 考虑不同视角和观点的价值
"""


def get_expert_recommendation_guidance(
    question: str = "", expert_preferences: str = ""
) -> str:
    """获取专家推荐指导原则（供MCP Host端LLM使用）"""

    # 构建基础指导内容
    base_guidance = f"""
# 专家推荐指导原则

## 当前任务信息
**用户问题**: {question}
"""

    # 如果提供了显式的专家偏好，添加到指导中
    if expert_preferences:
        base_guidance += f"**用户明确指定的专家偏好**: {expert_preferences}\n"

    # 添加专家偏好提取指导
    base_guidance += """
## 🔍 第一步：分析问题中的专家偏好

请仔细分析用户问题，提取其中包含的专家偏好信息：

### 偏好提取要点
1. **直接表达的偏好**：
   - "请两位人工智能领域的专家..."
   - "希望有哲学家和科学家参与..."
   - "需要商业领域的大师..."

2. **隐含的领域需求**：
   - 问题涉及的专业领域（AI、哲学、心理学、商业等）
   - 问题的复杂程度和深度需求
   - 需要的思维视角和方法论

3. **数量和类型要求**：
   - 专家的数量要求
   - 专家的类型组合
   - 特定的背景要求

### 偏好分析结果
请分析用户问题后，总结提取到的专家偏好：
- **明确的偏好**: [从问题中直接提取的专家要求]
- **隐含的需求**: [根据问题内容推断的专家类型需求]
- **推荐策略**: [基于分析的专家组合建议]
"""

    base_guidance += """
## 核心原则：真实人物优先

### 1. 专家选择优先级
**第一优先：真实人物**
- 优先从真实存在或存在过的知名人物中选择
- 包括已故的历史人物和在世的当代名人
- 这些人物应在其领域有公认的成就和独特的思想体系
- 能够提供具有权威性和一致性的观点

**第二优先：虚拟专家**
- 只有当某个特定视角找不到合适的真实人物时，才创建虚拟专家
- 虚拟专家应代表某种特定的专业视角或方法论
- 命名应专业化，避免过于通俗（如"认知科学专家"而非"王心理"）

### 2. 动态专家选择指导原则

#### 领域专业性要求
- **哲学思辨领域**：选择在哲学思想、逻辑推理、伦理道德等方面有突出贡献的思想家
  - 古典哲学传统的代表性人物
  - 现代哲学理论的开创者或集大成者
  - 东方智慧传统的重要代表
  - 当代思想界的领军人物

- **商业管理领域**：选择在商业理论、企业实践、经济分析等方面有卓越成就的专家
  - 管理学理论的奠基人或重要发展者
  - 成功企业的创始人或变革者
  - 投资理念的创新者或实践大师
  - 经济学理论的重要贡献者

- **科技创新领域**：选择在科学发现、技术发明、创新思维等方面有重大贡献的专家
  - 计算机科学的奠基人或突破者
  - 人工智能领域的先驱或当代权威
  - 物理学等基础科学的杰出代表
  - 发明创造的历史性人物

- **心理行为领域**：选择在心理学理论、认知科学、行为研究等方面有重要建树的专家
  - 心理学各流派的创始人或代表人物
  - 认知科学的重要研究者
  - 行为经济学的开拓者

- **教育成长领域**：选择在教育理论、学习科学、人才培养等方面有显著影响的专家
  - 教育理念的革新者
  - 学习理论的重要研究者
  - 当代教育实践的引领者

#### 专家真实性验证标准
- **历史可考性**：确保选择的专家是真实存在的历史人物或当代知名人士
- **成就可验证**：专家在其领域的贡献和影响力应当是可以验证的
- **思想一致性**：专家的理论体系和观点应当具有内在的逻辑一致性
- **代表性权威**：专家应当在其领域内具有广泛认可的权威地位

## 专家组合策略

### 1. 多样性原则
- 确保专家背景多元化，避免观点单一
- 平衡理论专家与实践专家
- 考虑不同文化背景和思维方式（东西方平衡）

### 2. 互补性原则
- 选择能够相互补充的专家组合
- 确保覆盖问题的主要方面
- 避免专家之间过度重叠

### 3. 针对性原则
- 根据问题类型选择合适的专家
- 考虑问题的复杂度和深度需求
- 匹配专家的专业能力与问题需求

### 4. 平衡性原则
- 避免某一种观点过于主导
- 确保不同立场都有代表
- 维持讨论的客观性和公正性
"""

    # 如果用户有专家偏好，添加特殊指导
    if expert_preferences:
        base_guidance += f"""

## 🎯 用户专家偏好处理指导

**用户偏好**: {expert_preferences}

### 偏好解析要求
1. **精确理解用户意图**：
   - 仔细分析用户偏好描述中的关键词和领域
   - 识别用户希望的专家类型、数量、特征
   - 理解是完全指定还是部分建议

2. **智能匹配策略**：
   - 如果用户指定了具体领域（如"人工智能专家"），优先从该领域的顶级真实人物中选择
   - 如果用户指定了专家类型（如"哲学家和科学家"），确保组合中包含这些类型
   - 如果用户给出了模糊描述，根据问题内容智能解释和扩展

3. **偏好与质量平衡**：
   - 在满足用户偏好的前提下，确保专家组合的质量和多样性
   - 如果用户偏好过于局限，适当建议互补的专家类型
   - 保持真实人物优先的原则

### 常见偏好类型处理指导
- **"人工智能专家"** → 优先从深度学习、神经网络、机器学习领域的先驱和当代权威中选择
- **"哲学家和科学家"** → 确保组合中同时包含哲学思辨传统的代表和自然科学的杰出代表
- **"商业领域的大师"** → 从管理学理论、企业实践、投资智慧等不同维度选择权威人物
- **"东方智慧的代表"** → 优先从中国古代哲学、印度思想传统、佛学禅学等东方智慧传统中选择

### 注意事项
- 始终在满足用户偏好的基础上保证辩论的价值和深度
- 如果偏好描述不够清晰，做出合理的解释和扩展
- 确保最终的专家组合既符合偏好又能产生有价值的思辨
"""

    base_guidance += """

## 动态专家组合指导框架

### 组合原则示例1：跨领域复合问题
**组合策略：**
- 哲学维度：选择在人生哲学、价值理念方面有深刻洞察的思想家
- 管理维度：选择在个人管理、效率提升方面有实践智慧的专家
- 技术维度：选择对未来趋势、技术影响有深度理解的权威

### 组合原则示例2：单一领域深度问题
**组合策略：**
- 理论派：选择在该领域理论基础方面有开创性贡献的学者
- 实践派：选择在实际应用、实限操作方面有丰富经验的专家
- 创新派：选择在前沿探索、方法创新方面有突破的先驱

### 组合原则示例3：价值判断类问题
**组合策略：**
- 传统智慧：选择古典传统中在道德伦理方面有深厚积淀的代表
- 现代理性：选择现代哲学中在理性思辨方面有精深研究的学者
- 文化多元：选择不同文化背景中在会道价值方面有独特见解的思想家

## 专家选择质量检查标准

### 必要条件验证
- **专业背景验证**：每位专家都必须有可验证的专业成就和代表性贡献
- **观点差异化**：专家之间必须具有差异化的思维框架和方法论
- **问题覆盖度**：专家组合必须能够从多个角度全面覆盖问题的核心方面
- **辩论价值**：选择的专家组合必须能够产生有意义的思辨和对话

### 质量优化指导
- **真实性优先**：始终优先选择在相关领域有实际贡献的真实人物
- **多元化平衡**：确保专家组合在文化背景、时代特征、思维方式上的多元化
- **互补性原则**：选择能够相互补充而非重复的专家组合
- **时代适应性**：平衡古典智慧与当代思维，确保与问题的时代背景相适应
- **创新性要求**：鼓励选择能够为问题提供新颖视角的专家组合

### 动态选择要求
- **问题适配性**：根据具体问题的特点和需求选择最适合的专家
- **灵活性原则**：不被特定名单或框架限制，基于问题本身的需要进行创新性选择
- **解释说明**：为每位选择的专家提供清晰的选择理由和预期贡献

### 虚拟专家使用规范
当必须使用虚拟专家时：
- 使用专业化的角色定位而非个人姓名
- 明确标注为"虚拟专家"或"专业视角"
- 基于真实的专业领域和方法论
- 避免过于具体的个人化特征
"""

    return base_guidance


def should_trigger_smart_recommendation(personas: list[Any]) -> bool:
    """
    简单检查是否需要触发智能专家推荐（只做基本参数验证）
    """

    # 检查是否提供了完整的专家数据
    if not personas or len(personas) != 3:
        return True

    # 检查专家数据是否完整
    for persona in personas:
        if not isinstance(persona, dict):
            return True

        required_fields = [
            "name",
            "emoji",
            "description",
            "core_traits",
            "speaking_style",
            "base_prompt",
        ]
        for field in required_fields:
            if field not in persona or not persona[field]:
                return True

    return False
