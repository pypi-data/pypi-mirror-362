[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "corrupt-o11y"
dynamic = ["version"]
description = "A comprehensive observability library for Python applications with logging, metrics, and tracing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mykyta", email = "mykyta@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
keywords = ["observability", "monitoring", "logging", "metrics", "tracing", "opentelemetry", "prometheus"]
requires-python = ">=3.11"
dependencies = [
    # Core dependencies for basic metrics functionality
    "prometheus-client>=0.20.0",
    "orjson>=3.8.0",
]

[project.optional-dependencies]
# Structured logging support
logging = [
    "structlog>=23.3.0",
]

# OpenTelemetry tracing support
otlp = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
]
otlp-grpc = [
    "corrupt-o11y[otlp]",
    "opentelemetry-exporter-otlp-proto-grpc>=1.20.0",
]
otlp-http = [
    "corrupt-o11y[otlp]",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
]
otlp-all = [
    "corrupt-o11y[otlp-grpc,otlp-http]",
]

# Operational HTTP server
server = [
    "aiohttp>=3.9.0",
]

# All optional features
all = [
    "corrupt-o11y[logging,otlp-all,server]",
]
[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.2",
    "types-orjson>=3.6.2",
]

[project.urls]
Homepage = "https://github.com/mykyta/corrupt-o11y-py"
Documentation = "https://github.com/mykyta/corrupt-o11y-py#readme"
Repository = "https://github.com/mykyta/corrupt-o11y-py.git"
"Bug Tracker" = "https://github.com/mykyta/corrupt-o11y-py/issues"

[tool.hatch.version]
path = "src/corrupt_o11y/__meta__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/corrupt_o11y"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "PERF",   # Perflint
    "FURB",   # refurb
    "LOG",    # flake8-logging
    "RUF",    # Ruff-specific rules
]
ignore = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "ISC001",  # Implicitly concatenated string literals (conflicts with formatter)
    "S101",    # Use of assert detected
    "S104",    # Possible binding to all interfaces
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PD901",   # Avoid using the generic variable name `df` for DataFrames
    "TC003",   # Move standard library import into a type-checking block
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["corrupt_o11y"]

# Test-specific overrides
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "SLF001",    # Private member accessed (common in tests)
    "PLR2004",   # Magic value used in comparison (test values)
    "S101",      # Use of assert detected (expected in tests)
    "ANN201",    # Missing return type annotation for public function
    "ANN001",    # Missing type annotation for function argument
    "ANN002",    # Missing type annotation for *args
    "ANN003",    # Missing type annotation for **kwargs
    "ANN202",    # Missing return type annotation for private function
    "ARG001",    # Unused function argument
    "ARG002",    # Unused method argument
    "D100",      # Missing docstring in public module
    "D101",      # Missing docstring in public class
    "D102",      # Missing docstring in public method
    "D103",      # Missing docstring in public function
    "PLR0913",   # Too many arguments to function call
    "PLR0915",   # Too many statements
    "FBT003",    # Boolean positional value in function call
    "TRY301",    # Abstract `raise` to an inner function
    "TRY003",    # Avoid specifying long messages outside the exception class
    "EM101",     # Exception must not use a string literal
    "BLE001",    # Do not catch blind exception
    "PLC0415",   # import should be at the top-level
    "S105",      # Possible hardcoded password
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
disallow_any_generics = true
disallow_any_explicit = true
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
error_summary = true

# Paths
files = ["src", "tests"]
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

# Test-specific overrides
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
warn_return_any = false
disallow_any_explicit = false
disallow_untyped_calls = false
warn_unreachable = false

# Ignore processor return types in tests - they are complex union types
[[tool.mypy.overrides]]
module = "tests.test_logging_processors"
disable_error_code = ["call-overload", "index", "assignment", "comparison-overlap"]

# Pytest configuration
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--durations=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
