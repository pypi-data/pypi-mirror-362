# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pulpcore.client.pulp_ansible.models.paginated_collection_version_search_list_response_list import PaginatedCollectionVersionSearchListResponseList

class TestPaginatedCollectionVersionSearchListResponseList(unittest.TestCase):
    """PaginatedCollectionVersionSearchListResponseList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedCollectionVersionSearchListResponseList:
        """Test PaginatedCollectionVersionSearchListResponseList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedCollectionVersionSearchListResponseList`
        """
        model = PaginatedCollectionVersionSearchListResponseList()
        if include_optional:
            return PaginatedCollectionVersionSearchListResponseList(
                meta = pulpcore.client.pulp_ansible.models.paginated_collection_response_list_meta.PaginatedCollectionResponseList_meta(
                    count = 123, ),
                links = pulpcore.client.pulp_ansible.models.paginated_collection_response_list_links.PaginatedCollectionResponseList_links(
                    first = '', 
                    previous = '', 
                    next = '', 
                    last = '', ),
                data = [
                    pulpcore.client.pulp_ansible.models.collection_version_search_list_response.CollectionVersionSearchListResponse(
                        repository = pulpcore.client.pulp_ansible.models.repository_response.RepositoryResponse(
                            pulp_href = '', 
                            prn = '', 
                            pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            pulp_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            versions_href = '', 
                            pulp_labels = {
                                'key' : ''
                                }, 
                            latest_version_href = '', 
                            name = '', 
                            description = '', 
                            retain_repo_versions = 1, 
                            remote = '', ), 
                        collection_version = pulpcore.client.pulp_ansible.models.collection_summary_response.CollectionSummaryResponse(
                            pulp_href = '', 
                            namespace = '', 
                            name = '', 
                            version = '', 
                            requires_ansible = '', 
                            pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            contents = [
                                null
                                ], 
                            dependencies = pulpcore.client.pulp_ansible.models.dependencies.dependencies(), 
                            description = '', 
                            tags = [
                                pulpcore.client.pulp_ansible.models.ansible/tag_response.ansible.TagResponse(
                                    name = '', )
                                ], ), 
                        repository_version = '', 
                        namespace_metadata = null, 
                        is_highest = True, 
                        is_deprecated = True, 
                        is_signed = True, )
                    ]
            )
        else:
            return PaginatedCollectionVersionSearchListResponseList(
        )
        """

    def testPaginatedCollectionVersionSearchListResponseList(self):
        """Test PaginatedCollectionVersionSearchListResponseList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
