[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "openrxn-perovskite-optimizer"
version = "1.0.0"
description = "AI-driven perovskite solar cell optimization platform with OpenAI Agents SDK"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
maintainers = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = [
    "perovskite", "solar-cells", "materials-science", "machine-learning", 
    "optimization", "ai-agents", "quantum-chemistry", "photovoltaics"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core AI/ML Framework
    "openai>=1.35.0",
    "openai-agents>=0.2.0",
    
    # Scientific Computing
    "numpy>=1.25.0",
    "scipy>=1.11.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    
    # Materials Science
    "ase>=3.22.0",
    "pymatgen>=2023.10.11",
    "mp-api>=0.37.0",
    "matminer>=0.9.0",
    
    # Deep Learning
    "torch>=2.1.0",
    "torch-geometric>=2.4.0",
    "dgl>=1.1.0",
    "transformers>=4.35.0",
    
    # Optimization
    "botorch>=0.9.0",
    "optuna>=3.4.0",
    "pygmo>=2.19.0; platform_system != 'Darwin'",
    
    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "bokeh>=3.3.0",
    
    # Database
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    
    # Task Queue
    "celery>=5.3.0",
    "flower>=2.0.0",
    
    # Configuration & Validation
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "click>=8.1.0",
    "rich>=13.6.0",
    "pyyaml>=6.0.0",
    
    # Monitoring & Logging
    "prometheus-client>=0.18.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
    
    # File I/O
    "h5py>=3.10.0",
    "zarr>=2.16.0",
    "openpyxl>=3.1.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "aiofiles>=23.2.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.4.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.88.0",
    # "click-testing>=0.3.0",  # Remove this line, not a real package
    # Code Quality
    "ruff>=0.1.0",
    "black>=23.10.0",
    "mypy>=1.6.0",
    "pyright>=1.1.0",
    "pre-commit>=3.5.0",
    # Development Tools
    "ipython>=8.16.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    # Profiling
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.0",
]

docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "sphinx-click>=5.0.0",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
    "sphinxcontrib-mermaid>=0.9.0",
]

gpu = [
    "torch[cuda]>=2.1.0",
    # "cupy>=12.0.0",  # Removed: cupy does not support macOS
    "nvidia-ml-py>=12.0.0",
]

hpc = [
    "mpi4py>=3.1.0",
    "dask[distributed]>=2023.10.0",
    "ray[default]>=2.8.0",
]

quantum = [
    "qiskit>=0.45.0",
    "cirq>=1.2.0",
    "pennylane>=0.32.0",
]

experimental = [
    "pymeasure>=0.13.0",
    "bluesky>=1.11.0",
    "ophyd>=1.7.0",
]

all = [
    "openrxn-perovskite-optimizer[dev,docs,gpu,hpc,quantum,experimental]"
]

[project.urls]
Homepage = "https://github.com/openrxn/openrxn-perovskite-optimizer"
Documentation = "https://openrxn-perovskite-optimizer.readthedocs.io"
Repository = "https://github.com/openrxn/openrxn-perovskite-optimizer"
Issues = "https://github.com/openrxn/openrxn-perovskite-optimizer/issues"
Changelog = "https://github.com/openrxn/openrxn-perovskite-optimizer/blob/main/CHANGELOG.md"

[project.scripts]
perovskite-optimizer = "openrxn_perovskite_optimizer.cli:main"
pv-opt = "openrxn_perovskite_optimizer.cli:main"
openrxn-pv = "openrxn_perovskite_optimizer.cli:main"

[project.entry-points."openrxn_perovskite_optimizer.agents"]
discovery = "openrxn_perovskite_optimizer.agents.discovery:MaterialsDiscoveryAgent"
synthesis = "openrxn_perovskite_optimizer.agents.synthesis:SynthesisAgent"
characterization = "openrxn_perovskite_optimizer.agents.characterization:CharacterizationAgent"
optimization = "openrxn_perovskite_optimizer.agents.optimization:OptimizationAgent"

[tool.hatch.version]
path = "src/openrxn_perovskite_optimizer/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/openrxn_perovskite_optimizer"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/examples",
    "/scripts",
    "/.pre-commit-config.yaml",
    "/tox.ini",
]

# Environment configurations
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/openrxn_perovskite_optimizer --cov=tests {args}"
cov-report = ["test-cov", "coverage report"]
cov-html = ["test-cov", "coverage html"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/openrxn_perovskite_optimizer tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/_build/html"
serve = "python -m http.server 8000 -d docs/_build/html"
clean = "rm -rf docs/_build"

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/openrxn_perovskite_optimizer",
    "--cov-report=term-missing",
    "--cov-branch",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
    "experimental: marks tests for experimental features",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
branch = true
parallel = true
omit = [
    "src/openrxn_perovskite_optimizer/__about__.py",
]

[tool.coverage.paths]
openrxn_perovskite_optimizer = ["src/openrxn_perovskite_optimizer", "*/openrxn-perovskite-optimizer/src/openrxn_perovskite_optimizer"]
tests = ["tests", "*/openrxn-perovskite-optimizer/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Linting and formatting
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "I",   # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PLC", # pylint conventions
    "PLE", # pylint errors
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "T",   # flake8-debugger
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]
ignore = [
    "A001",  # Variable shadowing built-in
    "A002",  # Argument shadowing built-in
    "A003",  # Class attribute shadowing built-in
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
    "C901",  # Function is too complex
    "E501",  # Line too long (handled by black)
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "S101",  # Use of assert
    "S603",  # subprocess call without shell=True
    "S607",  # Starting a process with a partial executable path
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "S311"]

[tool.ruff.isort]
known-first-party = ["openrxn_perovskite_optimizer"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "ase.*",
    "pymatgen.*",
    "mp_api.*",
    "matminer.*",
    "torch_geometric.*",
    "dgl.*",
    "botorch.*",
    "optuna.*",
    "plotly.*",
    "bokeh.*",
    "celery.*",
    "flower.*",
    "prometheus_client.*",
    "structlog.*",
    "sentry_sdk.*",
]
ignore_missing_imports = true
