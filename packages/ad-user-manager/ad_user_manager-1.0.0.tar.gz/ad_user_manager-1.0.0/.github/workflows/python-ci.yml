name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'

permissions:
  contents: read

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.12", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-xdist
        
        # Install package in development mode
        if [ -f pyproject.toml ]; then
          python -m pip install -e ".[dev,test]"
        elif [ -f requirements.txt ]; then
          python -m pip install -r requirements.txt
        elif [ -f setup.py ]; then
          python -m pip install -e .
        fi
      shell: bash

    - name: Lint with flake8
      run: |
        # Install flake8 if not already installed
        python -m pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        python -m pip install mypy
        mypy . || true  # Don't fail on mypy errors for now
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: lint-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        python -m pip install black isort flake8 bandit safety

    - name: Check code formatting with Black
      run: black --check --diff .

    - name: Check import sorting with isort
      run: isort --check-only --diff .

    - name: Lint with flake8
      run: flake8 .

    - name: Security check with bandit
      run: bandit -r . -f json -o bandit-report.json || true

    - name: Safety check for known vulnerabilities
      run: safety check || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package with twine
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7