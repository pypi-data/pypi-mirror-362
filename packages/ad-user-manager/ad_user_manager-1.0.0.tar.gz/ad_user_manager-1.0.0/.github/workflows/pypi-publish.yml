name: Publish Python Package to PyPI

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Upload to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
    
    - name: Install pypa/build
      run: python -m pip install build --user
    
    - name: Build a binary wheel and a source tarball
      run: python -m build
    
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.repository_owner }}.${{ github.event.repository.name }}
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    if: github.event.inputs.test_pypi == 'true'
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ github.repository_owner }}.${{ github.event.repository.name }}

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  github-release:
    name: Upload to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # strip leading 'v' and anything after first hyphen:
        version=${GITHUB_REF_NAME#v}
        version=${version%%-*}
        echo "Uploading to release '$version'"
        gh release upload "$version" dist/** --repo "${{ github.repository }}"

    - name: Create (if needed) & Upload to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # Get the tag name (drop leading 'v', keep "-alpha.14" etc)
        tag=${GITHUB_REF_NAME#v}
        echo "Using release tag: $tag"

        # If the release doesn't exist yet, create it
        if ! gh release view "$tag" --repo "${{ github.repository }}" >/dev/null 2>&1; then
          echo "Creating release '$tag'"
          gh release create "$tag" \
            --repo "${{ github.repository }}" \
            --title "Release $tag" \
            --notes "Release $tag" \
            --prerelease
        else
          echo "Release '$tag' already exists"
        fi

        # Upload all signed dists
        echo "Uploading artifacts to release '$tag'"
        gh release upload "$tag" dist/** --repo "${{ github.repository }}"
