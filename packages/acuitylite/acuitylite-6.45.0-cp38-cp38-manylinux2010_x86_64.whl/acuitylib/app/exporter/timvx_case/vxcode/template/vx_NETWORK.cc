/****************************************************************************
*   Generated by ACUITY #ACUITY_VERSION#
*   Match timvx #TIMVX_VERSION#
*
*   Neural Network appliction network definition source file
****************************************************************************/
#include "vx_#NETWORK_NAME#.h"

#include <iostream>
#include <fstream>
#include <vector>

namespace
{

char *get_const_data(const char *data_file_name)
{
    std::ifstream fin(data_file_name, std::ios::in | std::ios::binary);
    if (fin)
    {
        fin.seekg(0, std::ios::end);
        int size = fin.tellg();
        fin.seekg(0, std::ios::beg);
        char *buffer = new char [size];
        std::cout<<"File "<<data_file_name <<" size:"<<size<<std::endl;
        fin.read(buffer, size);
        fin.close();
        return buffer;
    }
    else
    {
        std::cout<<"Load file "<<data_file_name <<" failed"<<std::endl;
        return NULL;
    }
}

}  // namespace

namespace #NAMESPACE#
{
uint32_t _infinity = VSI_NN_FLOAT32_INF;
std::vector<std::vector<uint32_t>> #NETWORK_NAME#::input_size_list = {#INPUTS_SIZE#};
std::vector<uint32_t> #NETWORK_NAME#::input_bytes_list = {#INPUTS_SIZE_BYTES#};
std::vector<std::vector<uint32_t>> #NETWORK_NAME#::output_size_list = {#OUTPUTS_SIZE#};
std::vector<std::shared_ptr<tim::vx::Tensor>> #NETWORK_NAME#::inputs_tensor;
std::vector<std::shared_ptr<tim::vx::Tensor>> #NETWORK_NAME#::outputs_tensor;

void #NETWORK_NAME#::construct_graph
    (
    std::shared_ptr<tim::vx::Graph> graph,
    const char *data_file_name
    )
{
    char *coef_data_ptr = get_const_data(data_file_name);

#CONST_TENSOR_INITIALIZER#

#INPUTS_TENSOR#

#OUTPUTS_TENSOR#
#NODE_INITIALIZER#
#CONNECTIONS#

    free(coef_data_ptr);
}

}  // namespace #NAMESPACE#
