# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from .....core.pydantic_utilities import UniversalBaseModel
import typing
from ..ssh.resources.ssh.auth_method import AuthMethod
import pydantic
from ..ssh.resources.ssh.key_exchange_algorithm import KeyExchangeAlgorithm
from ..ssh.resources.ssh.host_key_algorithm import HostKeyAlgorithm
from ..ssh.resources.ssh.cipher_algorithm import CipherAlgorithm
from ..ssh.resources.ssh.mac_algorithm import MacAlgorithm
from .....core.pydantic_utilities import IS_PYDANTIC_V2
from ..smtp.resources.smtp.auth_command import AuthCommand
from ..grpc.resources.grpc.grpc_service import GrpcService


class EnumerateServiceDetails_EnumerateSshDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateSshDetails"] = "EnumerateSshDetails"
    target: str
    version: typing.Optional[str] = None
    auth_methods: typing.Optional[typing.List[AuthMethod]] = pydantic.Field(alias="authMethods", default=None)
    key_exchange_algos: typing.Optional[typing.List[KeyExchangeAlgorithm]] = pydantic.Field(
        alias="keyExchangeAlgos", default=None
    )
    host_key_algos: typing.Optional[typing.List[HostKeyAlgorithm]] = pydantic.Field(alias="hostKeyAlgos", default=None)
    ciphers: typing.Optional[typing.List[CipherAlgorithm]] = None
    macs: typing.Optional[typing.List[MacAlgorithm]] = None
    raw_ascii: typing.Optional[str] = pydantic.Field(alias="rawASCII", default=None)

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateFtpDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateFtpDetails"] = "EnumerateFtpDetails"
    target: str
    successful_connection: typing.Optional[bool] = pydantic.Field(alias="successfulConnection", default=None)
    banner: typing.Optional[str] = None
    tls_implemented: typing.Optional[bool] = pydantic.Field(alias="tlsImplemented", default=None)
    tls_forced: typing.Optional[bool] = pydantic.Field(alias="tlsForced", default=None)
    allows_anonymous_login: typing.Optional[bool] = pydantic.Field(alias="allowsAnonymousLogin", default=None)
    error: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateSmtpDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateSmtpDetails"] = "EnumerateSmtpDetails"
    target: str
    can_connect: typing.Optional[bool] = pydantic.Field(alias="canConnect", default=None)
    tls_supported: typing.Optional[bool] = pydantic.Field(alias="tlsSupported", default=None)
    force_tls: typing.Optional[bool] = pydantic.Field(alias="forceTLS", default=None)
    auth_commands: typing.Optional[typing.List[AuthCommand]] = pydantic.Field(alias="authCommands", default=None)
    allows_unauthenticated_email: typing.Optional[bool] = pydantic.Field(
        alias="allowsUnauthenticatedEmail", default=None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


class EnumerateServiceDetails_EnumerateGrpcDetails(UniversalBaseModel):
    type: typing.Literal["EnumerateGrpcDetails"] = "EnumerateGrpcDetails"
    target: str
    services: typing.List[GrpcService]
    raw_descriptor_set: str = pydantic.Field(alias="rawDescriptorSet")
    reflection_supported: bool = pydantic.Field(alias="reflectionSupported")
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow


EnumerateServiceDetails = typing.Union[
    EnumerateServiceDetails_EnumerateSshDetails,
    EnumerateServiceDetails_EnumerateFtpDetails,
    EnumerateServiceDetails_EnumerateSmtpDetails,
    EnumerateServiceDetails_EnumerateGrpcDetails,
]
