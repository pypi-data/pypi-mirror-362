[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nijika"
version = "1.0.0"
description = "A dynamic, industry-agnostic AI agent framework for seamless multi-provider integration"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Nijika Team", email = "support@nijika.ai"},
]
maintainers = [
    {name = "Nijika Team", email = "support@nijika.ai"},
]
keywords = [
    "ai",
    "agent",
    "framework",
    "automation",
    "workflow",
    "rag",
    "planning",
    "tools",
    "multi-provider",
    "llm",
    "openai",
    "anthropic",
    "google",
    "enterprise",
    "customer-service",
    "finance",
    "healthcare",
    "e-commerce",
    "education",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business",
    "Topic :: System :: Distributed Computing",
]
dependencies = [
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.11.0",
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "google-generativeai>=0.3.0",
    "azure-cognitiveservices-language-textanalytics>=5.2.0",
    "sqlalchemy>=1.4.0",
    "aiosqlite>=0.17.0",
    "pydantic>=1.10.0",
    "pyyaml>=6.0",
    "jinja2>=3.0.0",
    "rich>=12.0.0",
    "click>=8.0.0",
    "python-multipart>=0.0.5",
    "python-jose[cryptography]>=3.3.0",
    "python-dateutil>=2.8.0",
    "requests>=2.28.0",
    "httpx>=0.24.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "pinecone-client>=2.2.0",
    "qdrant-client>=1.6.0",
    "redis>=4.5.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.3.0",
    "tiktoken>=0.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "isort>=5.10.0",
    "pre-commit>=2.17.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-asyncio>=0.3.0",
    "myst-parser>=0.17.0",
]
server = [
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "gunicorn>=20.1.0",
]
monitoring = [
    "prometheus-client>=0.14.0",
    "grafana-client>=3.0.0",
    "datadog>=0.44.0",
]
cloud = [
    "boto3>=1.24.0",
    "google-cloud-storage>=2.5.0",
    "azure-storage-blob>=12.12.0",
]
all = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "isort>=5.10.0",
    "pre-commit>=2.17.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinxcontrib-asyncio>=0.3.0",
    "myst-parser>=0.17.0",
    "fastapi>=0.68.0",
    "uvicorn[standard]>=0.15.0",
    "gunicorn>=20.1.0",
    "prometheus-client>=0.14.0",
    "grafana-client>=3.0.0",
    "datadog>=0.44.0",
    "boto3>=1.24.0",
    "google-cloud-storage>=2.5.0",
    "azure-storage-blob>=12.12.0",
]

[project.scripts]
nijika = "nijika.cli:main"
nijika-server = "nijika.server:main"
nijika-config = "nijika.config:create_default_config_file"

[project.urls]
Homepage = "https://github.com/nijika-ai/nijika"
Documentation = "https://docs.nijika.ai"
Repository = "https://github.com/nijika-ai/nijika"
"Bug Reports" = "https://github.com/nijika-ai/nijika/issues"
Changelog = "https://github.com/nijika-ai/nijika/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["nijika*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
nijika = [
    "templates/*.yaml",
    "templates/*.json",
    "static/*",
    "ui/templates/*",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["nijika"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["nijika"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
] 