{
    '2d9a1887155faa0872facd1c0a41b1ce': [
        {
            'cmd': 'ops project -hf log',
            'res': '$ ops project -hf log\n'
            '\n'
            '\n'
            '\x1b[1;38;5;11mCreating A '
            'Project With Resources\n'
            '\x1b[1;38;5;11m─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n'
            '\x1b[0m\n'
            'This plugin is helper for '
            'creating a project directory, '
            'incl. required local resources. '
            'Your system remains unchanged, '
            'except <project_dir> and '
            '<conda_prefix>.\n'
            '\x1b[0m\n'
            'It provides an '
            '\x1b[0;38;5;5minstall\x1b[0m '
            'action (implicitely by '
            'providing the '
            '--init_resource_match or '
            '--init_at switch)\n'
            '\x1b[0m\n'
            'Default action is: '
            '\x1b[0;38;5;5mlist\x1b[0m (show '
            'installable resources, -m '
            '<match> filters).\n'
            '\x1b[0m\n'
            'At install we will '
            '(re-)initialize a '
            '"project_dir", at location '
            'given with --init_at (default: '
            "'.'), incl:\n"
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ '
            '\x1b[0mInstalling available '
            'resources, like databases and '
            'tools within a given directory '
            '(conda_prefix)\n'
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ \x1b[0mCreating '
            'resource start wrappers in '
            '<project_dir>/bin\n'
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ '
            '\x1b[0mGenerating default '
            'config when required\n'
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ '
            '\x1b[0mOptionally generating '
            'systemd unit files (e.g. via: '
            '--init_create_all_units)\n'
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ '
            '\x1b[0mInstances support: '
            'export <name>_instances=x '
            "before running and you'll get x "
            'systemd units created, for '
            'startable commands.\n'
            '\x1b[0;38;5;5m\n'
            '\x1b[0;38;5;5m  '
            '\x1b[0;38;5;5mExample: export '
            'client_instances=10; ops p -irm '
            'client -icau\n'
            '\x1b[0;38;5;5m  '
            '\x1b[0;38;5;5m(Name of a '
            'resource: ops p [-m '
            '<match>])\x1b[0m\n'
            '\x1b[0m\n'
            '\x1b[0;38;5;5m❖ \x1b[0mAny '
            'other parametrization: Via '
            'environ variables Check key '
            'environ vars in list output and '
            'also doc text.\n'
            '\x1b[0m\n'
            'Privilege escalation is not '
            'required for any of these '
            'steps.\n'
            '\x1b[0m\n'
            '\n'
            'All supported command line '
            'flags [matching '
            '\x1b[1;32mlog\x1b[0m]:\n'
            '\x1b[1;34mabsl.logging\n'
            '\x1b[0;32m        '
            '\x1b[1;33malsologtostderr          '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'also log to stderr? \n'
            '\x1b[0;32m        '
            '\x1b[1;33mlog_dir                  '
            "\x1b[0;31m''\x1b[0;38;5;245m\n"
            'directory to write logfiles '
            'into \n'
            '\x1b[0;32m        '
            '\x1b[1;33mlogger_levels            '
            "\x1b[0;31m''\x1b[0;38;5;245m\n"
            'Specify log level of loggers. '
            'The format is a CSV list of '
            '`name:level`. Where `name` is '
            'the logger name used with '
            '`logging.getLogger()`, and '
            '`level` is a level name  (INFO, '
            'DEBUG, etc). e.g. '
            '`myapp.foo:INFO,other.logger:DEBUG` \n'
            '\x1b[0;32m        '
            '\x1b[1;33mlogtostderr              '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Should only log to stderr? \n'
            '\x1b[0;32m        '
            '\x1b[1;33mshowprefixforinfo        '
            '\x1b[0;31mTrue\x1b[0;38;5;245m\n'
            'If False, do not prepend prefix '
            "to info messages when it's "
            'logged to stderr, --verbosity '
            'is set to INFO level, and '
            'python logging is used. \n'
            '\x1b[0;32m        '
            '\x1b[1;33mstderrthreshold          '
            '\x1b[0;31mfatal\x1b[0;38;5;245m\n'
            'log messages at this level, or '
            'more severe, to stderr in '
            'addition to the logfile.  '
            "Possible values are 'debug', "
            "'info', 'warning', 'error', and "
            "'fatal'.  Obsoletes "
            '--alsologtostderr. Using '
            '--alsologtostderr cancels the '
            'effect of this flag. Please '
            'also note that this flag is '
            'subject to --verbosity and '
            'requires logfile not be '
            'stderr. \n'
            '\x1b[0;32mv       '
            '\x1b[1;33mverbosity                '
            '\x1b[0;31m-1\x1b[0;38;5;245m\n'
            'Logging verbosity level. '
            'Messages logged at this level '
            'or lower will be included. Set '
            'to 1 for debug logging. If the '
            'flag was not set or supplied, '
            'the value will be changed from '
            'the default of -1 (warning) to '
            '0 (info) after flags are '
            'parsed. \n'
            '\x1b[1;34mdevapp.tools\n'
            '\x1b[0;32mdasdi   '
            '\x1b[1;33msensitive_data_identifiers '
            '\x1b[0;31mpass.*|.*secret.*\x1b[0;38;5;245m\n'
            'Regexp which helps identify '
            'keys carrying sensitive '
            'information (for filtering out '
            'of logs). Case insensitive '
            'matching. \n'
            '\x1b[1;34mstructlogging.sl\n'
            '\x1b[0;32mlatn    '
            '\x1b[1;33mlog_add_thread_name      '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Add name of thread \n'
            '\x1b[0;32mldcnt   '
            '\x1b[1;33mlog_dev_coljson_no_truecolor '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'NOT use true color for styles '
            '(e.g. when no terminal '
            'support) \n'
            '\x1b[0;32mldcs    '
            '\x1b[1;33mlog_dev_coljson_style    '
            '\x1b[0;31mdark\x1b[0;38;5;245m\n'
            ' Pygments style for colorized '
            'json. To use the 16 base colors '
            'and leave it to the terminal '
            'palette how to render: Choose '
            'light or dark '
            '<abap|algol|algol_nu|arduino|autumn|ax|borland|bw|colorful|dark|default|dracula|emacs|friendly|friendly_grayscale|fruity|gruvbox-dark|gruvbox-light|igor|inkpot|light|lilypond|lovelace|manni|material|monokai|murphy|native|one-dark|paraiso-dark|paraiso-light|pastie|perldoc|rainbow_dash|rrt|sas|solarized-dark|solarized-light|stata|stata-dark|stata-light|tango|trac|vim|vs|xcode|zenburn>\n'
            '\x1b[0;32mlddnm   '
            '\x1b[1;33mlog_dev_dimm_no_match    '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Dimm not matching lines (in '
            'colored output only) \n'
            '\x1b[0;32mldfc    '
            '\x1b[1;33mlog_dev_fmt_coljson      '
            '\x1b[0;31mjson,payload\x1b[0;38;5;245m\n'
            'List of keys to log as json. \n'
            '\x1b[0;32mldm     '
            '\x1b[1;33mlog_dev_match            '
            "\x1b[0;31m''\x1b[0;38;5;245m\n"
            'Regex to search in loglines - '
            'will be highlighted. \n'
            '\x1b[0;32mlf      '
            '\x1b[1;33mlog_fmt                  '
            '\x1b[0;31mauto\x1b[0;38;5;245m\n'
            'Force a log format. 0: off, 1: '
            'auto, 2: plain, 3: '
            'plain_no_colors, 4: json.   '
            '\x1b[0;38;5;241m\n'
            '\U0001f7e2 Json logging has far '
            'better performance then the '
            'colored console dev log.\n'
            'You can pipe e.g. journalctl '
            'output into "ops log_view -fn '
            '-" to get dev logging from '
            'json.\n'
            '\n'
            'This value can be set away from '
            'auto via export log_fmt as '
            'well.\n'
            '\x1b[0;32mll      '
            '\x1b[1;33mlog_level                '
            '\x1b[0;31m20\x1b[0;38;5;245m\n'
            'Log level (10: debug, 20: info, '
            '...). You may also say '
            'log_level=error \n'
            '\x1b[0;32mlsf     '
            '\x1b[1;33mlog_stack_filter         '
            '\x1b[0;31mfn not contains '
            'frozen and fn not contains '
            '/rx/\x1b[0;38;5;245m\n'
            'When logging error tracebacks '
            'this is an optional filter. '
            'Keywords:fn: filename, frame: '
            'frame nr, line: line nr, name: '
            'name of callable  '
            '\x1b[0;38;5;241m\n'
            'Example: fn contains project '
            'and frame lt 1 (axiros/pycond '
            'expression)\n'
            '\x1b[0;32mlsmf    '
            '\x1b[1;33mlog_stack_max_frames     '
            '\x1b[0;31m3\x1b[0;38;5;245m\n'
            'Maximum Frames Shown in '
            'Terminal Stack Traces \n'
            '\x1b[0;32mltln    '
            '\x1b[1;33mlog_thread_local_names   '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Prefer thread local '
            'logger_name, when set \n'
            '\x1b[0;32mltf     '
            '\x1b[1;33mlog_time_fmt             '
            '\x1b[0;31m%m-%d '
            '%H:%M:%S\x1b[0;38;5;245m\n'
            'Log time format. Shortcuts: '
            '"ISO", "dt" \n'
            '\x1b[0;32mlts     '
            '\x1b[1;33mlog_to_stdout            '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Default: stderr \n'
            '\x1b[1;34mops_devapp.project\n'
            '\x1b[0;32mappc    '
            '\x1b[1;33madd_post_process_cmd     '
            "\x1b[0;31m''\x1b[0;38;5;245m\n"
            'Add this to all commands which '
            'have systemd service units. '
            'Intended for output '
            'redirection. Not applied when '
            'stdout is a tty.\n'
            "Example: -appc='2>&1 | "
            'rotatelogs -e -n1 "$logfile" '
            "1M' ($logfile defined in "
            'wrapper -> use single quotes).\n'
            'Tip: Use rotatelogs only on '
            'powers of 10 - spotted problems '
            'with 200M. Use 100M or 1G in '
            'that case. \n'
            '\x1b[0;32mloref   '
            '\x1b[1;33mlog_resources_fully      '
            '\x1b[0;31mFalse\x1b[0;38;5;245m\n'
            'Always output all settings of '
            'resources when logging \n'
            '\x1b[0m',
        }
    ]
}
