# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from odin_sdk.models.job_id import JobId
from typing import Optional, Set
from typing_extensions import Self

class JobStatus(BaseModel):
    """
    JobStatus
    """ # noqa: E501
    job_type: StrictStr = Field(description="Type of job.")
    uid: StrictStr = Field(description="User ID of the user who created the job.")
    document_keys: List[StrictStr] = Field(description="List of document keys used in the job.")
    job_id: JobId
    use_job_id_path: StrictBool = Field(description="Whether to use the job ID path for storage. Set automatically by the system.")
    job_name: StrictStr = Field(description="Name of the job output.")
    last_updated: Union[StrictFloat, StrictInt] = Field(description="Timestamp of the last update to the job, in seconds.")
    job_status: StrictStr = Field(description="Status of the job.")
    project_id: StrictStr = Field(description="Project ID of the project the job belongs to.")
    result_type: StrictStr = Field(description="File extension of the job output.")
    credits_used: Optional[StrictInt] = None
    extra_info: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["job_type", "uid", "document_keys", "job_id", "use_job_id_path", "job_name", "last_updated", "job_status", "project_id", "result_type", "credits_used", "extra_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['job_id'] = self.job_id.to_dict()
        # set to None if credits_used (nullable) is None
        # and model_fields_set contains the field
        if self.credits_used is None and "credits_used" in self.model_fields_set:
            _dict['credits_used'] = None

        # set to None if extra_info (nullable) is None
        # and model_fields_set contains the field
        if self.extra_info is None and "extra_info" in self.model_fields_set:
            _dict['extra_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_type": obj.get("job_type"),
            "uid": obj.get("uid"),
            "document_keys": obj.get("document_keys"),
            "job_id": JobId.from_dict(obj["job_id"]) if obj.get("job_id") is not None else None,
            "use_job_id_path": obj.get("use_job_id_path"),
            "job_name": obj.get("job_name"),
            "last_updated": obj.get("last_updated"),
            "job_status": obj.get("job_status"),
            "project_id": obj.get("project_id"),
            "result_type": obj.get("result_type"),
            "credits_used": obj.get("credits_used"),
            "extra_info": obj.get("extra_info")
        })
        return _obj


