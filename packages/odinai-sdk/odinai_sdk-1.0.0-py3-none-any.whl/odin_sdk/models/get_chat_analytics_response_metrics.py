# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from odin_sdk.models.document_analytic import DocumentAnalytic
from typing import Optional, Set
from typing_extensions import Self

class GetChatAnalyticsResponseMetrics(BaseModel):
    """
    GetChatAnalyticsResponseMetrics
    """ # noqa: E501
    average_response_time: Union[StrictFloat, StrictInt]
    average_queries_per_chat: Union[StrictFloat, StrictInt]
    average_query_token_count: Union[StrictFloat, StrictInt]
    average_response_token_count: Union[StrictFloat, StrictInt]
    total_upvotes: StrictInt
    total_downvotes: StrictInt
    total_messages: StrictInt
    average_images_generated: StrictInt
    total_document_usage: StrictInt
    total_kb_search: StrictInt
    total_images_generated: StrictInt
    top_keywords: List[Any]
    top_questions: List[Any]
    regenerated_requests: StrictInt
    users_message_counts: Dict[str, Any]
    top_documents: List[DocumentAnalytic]
    __properties: ClassVar[List[str]] = ["average_response_time", "average_queries_per_chat", "average_query_token_count", "average_response_token_count", "total_upvotes", "total_downvotes", "total_messages", "average_images_generated", "total_document_usage", "total_kb_search", "total_images_generated", "top_keywords", "top_questions", "regenerated_requests", "users_message_counts", "top_documents"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetChatAnalyticsResponseMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in top_documents (list)
        _items = []
        if self.top_documents:
            for _item_top_documents in self.top_documents:
                if _item_top_documents:
                    _items.append(_item_top_documents.to_dict())
            _dict['top_documents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetChatAnalyticsResponseMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average_response_time": obj.get("average_response_time"),
            "average_queries_per_chat": obj.get("average_queries_per_chat"),
            "average_query_token_count": obj.get("average_query_token_count"),
            "average_response_token_count": obj.get("average_response_token_count"),
            "total_upvotes": obj.get("total_upvotes"),
            "total_downvotes": obj.get("total_downvotes"),
            "total_messages": obj.get("total_messages"),
            "average_images_generated": obj.get("average_images_generated"),
            "total_document_usage": obj.get("total_document_usage"),
            "total_kb_search": obj.get("total_kb_search"),
            "total_images_generated": obj.get("total_images_generated"),
            "top_keywords": obj.get("top_keywords"),
            "top_questions": obj.get("top_questions"),
            "regenerated_requests": obj.get("regenerated_requests"),
            "users_message_counts": obj.get("users_message_counts"),
            "top_documents": [DocumentAnalytic.from_dict(_item) for _item in obj["top_documents"]] if obj.get("top_documents") is not None else None
        })
        return _obj


