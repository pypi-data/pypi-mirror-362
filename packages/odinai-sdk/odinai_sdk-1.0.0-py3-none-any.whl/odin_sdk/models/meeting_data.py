# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from odin_sdk.models.meeting_info import MeetingInfo
from odin_sdk.models.status_change import StatusChange
from typing import Optional, Set
from typing_extensions import Self

class MeetingData(BaseModel):
    """
    MeetingData
    """ # noqa: E501
    audio_size: Union[StrictFloat, StrictInt]
    credits_used: StrictInt
    odin_attendees: Optional[List[Any]] = None
    is_calendar_meeting: StrictBool
    meeting_url: Optional[Dict[str, Any]] = None
    media_retention_end: Optional[StrictStr] = None
    attendee_emails: List[StrictStr]
    status_code: StrictStr
    video_url: StrictStr
    meeting_info: MeetingInfo
    join_at: Optional[StrictStr] = None
    video_size: Union[StrictFloat, StrictInt]
    calendar_meetings: List[Dict[str, Any]]
    timestamp: Union[StrictFloat, StrictInt]
    meeting_participants: List[Any]
    recording: Optional[StrictStr] = None
    meeting_duration: Union[StrictFloat, StrictInt]
    meeting_metadata: Optional[StrictStr] = None
    status_changes: List[StatusChange]
    id: StrictStr
    __properties: ClassVar[List[str]] = ["audio_size", "credits_used", "odin_attendees", "is_calendar_meeting", "meeting_url", "media_retention_end", "attendee_emails", "status_code", "video_url", "meeting_info", "join_at", "video_size", "calendar_meetings", "timestamp", "meeting_participants", "recording", "meeting_duration", "meeting_metadata", "status_changes", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeetingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meeting_info
        if self.meeting_info:
            _dict['meeting_info'] = self.meeting_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in status_changes (list)
        _items = []
        if self.status_changes:
            for _item_status_changes in self.status_changes:
                if _item_status_changes:
                    _items.append(_item_status_changes.to_dict())
            _dict['status_changes'] = _items
        # set to None if odin_attendees (nullable) is None
        # and model_fields_set contains the field
        if self.odin_attendees is None and "odin_attendees" in self.model_fields_set:
            _dict['odin_attendees'] = None

        # set to None if meeting_url (nullable) is None
        # and model_fields_set contains the field
        if self.meeting_url is None and "meeting_url" in self.model_fields_set:
            _dict['meeting_url'] = None

        # set to None if media_retention_end (nullable) is None
        # and model_fields_set contains the field
        if self.media_retention_end is None and "media_retention_end" in self.model_fields_set:
            _dict['media_retention_end'] = None

        # set to None if join_at (nullable) is None
        # and model_fields_set contains the field
        if self.join_at is None and "join_at" in self.model_fields_set:
            _dict['join_at'] = None

        # set to None if recording (nullable) is None
        # and model_fields_set contains the field
        if self.recording is None and "recording" in self.model_fields_set:
            _dict['recording'] = None

        # set to None if meeting_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.meeting_metadata is None and "meeting_metadata" in self.model_fields_set:
            _dict['meeting_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeetingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audio_size": obj.get("audio_size"),
            "credits_used": obj.get("credits_used"),
            "odin_attendees": obj.get("odin_attendees"),
            "is_calendar_meeting": obj.get("is_calendar_meeting"),
            "meeting_url": obj.get("meeting_url"),
            "media_retention_end": obj.get("media_retention_end"),
            "attendee_emails": obj.get("attendee_emails"),
            "status_code": obj.get("status_code"),
            "video_url": obj.get("video_url"),
            "meeting_info": MeetingInfo.from_dict(obj["meeting_info"]) if obj.get("meeting_info") is not None else None,
            "join_at": obj.get("join_at"),
            "video_size": obj.get("video_size"),
            "calendar_meetings": obj.get("calendar_meetings"),
            "timestamp": obj.get("timestamp"),
            "meeting_participants": obj.get("meeting_participants"),
            "recording": obj.get("recording"),
            "meeting_duration": obj.get("meeting_duration"),
            "meeting_metadata": obj.get("meeting_metadata"),
            "status_changes": [StatusChange.from_dict(_item) for _item in obj["status_changes"]] if obj.get("status_changes") is not None else None,
            "id": obj.get("id")
        })
        return _obj


