# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OnboardingTeamInfo(BaseModel):
    """
    OnboardingTeamInfo
    """ # noqa: E501
    has_team: StrictBool = Field(alias="hasTeam")
    team_name: Optional[StrictStr] = Field(default=None, alias="teamName")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    company_size: Optional[StrictStr] = Field(default=None, alias="companySize")
    department: Optional[StrictStr] = None
    member_count: Optional[StrictInt] = Field(default=None, alias="memberCount")
    __properties: ClassVar[List[str]] = ["hasTeam", "teamName", "companyName", "companySize", "department", "memberCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OnboardingTeamInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if team_name (nullable) is None
        # and model_fields_set contains the field
        if self.team_name is None and "team_name" in self.model_fields_set:
            _dict['teamName'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if company_size (nullable) is None
        # and model_fields_set contains the field
        if self.company_size is None and "company_size" in self.model_fields_set:
            _dict['companySize'] = None

        # set to None if department (nullable) is None
        # and model_fields_set contains the field
        if self.department is None and "department" in self.model_fields_set:
            _dict['department'] = None

        # set to None if member_count (nullable) is None
        # and model_fields_set contains the field
        if self.member_count is None and "member_count" in self.model_fields_set:
            _dict['memberCount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OnboardingTeamInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hasTeam": obj.get("hasTeam"),
            "teamName": obj.get("teamName"),
            "companyName": obj.get("companyName"),
            "companySize": obj.get("companySize"),
            "department": obj.get("department"),
            "memberCount": obj.get("memberCount")
        })
        return _obj


