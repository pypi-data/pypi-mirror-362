# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExecuteScriptResponse(BaseModel):
    """
    Response model for script execution
    """ # noqa: E501
    success: StrictBool
    result: Optional[Any] = None
    error: Optional[StrictStr] = None
    execution_time_ms: Optional[StrictInt] = None
    version: StrictStr
    lambda_function_name: StrictStr
    execution_id: Optional[StrictInt] = None
    stdout: Optional[StrictStr] = None
    stderr: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["success", "result", "error", "execution_time_ms", "version", "lambda_function_name", "execution_id", "stdout", "stderr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecuteScriptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if execution_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.execution_time_ms is None and "execution_time_ms" in self.model_fields_set:
            _dict['execution_time_ms'] = None

        # set to None if execution_id (nullable) is None
        # and model_fields_set contains the field
        if self.execution_id is None and "execution_id" in self.model_fields_set:
            _dict['execution_id'] = None

        # set to None if stdout (nullable) is None
        # and model_fields_set contains the field
        if self.stdout is None and "stdout" in self.model_fields_set:
            _dict['stdout'] = None

        # set to None if stderr (nullable) is None
        # and model_fields_set contains the field
        if self.stderr is None and "stderr" in self.model_fields_set:
            _dict['stderr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecuteScriptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "result": AnyOf.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "error": obj.get("error"),
            "execution_time_ms": obj.get("execution_time_ms"),
            "version": obj.get("version"),
            "lambda_function_name": obj.get("lambda_function_name"),
            "execution_id": obj.get("execution_id"),
            "stdout": obj.get("stdout"),
            "stderr": obj.get("stderr")
        })
        return _obj


