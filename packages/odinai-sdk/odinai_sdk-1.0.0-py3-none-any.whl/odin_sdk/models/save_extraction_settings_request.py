# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SaveExtractionSettingsRequest(BaseModel):
    """
    SaveExtractionSettingsRequest
    """ # noqa: E501
    pii_masking_enabled: Optional[StrictBool] = Field(default=False, description="Whether PII masking is enabled")
    custom_extraction_config: Optional[List[Dict[str, Any]]] = None
    extraction_results: Optional[List[Dict[str, Any]]] = None
    sample_document_id: Optional[StrictStr] = None
    apply_re_validation: Optional[StrictBool] = Field(default=False, description="Whether to apply re-validation")
    __properties: ClassVar[List[str]] = ["pii_masking_enabled", "custom_extraction_config", "extraction_results", "sample_document_id", "apply_re_validation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SaveExtractionSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if custom_extraction_config (nullable) is None
        # and model_fields_set contains the field
        if self.custom_extraction_config is None and "custom_extraction_config" in self.model_fields_set:
            _dict['custom_extraction_config'] = None

        # set to None if extraction_results (nullable) is None
        # and model_fields_set contains the field
        if self.extraction_results is None and "extraction_results" in self.model_fields_set:
            _dict['extraction_results'] = None

        # set to None if sample_document_id (nullable) is None
        # and model_fields_set contains the field
        if self.sample_document_id is None and "sample_document_id" in self.model_fields_set:
            _dict['sample_document_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SaveExtractionSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pii_masking_enabled": obj.get("pii_masking_enabled") if obj.get("pii_masking_enabled") is not None else False,
            "custom_extraction_config": obj.get("custom_extraction_config"),
            "extraction_results": obj.get("extraction_results"),
            "sample_document_id": obj.get("sample_document_id"),
            "apply_re_validation": obj.get("apply_re_validation") if obj.get("apply_re_validation") is not None else False
        })
        return _obj


