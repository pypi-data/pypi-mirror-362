# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateTeamRequest(BaseModel):
    """
    CreateTeamRequest
    """ # noqa: E501
    active: Optional[StrictBool] = None
    name: StrictStr
    owner: Optional[StrictStr] = None
    allowed_seats: Optional[StrictInt] = None
    email_domain: Optional[StrictStr] = None
    auto_add_users_by_domain: Optional[StrictBool] = None
    credits: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["active", "name", "owner", "allowed_seats", "email_domain", "auto_add_users_by_domain", "credits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTeamRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        # set to None if allowed_seats (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_seats is None and "allowed_seats" in self.model_fields_set:
            _dict['allowed_seats'] = None

        # set to None if email_domain (nullable) is None
        # and model_fields_set contains the field
        if self.email_domain is None and "email_domain" in self.model_fields_set:
            _dict['email_domain'] = None

        # set to None if auto_add_users_by_domain (nullable) is None
        # and model_fields_set contains the field
        if self.auto_add_users_by_domain is None and "auto_add_users_by_domain" in self.model_fields_set:
            _dict['auto_add_users_by_domain'] = None

        # set to None if credits (nullable) is None
        # and model_fields_set contains the field
        if self.credits is None and "credits" in self.model_fields_set:
            _dict['credits'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTeamRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "name": obj.get("name"),
            "owner": obj.get("owner"),
            "allowed_seats": obj.get("allowed_seats"),
            "email_domain": obj.get("email_domain"),
            "auto_add_users_by_domain": obj.get("auto_add_users_by_domain"),
            "credits": obj.get("credits")
        })
        return _obj


