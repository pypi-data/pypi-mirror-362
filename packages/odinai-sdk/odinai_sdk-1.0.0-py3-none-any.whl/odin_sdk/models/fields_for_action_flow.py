# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.dropdown_details import DropdownDetails
from typing import Optional, Set
from typing_extensions import Self

class FieldsForActionFlow(BaseModel):
    """
    FieldsForActionFlow
    """ # noqa: E501
    info_key: StrictStr = Field(description="The key/variable name for the field. For example, 'destination_email'.")
    description: StrictStr = Field(description="The description of the field for the LLM. For example, 'The email address to send the report to.'")
    default_from: StrictStr = Field(description="Explanation of where to take the default value from for the LLM. For example, 'User's messages.'")
    required: StrictBool = Field(description="Whether the field is required or not.")
    hr_name: StrictStr = Field(description="The human readable name of the field. For example, 'Destination Email'.")
    provide_as: Optional[StrictStr] = None
    default_value: Optional[Any] = Field(default=None, description="The default value of the field.")
    dropdown_details: Optional[List[DropdownDetails]] = None
    __properties: ClassVar[List[str]] = ["info_key", "description", "default_from", "required", "hr_name", "provide_as", "default_value", "dropdown_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldsForActionFlow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['default_value'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dropdown_details (list)
        _items = []
        if self.dropdown_details:
            for _item_dropdown_details in self.dropdown_details:
                if _item_dropdown_details:
                    _items.append(_item_dropdown_details.to_dict())
            _dict['dropdown_details'] = _items
        # set to None if provide_as (nullable) is None
        # and model_fields_set contains the field
        if self.provide_as is None and "provide_as" in self.model_fields_set:
            _dict['provide_as'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['default_value'] = None

        # set to None if dropdown_details (nullable) is None
        # and model_fields_set contains the field
        if self.dropdown_details is None and "dropdown_details" in self.model_fields_set:
            _dict['dropdown_details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldsForActionFlow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "info_key": obj.get("info_key"),
            "description": obj.get("description"),
            "default_from": obj.get("default_from"),
            "required": obj.get("required"),
            "hr_name": obj.get("hr_name"),
            "provide_as": obj.get("provide_as"),
            "default_value": AnyOf.from_dict(obj["default_value"]) if obj.get("default_value") is not None else None,
            "dropdown_details": [DropdownDetails.from_dict(_item) for _item in obj["dropdown_details"]] if obj.get("dropdown_details") is not None else None
        })
        return _obj


