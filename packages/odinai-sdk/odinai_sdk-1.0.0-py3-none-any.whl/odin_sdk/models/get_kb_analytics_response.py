# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from odin_sdk.models.daily_words_docs_added import DailyWordsDocsAdded
from odin_sdk.models.doc_type_count import DocTypeCount
from odin_sdk.models.kb_category import KBCategory
from odin_sdk.models.source_info import SourceInfo
from typing import Optional, Set
from typing_extensions import Self

class GetKbAnalyticsResponse(BaseModel):
    """
    GetKbAnalyticsResponse
    """ # noqa: E501
    doc_type_count: List[DocTypeCount]
    average_word_count_per_doc: Union[StrictFloat, StrictInt]
    words_and_docs_added_per_day: List[DailyWordsDocsAdded]
    categories: List[KBCategory] = Field(alias="Categories")
    sources_info: List[SourceInfo]
    __properties: ClassVar[List[str]] = ["doc_type_count", "average_word_count_per_doc", "words_and_docs_added_per_day", "Categories", "sources_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetKbAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in doc_type_count (list)
        _items = []
        if self.doc_type_count:
            for _item_doc_type_count in self.doc_type_count:
                if _item_doc_type_count:
                    _items.append(_item_doc_type_count.to_dict())
            _dict['doc_type_count'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in words_and_docs_added_per_day (list)
        _items = []
        if self.words_and_docs_added_per_day:
            for _item_words_and_docs_added_per_day in self.words_and_docs_added_per_day:
                if _item_words_and_docs_added_per_day:
                    _items.append(_item_words_and_docs_added_per_day.to_dict())
            _dict['words_and_docs_added_per_day'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['Categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources_info (list)
        _items = []
        if self.sources_info:
            for _item_sources_info in self.sources_info:
                if _item_sources_info:
                    _items.append(_item_sources_info.to_dict())
            _dict['sources_info'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetKbAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_type_count": [DocTypeCount.from_dict(_item) for _item in obj["doc_type_count"]] if obj.get("doc_type_count") is not None else None,
            "average_word_count_per_doc": obj.get("average_word_count_per_doc"),
            "words_and_docs_added_per_day": [DailyWordsDocsAdded.from_dict(_item) for _item in obj["words_and_docs_added_per_day"]] if obj.get("words_and_docs_added_per_day") is not None else None,
            "Categories": [KBCategory.from_dict(_item) for _item in obj["Categories"]] if obj.get("Categories") is not None else None,
            "sources_info": [SourceInfo.from_dict(_item) for _item in obj["sources_info"]] if obj.get("sources_info") is not None else None
        })
        return _obj


