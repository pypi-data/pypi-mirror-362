# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CrawlConfigResponse(BaseModel):
    """
    CrawlConfigResponse
    """ # noqa: E501
    id: StrictStr
    crawl_name: StrictStr
    root_url: StrictStr
    created_at: datetime
    updated_at: datetime
    project_id: StrictStr
    user_id: StrictStr
    repeat: Optional[Union[StrictFloat, StrictInt]]
    limit_to_root_domain: StrictBool
    limit_to_domains: List[StrictStr]
    limit_to_patterns: List[StrictStr]
    download_files: StrictBool
    max_depth: StrictInt
    max_pages: StrictInt
    strategy: StrictStr
    keywords_for_best_first: List[StrictStr]
    keywords_weight: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["id", "crawl_name", "root_url", "created_at", "updated_at", "project_id", "user_id", "repeat", "limit_to_root_domain", "limit_to_domains", "limit_to_patterns", "download_files", "max_depth", "max_pages", "strategy", "keywords_for_best_first", "keywords_weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrawlConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if repeat (nullable) is None
        # and model_fields_set contains the field
        if self.repeat is None and "repeat" in self.model_fields_set:
            _dict['repeat'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrawlConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "crawl_name": obj.get("crawl_name"),
            "root_url": obj.get("root_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "project_id": obj.get("project_id"),
            "user_id": obj.get("user_id"),
            "repeat": obj.get("repeat"),
            "limit_to_root_domain": obj.get("limit_to_root_domain"),
            "limit_to_domains": obj.get("limit_to_domains"),
            "limit_to_patterns": obj.get("limit_to_patterns"),
            "download_files": obj.get("download_files"),
            "max_depth": obj.get("max_depth"),
            "max_pages": obj.get("max_pages"),
            "strategy": obj.get("strategy"),
            "keywords_for_best_first": obj.get("keywords_for_best_first"),
            "keywords_weight": obj.get("keywords_weight")
        })
        return _obj


