# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TaskStatsModel(BaseModel):
    """
    TaskStatsModel
    """ # noqa: E501
    task_name: StrictStr
    total_executions: StrictInt
    successful_executions: StrictInt
    failed_executions: StrictInt
    terminated_executions: Optional[StrictInt] = 0
    avg_duration: Optional[Union[StrictFloat, StrictInt]] = None
    median_duration: Optional[Union[StrictFloat, StrictInt]] = None
    min_duration: Optional[Union[StrictFloat, StrictInt]] = None
    max_duration: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["task_name", "total_executions", "successful_executions", "failed_executions", "terminated_executions", "avg_duration", "median_duration", "min_duration", "max_duration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskStatsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if avg_duration (nullable) is None
        # and model_fields_set contains the field
        if self.avg_duration is None and "avg_duration" in self.model_fields_set:
            _dict['avg_duration'] = None

        # set to None if median_duration (nullable) is None
        # and model_fields_set contains the field
        if self.median_duration is None and "median_duration" in self.model_fields_set:
            _dict['median_duration'] = None

        # set to None if min_duration (nullable) is None
        # and model_fields_set contains the field
        if self.min_duration is None and "min_duration" in self.model_fields_set:
            _dict['min_duration'] = None

        # set to None if max_duration (nullable) is None
        # and model_fields_set contains the field
        if self.max_duration is None and "max_duration" in self.model_fields_set:
            _dict['max_duration'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskStatsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_name": obj.get("task_name"),
            "total_executions": obj.get("total_executions"),
            "successful_executions": obj.get("successful_executions"),
            "failed_executions": obj.get("failed_executions"),
            "terminated_executions": obj.get("terminated_executions") if obj.get("terminated_executions") is not None else 0,
            "avg_duration": obj.get("avg_duration"),
            "median_duration": obj.get("median_duration"),
            "min_duration": obj.get("min_duration"),
            "max_duration": obj.get("max_duration")
        })
        return _obj


