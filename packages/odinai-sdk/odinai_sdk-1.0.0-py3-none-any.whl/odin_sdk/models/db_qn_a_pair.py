# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DbQnAPair(BaseModel):
    """
    DbQnAPair
    """ # noqa: E501
    question: StrictStr
    answer: StrictStr
    type: Optional[StrictStr] = None
    id: StrictStr
    status: Optional[StrictStr] = None
    created_at: Optional[Union[StrictFloat, StrictInt]] = None
    context: Optional[StrictStr] = None
    associated_file: Optional[StrictStr] = None
    auto_generated: Optional[StrictBool] = None
    updated_at: Optional[Union[StrictFloat, StrictInt]] = None
    project_id: Optional[StrictStr] = None
    embedding_record_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["question", "answer", "type", "id", "status", "created_at", "context", "associated_file", "auto_generated", "updated_at", "project_id", "embedding_record_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbQnAPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if context (nullable) is None
        # and model_fields_set contains the field
        if self.context is None and "context" in self.model_fields_set:
            _dict['context'] = None

        # set to None if associated_file (nullable) is None
        # and model_fields_set contains the field
        if self.associated_file is None and "associated_file" in self.model_fields_set:
            _dict['associated_file'] = None

        # set to None if auto_generated (nullable) is None
        # and model_fields_set contains the field
        if self.auto_generated is None and "auto_generated" in self.model_fields_set:
            _dict['auto_generated'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if embedding_record_id (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_record_id is None and "embedding_record_id" in self.model_fields_set:
            _dict['embedding_record_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbQnAPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "question": obj.get("question"),
            "answer": obj.get("answer"),
            "type": obj.get("type"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "context": obj.get("context"),
            "associated_file": obj.get("associated_file"),
            "auto_generated": obj.get("auto_generated"),
            "updated_at": obj.get("updated_at"),
            "project_id": obj.get("project_id"),
            "embedding_record_id": obj.get("embedding_record_id")
        })
        return _obj


