# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RoutesProjectsResponseKBDocument(BaseModel):
    """
    RoutesProjectsResponseKBDocument
    """ # noqa: E501
    id: StrictStr = Field(description="The ID of the document.")
    content_key: StrictStr = Field(description="The content key of the document - either full URL in case of web links stored in the KB or full filename, e.g. 'example.pdf'.")
    content: Optional[StrictStr] = None
    metadata: Dict[str, Any] = Field(description="The metadata of the document.")
    doc_type: StrictStr = Field(description="The type of the document.")
    metadata_extracted: Optional[Dict[str, Any]] = None
    pii: Optional[Dict[str, Any]] = Field(default=None, alias="PII")
    data_type: Optional[Dict[str, Any]] = None
    data_type_id: Optional[StrictStr] = None
    data_type_name: Optional[StrictStr] = None
    data_type_extracted: Optional[Dict[str, Any]] = None
    document_id: Optional[StrictStr] = None
    extraction_with_comparison: Optional[List[Any]] = None
    extraction_with_confidence_from_llm: Optional[List[Any]] = None
    __properties: ClassVar[List[str]] = ["id", "content_key", "content", "metadata", "doc_type", "metadata_extracted", "PII", "data_type", "data_type_id", "data_type_name", "data_type_extracted", "document_id", "extraction_with_comparison", "extraction_with_confidence_from_llm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutesProjectsResponseKBDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if metadata_extracted (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_extracted is None and "metadata_extracted" in self.model_fields_set:
            _dict['metadata_extracted'] = None

        # set to None if pii (nullable) is None
        # and model_fields_set contains the field
        if self.pii is None and "pii" in self.model_fields_set:
            _dict['PII'] = None

        # set to None if data_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_type is None and "data_type" in self.model_fields_set:
            _dict['data_type'] = None

        # set to None if data_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.data_type_id is None and "data_type_id" in self.model_fields_set:
            _dict['data_type_id'] = None

        # set to None if data_type_name (nullable) is None
        # and model_fields_set contains the field
        if self.data_type_name is None and "data_type_name" in self.model_fields_set:
            _dict['data_type_name'] = None

        # set to None if data_type_extracted (nullable) is None
        # and model_fields_set contains the field
        if self.data_type_extracted is None and "data_type_extracted" in self.model_fields_set:
            _dict['data_type_extracted'] = None

        # set to None if document_id (nullable) is None
        # and model_fields_set contains the field
        if self.document_id is None and "document_id" in self.model_fields_set:
            _dict['document_id'] = None

        # set to None if extraction_with_comparison (nullable) is None
        # and model_fields_set contains the field
        if self.extraction_with_comparison is None and "extraction_with_comparison" in self.model_fields_set:
            _dict['extraction_with_comparison'] = None

        # set to None if extraction_with_confidence_from_llm (nullable) is None
        # and model_fields_set contains the field
        if self.extraction_with_confidence_from_llm is None and "extraction_with_confidence_from_llm" in self.model_fields_set:
            _dict['extraction_with_confidence_from_llm'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutesProjectsResponseKBDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "content_key": obj.get("content_key"),
            "content": obj.get("content"),
            "metadata": obj.get("metadata"),
            "doc_type": obj.get("doc_type"),
            "metadata_extracted": obj.get("metadata_extracted"),
            "PII": obj.get("PII"),
            "data_type": obj.get("data_type"),
            "data_type_id": obj.get("data_type_id"),
            "data_type_name": obj.get("data_type_name"),
            "data_type_extracted": obj.get("data_type_extracted"),
            "document_id": obj.get("document_id"),
            "extraction_with_comparison": obj.get("extraction_with_comparison"),
            "extraction_with_confidence_from_llm": obj.get("extraction_with_confidence_from_llm")
        })
        return _obj


