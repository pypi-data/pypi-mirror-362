# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ProjectSearchMetadata(BaseModel):
    """
    ProjectSearchMetadata
    """ # noqa: E501
    doc_type: Optional[StrictStr] = None
    upload_date: Optional[Union[StrictFloat, StrictInt]] = None
    entity_names: Optional[List[StrictStr]] = None
    entity_types: Optional[List[StrictStr]] = None
    entity_salience: Optional[Union[StrictFloat, StrictInt]] = None
    entity_readability: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["doc_type", "upload_date", "entity_names", "entity_types", "entity_salience", "entity_readability"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectSearchMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if doc_type (nullable) is None
        # and model_fields_set contains the field
        if self.doc_type is None and "doc_type" in self.model_fields_set:
            _dict['doc_type'] = None

        # set to None if upload_date (nullable) is None
        # and model_fields_set contains the field
        if self.upload_date is None and "upload_date" in self.model_fields_set:
            _dict['upload_date'] = None

        # set to None if entity_names (nullable) is None
        # and model_fields_set contains the field
        if self.entity_names is None and "entity_names" in self.model_fields_set:
            _dict['entity_names'] = None

        # set to None if entity_types (nullable) is None
        # and model_fields_set contains the field
        if self.entity_types is None and "entity_types" in self.model_fields_set:
            _dict['entity_types'] = None

        # set to None if entity_salience (nullable) is None
        # and model_fields_set contains the field
        if self.entity_salience is None and "entity_salience" in self.model_fields_set:
            _dict['entity_salience'] = None

        # set to None if entity_readability (nullable) is None
        # and model_fields_set contains the field
        if self.entity_readability is None and "entity_readability" in self.model_fields_set:
            _dict['entity_readability'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectSearchMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_type": obj.get("doc_type"),
            "upload_date": obj.get("upload_date"),
            "entity_names": obj.get("entity_names"),
            "entity_types": obj.get("entity_types"),
            "entity_salience": obj.get("entity_salience"),
            "entity_readability": obj.get("entity_readability")
        })
        return _obj


