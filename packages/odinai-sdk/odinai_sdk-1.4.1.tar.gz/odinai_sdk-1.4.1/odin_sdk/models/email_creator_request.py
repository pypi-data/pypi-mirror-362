# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.generate_html import GenerateHtml
from odin_sdk.models.model_name2 import ModelName2
from odin_sdk.models.recipient import Recipient
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EmailCreatorRequest(BaseModel):
    """
    EmailCreatorRequest
    """ # noqa: E501
    project_id: Optional[Any] = Field(description="Project ID in which to run the email creator.")
    sender: Optional[Any] = Field(description="Sender of the email.")
    content_instructions: Optional[Any] = Field(description="Instructions for the content of the email. Provided as an array of strings.")
    formatting_example: Optional[Any] = Field(description="Example of the formatting of the email.")
    generate_html: Optional[GenerateHtml] = None
    model_name: Optional[ModelName2] = None
    recipient: Optional[Recipient] = None
    __properties: ClassVar[List[str]] = ["project_id", "sender", "content_instructions", "formatting_example", "generate_html", "model_name", "recipient"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EmailCreatorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of generate_html
        if self.generate_html:
            _dict['generate_html'] = self.generate_html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_name
        if self.model_name:
            _dict['model_name'] = self.model_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if sender (nullable) is None
        # and model_fields_set contains the field
        if self.sender is None and "sender" in self.model_fields_set:
            _dict['sender'] = None

        # set to None if content_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.content_instructions is None and "content_instructions" in self.model_fields_set:
            _dict['content_instructions'] = None

        # set to None if formatting_example (nullable) is None
        # and model_fields_set contains the field
        if self.formatting_example is None and "formatting_example" in self.model_fields_set:
            _dict['formatting_example'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EmailCreatorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "sender": obj.get("sender"),
            "content_instructions": obj.get("content_instructions"),
            "formatting_example": obj.get("formatting_example"),
            "generate_html": GenerateHtml.from_dict(obj.get("generate_html")) if obj.get("generate_html") is not None else None,
            "model_name": ModelName2.from_dict(obj.get("model_name")) if obj.get("model_name") is not None else None,
            "recipient": Recipient.from_dict(obj.get("recipient")) if obj.get("recipient") is not None else None
        })
        return _obj


