# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.add_comments import AddComments
from odin_sdk.models.add_logs import AddLogs
from odin_sdk.models.code_highlight_language import CodeHighlightLanguage
from odin_sdk.models.custom_quick_action_id import CustomQuickActionId
from odin_sdk.models.fix_bugs import FixBugs
from odin_sdk.models.next import Next
from odin_sdk.models.open_canvas_graph_annotation_artifact import OpenCanvasGraphAnnotationArtifact
from odin_sdk.models.open_canvas_graph_annotation_artifact_length import OpenCanvasGraphAnnotationArtifactLength
from odin_sdk.models.open_canvas_graph_annotation_highlighted_code import OpenCanvasGraphAnnotationHighlightedCode
from odin_sdk.models.open_canvas_graph_annotation_highlighted_text import OpenCanvasGraphAnnotationHighlightedText
from odin_sdk.models.open_canvas_graph_annotation_language import OpenCanvasGraphAnnotationLanguage
from odin_sdk.models.open_canvas_graph_annotation_reading_level import OpenCanvasGraphAnnotationReadingLevel
from odin_sdk.models.regenerate_with_emojis import RegenerateWithEmojis
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OpenCanvasGraphAnnotation(BaseModel):
    """
    OpenCanvasGraphAnnotation
    """ # noqa: E501
    highlighted_code: Optional[OpenCanvasGraphAnnotationHighlightedCode] = None
    highlighted_text: Optional[OpenCanvasGraphAnnotationHighlightedText] = None
    artifact: Optional[OpenCanvasGraphAnnotationArtifact] = None
    next: Optional[Next] = None
    language: Optional[OpenCanvasGraphAnnotationLanguage] = None
    artifact_length: Optional[OpenCanvasGraphAnnotationArtifactLength] = None
    regenerate_with_emojis: Optional[RegenerateWithEmojis] = None
    reading_level: Optional[OpenCanvasGraphAnnotationReadingLevel] = None
    add_comments: Optional[AddComments] = None
    add_logs: Optional[AddLogs] = None
    port_language: Optional[CodeHighlightLanguage] = None
    fix_bugs: Optional[FixBugs] = None
    custom_quick_action_id: Optional[CustomQuickActionId] = None
    __properties: ClassVar[List[str]] = ["highlighted_code", "highlighted_text", "artifact", "next", "language", "artifact_length", "regenerate_with_emojis", "reading_level", "add_comments", "add_logs", "port_language", "fix_bugs", "custom_quick_action_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OpenCanvasGraphAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of highlighted_code
        if self.highlighted_code:
            _dict['highlighted_code'] = self.highlighted_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highlighted_text
        if self.highlighted_text:
            _dict['highlighted_text'] = self.highlighted_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next
        if self.next:
            _dict['next'] = self.next.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifact_length
        if self.artifact_length:
            _dict['artifact_length'] = self.artifact_length.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regenerate_with_emojis
        if self.regenerate_with_emojis:
            _dict['regenerate_with_emojis'] = self.regenerate_with_emojis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reading_level
        if self.reading_level:
            _dict['reading_level'] = self.reading_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_comments
        if self.add_comments:
            _dict['add_comments'] = self.add_comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of add_logs
        if self.add_logs:
            _dict['add_logs'] = self.add_logs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of port_language
        if self.port_language:
            _dict['port_language'] = self.port_language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fix_bugs
        if self.fix_bugs:
            _dict['fix_bugs'] = self.fix_bugs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_quick_action_id
        if self.custom_quick_action_id:
            _dict['custom_quick_action_id'] = self.custom_quick_action_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OpenCanvasGraphAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "highlighted_code": OpenCanvasGraphAnnotationHighlightedCode.from_dict(obj.get("highlighted_code")) if obj.get("highlighted_code") is not None else None,
            "highlighted_text": OpenCanvasGraphAnnotationHighlightedText.from_dict(obj.get("highlighted_text")) if obj.get("highlighted_text") is not None else None,
            "artifact": OpenCanvasGraphAnnotationArtifact.from_dict(obj.get("artifact")) if obj.get("artifact") is not None else None,
            "next": Next.from_dict(obj.get("next")) if obj.get("next") is not None else None,
            "language": OpenCanvasGraphAnnotationLanguage.from_dict(obj.get("language")) if obj.get("language") is not None else None,
            "artifact_length": OpenCanvasGraphAnnotationArtifactLength.from_dict(obj.get("artifact_length")) if obj.get("artifact_length") is not None else None,
            "regenerate_with_emojis": RegenerateWithEmojis.from_dict(obj.get("regenerate_with_emojis")) if obj.get("regenerate_with_emojis") is not None else None,
            "reading_level": OpenCanvasGraphAnnotationReadingLevel.from_dict(obj.get("reading_level")) if obj.get("reading_level") is not None else None,
            "add_comments": AddComments.from_dict(obj.get("add_comments")) if obj.get("add_comments") is not None else None,
            "add_logs": AddLogs.from_dict(obj.get("add_logs")) if obj.get("add_logs") is not None else None,
            "port_language": CodeHighlightLanguage.from_dict(obj.get("port_language")) if obj.get("port_language") is not None else None,
            "fix_bugs": FixBugs.from_dict(obj.get("fix_bugs")) if obj.get("fix_bugs") is not None else None,
            "custom_quick_action_id": CustomQuickActionId.from_dict(obj.get("custom_quick_action_id")) if obj.get("custom_quick_action_id") is not None else None
        })
        return _obj


