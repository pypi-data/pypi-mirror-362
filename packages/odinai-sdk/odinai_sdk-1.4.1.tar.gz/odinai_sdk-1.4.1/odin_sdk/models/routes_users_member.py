# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.credit_limit import CreditLimit
from odin_sdk.models.credit_limit_override import CreditLimitOverride
from odin_sdk.models.credits_used2 import CreditsUsed2
from odin_sdk.models.email import Email
from odin_sdk.models.is_pending1 import IsPending1
from odin_sdk.models.name import Name
from odin_sdk.models.role1 import Role1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RoutesUsersMember(BaseModel):
    """
    RoutesUsersMember
    """ # noqa: E501
    email: Optional[Email] = None
    uid: Optional[Any]
    name: Optional[Name] = None
    role: Optional[Role1] = None
    is_pending: Optional[IsPending1] = None
    credit_limit: Optional[CreditLimit] = None
    credit_limit_override: Optional[CreditLimitOverride] = None
    credits_used: Optional[CreditsUsed2] = None
    __properties: ClassVar[List[str]] = ["email", "uid", "name", "role", "is_pending", "credit_limit", "credit_limit_override", "credits_used"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RoutesUsersMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_pending
        if self.is_pending:
            _dict['is_pending'] = self.is_pending.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_limit
        if self.credit_limit:
            _dict['credit_limit'] = self.credit_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_limit_override
        if self.credit_limit_override:
            _dict['credit_limit_override'] = self.credit_limit_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits_used
        if self.credits_used:
            _dict['credits_used'] = self.credits_used.to_dict()
        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RoutesUsersMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": Email.from_dict(obj.get("email")) if obj.get("email") is not None else None,
            "uid": obj.get("uid"),
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "role": Role1.from_dict(obj.get("role")) if obj.get("role") is not None else None,
            "is_pending": IsPending1.from_dict(obj.get("is_pending")) if obj.get("is_pending") is not None else None,
            "credit_limit": CreditLimit.from_dict(obj.get("credit_limit")) if obj.get("credit_limit") is not None else None,
            "credit_limit_override": CreditLimitOverride.from_dict(obj.get("credit_limit_override")) if obj.get("credit_limit_override") is not None else None,
            "credits_used": CreditsUsed2.from_dict(obj.get("credits_used")) if obj.get("credits_used") is not None else None
        })
        return _obj


