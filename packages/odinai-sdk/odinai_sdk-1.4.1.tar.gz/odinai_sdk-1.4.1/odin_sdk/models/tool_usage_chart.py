# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ToolUsageChart(BaseModel):
    """
    Model for tool usage chart data.
    """ # noqa: E501
    tool_name: Optional[Any]
    total_calls: Optional[Any]
    successful_calls: Optional[Any]
    failure_calls: Optional[Any]
    __properties: ClassVar[List[str]] = ["tool_name", "total_calls", "successful_calls", "failure_calls"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ToolUsageChart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if tool_name (nullable) is None
        # and model_fields_set contains the field
        if self.tool_name is None and "tool_name" in self.model_fields_set:
            _dict['tool_name'] = None

        # set to None if total_calls (nullable) is None
        # and model_fields_set contains the field
        if self.total_calls is None and "total_calls" in self.model_fields_set:
            _dict['total_calls'] = None

        # set to None if successful_calls (nullable) is None
        # and model_fields_set contains the field
        if self.successful_calls is None and "successful_calls" in self.model_fields_set:
            _dict['successful_calls'] = None

        # set to None if failure_calls (nullable) is None
        # and model_fields_set contains the field
        if self.failure_calls is None and "failure_calls" in self.model_fields_set:
            _dict['failure_calls'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ToolUsageChart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tool_name": obj.get("tool_name"),
            "total_calls": obj.get("total_calls"),
            "successful_calls": obj.get("successful_calls"),
            "failure_calls": obj.get("failure_calls")
        })
        return _obj


