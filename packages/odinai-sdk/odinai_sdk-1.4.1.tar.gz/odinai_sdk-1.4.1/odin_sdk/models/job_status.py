# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.credits_used import CreditsUsed
from odin_sdk.models.extra_info import ExtraInfo
from odin_sdk.models.job_id1 import JobId1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobStatus(BaseModel):
    """
    JobStatus
    """ # noqa: E501
    job_type: Optional[Any] = Field(description="Type of job.")
    uid: Optional[Any] = Field(description="User ID of the user who created the job.")
    document_keys: Optional[Any] = Field(description="List of document keys used in the job.")
    job_id: JobId1
    use_job_id_path: Optional[Any] = Field(description="Whether to use the job ID path for storage. Set automatically by the system.")
    job_name: Optional[Any] = Field(description="Name of the job output.")
    last_updated: Optional[Any] = Field(description="Timestamp of the last update to the job, in seconds.")
    job_status: Optional[Any] = Field(description="Status of the job.")
    project_id: Optional[Any] = Field(description="Project ID of the project the job belongs to.")
    result_type: Optional[Any] = Field(description="File extension of the job output.")
    credits_used: Optional[CreditsUsed] = None
    extra_info: Optional[ExtraInfo] = None
    __properties: ClassVar[List[str]] = ["job_type", "uid", "document_keys", "job_id", "use_job_id_path", "job_name", "last_updated", "job_status", "project_id", "result_type", "credits_used", "extra_info"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of job_id
        if self.job_id:
            _dict['job_id'] = self.job_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits_used
        if self.credits_used:
            _dict['credits_used'] = self.credits_used.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extra_info
        if self.extra_info:
            _dict['extra_info'] = self.extra_info.to_dict()
        # set to None if job_type (nullable) is None
        # and model_fields_set contains the field
        if self.job_type is None and "job_type" in self.model_fields_set:
            _dict['job_type'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        # set to None if document_keys (nullable) is None
        # and model_fields_set contains the field
        if self.document_keys is None and "document_keys" in self.model_fields_set:
            _dict['document_keys'] = None

        # set to None if use_job_id_path (nullable) is None
        # and model_fields_set contains the field
        if self.use_job_id_path is None and "use_job_id_path" in self.model_fields_set:
            _dict['use_job_id_path'] = None

        # set to None if job_name (nullable) is None
        # and model_fields_set contains the field
        if self.job_name is None and "job_name" in self.model_fields_set:
            _dict['job_name'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['last_updated'] = None

        # set to None if job_status (nullable) is None
        # and model_fields_set contains the field
        if self.job_status is None and "job_status" in self.model_fields_set:
            _dict['job_status'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if result_type (nullable) is None
        # and model_fields_set contains the field
        if self.result_type is None and "result_type" in self.model_fields_set:
            _dict['result_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_type": obj.get("job_type"),
            "uid": obj.get("uid"),
            "document_keys": obj.get("document_keys"),
            "job_id": JobId1.from_dict(obj.get("job_id")) if obj.get("job_id") is not None else None,
            "use_job_id_path": obj.get("use_job_id_path"),
            "job_name": obj.get("job_name"),
            "last_updated": obj.get("last_updated"),
            "job_status": obj.get("job_status"),
            "project_id": obj.get("project_id"),
            "result_type": obj.get("result_type"),
            "credits_used": CreditsUsed.from_dict(obj.get("credits_used")) if obj.get("credits_used") is not None else None,
            "extra_info": ExtraInfo.from_dict(obj.get("extra_info")) if obj.get("extra_info") is not None else None
        })
        return _obj


