# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.column_meta import ColumnMeta
from odin_sdk.models.description12 import Description12
from odin_sdk.models.enable_share1 import EnableShare1
from odin_sdk.models.filter import Filter
from odin_sdk.models.group import Group
from odin_sdk.models.name3 import Name3
from odin_sdk.models.options3 import Options3
from odin_sdk.models.settings2 import Settings2
from odin_sdk.models.sort import Sort
from odin_sdk.models.type6 import Type6
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateViewRequest(BaseModel):
    """
    UpdateViewRequest
    """ # noqa: E501
    name: Optional[Name3] = None
    description: Optional[Description12] = None
    type: Optional[Type6] = None
    sort: Optional[Sort] = None
    filter: Optional[Filter] = None
    group: Optional[Group] = None
    options: Optional[Options3] = None
    settings: Optional[Settings2] = None
    column_meta: Optional[ColumnMeta] = None
    enable_share: Optional[EnableShare1] = None
    __properties: ClassVar[List[str]] = ["name", "description", "type", "sort", "filter", "group", "options", "settings", "column_meta", "enable_share"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateViewRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort
        if self.sort:
            _dict['sort'] = self.sort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of column_meta
        if self.column_meta:
            _dict['column_meta'] = self.column_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_share
        if self.enable_share:
            _dict['enable_share'] = self.enable_share.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateViewRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": Name3.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "description": Description12.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "type": Type6.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "sort": Sort.from_dict(obj.get("sort")) if obj.get("sort") is not None else None,
            "filter": Filter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "group": Group.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "options": Options3.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "settings": Settings2.from_dict(obj.get("settings")) if obj.get("settings") is not None else None,
            "column_meta": ColumnMeta.from_dict(obj.get("column_meta")) if obj.get("column_meta") is not None else None,
            "enable_share": EnableShare1.from_dict(obj.get("enable_share")) if obj.get("enable_share") is not None else None
        })
        return _obj


