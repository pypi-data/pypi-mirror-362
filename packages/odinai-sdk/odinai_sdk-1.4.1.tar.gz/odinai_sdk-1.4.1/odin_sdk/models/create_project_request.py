# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.personality_id1 import PersonalityId1
from odin_sdk.models.personality_instructions import PersonalityInstructions
from odin_sdk.models.personality_name import PersonalityName
from odin_sdk.models.personality_temperature import PersonalityTemperature
from odin_sdk.models.personality_type import PersonalityType
from odin_sdk.models.project_type import ProjectType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateProjectRequest(BaseModel):
    """
    CreateProjectRequest
    """ # noqa: E501
    project_name: Optional[Any]
    project_description: Optional[Any]
    project_type: Optional[ProjectType] = None
    personality_name: Optional[PersonalityName] = None
    personality_instructions: Optional[PersonalityInstructions] = None
    personality_id: Optional[PersonalityId1] = None
    personality_type: Optional[PersonalityType] = None
    personality_temperature: Optional[PersonalityTemperature] = None
    __properties: ClassVar[List[str]] = ["project_name", "project_description", "project_type", "personality_name", "personality_instructions", "personality_id", "personality_type", "personality_temperature"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_type
        if self.project_type:
            _dict['project_type'] = self.project_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_name
        if self.personality_name:
            _dict['personality_name'] = self.personality_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_instructions
        if self.personality_instructions:
            _dict['personality_instructions'] = self.personality_instructions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_id
        if self.personality_id:
            _dict['personality_id'] = self.personality_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_type
        if self.personality_type:
            _dict['personality_type'] = self.personality_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_temperature
        if self.personality_temperature:
            _dict['personality_temperature'] = self.personality_temperature.to_dict()
        # set to None if project_name (nullable) is None
        # and model_fields_set contains the field
        if self.project_name is None and "project_name" in self.model_fields_set:
            _dict['project_name'] = None

        # set to None if project_description (nullable) is None
        # and model_fields_set contains the field
        if self.project_description is None and "project_description" in self.model_fields_set:
            _dict['project_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_name": obj.get("project_name"),
            "project_description": obj.get("project_description"),
            "project_type": ProjectType.from_dict(obj.get("project_type")) if obj.get("project_type") is not None else None,
            "personality_name": PersonalityName.from_dict(obj.get("personality_name")) if obj.get("personality_name") is not None else None,
            "personality_instructions": PersonalityInstructions.from_dict(obj.get("personality_instructions")) if obj.get("personality_instructions") is not None else None,
            "personality_id": PersonalityId1.from_dict(obj.get("personality_id")) if obj.get("personality_id") is not None else None,
            "personality_type": PersonalityType.from_dict(obj.get("personality_type")) if obj.get("personality_type") is not None else None,
            "personality_temperature": PersonalityTemperature.from_dict(obj.get("personality_temperature")) if obj.get("personality_temperature") is not None else None
        })
        return _obj


