# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.added_by import AddedBy
from odin_sdk.models.char_count1 import CharCount1
from odin_sdk.models.custom_metadata import CustomMetadata
from odin_sdk.models.disk_usage1 import DiskUsage1
from odin_sdk.models.doc_type1 import DocType1
from odin_sdk.models.file_name import FileName
from odin_sdk.models.word_count1 import WordCount1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MetaData(BaseModel):
    """
    MetaData
    """ # noqa: E501
    file_name: Optional[FileName] = None
    doc_type: Optional[DocType1] = None
    added_by: Optional[AddedBy] = None
    word_count: Optional[WordCount1] = None
    char_count: Optional[CharCount1] = None
    disk_usage: Optional[DiskUsage1] = None
    custom_metadata: Optional[CustomMetadata] = None
    __properties: ClassVar[List[str]] = ["file_name", "doc_type", "added_by", "word_count", "char_count", "disk_usage", "custom_metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_name
        if self.file_name:
            _dict['file_name'] = self.file_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of doc_type
        if self.doc_type:
            _dict['doc_type'] = self.doc_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of added_by
        if self.added_by:
            _dict['added_by'] = self.added_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of word_count
        if self.word_count:
            _dict['word_count'] = self.word_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of char_count
        if self.char_count:
            _dict['char_count'] = self.char_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_usage
        if self.disk_usage:
            _dict['disk_usage'] = self.disk_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_metadata
        if self.custom_metadata:
            _dict['custom_metadata'] = self.custom_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_name": FileName.from_dict(obj.get("file_name")) if obj.get("file_name") is not None else None,
            "doc_type": DocType1.from_dict(obj.get("doc_type")) if obj.get("doc_type") is not None else None,
            "added_by": AddedBy.from_dict(obj.get("added_by")) if obj.get("added_by") is not None else None,
            "word_count": WordCount1.from_dict(obj.get("word_count")) if obj.get("word_count") is not None else None,
            "char_count": CharCount1.from_dict(obj.get("char_count")) if obj.get("char_count") is not None else None,
            "disk_usage": DiskUsage1.from_dict(obj.get("disk_usage")) if obj.get("disk_usage") is not None else None,
            "custom_metadata": CustomMetadata.from_dict(obj.get("custom_metadata")) if obj.get("custom_metadata") is not None else None
        })
        return _obj


