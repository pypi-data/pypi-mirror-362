# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.active1 import Active1
from odin_sdk.models.admin import Admin
from odin_sdk.models.aihub_projects_whitelist import AihubProjectsWhitelist
from odin_sdk.models.allowed_seats1 import AllowedSeats1
from odin_sdk.models.api_keys import ApiKeys
from odin_sdk.models.bonus_credits import BonusCredits
from odin_sdk.models.credits1 import Credits1
from odin_sdk.models.email_domain import EmailDomain
from odin_sdk.models.members3 import Members3
from odin_sdk.models.name import Name
from odin_sdk.models.owner import Owner
from odin_sdk.models.plan_type1 import PlanType1
from odin_sdk.models.settings1 import Settings1
from odin_sdk.models.team_id import TeamId
from odin_sdk.models.used_credits import UsedCredits
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TeamInfoDetails(BaseModel):
    """
    TeamInfoDetails
    """ # noqa: E501
    active: Optional[Active1] = None
    admin: Optional[Admin] = None
    name: Optional[Name] = None
    credits: Optional[Credits1] = None
    used_credits: Optional[UsedCredits] = None
    bonus_credits: Optional[BonusCredits] = None
    allowed_seats: Optional[AllowedSeats1] = None
    team_id: Optional[TeamId] = None
    members: Optional[Members3] = None
    email_domain: Optional[EmailDomain] = None
    owner: Optional[Owner] = None
    plan_type: Optional[PlanType1] = None
    api_keys: Optional[ApiKeys] = None
    settings: Optional[Settings1] = None
    aihub_projects_whitelist: Optional[AihubProjectsWhitelist] = None
    __properties: ClassVar[List[str]] = ["active", "admin", "name", "credits", "used_credits", "bonus_credits", "allowed_seats", "team_id", "members", "email_domain", "owner", "plan_type", "api_keys", "settings", "aihub_projects_whitelist"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TeamInfoDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active
        if self.active:
            _dict['active'] = self.active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of admin
        if self.admin:
            _dict['admin'] = self.admin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of used_credits
        if self.used_credits:
            _dict['used_credits'] = self.used_credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bonus_credits
        if self.bonus_credits:
            _dict['bonus_credits'] = self.bonus_credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allowed_seats
        if self.allowed_seats:
            _dict['allowed_seats'] = self.allowed_seats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_id
        if self.team_id:
            _dict['team_id'] = self.team_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of members
        if self.members:
            _dict['members'] = self.members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_domain
        if self.email_domain:
            _dict['email_domain'] = self.email_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_type
        if self.plan_type:
            _dict['plan_type'] = self.plan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_keys
        if self.api_keys:
            _dict['api_keys'] = self.api_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aihub_projects_whitelist
        if self.aihub_projects_whitelist:
            _dict['aihub_projects_whitelist'] = self.aihub_projects_whitelist.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TeamInfoDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": Active1.from_dict(obj.get("active")) if obj.get("active") is not None else None,
            "admin": Admin.from_dict(obj.get("admin")) if obj.get("admin") is not None else None,
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "credits": Credits1.from_dict(obj.get("credits")) if obj.get("credits") is not None else None,
            "used_credits": UsedCredits.from_dict(obj.get("used_credits")) if obj.get("used_credits") is not None else None,
            "bonus_credits": BonusCredits.from_dict(obj.get("bonus_credits")) if obj.get("bonus_credits") is not None else None,
            "allowed_seats": AllowedSeats1.from_dict(obj.get("allowed_seats")) if obj.get("allowed_seats") is not None else None,
            "team_id": TeamId.from_dict(obj.get("team_id")) if obj.get("team_id") is not None else None,
            "members": Members3.from_dict(obj.get("members")) if obj.get("members") is not None else None,
            "email_domain": EmailDomain.from_dict(obj.get("email_domain")) if obj.get("email_domain") is not None else None,
            "owner": Owner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "plan_type": PlanType1.from_dict(obj.get("plan_type")) if obj.get("plan_type") is not None else None,
            "api_keys": ApiKeys.from_dict(obj.get("api_keys")) if obj.get("api_keys") is not None else None,
            "settings": Settings1.from_dict(obj.get("settings")) if obj.get("settings") is not None else None,
            "aihub_projects_whitelist": AihubProjectsWhitelist.from_dict(obj.get("aihub_projects_whitelist")) if obj.get("aihub_projects_whitelist") is not None else None
        })
        return _obj


