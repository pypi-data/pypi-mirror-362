# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.doc_type import DocType
from odin_sdk.models.entity_names import EntityNames
from odin_sdk.models.entity_readability import EntityReadability
from odin_sdk.models.entity_salience import EntitySalience
from odin_sdk.models.entity_types import EntityTypes
from odin_sdk.models.upload_date1 import UploadDate1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectSearchMetadata(BaseModel):
    """
    ProjectSearchMetadata
    """ # noqa: E501
    doc_type: Optional[DocType] = None
    upload_date: Optional[UploadDate1] = None
    entity_names: Optional[EntityNames] = None
    entity_types: Optional[EntityTypes] = None
    entity_salience: Optional[EntitySalience] = None
    entity_readability: Optional[EntityReadability] = None
    __properties: ClassVar[List[str]] = ["doc_type", "upload_date", "entity_names", "entity_types", "entity_salience", "entity_readability"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectSearchMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of doc_type
        if self.doc_type:
            _dict['doc_type'] = self.doc_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_date
        if self.upload_date:
            _dict['upload_date'] = self.upload_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_names
        if self.entity_names:
            _dict['entity_names'] = self.entity_names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_types
        if self.entity_types:
            _dict['entity_types'] = self.entity_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_salience
        if self.entity_salience:
            _dict['entity_salience'] = self.entity_salience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_readability
        if self.entity_readability:
            _dict['entity_readability'] = self.entity_readability.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectSearchMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_type": DocType.from_dict(obj.get("doc_type")) if obj.get("doc_type") is not None else None,
            "upload_date": UploadDate1.from_dict(obj.get("upload_date")) if obj.get("upload_date") is not None else None,
            "entity_names": EntityNames.from_dict(obj.get("entity_names")) if obj.get("entity_names") is not None else None,
            "entity_types": EntityTypes.from_dict(obj.get("entity_types")) if obj.get("entity_types") is not None else None,
            "entity_salience": EntitySalience.from_dict(obj.get("entity_salience")) if obj.get("entity_salience") is not None else None,
            "entity_readability": EntityReadability.from_dict(obj.get("entity_readability")) if obj.get("entity_readability") is not None else None
        })
        return _obj


