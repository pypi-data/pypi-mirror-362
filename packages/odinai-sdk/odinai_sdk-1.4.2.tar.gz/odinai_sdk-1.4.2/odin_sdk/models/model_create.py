# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.api_key import ApiKey
from odin_sdk.models.api_version import ApiVersion
from odin_sdk.models.hidden import Hidden
from odin_sdk.models.is_default import IsDefault
from odin_sdk.models.is_default_citation_model import IsDefaultCitationModel
from odin_sdk.models.is_default_extraction_model import IsDefaultExtractionModel
from odin_sdk.models.max_input_tokens import MaxInputTokens
from odin_sdk.models.max_response_tokens import MaxResponseTokens
from odin_sdk.models.model_extra_params1 import ModelExtraParams1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ModelCreate(BaseModel):
    """
    ModelCreate
    """ # noqa: E501
    model_name: Optional[Any]
    api_url: Optional[Any]
    api_type: Optional[Any]
    max_input_tokens: MaxInputTokens
    max_response_tokens: MaxResponseTokens
    display_name: Optional[Any]
    cost: Optional[Any]
    hidden: Optional[Hidden] = None
    api_key: Optional[ApiKey] = None
    api_version: Optional[ApiVersion] = None
    is_default: Optional[IsDefault] = None
    is_default_extraction_model: Optional[IsDefaultExtractionModel] = None
    is_default_citation_model: Optional[IsDefaultCitationModel] = None
    model_extra_params: Optional[ModelExtraParams1] = None
    model_id: Optional[Any]
    __properties: ClassVar[List[str]] = ["model_name", "api_url", "api_type", "max_input_tokens", "max_response_tokens", "display_name", "cost", "hidden", "api_key", "api_version", "is_default", "is_default_extraction_model", "is_default_citation_model", "model_extra_params", "model_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ModelCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_input_tokens
        if self.max_input_tokens:
            _dict['max_input_tokens'] = self.max_input_tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_response_tokens
        if self.max_response_tokens:
            _dict['max_response_tokens'] = self.max_response_tokens.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hidden
        if self.hidden:
            _dict['hidden'] = self.hidden.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_key
        if self.api_key:
            _dict['api_key'] = self.api_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of api_version
        if self.api_version:
            _dict['api_version'] = self.api_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_default
        if self.is_default:
            _dict['is_default'] = self.is_default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_default_extraction_model
        if self.is_default_extraction_model:
            _dict['is_default_extraction_model'] = self.is_default_extraction_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_default_citation_model
        if self.is_default_citation_model:
            _dict['is_default_citation_model'] = self.is_default_citation_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_extra_params
        if self.model_extra_params:
            _dict['model_extra_params'] = self.model_extra_params.to_dict()
        # set to None if model_name (nullable) is None
        # and model_fields_set contains the field
        if self.model_name is None and "model_name" in self.model_fields_set:
            _dict['model_name'] = None

        # set to None if api_url (nullable) is None
        # and model_fields_set contains the field
        if self.api_url is None and "api_url" in self.model_fields_set:
            _dict['api_url'] = None

        # set to None if api_type (nullable) is None
        # and model_fields_set contains the field
        if self.api_type is None and "api_type" in self.model_fields_set:
            _dict['api_type'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if model_id (nullable) is None
        # and model_fields_set contains the field
        if self.model_id is None and "model_id" in self.model_fields_set:
            _dict['model_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ModelCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name": obj.get("model_name"),
            "api_url": obj.get("api_url"),
            "api_type": obj.get("api_type"),
            "max_input_tokens": MaxInputTokens.from_dict(obj.get("max_input_tokens")) if obj.get("max_input_tokens") is not None else None,
            "max_response_tokens": MaxResponseTokens.from_dict(obj.get("max_response_tokens")) if obj.get("max_response_tokens") is not None else None,
            "display_name": obj.get("display_name"),
            "cost": obj.get("cost"),
            "hidden": Hidden.from_dict(obj.get("hidden")) if obj.get("hidden") is not None else None,
            "api_key": ApiKey.from_dict(obj.get("api_key")) if obj.get("api_key") is not None else None,
            "api_version": ApiVersion.from_dict(obj.get("api_version")) if obj.get("api_version") is not None else None,
            "is_default": IsDefault.from_dict(obj.get("is_default")) if obj.get("is_default") is not None else None,
            "is_default_extraction_model": IsDefaultExtractionModel.from_dict(obj.get("is_default_extraction_model")) if obj.get("is_default_extraction_model") is not None else None,
            "is_default_citation_model": IsDefaultCitationModel.from_dict(obj.get("is_default_citation_model")) if obj.get("is_default_citation_model") is not None else None,
            "model_extra_params": ModelExtraParams1.from_dict(obj.get("model_extra_params")) if obj.get("model_extra_params") is not None else None,
            "model_id": obj.get("model_id")
        })
        return _obj


