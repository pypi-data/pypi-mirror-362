# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.active import Active
from odin_sdk.models.allowed_seats import AllowedSeats
from odin_sdk.models.auto_add_users_by_domain import AutoAddUsersByDomain
from odin_sdk.models.credits import Credits
from odin_sdk.models.email_domain import EmailDomain
from odin_sdk.models.owner import Owner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateTeamRequest(BaseModel):
    """
    CreateTeamRequest
    """ # noqa: E501
    active: Optional[Active] = None
    name: Optional[Any]
    owner: Optional[Owner] = None
    allowed_seats: Optional[AllowedSeats] = None
    email_domain: Optional[EmailDomain] = None
    auto_add_users_by_domain: Optional[AutoAddUsersByDomain] = None
    credits: Optional[Credits] = None
    __properties: ClassVar[List[str]] = ["active", "name", "owner", "allowed_seats", "email_domain", "auto_add_users_by_domain", "credits"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateTeamRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active
        if self.active:
            _dict['active'] = self.active.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allowed_seats
        if self.allowed_seats:
            _dict['allowed_seats'] = self.allowed_seats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_domain
        if self.email_domain:
            _dict['email_domain'] = self.email_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_add_users_by_domain
        if self.auto_add_users_by_domain:
            _dict['auto_add_users_by_domain'] = self.auto_add_users_by_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateTeamRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": Active.from_dict(obj.get("active")) if obj.get("active") is not None else None,
            "name": obj.get("name"),
            "owner": Owner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "allowed_seats": AllowedSeats.from_dict(obj.get("allowed_seats")) if obj.get("allowed_seats") is not None else None,
            "email_domain": EmailDomain.from_dict(obj.get("email_domain")) if obj.get("email_domain") is not None else None,
            "auto_add_users_by_domain": AutoAddUsersByDomain.from_dict(obj.get("auto_add_users_by_domain")) if obj.get("auto_add_users_by_domain") is not None else None,
            "credits": Credits.from_dict(obj.get("credits")) if obj.get("credits") is not None else None
        })
        return _obj


