# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.avg_duration import AvgDuration
from odin_sdk.models.max_duration import MaxDuration
from odin_sdk.models.median_duration import MedianDuration
from odin_sdk.models.min_duration import MinDuration
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaskStatsModel(BaseModel):
    """
    TaskStatsModel
    """ # noqa: E501
    task_name: Optional[Any]
    total_executions: Optional[Any]
    successful_executions: Optional[Any]
    failed_executions: Optional[Any]
    terminated_executions: Optional[Any] = None
    avg_duration: Optional[AvgDuration] = None
    median_duration: Optional[MedianDuration] = None
    min_duration: Optional[MinDuration] = None
    max_duration: Optional[MaxDuration] = None
    __properties: ClassVar[List[str]] = ["task_name", "total_executions", "successful_executions", "failed_executions", "terminated_executions", "avg_duration", "median_duration", "min_duration", "max_duration"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskStatsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avg_duration
        if self.avg_duration:
            _dict['avg_duration'] = self.avg_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of median_duration
        if self.median_duration:
            _dict['median_duration'] = self.median_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_duration
        if self.min_duration:
            _dict['min_duration'] = self.min_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_duration
        if self.max_duration:
            _dict['max_duration'] = self.max_duration.to_dict()
        # set to None if task_name (nullable) is None
        # and model_fields_set contains the field
        if self.task_name is None and "task_name" in self.model_fields_set:
            _dict['task_name'] = None

        # set to None if total_executions (nullable) is None
        # and model_fields_set contains the field
        if self.total_executions is None and "total_executions" in self.model_fields_set:
            _dict['total_executions'] = None

        # set to None if successful_executions (nullable) is None
        # and model_fields_set contains the field
        if self.successful_executions is None and "successful_executions" in self.model_fields_set:
            _dict['successful_executions'] = None

        # set to None if failed_executions (nullable) is None
        # and model_fields_set contains the field
        if self.failed_executions is None and "failed_executions" in self.model_fields_set:
            _dict['failed_executions'] = None

        # set to None if terminated_executions (nullable) is None
        # and model_fields_set contains the field
        if self.terminated_executions is None and "terminated_executions" in self.model_fields_set:
            _dict['terminated_executions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaskStatsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_name": obj.get("task_name"),
            "total_executions": obj.get("total_executions"),
            "successful_executions": obj.get("successful_executions"),
            "failed_executions": obj.get("failed_executions"),
            "terminated_executions": obj.get("terminated_executions"),
            "avg_duration": AvgDuration.from_dict(obj.get("avg_duration")) if obj.get("avg_duration") is not None else None,
            "median_duration": MedianDuration.from_dict(obj.get("median_duration")) if obj.get("median_duration") is not None else None,
            "min_duration": MinDuration.from_dict(obj.get("min_duration")) if obj.get("min_duration") is not None else None,
            "max_duration": MaxDuration.from_dict(obj.get("max_duration")) if obj.get("max_duration") is not None else None
        })
        return _obj


