# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectMCP(BaseModel):
    """
    ProjectMCP
    """ # noqa: E501
    id: Optional[Any]
    project_id: Optional[Any]
    mcp_ref_id: Optional[Any]
    service_name: Optional[Any]
    service_configuration: Optional[Any]
    platform: Optional[Any]
    enabled: Optional[Any]
    created_timestamp: Optional[Any]
    last_modified_timestamp: Optional[Any]
    __properties: ClassVar[List[str]] = ["id", "project_id", "mcp_ref_id", "service_name", "service_configuration", "platform", "enabled", "created_timestamp", "last_modified_timestamp"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectMCP from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if mcp_ref_id (nullable) is None
        # and model_fields_set contains the field
        if self.mcp_ref_id is None and "mcp_ref_id" in self.model_fields_set:
            _dict['mcp_ref_id'] = None

        # set to None if service_name (nullable) is None
        # and model_fields_set contains the field
        if self.service_name is None and "service_name" in self.model_fields_set:
            _dict['service_name'] = None

        # set to None if service_configuration (nullable) is None
        # and model_fields_set contains the field
        if self.service_configuration is None and "service_configuration" in self.model_fields_set:
            _dict['service_configuration'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if created_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.created_timestamp is None and "created_timestamp" in self.model_fields_set:
            _dict['created_timestamp'] = None

        # set to None if last_modified_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_timestamp is None and "last_modified_timestamp" in self.model_fields_set:
            _dict['last_modified_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectMCP from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "project_id": obj.get("project_id"),
            "mcp_ref_id": obj.get("mcp_ref_id"),
            "service_name": obj.get("service_name"),
            "service_configuration": obj.get("service_configuration"),
            "platform": obj.get("platform"),
            "enabled": obj.get("enabled"),
            "created_timestamp": obj.get("created_timestamp"),
            "last_modified_timestamp": obj.get("last_modified_timestamp")
        })
        return _obj


