# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.repeat import Repeat
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CrawlConfigResponse(BaseModel):
    """
    CrawlConfigResponse
    """ # noqa: E501
    id: Optional[Any]
    crawl_name: Optional[Any]
    root_url: Optional[Any]
    created_at: Optional[Any]
    updated_at: Optional[Any]
    project_id: Optional[Any]
    user_id: Optional[Any]
    repeat: Repeat
    limit_to_root_domain: Optional[Any]
    limit_to_domains: Optional[Any]
    limit_to_patterns: Optional[Any]
    download_files: Optional[Any]
    max_depth: Optional[Any]
    max_pages: Optional[Any]
    strategy: Optional[Any]
    keywords_for_best_first: Optional[Any]
    keywords_weight: Optional[Any]
    __properties: ClassVar[List[str]] = ["id", "crawl_name", "root_url", "created_at", "updated_at", "project_id", "user_id", "repeat", "limit_to_root_domain", "limit_to_domains", "limit_to_patterns", "download_files", "max_depth", "max_pages", "strategy", "keywords_for_best_first", "keywords_weight"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CrawlConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repeat
        if self.repeat:
            _dict['repeat'] = self.repeat.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if crawl_name (nullable) is None
        # and model_fields_set contains the field
        if self.crawl_name is None and "crawl_name" in self.model_fields_set:
            _dict['crawl_name'] = None

        # set to None if root_url (nullable) is None
        # and model_fields_set contains the field
        if self.root_url is None and "root_url" in self.model_fields_set:
            _dict['root_url'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if limit_to_root_domain (nullable) is None
        # and model_fields_set contains the field
        if self.limit_to_root_domain is None and "limit_to_root_domain" in self.model_fields_set:
            _dict['limit_to_root_domain'] = None

        # set to None if limit_to_domains (nullable) is None
        # and model_fields_set contains the field
        if self.limit_to_domains is None and "limit_to_domains" in self.model_fields_set:
            _dict['limit_to_domains'] = None

        # set to None if limit_to_patterns (nullable) is None
        # and model_fields_set contains the field
        if self.limit_to_patterns is None and "limit_to_patterns" in self.model_fields_set:
            _dict['limit_to_patterns'] = None

        # set to None if download_files (nullable) is None
        # and model_fields_set contains the field
        if self.download_files is None and "download_files" in self.model_fields_set:
            _dict['download_files'] = None

        # set to None if max_depth (nullable) is None
        # and model_fields_set contains the field
        if self.max_depth is None and "max_depth" in self.model_fields_set:
            _dict['max_depth'] = None

        # set to None if max_pages (nullable) is None
        # and model_fields_set contains the field
        if self.max_pages is None and "max_pages" in self.model_fields_set:
            _dict['max_pages'] = None

        # set to None if strategy (nullable) is None
        # and model_fields_set contains the field
        if self.strategy is None and "strategy" in self.model_fields_set:
            _dict['strategy'] = None

        # set to None if keywords_for_best_first (nullable) is None
        # and model_fields_set contains the field
        if self.keywords_for_best_first is None and "keywords_for_best_first" in self.model_fields_set:
            _dict['keywords_for_best_first'] = None

        # set to None if keywords_weight (nullable) is None
        # and model_fields_set contains the field
        if self.keywords_weight is None and "keywords_weight" in self.model_fields_set:
            _dict['keywords_weight'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CrawlConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "crawl_name": obj.get("crawl_name"),
            "root_url": obj.get("root_url"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "project_id": obj.get("project_id"),
            "user_id": obj.get("user_id"),
            "repeat": Repeat.from_dict(obj.get("repeat")) if obj.get("repeat") is not None else None,
            "limit_to_root_domain": obj.get("limit_to_root_domain"),
            "limit_to_domains": obj.get("limit_to_domains"),
            "limit_to_patterns": obj.get("limit_to_patterns"),
            "download_files": obj.get("download_files"),
            "max_depth": obj.get("max_depth"),
            "max_pages": obj.get("max_pages"),
            "strategy": obj.get("strategy"),
            "keywords_for_best_first": obj.get("keywords_for_best_first"),
            "keywords_weight": obj.get("keywords_weight")
        })
        return _obj


