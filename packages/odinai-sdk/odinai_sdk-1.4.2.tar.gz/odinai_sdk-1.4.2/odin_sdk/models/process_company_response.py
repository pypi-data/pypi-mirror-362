# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcessCompanyResponse(BaseModel):
    """
    Pydantic model representing the response from processing company filings.  Attributes:     status (str): Processing status ('success' or 'error').     message (str): Description of the processing result.     filings_processed (int): Number of filings processed.     filing_data (List[FilingData]): Detailed information about processed filings.
    """ # noqa: E501
    status: Optional[Any]
    message: Optional[Any]
    filings_processed: Optional[Any]
    filing_data: Optional[Any]
    __properties: ClassVar[List[str]] = ["status", "message", "filings_processed", "filing_data"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessCompanyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if filings_processed (nullable) is None
        # and model_fields_set contains the field
        if self.filings_processed is None and "filings_processed" in self.model_fields_set:
            _dict['filings_processed'] = None

        # set to None if filing_data (nullable) is None
        # and model_fields_set contains the field
        if self.filing_data is None and "filing_data" in self.model_fields_set:
            _dict['filing_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessCompanyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "message": obj.get("message"),
            "filings_processed": obj.get("filings_processed"),
            "filing_data": obj.get("filing_data")
        })
        return _obj


