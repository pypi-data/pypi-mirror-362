# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, field_validator
from odin_sdk.models.generic_sql_config import GenericSQLConfig
from odin_sdk.models.mssql_config import MSSQLConfig
from odin_sdk.models.my_sql_config import MySQLConfig
from odin_sdk.models.oracle_sql_config import OracleSQLConfig
from odin_sdk.models.postgre_sql_config import PostgreSQLConfig
from odin_sdk.models.snowflake_sql_config import SnowflakeSQLConfig
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

CONFIG1_ANY_OF_SCHEMAS = ["GenericSQLConfig", "MSSQLConfig", "MySQLConfig", "OracleSQLConfig", "PostgreSQLConfig", "SnowflakeSQLConfig"]

class Config1(BaseModel):
    """
    Configuration for the SQL connection.
    """

    # data type: PostgreSQLConfig
    anyof_schema_1_validator: Optional[PostgreSQLConfig] = None
    # data type: GenericSQLConfig
    anyof_schema_2_validator: Optional[GenericSQLConfig] = None
    # data type: MSSQLConfig
    anyof_schema_3_validator: Optional[MSSQLConfig] = None
    # data type: MySQLConfig
    anyof_schema_4_validator: Optional[MySQLConfig] = None
    # data type: SnowflakeSQLConfig
    anyof_schema_5_validator: Optional[SnowflakeSQLConfig] = None
    # data type: OracleSQLConfig
    anyof_schema_6_validator: Optional[OracleSQLConfig] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[GenericSQLConfig, MSSQLConfig, MySQLConfig, OracleSQLConfig, PostgreSQLConfig, SnowflakeSQLConfig]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[CONFIG1_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = Config1.model_construct()
        error_messages = []
        # validate data type: PostgreSQLConfig
        if not isinstance(v, PostgreSQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PostgreSQLConfig`")
        else:
            return v

        # validate data type: GenericSQLConfig
        if not isinstance(v, GenericSQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GenericSQLConfig`")
        else:
            return v

        # validate data type: MSSQLConfig
        if not isinstance(v, MSSQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MSSQLConfig`")
        else:
            return v

        # validate data type: MySQLConfig
        if not isinstance(v, MySQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MySQLConfig`")
        else:
            return v

        # validate data type: SnowflakeSQLConfig
        if not isinstance(v, SnowflakeSQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeSQLConfig`")
        else:
            return v

        # validate data type: OracleSQLConfig
        if not isinstance(v, OracleSQLConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OracleSQLConfig`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Config1 with anyOf schemas: GenericSQLConfig, MSSQLConfig, MySQLConfig, OracleSQLConfig, PostgreSQLConfig, SnowflakeSQLConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[PostgreSQLConfig] = None
        try:
            instance.actual_instance = PostgreSQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[GenericSQLConfig] = None
        try:
            instance.actual_instance = GenericSQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[MSSQLConfig] = None
        try:
            instance.actual_instance = MSSQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[MySQLConfig] = None
        try:
            instance.actual_instance = MySQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[SnowflakeSQLConfig] = None
        try:
            instance.actual_instance = SnowflakeSQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[OracleSQLConfig] = None
        try:
            instance.actual_instance = OracleSQLConfig.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Config1 with anyOf schemas: GenericSQLConfig, MSSQLConfig, MySQLConfig, OracleSQLConfig, PostgreSQLConfig, SnowflakeSQLConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


