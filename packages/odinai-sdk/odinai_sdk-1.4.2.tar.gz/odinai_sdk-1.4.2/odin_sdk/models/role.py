# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.actions import Actions
from odin_sdk.models.created_at import CreatedAt
from odin_sdk.models.created_by import CreatedBy
from odin_sdk.models.members2 import Members2
from odin_sdk.models.sanitized_name import SanitizedName
from odin_sdk.models.updated_at import UpdatedAt
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Role(BaseModel):
    """
    Role
    """ # noqa: E501
    id: Optional[Any]
    name: Optional[Any]
    created_by: Optional[CreatedBy] = None
    created_at: Optional[CreatedAt] = None
    updated_at: Optional[UpdatedAt] = None
    number_of_members: Optional[Any]
    actions: Optional[Actions] = None
    sanitized_name: Optional[SanitizedName] = None
    members: Optional[Members2] = None
    __properties: ClassVar[List[str]] = ["id", "name", "created_by", "created_at", "updated_at", "number_of_members", "actions", "sanitized_name", "members"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['created_by'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actions
        if self.actions:
            _dict['actions'] = self.actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sanitized_name
        if self.sanitized_name:
            _dict['sanitized_name'] = self.sanitized_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of members
        if self.members:
            _dict['members'] = self.members.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if number_of_members (nullable) is None
        # and model_fields_set contains the field
        if self.number_of_members is None and "number_of_members" in self.model_fields_set:
            _dict['number_of_members'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created_by": CreatedBy.from_dict(obj.get("created_by")) if obj.get("created_by") is not None else None,
            "created_at": CreatedAt.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "updated_at": UpdatedAt.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
            "number_of_members": obj.get("number_of_members"),
            "actions": Actions.from_dict(obj.get("actions")) if obj.get("actions") is not None else None,
            "sanitized_name": SanitizedName.from_dict(obj.get("sanitized_name")) if obj.get("sanitized_name") is not None else None,
            "members": Members2.from_dict(obj.get("members")) if obj.get("members") is not None else None
        })
        return _obj


