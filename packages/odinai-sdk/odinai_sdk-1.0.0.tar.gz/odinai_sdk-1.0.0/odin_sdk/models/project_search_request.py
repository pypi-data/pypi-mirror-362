# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from odin_sdk.models.project_search_metadata import ProjectSearchMetadata
from typing import Optional, Set
from typing_extensions import Self

class ProjectSearchRequest(BaseModel):
    """
    ProjectSearchRequest
    """ # noqa: E501
    project_id: StrictStr
    query: StrictStr
    document_keys: Optional[List[StrictStr]] = None
    hybrid_search_lambda: Optional[Union[StrictFloat, StrictInt]] = 0.1
    score_threshold: Optional[Union[StrictFloat, StrictInt]] = 0.1
    kw_fuzzy_threshold: Optional[Union[StrictFloat, StrictInt]] = 80
    kw_curve_multihit: Optional[StrictBool] = None
    metadata_filters: Optional[ProjectSearchMetadata] = None
    max_results: Optional[StrictInt] = None
    full_content_words_limit: Optional[StrictInt] = None
    metadata_weighting: Optional[Union[StrictFloat, StrictInt]] = None
    remove_duplicates: Optional[StrictBool] = None
    page: Optional[StrictInt] = None
    debug: Optional[StrictBool] = None
    generate_ai_summary: Optional[StrictBool] = None
    search_by_titles: Optional[StrictBool] = None
    group_on_backend: Optional[StrictBool] = None
    multihit_weighting: Optional[Union[StrictFloat, StrictInt]] = None
    add_bonus_from_full_content: Optional[StrictBool] = None
    bonus_from_full_content_threshold: Optional[Union[StrictFloat, StrictInt]] = None
    bonus_from_full_content_size: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["project_id", "query", "document_keys", "hybrid_search_lambda", "score_threshold", "kw_fuzzy_threshold", "kw_curve_multihit", "metadata_filters", "max_results", "full_content_words_limit", "metadata_weighting", "remove_duplicates", "page", "debug", "generate_ai_summary", "search_by_titles", "group_on_backend", "multihit_weighting", "add_bonus_from_full_content", "bonus_from_full_content_threshold", "bonus_from_full_content_size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata_filters
        if self.metadata_filters:
            _dict['metadata_filters'] = self.metadata_filters.to_dict()
        # set to None if document_keys (nullable) is None
        # and model_fields_set contains the field
        if self.document_keys is None and "document_keys" in self.model_fields_set:
            _dict['document_keys'] = None

        # set to None if kw_curve_multihit (nullable) is None
        # and model_fields_set contains the field
        if self.kw_curve_multihit is None and "kw_curve_multihit" in self.model_fields_set:
            _dict['kw_curve_multihit'] = None

        # set to None if metadata_filters (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_filters is None and "metadata_filters" in self.model_fields_set:
            _dict['metadata_filters'] = None

        # set to None if max_results (nullable) is None
        # and model_fields_set contains the field
        if self.max_results is None and "max_results" in self.model_fields_set:
            _dict['max_results'] = None

        # set to None if full_content_words_limit (nullable) is None
        # and model_fields_set contains the field
        if self.full_content_words_limit is None and "full_content_words_limit" in self.model_fields_set:
            _dict['full_content_words_limit'] = None

        # set to None if metadata_weighting (nullable) is None
        # and model_fields_set contains the field
        if self.metadata_weighting is None and "metadata_weighting" in self.model_fields_set:
            _dict['metadata_weighting'] = None

        # set to None if remove_duplicates (nullable) is None
        # and model_fields_set contains the field
        if self.remove_duplicates is None and "remove_duplicates" in self.model_fields_set:
            _dict['remove_duplicates'] = None

        # set to None if page (nullable) is None
        # and model_fields_set contains the field
        if self.page is None and "page" in self.model_fields_set:
            _dict['page'] = None

        # set to None if debug (nullable) is None
        # and model_fields_set contains the field
        if self.debug is None and "debug" in self.model_fields_set:
            _dict['debug'] = None

        # set to None if generate_ai_summary (nullable) is None
        # and model_fields_set contains the field
        if self.generate_ai_summary is None and "generate_ai_summary" in self.model_fields_set:
            _dict['generate_ai_summary'] = None

        # set to None if search_by_titles (nullable) is None
        # and model_fields_set contains the field
        if self.search_by_titles is None and "search_by_titles" in self.model_fields_set:
            _dict['search_by_titles'] = None

        # set to None if group_on_backend (nullable) is None
        # and model_fields_set contains the field
        if self.group_on_backend is None and "group_on_backend" in self.model_fields_set:
            _dict['group_on_backend'] = None

        # set to None if multihit_weighting (nullable) is None
        # and model_fields_set contains the field
        if self.multihit_weighting is None and "multihit_weighting" in self.model_fields_set:
            _dict['multihit_weighting'] = None

        # set to None if add_bonus_from_full_content (nullable) is None
        # and model_fields_set contains the field
        if self.add_bonus_from_full_content is None and "add_bonus_from_full_content" in self.model_fields_set:
            _dict['add_bonus_from_full_content'] = None

        # set to None if bonus_from_full_content_threshold (nullable) is None
        # and model_fields_set contains the field
        if self.bonus_from_full_content_threshold is None and "bonus_from_full_content_threshold" in self.model_fields_set:
            _dict['bonus_from_full_content_threshold'] = None

        # set to None if bonus_from_full_content_size (nullable) is None
        # and model_fields_set contains the field
        if self.bonus_from_full_content_size is None and "bonus_from_full_content_size" in self.model_fields_set:
            _dict['bonus_from_full_content_size'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "query": obj.get("query"),
            "document_keys": obj.get("document_keys"),
            "hybrid_search_lambda": obj.get("hybrid_search_lambda") if obj.get("hybrid_search_lambda") is not None else 0.1,
            "score_threshold": obj.get("score_threshold") if obj.get("score_threshold") is not None else 0.1,
            "kw_fuzzy_threshold": obj.get("kw_fuzzy_threshold") if obj.get("kw_fuzzy_threshold") is not None else 80,
            "kw_curve_multihit": obj.get("kw_curve_multihit"),
            "metadata_filters": ProjectSearchMetadata.from_dict(obj["metadata_filters"]) if obj.get("metadata_filters") is not None else None,
            "max_results": obj.get("max_results"),
            "full_content_words_limit": obj.get("full_content_words_limit"),
            "metadata_weighting": obj.get("metadata_weighting"),
            "remove_duplicates": obj.get("remove_duplicates"),
            "page": obj.get("page"),
            "debug": obj.get("debug"),
            "generate_ai_summary": obj.get("generate_ai_summary"),
            "search_by_titles": obj.get("search_by_titles"),
            "group_on_backend": obj.get("group_on_backend"),
            "multihit_weighting": obj.get("multihit_weighting"),
            "add_bonus_from_full_content": obj.get("add_bonus_from_full_content"),
            "bonus_from_full_content_threshold": obj.get("bonus_from_full_content_threshold"),
            "bonus_from_full_content_size": obj.get("bonus_from_full_content_size")
        })
        return _obj


