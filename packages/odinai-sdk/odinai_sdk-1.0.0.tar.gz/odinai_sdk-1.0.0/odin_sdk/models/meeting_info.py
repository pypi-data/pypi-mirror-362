# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.attendee import Attendee
from typing import Optional, Set
from typing_extensions import Self

class MeetingInfo(BaseModel):
    """
    MeetingInfo
    """ # noqa: E501
    title: StrictStr
    ical_uid: StrictStr
    is_recurring: StrictBool
    visibility: Optional[StrictStr] = None
    webex_invite: Optional[StrictStr] = None
    override_should_record: Optional[StrictBool] = None
    end_time: StrictStr
    id: StrictStr
    meeting_platform: StrictStr
    calendar_platform: StrictStr
    is_hosted_by_me: StrictBool
    attendees_emails: Optional[List[StrictStr]] = None
    attendees: Optional[List[Attendee]] = None
    organizer_email: StrictStr
    teams_invite: Optional[StrictStr] = None
    bot_id: StrictStr
    platform: StrictStr
    meet_invite: Dict[str, Any]
    is_external: StrictBool
    zoom_invite: Optional[StrictStr] = None
    will_record_reason: StrictStr
    will_record: StrictBool
    start_time: StrictStr
    __properties: ClassVar[List[str]] = ["title", "ical_uid", "is_recurring", "visibility", "webex_invite", "override_should_record", "end_time", "id", "meeting_platform", "calendar_platform", "is_hosted_by_me", "attendees_emails", "attendees", "organizer_email", "teams_invite", "bot_id", "platform", "meet_invite", "is_external", "zoom_invite", "will_record_reason", "will_record", "start_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeetingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attendees (list)
        _items = []
        if self.attendees:
            for _item_attendees in self.attendees:
                if _item_attendees:
                    _items.append(_item_attendees.to_dict())
            _dict['attendees'] = _items
        # set to None if visibility (nullable) is None
        # and model_fields_set contains the field
        if self.visibility is None and "visibility" in self.model_fields_set:
            _dict['visibility'] = None

        # set to None if webex_invite (nullable) is None
        # and model_fields_set contains the field
        if self.webex_invite is None and "webex_invite" in self.model_fields_set:
            _dict['webex_invite'] = None

        # set to None if override_should_record (nullable) is None
        # and model_fields_set contains the field
        if self.override_should_record is None and "override_should_record" in self.model_fields_set:
            _dict['override_should_record'] = None

        # set to None if attendees_emails (nullable) is None
        # and model_fields_set contains the field
        if self.attendees_emails is None and "attendees_emails" in self.model_fields_set:
            _dict['attendees_emails'] = None

        # set to None if attendees (nullable) is None
        # and model_fields_set contains the field
        if self.attendees is None and "attendees" in self.model_fields_set:
            _dict['attendees'] = None

        # set to None if teams_invite (nullable) is None
        # and model_fields_set contains the field
        if self.teams_invite is None and "teams_invite" in self.model_fields_set:
            _dict['teams_invite'] = None

        # set to None if zoom_invite (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_invite is None and "zoom_invite" in self.model_fields_set:
            _dict['zoom_invite'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeetingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "ical_uid": obj.get("ical_uid"),
            "is_recurring": obj.get("is_recurring"),
            "visibility": obj.get("visibility"),
            "webex_invite": obj.get("webex_invite"),
            "override_should_record": obj.get("override_should_record"),
            "end_time": obj.get("end_time"),
            "id": obj.get("id"),
            "meeting_platform": obj.get("meeting_platform"),
            "calendar_platform": obj.get("calendar_platform"),
            "is_hosted_by_me": obj.get("is_hosted_by_me"),
            "attendees_emails": obj.get("attendees_emails"),
            "attendees": [Attendee.from_dict(_item) for _item in obj["attendees"]] if obj.get("attendees") is not None else None,
            "organizer_email": obj.get("organizer_email"),
            "teams_invite": obj.get("teams_invite"),
            "bot_id": obj.get("bot_id"),
            "platform": obj.get("platform"),
            "meet_invite": obj.get("meet_invite"),
            "is_external": obj.get("is_external"),
            "zoom_invite": obj.get("zoom_invite"),
            "will_record_reason": obj.get("will_record_reason"),
            "will_record": obj.get("will_record"),
            "start_time": obj.get("start_time")
        })
        return _obj


