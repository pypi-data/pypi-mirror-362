# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TaskInfoModel(BaseModel):
    """
    TaskInfoModel
    """ # noqa: E501
    task_id: StrictStr
    task_name: StrictStr
    status: StrictStr
    project_id: Optional[StrictStr] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    duration_seconds: Optional[Union[StrictFloat, StrictInt]] = None
    args: Optional[List[Any]] = None
    kwargs: Optional[Dict[str, Any]] = None
    result: Optional[Any] = None
    traceback: Optional[StrictStr] = None
    worker: Optional[StrictStr] = None
    retries: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["task_id", "task_name", "status", "project_id", "started_at", "completed_at", "duration_seconds", "args", "kwargs", "result", "traceback", "worker", "retries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskInfoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if duration_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.duration_seconds is None and "duration_seconds" in self.model_fields_set:
            _dict['duration_seconds'] = None

        # set to None if args (nullable) is None
        # and model_fields_set contains the field
        if self.args is None and "args" in self.model_fields_set:
            _dict['args'] = None

        # set to None if kwargs (nullable) is None
        # and model_fields_set contains the field
        if self.kwargs is None and "kwargs" in self.model_fields_set:
            _dict['kwargs'] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if traceback (nullable) is None
        # and model_fields_set contains the field
        if self.traceback is None and "traceback" in self.model_fields_set:
            _dict['traceback'] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict['worker'] = None

        # set to None if retries (nullable) is None
        # and model_fields_set contains the field
        if self.retries is None and "retries" in self.model_fields_set:
            _dict['retries'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskInfoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "task_name": obj.get("task_name"),
            "status": obj.get("status"),
            "project_id": obj.get("project_id"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "duration_seconds": obj.get("duration_seconds"),
            "args": obj.get("args"),
            "kwargs": obj.get("kwargs"),
            "result": AnyOf.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "traceback": obj.get("traceback"),
            "worker": obj.get("worker"),
            "retries": obj.get("retries")
        })
        return _obj


