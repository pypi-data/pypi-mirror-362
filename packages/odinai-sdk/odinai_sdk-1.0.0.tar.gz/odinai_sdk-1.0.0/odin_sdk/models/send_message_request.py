# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from odin_sdk.models.open_canvas_graph_annotation import OpenCanvasGraphAnnotation
from typing import Optional, Set
from typing_extensions import Self

class SendMessageRequest(BaseModel):
    """
    SendMessageRequest
    """ # noqa: E501
    message: StrictStr
    project_id: StrictStr
    chat_id: Optional[StrictStr] = None
    document_keys: Optional[List[StrictStr]] = None
    google_search: Optional[StrictBool] = None
    is_test: Optional[StrictBool] = None
    personality_name: Optional[StrictStr] = None
    return_message: Optional[StrictBool] = None
    ai_response: Optional[StrictBool] = None
    model_name: Optional[StrictStr] = None
    agent_type: Optional[StrictStr] = None
    chat_name: Optional[StrictStr] = None
    agent_id: Optional[StrictStr] = None
    personality_id: Optional[StrictStr] = None
    use_knowledgebase: Optional[StrictBool] = None
    is_regenerating: Optional[StrictBool] = None
    message_id: Optional[StrictStr] = None
    ui_form: Optional[Dict[str, Any]] = None
    images: Optional[List[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]]] = None
    format_instructions: Optional[StrictStr] = None
    ignore_chat_history: Optional[StrictBool] = None
    example_json: Optional[StrictStr] = None
    is_teams_bot: Optional[StrictBool] = None
    sent_from_automator: Optional[StrictBool] = None
    skip_stream: Optional[StrictBool] = None
    request_metadata: Optional[Dict[str, Any]] = None
    artifact: Optional[OpenCanvasGraphAnnotation] = None
    __properties: ClassVar[List[str]] = ["message", "project_id", "chat_id", "document_keys", "google_search", "is_test", "personality_name", "return_message", "ai_response", "model_name", "agent_type", "chat_name", "agent_id", "personality_id", "use_knowledgebase", "is_regenerating", "message_id", "ui_form", "images", "format_instructions", "ignore_chat_history", "example_json", "is_teams_bot", "sent_from_automator", "skip_stream", "request_metadata", "artifact"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # set to None if chat_id (nullable) is None
        # and model_fields_set contains the field
        if self.chat_id is None and "chat_id" in self.model_fields_set:
            _dict['chat_id'] = None

        # set to None if document_keys (nullable) is None
        # and model_fields_set contains the field
        if self.document_keys is None and "document_keys" in self.model_fields_set:
            _dict['document_keys'] = None

        # set to None if google_search (nullable) is None
        # and model_fields_set contains the field
        if self.google_search is None and "google_search" in self.model_fields_set:
            _dict['google_search'] = None

        # set to None if is_test (nullable) is None
        # and model_fields_set contains the field
        if self.is_test is None and "is_test" in self.model_fields_set:
            _dict['is_test'] = None

        # set to None if personality_name (nullable) is None
        # and model_fields_set contains the field
        if self.personality_name is None and "personality_name" in self.model_fields_set:
            _dict['personality_name'] = None

        # set to None if return_message (nullable) is None
        # and model_fields_set contains the field
        if self.return_message is None and "return_message" in self.model_fields_set:
            _dict['return_message'] = None

        # set to None if ai_response (nullable) is None
        # and model_fields_set contains the field
        if self.ai_response is None and "ai_response" in self.model_fields_set:
            _dict['ai_response'] = None

        # set to None if model_name (nullable) is None
        # and model_fields_set contains the field
        if self.model_name is None and "model_name" in self.model_fields_set:
            _dict['model_name'] = None

        # set to None if agent_type (nullable) is None
        # and model_fields_set contains the field
        if self.agent_type is None and "agent_type" in self.model_fields_set:
            _dict['agent_type'] = None

        # set to None if chat_name (nullable) is None
        # and model_fields_set contains the field
        if self.chat_name is None and "chat_name" in self.model_fields_set:
            _dict['chat_name'] = None

        # set to None if agent_id (nullable) is None
        # and model_fields_set contains the field
        if self.agent_id is None and "agent_id" in self.model_fields_set:
            _dict['agent_id'] = None

        # set to None if personality_id (nullable) is None
        # and model_fields_set contains the field
        if self.personality_id is None and "personality_id" in self.model_fields_set:
            _dict['personality_id'] = None

        # set to None if use_knowledgebase (nullable) is None
        # and model_fields_set contains the field
        if self.use_knowledgebase is None and "use_knowledgebase" in self.model_fields_set:
            _dict['use_knowledgebase'] = None

        # set to None if is_regenerating (nullable) is None
        # and model_fields_set contains the field
        if self.is_regenerating is None and "is_regenerating" in self.model_fields_set:
            _dict['is_regenerating'] = None

        # set to None if message_id (nullable) is None
        # and model_fields_set contains the field
        if self.message_id is None and "message_id" in self.model_fields_set:
            _dict['message_id'] = None

        # set to None if ui_form (nullable) is None
        # and model_fields_set contains the field
        if self.ui_form is None and "ui_form" in self.model_fields_set:
            _dict['ui_form'] = None

        # set to None if images (nullable) is None
        # and model_fields_set contains the field
        if self.images is None and "images" in self.model_fields_set:
            _dict['images'] = None

        # set to None if format_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.format_instructions is None and "format_instructions" in self.model_fields_set:
            _dict['format_instructions'] = None

        # set to None if ignore_chat_history (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_chat_history is None and "ignore_chat_history" in self.model_fields_set:
            _dict['ignore_chat_history'] = None

        # set to None if example_json (nullable) is None
        # and model_fields_set contains the field
        if self.example_json is None and "example_json" in self.model_fields_set:
            _dict['example_json'] = None

        # set to None if is_teams_bot (nullable) is None
        # and model_fields_set contains the field
        if self.is_teams_bot is None and "is_teams_bot" in self.model_fields_set:
            _dict['is_teams_bot'] = None

        # set to None if sent_from_automator (nullable) is None
        # and model_fields_set contains the field
        if self.sent_from_automator is None and "sent_from_automator" in self.model_fields_set:
            _dict['sent_from_automator'] = None

        # set to None if skip_stream (nullable) is None
        # and model_fields_set contains the field
        if self.skip_stream is None and "skip_stream" in self.model_fields_set:
            _dict['skip_stream'] = None

        # set to None if request_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.request_metadata is None and "request_metadata" in self.model_fields_set:
            _dict['request_metadata'] = None

        # set to None if artifact (nullable) is None
        # and model_fields_set contains the field
        if self.artifact is None and "artifact" in self.model_fields_set:
            _dict['artifact'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "project_id": obj.get("project_id"),
            "chat_id": obj.get("chat_id"),
            "document_keys": obj.get("document_keys"),
            "google_search": obj.get("google_search"),
            "is_test": obj.get("is_test"),
            "personality_name": obj.get("personality_name"),
            "return_message": obj.get("return_message"),
            "ai_response": obj.get("ai_response"),
            "model_name": obj.get("model_name"),
            "agent_type": obj.get("agent_type"),
            "chat_name": obj.get("chat_name"),
            "agent_id": obj.get("agent_id"),
            "personality_id": obj.get("personality_id"),
            "use_knowledgebase": obj.get("use_knowledgebase"),
            "is_regenerating": obj.get("is_regenerating"),
            "message_id": obj.get("message_id"),
            "ui_form": obj.get("ui_form"),
            "images": obj.get("images"),
            "format_instructions": obj.get("format_instructions"),
            "ignore_chat_history": obj.get("ignore_chat_history"),
            "example_json": obj.get("example_json"),
            "is_teams_bot": obj.get("is_teams_bot"),
            "sent_from_automator": obj.get("sent_from_automator"),
            "skip_stream": obj.get("skip_stream"),
            "request_metadata": obj.get("request_metadata"),
            "artifact": OpenCanvasGraphAnnotation.from_dict(obj["artifact"]) if obj.get("artifact") is not None else None
        })
        return _obj


