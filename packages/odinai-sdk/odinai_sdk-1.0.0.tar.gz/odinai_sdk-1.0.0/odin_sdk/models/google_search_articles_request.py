# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleSearchArticlesRequest(BaseModel):
    """
    GoogleSearchArticlesRequest
    """ # noqa: E501
    query: StrictStr = Field(description="The query to search for.")
    max_results: Optional[StrictInt] = Field(default=5, description="The maximum number of results to return.")
    download_pages: Optional[StrictBool] = Field(default=False, description="Whether to download the pages or not.")
    search_type: Optional[StrictStr] = Field(default='google', description="The search type. Currently all or news is supported.")
    website_white_list: Optional[List[StrictStr]] = Field(default=None, description="The list of websites to limit the search to.")
    limit_date_range: Optional[StrictBool] = None
    date_range_start: Optional[Union[StrictFloat, StrictInt]] = None
    date_range_end: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["query", "max_results", "download_pages", "search_type", "website_white_list", "limit_date_range", "date_range_start", "date_range_end"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSearchArticlesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if limit_date_range (nullable) is None
        # and model_fields_set contains the field
        if self.limit_date_range is None and "limit_date_range" in self.model_fields_set:
            _dict['limit_date_range'] = None

        # set to None if date_range_start (nullable) is None
        # and model_fields_set contains the field
        if self.date_range_start is None and "date_range_start" in self.model_fields_set:
            _dict['date_range_start'] = None

        # set to None if date_range_end (nullable) is None
        # and model_fields_set contains the field
        if self.date_range_end is None and "date_range_end" in self.model_fields_set:
            _dict['date_range_end'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSearchArticlesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "max_results": obj.get("max_results") if obj.get("max_results") is not None else 5,
            "download_pages": obj.get("download_pages") if obj.get("download_pages") is not None else False,
            "search_type": obj.get("search_type") if obj.get("search_type") is not None else 'google',
            "website_white_list": obj.get("website_white_list"),
            "limit_date_range": obj.get("limit_date_range"),
            "date_range_start": obj.get("date_range_start"),
            "date_range_end": obj.get("date_range_end")
        })
        return _obj


