# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CodeScriptResponse(BaseModel):
    """
    Response model for code script
    """ # noqa: E501
    id: StrictInt
    user_id: StrictStr
    project_id: StrictStr
    name: StrictStr
    description: Optional[StrictStr]
    created_at: datetime
    updated_at: datetime
    script: StrictStr
    runtime: StrictStr
    entry_point: StrictStr
    dependencies: List[StrictStr]
    custom_resource_settings: Optional[Dict[str, Any]]
    is_published: StrictBool
    version: Optional[StrictStr]
    published_at: Optional[datetime]
    __properties: ClassVar[List[str]] = ["id", "user_id", "project_id", "name", "description", "created_at", "updated_at", "script", "runtime", "entry_point", "dependencies", "custom_resource_settings", "is_published", "version", "published_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CodeScriptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if custom_resource_settings (nullable) is None
        # and model_fields_set contains the field
        if self.custom_resource_settings is None and "custom_resource_settings" in self.model_fields_set:
            _dict['custom_resource_settings'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if published_at (nullable) is None
        # and model_fields_set contains the field
        if self.published_at is None and "published_at" in self.model_fields_set:
            _dict['published_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CodeScriptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "project_id": obj.get("project_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "script": obj.get("script"),
            "runtime": obj.get("runtime"),
            "entry_point": obj.get("entry_point"),
            "dependencies": obj.get("dependencies"),
            "custom_resource_settings": obj.get("custom_resource_settings"),
            "is_published": obj.get("is_published"),
            "version": obj.get("version"),
            "published_at": obj.get("published_at")
        })
        return _obj


