# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from odin_sdk.models.relevant_chunks import RelevantChunks
from typing import Optional, Set
from typing_extensions import Self

class DbEvalQnAPair(BaseModel):
    """
    DbEvalQnAPair
    """ # noqa: E501
    id: StrictStr
    question: StrictStr
    answer: StrictStr
    relevant_chunks: List[RelevantChunks]
    chunk_ids: List[StrictInt]
    citation_correctness: Optional[Union[StrictFloat, StrictInt]] = None
    citation_redundancy: Optional[Union[StrictFloat, StrictInt]] = None
    retrieval_correctness: Optional[Union[StrictFloat, StrictInt]] = None
    retrieval_precision: Optional[Union[StrictFloat, StrictInt]] = None
    document_keys: Optional[List[StrictStr]] = None
    created_at: datetime
    updated_at: datetime
    project_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "question", "answer", "relevant_chunks", "chunk_ids", "citation_correctness", "citation_redundancy", "retrieval_correctness", "retrieval_precision", "document_keys", "created_at", "updated_at", "project_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbEvalQnAPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in relevant_chunks (list)
        _items = []
        if self.relevant_chunks:
            for _item_relevant_chunks in self.relevant_chunks:
                if _item_relevant_chunks:
                    _items.append(_item_relevant_chunks.to_dict())
            _dict['relevant_chunks'] = _items
        # set to None if citation_correctness (nullable) is None
        # and model_fields_set contains the field
        if self.citation_correctness is None and "citation_correctness" in self.model_fields_set:
            _dict['citation_correctness'] = None

        # set to None if citation_redundancy (nullable) is None
        # and model_fields_set contains the field
        if self.citation_redundancy is None and "citation_redundancy" in self.model_fields_set:
            _dict['citation_redundancy'] = None

        # set to None if retrieval_correctness (nullable) is None
        # and model_fields_set contains the field
        if self.retrieval_correctness is None and "retrieval_correctness" in self.model_fields_set:
            _dict['retrieval_correctness'] = None

        # set to None if retrieval_precision (nullable) is None
        # and model_fields_set contains the field
        if self.retrieval_precision is None and "retrieval_precision" in self.model_fields_set:
            _dict['retrieval_precision'] = None

        # set to None if document_keys (nullable) is None
        # and model_fields_set contains the field
        if self.document_keys is None and "document_keys" in self.model_fields_set:
            _dict['document_keys'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbEvalQnAPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "question": obj.get("question"),
            "answer": obj.get("answer"),
            "relevant_chunks": [RelevantChunks.from_dict(_item) for _item in obj["relevant_chunks"]] if obj.get("relevant_chunks") is not None else None,
            "chunk_ids": obj.get("chunk_ids"),
            "citation_correctness": obj.get("citation_correctness"),
            "citation_redundancy": obj.get("citation_redundancy"),
            "retrieval_correctness": obj.get("retrieval_correctness"),
            "retrieval_precision": obj.get("retrieval_precision"),
            "document_keys": obj.get("document_keys"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "project_id": obj.get("project_id")
        })
        return _obj


