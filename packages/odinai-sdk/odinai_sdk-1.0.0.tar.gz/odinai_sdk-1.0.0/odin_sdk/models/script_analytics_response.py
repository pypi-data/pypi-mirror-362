# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ScriptAnalyticsResponse(BaseModel):
    """
    Response model for script analytics
    """ # noqa: E501
    script_id: StrictInt
    script_name: StrictStr
    runtime: StrictStr
    total_executions: StrictInt
    successful_executions: StrictInt
    failed_executions: StrictInt
    timeout_executions: StrictInt
    success_rate: Union[StrictFloat, StrictInt]
    avg_success_time_ms: Optional[Union[StrictFloat, StrictInt]]
    min_success_time_ms: Optional[StrictInt]
    max_success_time_ms: Optional[StrictInt]
    avg_memory_used_mb: Optional[Union[StrictFloat, StrictInt]]
    last_executed_at: Optional[datetime]
    first_executed_at: Optional[datetime]
    __properties: ClassVar[List[str]] = ["script_id", "script_name", "runtime", "total_executions", "successful_executions", "failed_executions", "timeout_executions", "success_rate", "avg_success_time_ms", "min_success_time_ms", "max_success_time_ms", "avg_memory_used_mb", "last_executed_at", "first_executed_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScriptAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if avg_success_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.avg_success_time_ms is None and "avg_success_time_ms" in self.model_fields_set:
            _dict['avg_success_time_ms'] = None

        # set to None if min_success_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.min_success_time_ms is None and "min_success_time_ms" in self.model_fields_set:
            _dict['min_success_time_ms'] = None

        # set to None if max_success_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.max_success_time_ms is None and "max_success_time_ms" in self.model_fields_set:
            _dict['max_success_time_ms'] = None

        # set to None if avg_memory_used_mb (nullable) is None
        # and model_fields_set contains the field
        if self.avg_memory_used_mb is None and "avg_memory_used_mb" in self.model_fields_set:
            _dict['avg_memory_used_mb'] = None

        # set to None if last_executed_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_executed_at is None and "last_executed_at" in self.model_fields_set:
            _dict['last_executed_at'] = None

        # set to None if first_executed_at (nullable) is None
        # and model_fields_set contains the field
        if self.first_executed_at is None and "first_executed_at" in self.model_fields_set:
            _dict['first_executed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScriptAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "script_id": obj.get("script_id"),
            "script_name": obj.get("script_name"),
            "runtime": obj.get("runtime"),
            "total_executions": obj.get("total_executions"),
            "successful_executions": obj.get("successful_executions"),
            "failed_executions": obj.get("failed_executions"),
            "timeout_executions": obj.get("timeout_executions"),
            "success_rate": obj.get("success_rate"),
            "avg_success_time_ms": obj.get("avg_success_time_ms"),
            "min_success_time_ms": obj.get("min_success_time_ms"),
            "max_success_time_ms": obj.get("max_success_time_ms"),
            "avg_memory_used_mb": obj.get("avg_memory_used_mb"),
            "last_executed_at": obj.get("last_executed_at"),
            "first_executed_at": obj.get("first_executed_at")
        })
        return _obj


