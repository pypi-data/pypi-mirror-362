# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.artifact_length_options import ArtifactLengthOptions
from odin_sdk.models.artifact_v3 import ArtifactV3
from odin_sdk.models.code_highlight import CodeHighlight
from odin_sdk.models.language_options import LanguageOptions
from odin_sdk.models.programming_language_options import ProgrammingLanguageOptions
from odin_sdk.models.reading_level_options import ReadingLevelOptions
from odin_sdk.models.text_highlight import TextHighlight
from typing import Optional, Set
from typing_extensions import Self

class OpenCanvasGraphAnnotation(BaseModel):
    """
    OpenCanvasGraphAnnotation
    """ # noqa: E501
    highlighted_code: Optional[CodeHighlight] = None
    highlighted_text: Optional[TextHighlight] = None
    artifact: Optional[ArtifactV3] = None
    next: Optional[StrictStr] = None
    language: Optional[LanguageOptions] = None
    artifact_length: Optional[ArtifactLengthOptions] = None
    regenerate_with_emojis: Optional[StrictBool] = None
    reading_level: Optional[ReadingLevelOptions] = None
    add_comments: Optional[StrictBool] = None
    add_logs: Optional[StrictBool] = None
    port_language: Optional[ProgrammingLanguageOptions] = None
    fix_bugs: Optional[StrictBool] = None
    custom_quick_action_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["highlighted_code", "highlighted_text", "artifact", "next", "language", "artifact_length", "regenerate_with_emojis", "reading_level", "add_comments", "add_logs", "port_language", "fix_bugs", "custom_quick_action_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenCanvasGraphAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of highlighted_code
        if self.highlighted_code:
            _dict['highlighted_code'] = self.highlighted_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of highlighted_text
        if self.highlighted_text:
            _dict['highlighted_text'] = self.highlighted_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # set to None if highlighted_code (nullable) is None
        # and model_fields_set contains the field
        if self.highlighted_code is None and "highlighted_code" in self.model_fields_set:
            _dict['highlighted_code'] = None

        # set to None if highlighted_text (nullable) is None
        # and model_fields_set contains the field
        if self.highlighted_text is None and "highlighted_text" in self.model_fields_set:
            _dict['highlighted_text'] = None

        # set to None if artifact (nullable) is None
        # and model_fields_set contains the field
        if self.artifact is None and "artifact" in self.model_fields_set:
            _dict['artifact'] = None

        # set to None if next (nullable) is None
        # and model_fields_set contains the field
        if self.next is None and "next" in self.model_fields_set:
            _dict['next'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if artifact_length (nullable) is None
        # and model_fields_set contains the field
        if self.artifact_length is None and "artifact_length" in self.model_fields_set:
            _dict['artifact_length'] = None

        # set to None if regenerate_with_emojis (nullable) is None
        # and model_fields_set contains the field
        if self.regenerate_with_emojis is None and "regenerate_with_emojis" in self.model_fields_set:
            _dict['regenerate_with_emojis'] = None

        # set to None if reading_level (nullable) is None
        # and model_fields_set contains the field
        if self.reading_level is None and "reading_level" in self.model_fields_set:
            _dict['reading_level'] = None

        # set to None if add_comments (nullable) is None
        # and model_fields_set contains the field
        if self.add_comments is None and "add_comments" in self.model_fields_set:
            _dict['add_comments'] = None

        # set to None if add_logs (nullable) is None
        # and model_fields_set contains the field
        if self.add_logs is None and "add_logs" in self.model_fields_set:
            _dict['add_logs'] = None

        # set to None if port_language (nullable) is None
        # and model_fields_set contains the field
        if self.port_language is None and "port_language" in self.model_fields_set:
            _dict['port_language'] = None

        # set to None if fix_bugs (nullable) is None
        # and model_fields_set contains the field
        if self.fix_bugs is None and "fix_bugs" in self.model_fields_set:
            _dict['fix_bugs'] = None

        # set to None if custom_quick_action_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_quick_action_id is None and "custom_quick_action_id" in self.model_fields_set:
            _dict['custom_quick_action_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenCanvasGraphAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "highlighted_code": CodeHighlight.from_dict(obj["highlighted_code"]) if obj.get("highlighted_code") is not None else None,
            "highlighted_text": TextHighlight.from_dict(obj["highlighted_text"]) if obj.get("highlighted_text") is not None else None,
            "artifact": ArtifactV3.from_dict(obj["artifact"]) if obj.get("artifact") is not None else None,
            "next": obj.get("next"),
            "language": obj.get("language"),
            "artifact_length": obj.get("artifact_length"),
            "regenerate_with_emojis": obj.get("regenerate_with_emojis"),
            "reading_level": obj.get("reading_level"),
            "add_comments": obj.get("add_comments"),
            "add_logs": obj.get("add_logs"),
            "port_language": obj.get("port_language"),
            "fix_bugs": obj.get("fix_bugs"),
            "custom_quick_action_id": obj.get("custom_quick_action_id")
        })
        return _obj


