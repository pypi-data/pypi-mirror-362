# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from odin_sdk.models.message_group import MessageGroup
from typing import Optional, Set
from typing_extensions import Self

class KnowledgeBaseAnalyticsResponse(BaseModel):
    """
    KnowledgeBaseAnalyticsResponse
    """ # noqa: E501
    total_messages: StrictInt
    total_responses: StrictInt
    failed_messages: StrictInt
    avg_messages_per_user: Union[StrictFloat, StrictInt]
    avg_message_length: Union[StrictFloat, StrictInt]
    avg_response_length: Union[StrictFloat, StrictInt]
    avg_message_per_convo: Union[StrictFloat, StrictInt]
    positive_feedback: Union[StrictFloat, StrictInt]
    negative_feedback: Union[StrictFloat, StrictInt]
    similar_messages: Dict[str, MessageGroup]
    __properties: ClassVar[List[str]] = ["total_messages", "total_responses", "failed_messages", "avg_messages_per_user", "avg_message_length", "avg_response_length", "avg_message_per_convo", "positive_feedback", "negative_feedback", "similar_messages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnowledgeBaseAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in similar_messages (dict)
        _field_dict = {}
        if self.similar_messages:
            for _key_similar_messages in self.similar_messages:
                if self.similar_messages[_key_similar_messages]:
                    _field_dict[_key_similar_messages] = self.similar_messages[_key_similar_messages].to_dict()
            _dict['similar_messages'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnowledgeBaseAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_messages": obj.get("total_messages"),
            "total_responses": obj.get("total_responses"),
            "failed_messages": obj.get("failed_messages"),
            "avg_messages_per_user": obj.get("avg_messages_per_user"),
            "avg_message_length": obj.get("avg_message_length"),
            "avg_response_length": obj.get("avg_response_length"),
            "avg_message_per_convo": obj.get("avg_message_per_convo"),
            "positive_feedback": obj.get("positive_feedback"),
            "negative_feedback": obj.get("negative_feedback"),
            "similar_messages": dict(
                (_k, MessageGroup.from_dict(_v))
                for _k, _v in obj["similar_messages"].items()
            )
            if obj.get("similar_messages") is not None
            else None
        })
        return _obj


