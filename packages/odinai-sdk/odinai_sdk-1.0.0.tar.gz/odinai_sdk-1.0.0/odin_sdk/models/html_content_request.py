# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HTMLContentRequest(BaseModel):
    """
    HTMLContentRequest
    """ # noqa: E501
    content: StrictStr
    project_id: StrictStr
    metadata: Optional[Dict[str, Any]] = None
    file_type: Optional[StrictStr] = None
    force: Optional[StrictBool] = None
    is_quick_upload: Optional[StrictBool] = None
    pageurl: StrictStr
    path: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["content", "project_id", "metadata", "file_type", "force", "is_quick_upload", "pageurl", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HTMLContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if file_type (nullable) is None
        # and model_fields_set contains the field
        if self.file_type is None and "file_type" in self.model_fields_set:
            _dict['file_type'] = None

        # set to None if force (nullable) is None
        # and model_fields_set contains the field
        if self.force is None and "force" in self.model_fields_set:
            _dict['force'] = None

        # set to None if is_quick_upload (nullable) is None
        # and model_fields_set contains the field
        if self.is_quick_upload is None and "is_quick_upload" in self.model_fields_set:
            _dict['is_quick_upload'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HTMLContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "project_id": obj.get("project_id"),
            "metadata": obj.get("metadata"),
            "file_type": obj.get("file_type"),
            "force": obj.get("force"),
            "is_quick_upload": obj.get("is_quick_upload"),
            "pageurl": obj.get("pageurl"),
            "path": obj.get("path")
        })
        return _obj


