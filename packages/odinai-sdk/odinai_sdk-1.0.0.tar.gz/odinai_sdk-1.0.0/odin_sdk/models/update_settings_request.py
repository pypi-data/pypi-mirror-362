# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSettingsRequest(BaseModel):
    """
    UpdateSettingsRequest
    """ # noqa: E501
    local_signups: Optional[StrictBool] = None
    team_name: Optional[StrictStr] = None
    disable_meetings: Optional[StrictBool] = None
    default_project_id: Optional[StrictStr] = None
    aihub_projects_whitelist: Optional[List[StrictStr]] = None
    auto_add_users_by_domain: Optional[StrictBool] = None
    team_email_domain: Optional[StrictStr] = None
    chat_mode_appearance: Optional[Dict[str, Any]] = None
    chat_mode_for_members: Optional[StrictBool] = None
    enable_user_credit_limits: Optional[StrictBool] = None
    default_user_credit_limit: Optional[StrictInt] = None
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["local_signups", "team_name", "disable_meetings", "default_project_id", "aihub_projects_whitelist", "auto_add_users_by_domain", "team_email_domain", "chat_mode_appearance", "chat_mode_for_members", "enable_user_credit_limits", "default_user_credit_limit", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if local_signups (nullable) is None
        # and model_fields_set contains the field
        if self.local_signups is None and "local_signups" in self.model_fields_set:
            _dict['local_signups'] = None

        # set to None if team_name (nullable) is None
        # and model_fields_set contains the field
        if self.team_name is None and "team_name" in self.model_fields_set:
            _dict['team_name'] = None

        # set to None if disable_meetings (nullable) is None
        # and model_fields_set contains the field
        if self.disable_meetings is None and "disable_meetings" in self.model_fields_set:
            _dict['disable_meetings'] = None

        # set to None if default_project_id (nullable) is None
        # and model_fields_set contains the field
        if self.default_project_id is None and "default_project_id" in self.model_fields_set:
            _dict['default_project_id'] = None

        # set to None if aihub_projects_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.aihub_projects_whitelist is None and "aihub_projects_whitelist" in self.model_fields_set:
            _dict['aihub_projects_whitelist'] = None

        # set to None if auto_add_users_by_domain (nullable) is None
        # and model_fields_set contains the field
        if self.auto_add_users_by_domain is None and "auto_add_users_by_domain" in self.model_fields_set:
            _dict['auto_add_users_by_domain'] = None

        # set to None if team_email_domain (nullable) is None
        # and model_fields_set contains the field
        if self.team_email_domain is None and "team_email_domain" in self.model_fields_set:
            _dict['team_email_domain'] = None

        # set to None if chat_mode_appearance (nullable) is None
        # and model_fields_set contains the field
        if self.chat_mode_appearance is None and "chat_mode_appearance" in self.model_fields_set:
            _dict['chat_mode_appearance'] = None

        # set to None if chat_mode_for_members (nullable) is None
        # and model_fields_set contains the field
        if self.chat_mode_for_members is None and "chat_mode_for_members" in self.model_fields_set:
            _dict['chat_mode_for_members'] = None

        # set to None if enable_user_credit_limits (nullable) is None
        # and model_fields_set contains the field
        if self.enable_user_credit_limits is None and "enable_user_credit_limits" in self.model_fields_set:
            _dict['enable_user_credit_limits'] = None

        # set to None if default_user_credit_limit (nullable) is None
        # and model_fields_set contains the field
        if self.default_user_credit_limit is None and "default_user_credit_limit" in self.model_fields_set:
            _dict['default_user_credit_limit'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local_signups": obj.get("local_signups"),
            "team_name": obj.get("team_name"),
            "disable_meetings": obj.get("disable_meetings"),
            "default_project_id": obj.get("default_project_id"),
            "aihub_projects_whitelist": obj.get("aihub_projects_whitelist"),
            "auto_add_users_by_domain": obj.get("auto_add_users_by_domain"),
            "team_email_domain": obj.get("team_email_domain"),
            "chat_mode_appearance": obj.get("chat_mode_appearance"),
            "chat_mode_for_members": obj.get("chat_mode_for_members"),
            "enable_user_credit_limits": obj.get("enable_user_credit_limits"),
            "default_user_credit_limit": obj.get("default_user_credit_limit"),
            "tags": obj.get("tags")
        })
        return _obj


