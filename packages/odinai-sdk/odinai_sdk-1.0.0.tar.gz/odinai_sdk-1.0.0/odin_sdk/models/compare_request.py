# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CompareRequest(BaseModel):
    """
    CompareRequest
    """ # noqa: E501
    project_id: StrictStr = Field(description="The ID of the project on which to execute the action.")
    document_1: Optional[StrictStr] = None
    document_2: Optional[StrictStr] = None
    doc_1_content: Optional[StrictStr] = None
    doc_2_content: Optional[StrictStr] = None
    ignore_instructions: Optional[List[Any]] = None
    credit_usage_limit: Optional[StrictInt] = None
    diff_ai_overide_limit: Optional[StrictInt] = None
    sent_from_automator: Optional[StrictBool] = None
    wait_till_complete: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["project_id", "document_1", "document_2", "doc_1_content", "doc_2_content", "ignore_instructions", "credit_usage_limit", "diff_ai_overide_limit", "sent_from_automator", "wait_till_complete"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompareRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if document_1 (nullable) is None
        # and model_fields_set contains the field
        if self.document_1 is None and "document_1" in self.model_fields_set:
            _dict['document_1'] = None

        # set to None if document_2 (nullable) is None
        # and model_fields_set contains the field
        if self.document_2 is None and "document_2" in self.model_fields_set:
            _dict['document_2'] = None

        # set to None if doc_1_content (nullable) is None
        # and model_fields_set contains the field
        if self.doc_1_content is None and "doc_1_content" in self.model_fields_set:
            _dict['doc_1_content'] = None

        # set to None if doc_2_content (nullable) is None
        # and model_fields_set contains the field
        if self.doc_2_content is None and "doc_2_content" in self.model_fields_set:
            _dict['doc_2_content'] = None

        # set to None if ignore_instructions (nullable) is None
        # and model_fields_set contains the field
        if self.ignore_instructions is None and "ignore_instructions" in self.model_fields_set:
            _dict['ignore_instructions'] = None

        # set to None if credit_usage_limit (nullable) is None
        # and model_fields_set contains the field
        if self.credit_usage_limit is None and "credit_usage_limit" in self.model_fields_set:
            _dict['credit_usage_limit'] = None

        # set to None if diff_ai_overide_limit (nullable) is None
        # and model_fields_set contains the field
        if self.diff_ai_overide_limit is None and "diff_ai_overide_limit" in self.model_fields_set:
            _dict['diff_ai_overide_limit'] = None

        # set to None if sent_from_automator (nullable) is None
        # and model_fields_set contains the field
        if self.sent_from_automator is None and "sent_from_automator" in self.model_fields_set:
            _dict['sent_from_automator'] = None

        # set to None if wait_till_complete (nullable) is None
        # and model_fields_set contains the field
        if self.wait_till_complete is None and "wait_till_complete" in self.model_fields_set:
            _dict['wait_till_complete'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompareRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "document_1": obj.get("document_1"),
            "document_2": obj.get("document_2"),
            "doc_1_content": obj.get("doc_1_content"),
            "doc_2_content": obj.get("doc_2_content"),
            "ignore_instructions": obj.get("ignore_instructions"),
            "credit_usage_limit": obj.get("credit_usage_limit"),
            "diff_ai_overide_limit": obj.get("diff_ai_overide_limit"),
            "sent_from_automator": obj.get("sent_from_automator"),
            "wait_till_complete": obj.get("wait_till_complete")
        })
        return _obj


