# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.team_info_details_api_keys_value import TeamInfoDetailsApiKeysValue
from odin_sdk.models.team_info_details_members_inner import TeamInfoDetailsMembersInner
from typing import Optional, Set
from typing_extensions import Self

class TeamInfoDetails(BaseModel):
    """
    TeamInfoDetails
    """ # noqa: E501
    active: Optional[StrictBool] = None
    admin: Optional[List[StrictStr]] = None
    name: Optional[StrictStr] = None
    credits: Optional[StrictInt] = None
    used_credits: Optional[StrictInt] = None
    bonus_credits: Optional[StrictInt] = None
    allowed_seats: Optional[StrictInt] = None
    team_id: Optional[StrictStr] = None
    members: Optional[List[TeamInfoDetailsMembersInner]] = None
    email_domain: Optional[StrictStr] = None
    owner: Optional[StrictStr] = None
    plan_type: Optional[StrictStr] = None
    api_keys: Optional[Dict[str, Optional[TeamInfoDetailsApiKeysValue]]] = None
    settings: Optional[Dict[str, Any]] = None
    aihub_projects_whitelist: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["active", "admin", "name", "credits", "used_credits", "bonus_credits", "allowed_seats", "team_id", "members", "email_domain", "owner", "plan_type", "api_keys", "settings", "aihub_projects_whitelist"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamInfoDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in api_keys (dict)
        _field_dict = {}
        if self.api_keys:
            for _key_api_keys in self.api_keys:
                if self.api_keys[_key_api_keys]:
                    _field_dict[_key_api_keys] = self.api_keys[_key_api_keys].to_dict()
            _dict['api_keys'] = _field_dict
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['active'] = None

        # set to None if admin (nullable) is None
        # and model_fields_set contains the field
        if self.admin is None and "admin" in self.model_fields_set:
            _dict['admin'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if credits (nullable) is None
        # and model_fields_set contains the field
        if self.credits is None and "credits" in self.model_fields_set:
            _dict['credits'] = None

        # set to None if used_credits (nullable) is None
        # and model_fields_set contains the field
        if self.used_credits is None and "used_credits" in self.model_fields_set:
            _dict['used_credits'] = None

        # set to None if bonus_credits (nullable) is None
        # and model_fields_set contains the field
        if self.bonus_credits is None and "bonus_credits" in self.model_fields_set:
            _dict['bonus_credits'] = None

        # set to None if allowed_seats (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_seats is None and "allowed_seats" in self.model_fields_set:
            _dict['allowed_seats'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['team_id'] = None

        # set to None if members (nullable) is None
        # and model_fields_set contains the field
        if self.members is None and "members" in self.model_fields_set:
            _dict['members'] = None

        # set to None if email_domain (nullable) is None
        # and model_fields_set contains the field
        if self.email_domain is None and "email_domain" in self.model_fields_set:
            _dict['email_domain'] = None

        # set to None if owner (nullable) is None
        # and model_fields_set contains the field
        if self.owner is None and "owner" in self.model_fields_set:
            _dict['owner'] = None

        # set to None if plan_type (nullable) is None
        # and model_fields_set contains the field
        if self.plan_type is None and "plan_type" in self.model_fields_set:
            _dict['plan_type'] = None

        # set to None if api_keys (nullable) is None
        # and model_fields_set contains the field
        if self.api_keys is None and "api_keys" in self.model_fields_set:
            _dict['api_keys'] = None

        # set to None if settings (nullable) is None
        # and model_fields_set contains the field
        if self.settings is None and "settings" in self.model_fields_set:
            _dict['settings'] = None

        # set to None if aihub_projects_whitelist (nullable) is None
        # and model_fields_set contains the field
        if self.aihub_projects_whitelist is None and "aihub_projects_whitelist" in self.model_fields_set:
            _dict['aihub_projects_whitelist'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamInfoDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "admin": obj.get("admin"),
            "name": obj.get("name"),
            "credits": obj.get("credits"),
            "used_credits": obj.get("used_credits"),
            "bonus_credits": obj.get("bonus_credits"),
            "allowed_seats": obj.get("allowed_seats"),
            "team_id": obj.get("team_id"),
            "members": [TeamInfoDetailsMembersInner.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "email_domain": obj.get("email_domain"),
            "owner": obj.get("owner"),
            "plan_type": obj.get("plan_type"),
            "api_keys": dict(
                (_k, TeamInfoDetailsApiKeysValue.from_dict(_v))
                for _k, _v in obj["api_keys"].items()
            )
            if obj.get("api_keys") is not None
            else None,
            "settings": obj.get("settings"),
            "aihub_projects_whitelist": obj.get("aihub_projects_whitelist")
        })
        return _obj


