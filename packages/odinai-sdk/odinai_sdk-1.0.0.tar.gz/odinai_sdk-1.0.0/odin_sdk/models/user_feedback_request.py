# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserFeedbackRequest(BaseModel):
    """
    UserFeedbackRequest
    """ # noqa: E501
    user_feedback: Optional[StrictBool] = None
    message_id: StrictStr
    project_id: StrictStr
    chat_id: StrictStr
    additional_feedback: Optional[StrictBool] = None
    is_correct_answer_option: Optional[StrictBool] = None
    notes: Optional[StrictStr] = None
    unit_test_existing_group_id: Optional[StrictStr] = None
    new_unit_test_group_name: Optional[StrictStr] = None
    question: Optional[StrictStr] = None
    expected_answer: Optional[StrictStr] = None
    is_incorrect_answer_option: Optional[StrictBool] = None
    suggested_better_response: Optional[StrictStr] = None
    is_incorrect_source_url_option: Optional[StrictBool] = None
    correct_source_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["user_feedback", "message_id", "project_id", "chat_id", "additional_feedback", "is_correct_answer_option", "notes", "unit_test_existing_group_id", "new_unit_test_group_name", "question", "expected_answer", "is_incorrect_answer_option", "suggested_better_response", "is_incorrect_source_url_option", "correct_source_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserFeedbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if user_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.user_feedback is None and "user_feedback" in self.model_fields_set:
            _dict['user_feedback'] = None

        # set to None if additional_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.additional_feedback is None and "additional_feedback" in self.model_fields_set:
            _dict['additional_feedback'] = None

        # set to None if is_correct_answer_option (nullable) is None
        # and model_fields_set contains the field
        if self.is_correct_answer_option is None and "is_correct_answer_option" in self.model_fields_set:
            _dict['is_correct_answer_option'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if unit_test_existing_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.unit_test_existing_group_id is None and "unit_test_existing_group_id" in self.model_fields_set:
            _dict['unit_test_existing_group_id'] = None

        # set to None if new_unit_test_group_name (nullable) is None
        # and model_fields_set contains the field
        if self.new_unit_test_group_name is None and "new_unit_test_group_name" in self.model_fields_set:
            _dict['new_unit_test_group_name'] = None

        # set to None if question (nullable) is None
        # and model_fields_set contains the field
        if self.question is None and "question" in self.model_fields_set:
            _dict['question'] = None

        # set to None if expected_answer (nullable) is None
        # and model_fields_set contains the field
        if self.expected_answer is None and "expected_answer" in self.model_fields_set:
            _dict['expected_answer'] = None

        # set to None if is_incorrect_answer_option (nullable) is None
        # and model_fields_set contains the field
        if self.is_incorrect_answer_option is None and "is_incorrect_answer_option" in self.model_fields_set:
            _dict['is_incorrect_answer_option'] = None

        # set to None if suggested_better_response (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_better_response is None and "suggested_better_response" in self.model_fields_set:
            _dict['suggested_better_response'] = None

        # set to None if is_incorrect_source_url_option (nullable) is None
        # and model_fields_set contains the field
        if self.is_incorrect_source_url_option is None and "is_incorrect_source_url_option" in self.model_fields_set:
            _dict['is_incorrect_source_url_option'] = None

        # set to None if correct_source_url (nullable) is None
        # and model_fields_set contains the field
        if self.correct_source_url is None and "correct_source_url" in self.model_fields_set:
            _dict['correct_source_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserFeedbackRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_feedback": obj.get("user_feedback"),
            "message_id": obj.get("message_id"),
            "project_id": obj.get("project_id"),
            "chat_id": obj.get("chat_id"),
            "additional_feedback": obj.get("additional_feedback"),
            "is_correct_answer_option": obj.get("is_correct_answer_option"),
            "notes": obj.get("notes"),
            "unit_test_existing_group_id": obj.get("unit_test_existing_group_id"),
            "new_unit_test_group_name": obj.get("new_unit_test_group_name"),
            "question": obj.get("question"),
            "expected_answer": obj.get("expected_answer"),
            "is_incorrect_answer_option": obj.get("is_incorrect_answer_option"),
            "suggested_better_response": obj.get("suggested_better_response"),
            "is_incorrect_source_url_option": obj.get("is_incorrect_source_url_option"),
            "correct_source_url": obj.get("correct_source_url")
        })
        return _obj


