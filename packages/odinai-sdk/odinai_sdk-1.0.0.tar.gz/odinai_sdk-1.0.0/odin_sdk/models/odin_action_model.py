# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.fields_for_action_flow import FieldsForActionFlow
from typing import Optional, Set
from typing_extensions import Self

class OdinActionModel(BaseModel):
    """
    OdinActionModel
    """ # noqa: E501
    flow_id: StrictStr = Field(description="The ID of the action flow.")
    action_name: StrictStr = Field(description="The name of the action.")
    action_description: StrictStr = Field(description="The description of the action.")
    required_fields_for_flow: Optional[List[FieldsForActionFlow]] = Field(default=None, description="The list of fields required for the action flow.")
    autosend: StrictBool = Field(description="Whether the action is autosendable or not.")
    type: Optional[StrictStr] = None
    config: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["flow_id", "action_name", "action_description", "required_fields_for_flow", "autosend", "type", "config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OdinActionModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in required_fields_for_flow (list)
        _items = []
        if self.required_fields_for_flow:
            for _item_required_fields_for_flow in self.required_fields_for_flow:
                if _item_required_fields_for_flow:
                    _items.append(_item_required_fields_for_flow.to_dict())
            _dict['required_fields_for_flow'] = _items
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OdinActionModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flow_id": obj.get("flow_id"),
            "action_name": obj.get("action_name"),
            "action_description": obj.get("action_description"),
            "required_fields_for_flow": [FieldsForActionFlow.from_dict(_item) for _item in obj["required_fields_for_flow"]] if obj.get("required_fields_for_flow") is not None else None,
            "autosend": obj.get("autosend"),
            "type": obj.get("type"),
            "config": obj.get("config")
        })
        return _obj


