# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ComputeAllRowsResponse(BaseModel):
    """
    ComputeAllRowsResponse
    """ # noqa: E501
    message: StrictStr
    total_rows_processed: StrictInt
    total_columns_updated: StrictInt
    updated_columns: List[StrictStr]
    failed_rows: List[StrictInt]
    stopped_due_to_failures: StrictBool
    retry_attempts: Dict[str, StrictInt]
    computation_id: Optional[StrictStr] = None
    history_table: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["message", "total_rows_processed", "total_columns_updated", "updated_columns", "failed_rows", "stopped_due_to_failures", "retry_attempts", "computation_id", "history_table", "task_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeAllRowsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if computation_id (nullable) is None
        # and model_fields_set contains the field
        if self.computation_id is None and "computation_id" in self.model_fields_set:
            _dict['computation_id'] = None

        # set to None if history_table (nullable) is None
        # and model_fields_set contains the field
        if self.history_table is None and "history_table" in self.model_fields_set:
            _dict['history_table'] = None

        # set to None if task_id (nullable) is None
        # and model_fields_set contains the field
        if self.task_id is None and "task_id" in self.model_fields_set:
            _dict['task_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeAllRowsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "total_rows_processed": obj.get("total_rows_processed"),
            "total_columns_updated": obj.get("total_columns_updated"),
            "updated_columns": obj.get("updated_columns"),
            "failed_rows": obj.get("failed_rows"),
            "stopped_due_to_failures": obj.get("stopped_due_to_failures"),
            "retry_attempts": obj.get("retry_attempts"),
            "computation_id": obj.get("computation_id"),
            "history_table": obj.get("history_table"),
            "task_id": obj.get("task_id")
        })
        return _obj


