# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from odin_sdk.models.model_extra_params import ModelExtraParams
from typing import Optional, Set
from typing_extensions import Self

class ModelUpdate(BaseModel):
    """
    ModelUpdate
    """ # noqa: E501
    model_name: StrictStr
    api_url: StrictStr
    api_type: StrictStr
    max_input_tokens: Optional[StrictInt]
    max_response_tokens: Optional[StrictInt]
    display_name: StrictStr
    cost: StrictInt
    hidden: Optional[StrictBool] = None
    api_key: Optional[StrictStr] = None
    api_version: Optional[StrictStr] = None
    is_default: Optional[StrictBool] = None
    is_default_extraction_model: Optional[StrictBool] = None
    is_default_citation_model: Optional[StrictBool] = None
    model_extra_params: Optional[ModelExtraParams] = None
    __properties: ClassVar[List[str]] = ["model_name", "api_url", "api_type", "max_input_tokens", "max_response_tokens", "display_name", "cost", "hidden", "api_key", "api_version", "is_default", "is_default_extraction_model", "is_default_citation_model", "model_extra_params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_extra_params
        if self.model_extra_params:
            _dict['model_extra_params'] = self.model_extra_params.to_dict()
        # set to None if max_input_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_input_tokens is None and "max_input_tokens" in self.model_fields_set:
            _dict['max_input_tokens'] = None

        # set to None if max_response_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_response_tokens is None and "max_response_tokens" in self.model_fields_set:
            _dict['max_response_tokens'] = None

        # set to None if hidden (nullable) is None
        # and model_fields_set contains the field
        if self.hidden is None and "hidden" in self.model_fields_set:
            _dict['hidden'] = None

        # set to None if api_key (nullable) is None
        # and model_fields_set contains the field
        if self.api_key is None and "api_key" in self.model_fields_set:
            _dict['api_key'] = None

        # set to None if api_version (nullable) is None
        # and model_fields_set contains the field
        if self.api_version is None and "api_version" in self.model_fields_set:
            _dict['api_version'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict['is_default'] = None

        # set to None if is_default_extraction_model (nullable) is None
        # and model_fields_set contains the field
        if self.is_default_extraction_model is None and "is_default_extraction_model" in self.model_fields_set:
            _dict['is_default_extraction_model'] = None

        # set to None if is_default_citation_model (nullable) is None
        # and model_fields_set contains the field
        if self.is_default_citation_model is None and "is_default_citation_model" in self.model_fields_set:
            _dict['is_default_citation_model'] = None

        # set to None if model_extra_params (nullable) is None
        # and model_fields_set contains the field
        if self.model_extra_params is None and "model_extra_params" in self.model_fields_set:
            _dict['model_extra_params'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "model_name": obj.get("model_name"),
            "api_url": obj.get("api_url"),
            "api_type": obj.get("api_type"),
            "max_input_tokens": obj.get("max_input_tokens"),
            "max_response_tokens": obj.get("max_response_tokens"),
            "display_name": obj.get("display_name"),
            "cost": obj.get("cost"),
            "hidden": obj.get("hidden"),
            "api_key": obj.get("api_key"),
            "api_version": obj.get("api_version"),
            "is_default": obj.get("is_default"),
            "is_default_extraction_model": obj.get("is_default_extraction_model"),
            "is_default_citation_model": obj.get("is_default_citation_model"),
            "model_extra_params": ModelExtraParams.from_dict(obj["model_extra_params"]) if obj.get("model_extra_params") is not None else None
        })
        return _obj


