# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetaData(BaseModel):
    """
    MetaData
    """ # noqa: E501
    file_name: Optional[StrictStr] = None
    doc_type: Optional[StrictStr] = None
    added_by: Optional[StrictStr] = None
    word_count: Optional[StrictInt] = None
    char_count: Optional[StrictInt] = None
    disk_usage: Optional[StrictInt] = None
    custom_metadata: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["file_name", "doc_type", "added_by", "word_count", "char_count", "disk_usage", "custom_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if file_name (nullable) is None
        # and model_fields_set contains the field
        if self.file_name is None and "file_name" in self.model_fields_set:
            _dict['file_name'] = None

        # set to None if doc_type (nullable) is None
        # and model_fields_set contains the field
        if self.doc_type is None and "doc_type" in self.model_fields_set:
            _dict['doc_type'] = None

        # set to None if added_by (nullable) is None
        # and model_fields_set contains the field
        if self.added_by is None and "added_by" in self.model_fields_set:
            _dict['added_by'] = None

        # set to None if word_count (nullable) is None
        # and model_fields_set contains the field
        if self.word_count is None and "word_count" in self.model_fields_set:
            _dict['word_count'] = None

        # set to None if char_count (nullable) is None
        # and model_fields_set contains the field
        if self.char_count is None and "char_count" in self.model_fields_set:
            _dict['char_count'] = None

        # set to None if disk_usage (nullable) is None
        # and model_fields_set contains the field
        if self.disk_usage is None and "disk_usage" in self.model_fields_set:
            _dict['disk_usage'] = None

        # set to None if custom_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.custom_metadata is None and "custom_metadata" in self.model_fields_set:
            _dict['custom_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_name": obj.get("file_name"),
            "doc_type": obj.get("doc_type"),
            "added_by": obj.get("added_by"),
            "word_count": obj.get("word_count"),
            "char_count": obj.get("char_count"),
            "disk_usage": obj.get("disk_usage"),
            "custom_metadata": obj.get("custom_metadata")
        })
        return _obj


