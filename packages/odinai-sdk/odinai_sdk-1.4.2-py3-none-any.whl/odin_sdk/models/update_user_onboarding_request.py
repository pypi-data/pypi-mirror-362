# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.companyname import Companyname
from odin_sdk.models.companysize import Companysize
from odin_sdk.models.department import Department
from odin_sdk.models.firstname import Firstname
from odin_sdk.models.goal import Goal
from odin_sdk.models.lastname import Lastname
from odin_sdk.models.onboardingcompleted import Onboardingcompleted
from odin_sdk.models.workapps import Workapps
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateUserOnboardingRequest(BaseModel):
    """
    UpdateUserOnboardingRequest
    """ # noqa: E501
    first_name: Optional[Firstname] = Field(default=None, alias="firstName")
    last_name: Optional[Lastname] = Field(default=None, alias="lastName")
    company_name: Optional[Companyname] = Field(default=None, alias="companyName")
    company_size: Optional[Companysize] = Field(default=None, alias="companySize")
    department: Optional[Department] = None
    goal: Optional[Goal] = None
    work_apps: Optional[Workapps] = Field(default=None, alias="workApps")
    onboarding_completed: Optional[Onboardingcompleted] = Field(default=None, alias="onboardingCompleted")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "companyName", "companySize", "department", "goal", "workApps", "onboardingCompleted"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateUserOnboardingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_name
        if self.first_name:
            _dict['firstName'] = self.first_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name
        if self.last_name:
            _dict['lastName'] = self.last_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_name
        if self.company_name:
            _dict['companyName'] = self.company_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_size
        if self.company_size:
            _dict['companySize'] = self.company_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goal
        if self.goal:
            _dict['goal'] = self.goal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of work_apps
        if self.work_apps:
            _dict['workApps'] = self.work_apps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of onboarding_completed
        if self.onboarding_completed:
            _dict['onboardingCompleted'] = self.onboarding_completed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateUserOnboardingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": Firstname.from_dict(obj.get("firstName")) if obj.get("firstName") is not None else None,
            "lastName": Lastname.from_dict(obj.get("lastName")) if obj.get("lastName") is not None else None,
            "companyName": Companyname.from_dict(obj.get("companyName")) if obj.get("companyName") is not None else None,
            "companySize": Companysize.from_dict(obj.get("companySize")) if obj.get("companySize") is not None else None,
            "department": Department.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "goal": Goal.from_dict(obj.get("goal")) if obj.get("goal") is not None else None,
            "workApps": Workapps.from_dict(obj.get("workApps")) if obj.get("workApps") is not None else None,
            "onboardingCompleted": Onboardingcompleted.from_dict(obj.get("onboardingCompleted")) if obj.get("onboardingCompleted") is not None else None
        })
        return _obj


