# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.daily_feedback_stat import DailyFeedbackStat
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DailyQueryAndFeedbackCount(BaseModel):
    """
    DailyQueryAndFeedbackCount
    """ # noqa: E501
    day: Optional[Any]
    month: Optional[Any]
    year: Optional[Any]
    query_count: Optional[Any]
    upvoted_count: Optional[Any]
    downvoted_count: Optional[Any]
    feedbacks_stats: DailyFeedbackStat
    __properties: ClassVar[List[str]] = ["day", "month", "year", "query_count", "upvoted_count", "downvoted_count", "feedbacks_stats"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DailyQueryAndFeedbackCount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feedbacks_stats
        if self.feedbacks_stats:
            _dict['feedbacks_stats'] = self.feedbacks_stats.to_dict()
        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['day'] = None

        # set to None if month (nullable) is None
        # and model_fields_set contains the field
        if self.month is None and "month" in self.model_fields_set:
            _dict['month'] = None

        # set to None if year (nullable) is None
        # and model_fields_set contains the field
        if self.year is None and "year" in self.model_fields_set:
            _dict['year'] = None

        # set to None if query_count (nullable) is None
        # and model_fields_set contains the field
        if self.query_count is None and "query_count" in self.model_fields_set:
            _dict['query_count'] = None

        # set to None if upvoted_count (nullable) is None
        # and model_fields_set contains the field
        if self.upvoted_count is None and "upvoted_count" in self.model_fields_set:
            _dict['upvoted_count'] = None

        # set to None if downvoted_count (nullable) is None
        # and model_fields_set contains the field
        if self.downvoted_count is None and "downvoted_count" in self.model_fields_set:
            _dict['downvoted_count'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DailyQueryAndFeedbackCount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day": obj.get("day"),
            "month": obj.get("month"),
            "year": obj.get("year"),
            "query_count": obj.get("query_count"),
            "upvoted_count": obj.get("upvoted_count"),
            "downvoted_count": obj.get("downvoted_count"),
            "feedbacks_stats": DailyFeedbackStat.from_dict(obj.get("feedbacks_stats")) if obj.get("feedbacks_stats") is not None else None
        })
        return _obj


