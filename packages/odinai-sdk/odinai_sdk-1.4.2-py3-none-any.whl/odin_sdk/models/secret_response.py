# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.creator_email import CreatorEmail
from odin_sdk.models.description1 import Description1
from odin_sdk.models.is_deleted import IsDeleted
from odin_sdk.models.is_encrypted import IsEncrypted
from odin_sdk.models.value import Value
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SecretResponse(BaseModel):
    """
    SecretResponse
    """ # noqa: E501
    id: Optional[Any]
    key: Optional[Any]
    value: Optional[Value] = None
    label: Optional[Any]
    description: Optional[Description1] = None
    created_by: Optional[Any]
    creator_email: Optional[CreatorEmail] = None
    created_at: Optional[Any]
    updated_at: Optional[Any]
    is_deleted: Optional[IsDeleted] = None
    is_encrypted: Optional[IsEncrypted] = None
    __properties: ClassVar[List[str]] = ["id", "key", "value", "label", "description", "created_by", "creator_email", "created_at", "updated_at", "is_deleted", "is_encrypted"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SecretResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator_email
        if self.creator_email:
            _dict['creator_email'] = self.creator_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_deleted
        if self.is_deleted:
            _dict['is_deleted'] = self.is_deleted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_encrypted
        if self.is_encrypted:
            _dict['is_encrypted'] = self.is_encrypted.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SecretResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "key": obj.get("key"),
            "value": Value.from_dict(obj.get("value")) if obj.get("value") is not None else None,
            "label": obj.get("label"),
            "description": Description1.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "created_by": obj.get("created_by"),
            "creator_email": CreatorEmail.from_dict(obj.get("creator_email")) if obj.get("creator_email") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_deleted": IsDeleted.from_dict(obj.get("is_deleted")) if obj.get("is_deleted") is not None else None,
            "is_encrypted": IsEncrypted.from_dict(obj.get("is_encrypted")) if obj.get("is_encrypted") is not None else None
        })
        return _obj


