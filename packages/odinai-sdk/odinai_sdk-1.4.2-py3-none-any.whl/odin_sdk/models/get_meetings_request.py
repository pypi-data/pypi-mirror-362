# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.end_timestamp import EndTimestamp
from odin_sdk.models.limit2 import Limit2
from odin_sdk.models.start_timestamp import StartTimestamp
from odin_sdk.models.timestamp1 import Timestamp1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetMeetingsRequest(BaseModel):
    """
    GetMeetingsRequest
    """ # noqa: E501
    start_timestamp: Optional[StartTimestamp] = None
    end_timestamp: Optional[EndTimestamp] = None
    timestamp: Optional[Timestamp1] = None
    limit: Optional[Limit2] = None
    __properties: ClassVar[List[str]] = ["start_timestamp", "end_timestamp", "timestamp", "limit"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetMeetingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_timestamp
        if self.start_timestamp:
            _dict['start_timestamp'] = self.start_timestamp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_timestamp
        if self.end_timestamp:
            _dict['end_timestamp'] = self.end_timestamp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timestamp
        if self.timestamp:
            _dict['timestamp'] = self.timestamp.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit
        if self.limit:
            _dict['limit'] = self.limit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetMeetingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_timestamp": StartTimestamp.from_dict(obj.get("start_timestamp")) if obj.get("start_timestamp") is not None else None,
            "end_timestamp": EndTimestamp.from_dict(obj.get("end_timestamp")) if obj.get("end_timestamp") is not None else None,
            "timestamp": Timestamp1.from_dict(obj.get("timestamp")) if obj.get("timestamp") is not None else None,
            "limit": Limit2.from_dict(obj.get("limit")) if obj.get("limit") is not None else None
        })
        return _obj


