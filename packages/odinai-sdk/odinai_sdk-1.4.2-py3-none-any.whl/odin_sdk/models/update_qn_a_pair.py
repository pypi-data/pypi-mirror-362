# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.answer import Answer
from odin_sdk.models.associated_file import AssociatedFile
from odin_sdk.models.context import Context
from odin_sdk.models.question import Question
from odin_sdk.models.status import Status
from odin_sdk.models.type5 import Type5
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateQnAPair(BaseModel):
    """
    UpdateQnAPair
    """ # noqa: E501
    question: Optional[Question] = None
    answer: Optional[Answer] = None
    context: Optional[Context] = None
    status: Optional[Status] = None
    associated_file: Optional[AssociatedFile] = None
    type: Optional[Type5] = None
    __properties: ClassVar[List[str]] = ["question", "answer", "context", "status", "associated_file", "type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateQnAPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of question
        if self.question:
            _dict['question'] = self.question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of answer
        if self.answer:
            _dict['answer'] = self.answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of associated_file
        if self.associated_file:
            _dict['associated_file'] = self.associated_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateQnAPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "question": Question.from_dict(obj.get("question")) if obj.get("question") is not None else None,
            "answer": Answer.from_dict(obj.get("answer")) if obj.get("answer") is not None else None,
            "context": Context.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "status": Status.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "associated_file": AssociatedFile.from_dict(obj.get("associated_file")) if obj.get("associated_file") is not None else None,
            "type": Type5.from_dict(obj.get("type")) if obj.get("type") is not None else None
        })
        return _obj


