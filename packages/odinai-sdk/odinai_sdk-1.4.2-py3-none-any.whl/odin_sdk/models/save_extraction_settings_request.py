# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.custom_extraction_config import CustomExtractionConfig
from odin_sdk.models.extraction_results import ExtractionResults
from odin_sdk.models.sample_document_id import SampleDocumentId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SaveExtractionSettingsRequest(BaseModel):
    """
    SaveExtractionSettingsRequest
    """ # noqa: E501
    pii_masking_enabled: Optional[Any] = Field(default=None, description="Whether PII masking is enabled")
    custom_extraction_config: Optional[CustomExtractionConfig] = None
    extraction_results: Optional[ExtractionResults] = None
    sample_document_id: Optional[SampleDocumentId] = None
    apply_re_validation: Optional[Any] = Field(default=None, description="Whether to apply re-validation")
    __properties: ClassVar[List[str]] = ["pii_masking_enabled", "custom_extraction_config", "extraction_results", "sample_document_id", "apply_re_validation"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SaveExtractionSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_extraction_config
        if self.custom_extraction_config:
            _dict['custom_extraction_config'] = self.custom_extraction_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_results
        if self.extraction_results:
            _dict['extraction_results'] = self.extraction_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sample_document_id
        if self.sample_document_id:
            _dict['sample_document_id'] = self.sample_document_id.to_dict()
        # set to None if pii_masking_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.pii_masking_enabled is None and "pii_masking_enabled" in self.model_fields_set:
            _dict['pii_masking_enabled'] = None

        # set to None if apply_re_validation (nullable) is None
        # and model_fields_set contains the field
        if self.apply_re_validation is None and "apply_re_validation" in self.model_fields_set:
            _dict['apply_re_validation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SaveExtractionSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pii_masking_enabled": obj.get("pii_masking_enabled"),
            "custom_extraction_config": CustomExtractionConfig.from_dict(obj.get("custom_extraction_config")) if obj.get("custom_extraction_config") is not None else None,
            "extraction_results": ExtractionResults.from_dict(obj.get("extraction_results")) if obj.get("extraction_results") is not None else None,
            "sample_document_id": SampleDocumentId.from_dict(obj.get("sample_document_id")) if obj.get("sample_document_id") is not None else None,
            "apply_re_validation": obj.get("apply_re_validation")
        })
        return _obj


