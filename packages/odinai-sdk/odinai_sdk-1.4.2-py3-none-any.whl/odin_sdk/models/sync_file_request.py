# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.is_quick_upload import IsQuickUpload
from odin_sdk.models.metadata1 import Metadata1
from odin_sdk.models.path import Path
from odin_sdk.models.resource_type_id import ResourceTypeId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SyncFileRequest(BaseModel):
    """
    SyncFileRequest
    """ # noqa: E501
    url: Optional[Any]
    project_id: Optional[Any]
    metadata: Optional[Metadata1] = None
    resource_type_id: Optional[ResourceTypeId] = None
    is_quick_upload: Optional[IsQuickUpload] = None
    path: Optional[Path] = None
    __properties: ClassVar[List[str]] = ["url", "project_id", "metadata", "resource_type_id", "is_quick_upload", "path"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SyncFileRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_type_id
        if self.resource_type_id:
            _dict['resource_type_id'] = self.resource_type_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_quick_upload
        if self.is_quick_upload:
            _dict['is_quick_upload'] = self.is_quick_upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SyncFileRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "url": obj.get("url"),
            "project_id": obj.get("project_id"),
            "metadata": Metadata1.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "resource_type_id": ResourceTypeId.from_dict(obj.get("resource_type_id")) if obj.get("resource_type_id") is not None else None,
            "is_quick_upload": IsQuickUpload.from_dict(obj.get("is_quick_upload")) if obj.get("is_quick_upload") is not None else None,
            "path": Path.from_dict(obj.get("path")) if obj.get("path") is not None else None
        })
        return _obj


