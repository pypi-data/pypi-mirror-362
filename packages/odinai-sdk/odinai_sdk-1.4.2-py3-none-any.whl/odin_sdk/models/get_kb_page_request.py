# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.content_keys import ContentKeys
from odin_sdk.models.filters2 import Filters2
from odin_sdk.models.name_search import NameSearch
from odin_sdk.models.path1 import Path1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetKBPageRequest(BaseModel):
    """
    GetKBPageRequest
    """ # noqa: E501
    page: Optional[Any] = Field(default=None, description="The page number to retrieve")
    items_per_page: Optional[Any] = Field(default=None, description="The number of items per page")
    filters: Optional[Filters2] = None
    name_search: Optional[NameSearch] = None
    content_keys: Optional[ContentKeys] = None
    path: Optional[Path1] = None
    recursive: Optional[Any] = Field(default=None, description="Whether to retrieve subfolders")
    __properties: ClassVar[List[str]] = ["page", "items_per_page", "filters", "name_search", "content_keys", "path", "recursive"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetKBPageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_search
        if self.name_search:
            _dict['name_search'] = self.name_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_keys
        if self.content_keys:
            _dict['content_keys'] = self.content_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        # set to None if page (nullable) is None
        # and model_fields_set contains the field
        if self.page is None and "page" in self.model_fields_set:
            _dict['page'] = None

        # set to None if items_per_page (nullable) is None
        # and model_fields_set contains the field
        if self.items_per_page is None and "items_per_page" in self.model_fields_set:
            _dict['items_per_page'] = None

        # set to None if recursive (nullable) is None
        # and model_fields_set contains the field
        if self.recursive is None and "recursive" in self.model_fields_set:
            _dict['recursive'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetKBPageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page": obj.get("page"),
            "items_per_page": obj.get("items_per_page"),
            "filters": Filters2.from_dict(obj.get("filters")) if obj.get("filters") is not None else None,
            "name_search": NameSearch.from_dict(obj.get("name_search")) if obj.get("name_search") is not None else None,
            "content_keys": ContentKeys.from_dict(obj.get("content_keys")) if obj.get("content_keys") is not None else None,
            "path": Path1.from_dict(obj.get("path")) if obj.get("path") is not None else None,
            "recursive": obj.get("recursive")
        })
        return _obj


