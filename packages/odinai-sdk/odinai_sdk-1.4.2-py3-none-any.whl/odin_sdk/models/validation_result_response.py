# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.validation_result import ValidationResult
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ValidationResultResponse(BaseModel):
    """
    ValidationResultResponse
    """ # noqa: E501
    message: Optional[Any]
    first_run: ValidationResult
    second_run: ValidationResult
    data_type_schema: Optional[Any]
    consistent_between_runs: Optional[Any]
    __properties: ClassVar[List[str]] = ["message", "first_run", "second_run", "data_type_schema", "consistent_between_runs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ValidationResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of first_run
        if self.first_run:
            _dict['first_run'] = self.first_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of second_run
        if self.second_run:
            _dict['second_run'] = self.second_run.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if data_type_schema (nullable) is None
        # and model_fields_set contains the field
        if self.data_type_schema is None and "data_type_schema" in self.model_fields_set:
            _dict['data_type_schema'] = None

        # set to None if consistent_between_runs (nullable) is None
        # and model_fields_set contains the field
        if self.consistent_between_runs is None and "consistent_between_runs" in self.model_fields_set:
            _dict['consistent_between_runs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ValidationResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "first_run": ValidationResult.from_dict(obj.get("first_run")) if obj.get("first_run") is not None else None,
            "second_run": ValidationResult.from_dict(obj.get("second_run")) if obj.get("second_run") is not None else None,
            "data_type_schema": obj.get("data_type_schema"),
            "consistent_between_runs": obj.get("consistent_between_runs")
        })
        return _obj


