# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.action_response import ActionResponse
from odin_sdk.models.chat_id3 import ChatId3
from odin_sdk.models.flow_run_id import FlowRunId
from odin_sdk.models.message_id3 import MessageId3
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExecuteActionOnFormResponse(BaseModel):
    """
    ExecuteActionOnFormResponse
    """ # noqa: E501
    message: Optional[Any] = Field(description="The message of the response.")
    success: Optional[Any] = Field(description="Whether the action was executed successfully or not.")
    chat_id: Optional[ChatId3] = None
    message_id: Optional[MessageId3] = None
    flow_run_id: Optional[FlowRunId] = None
    action_response: Optional[ActionResponse] = None
    __properties: ClassVar[List[str]] = ["message", "success", "chat_id", "message_id", "flow_run_id", "action_response"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExecuteActionOnFormResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_id
        if self.message_id:
            _dict['message_id'] = self.message_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flow_run_id
        if self.flow_run_id:
            _dict['flow_run_id'] = self.flow_run_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of action_response
        if self.action_response:
            _dict['action_response'] = self.action_response.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if success (nullable) is None
        # and model_fields_set contains the field
        if self.success is None and "success" in self.model_fields_set:
            _dict['success'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExecuteActionOnFormResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "success": obj.get("success"),
            "chat_id": ChatId3.from_dict(obj.get("chat_id")) if obj.get("chat_id") is not None else None,
            "message_id": MessageId3.from_dict(obj.get("message_id")) if obj.get("message_id") is not None else None,
            "flow_run_id": FlowRunId.from_dict(obj.get("flow_run_id")) if obj.get("flow_run_id") is not None else None,
            "action_response": ActionResponse.from_dict(obj.get("action_response")) if obj.get("action_response") is not None else None
        })
        return _obj


