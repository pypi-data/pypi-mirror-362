# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.project_description import ProjectDescription
from odin_sdk.models.project_id import ProjectId
from odin_sdk.models.project_name import ProjectName
from odin_sdk.models.role_id1 import RoleId1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ValidateInviteLinkResponse(BaseModel):
    """
    ValidateInviteLinkResponse
    """ # noqa: E501
    is_valid: Optional[Any]
    project_id: Optional[ProjectId] = None
    project_name: Optional[ProjectName] = None
    project_description: Optional[ProjectDescription] = None
    role_id: Optional[RoleId1] = None
    message: Optional[Any]
    __properties: ClassVar[List[str]] = ["is_valid", "project_id", "project_name", "project_description", "role_id", "message"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ValidateInviteLinkResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_id
        if self.project_id:
            _dict['project_id'] = self.project_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_name
        if self.project_name:
            _dict['project_name'] = self.project_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_description
        if self.project_description:
            _dict['project_description'] = self.project_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_id
        if self.role_id:
            _dict['role_id'] = self.role_id.to_dict()
        # set to None if is_valid (nullable) is None
        # and model_fields_set contains the field
        if self.is_valid is None and "is_valid" in self.model_fields_set:
            _dict['is_valid'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ValidateInviteLinkResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "is_valid": obj.get("is_valid"),
            "project_id": ProjectId.from_dict(obj.get("project_id")) if obj.get("project_id") is not None else None,
            "project_name": ProjectName.from_dict(obj.get("project_name")) if obj.get("project_name") is not None else None,
            "project_description": ProjectDescription.from_dict(obj.get("project_description")) if obj.get("project_description") is not None else None,
            "role_id": RoleId1.from_dict(obj.get("role_id")) if obj.get("role_id") is not None else None,
            "message": obj.get("message")
        })
        return _obj


