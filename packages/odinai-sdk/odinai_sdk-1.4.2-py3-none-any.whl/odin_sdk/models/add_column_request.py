# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.description import Description
from odin_sdk.models.options import Options
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AddColumnRequest(BaseModel):
    """
    AddColumnRequest
    """ # noqa: E501
    column_name: Optional[Any] = Field(description="The name of the new column")
    column_type: Optional[Any] = Field(description="The SQL data type for the column")
    default_value: Optional[Any] = Field(default=None, description="Default value for the column")
    description: Optional[Description] = None
    options: Optional[Options] = None
    __properties: ClassVar[List[str]] = ["column_name", "column_type", "default_value", "description", "options"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AddColumnRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # set to None if column_name (nullable) is None
        # and model_fields_set contains the field
        if self.column_name is None and "column_name" in self.model_fields_set:
            _dict['column_name'] = None

        # set to None if column_type (nullable) is None
        # and model_fields_set contains the field
        if self.column_type is None and "column_type" in self.model_fields_set:
            _dict['column_type'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['default_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AddColumnRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column_name": obj.get("column_name"),
            "column_type": obj.get("column_type"),
            "default_value": obj.get("default_value"),
            "description": Description.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "options": Options.from_dict(obj.get("options")) if obj.get("options") is not None else None
        })
        return _obj


