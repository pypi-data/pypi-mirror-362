# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.avg_memory_used_mb import AvgMemoryUsedMb
from odin_sdk.models.avg_success_time_ms import AvgSuccessTimeMs
from odin_sdk.models.first_executed_at import FirstExecutedAt
from odin_sdk.models.last_executed_at import LastExecutedAt
from odin_sdk.models.max_success_time_ms import MaxSuccessTimeMs
from odin_sdk.models.min_success_time_ms import MinSuccessTimeMs
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ScriptAnalyticsResponse(BaseModel):
    """
    Response model for script analytics
    """ # noqa: E501
    script_id: Optional[Any]
    script_name: Optional[Any]
    runtime: Optional[Any]
    total_executions: Optional[Any]
    successful_executions: Optional[Any]
    failed_executions: Optional[Any]
    timeout_executions: Optional[Any]
    success_rate: Optional[Any]
    avg_success_time_ms: AvgSuccessTimeMs
    min_success_time_ms: MinSuccessTimeMs
    max_success_time_ms: MaxSuccessTimeMs
    avg_memory_used_mb: AvgMemoryUsedMb
    last_executed_at: LastExecutedAt
    first_executed_at: FirstExecutedAt
    __properties: ClassVar[List[str]] = ["script_id", "script_name", "runtime", "total_executions", "successful_executions", "failed_executions", "timeout_executions", "success_rate", "avg_success_time_ms", "min_success_time_ms", "max_success_time_ms", "avg_memory_used_mb", "last_executed_at", "first_executed_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ScriptAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avg_success_time_ms
        if self.avg_success_time_ms:
            _dict['avg_success_time_ms'] = self.avg_success_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_success_time_ms
        if self.min_success_time_ms:
            _dict['min_success_time_ms'] = self.min_success_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_success_time_ms
        if self.max_success_time_ms:
            _dict['max_success_time_ms'] = self.max_success_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of avg_memory_used_mb
        if self.avg_memory_used_mb:
            _dict['avg_memory_used_mb'] = self.avg_memory_used_mb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_executed_at
        if self.last_executed_at:
            _dict['last_executed_at'] = self.last_executed_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_executed_at
        if self.first_executed_at:
            _dict['first_executed_at'] = self.first_executed_at.to_dict()
        # set to None if script_id (nullable) is None
        # and model_fields_set contains the field
        if self.script_id is None and "script_id" in self.model_fields_set:
            _dict['script_id'] = None

        # set to None if script_name (nullable) is None
        # and model_fields_set contains the field
        if self.script_name is None and "script_name" in self.model_fields_set:
            _dict['script_name'] = None

        # set to None if runtime (nullable) is None
        # and model_fields_set contains the field
        if self.runtime is None and "runtime" in self.model_fields_set:
            _dict['runtime'] = None

        # set to None if total_executions (nullable) is None
        # and model_fields_set contains the field
        if self.total_executions is None and "total_executions" in self.model_fields_set:
            _dict['total_executions'] = None

        # set to None if successful_executions (nullable) is None
        # and model_fields_set contains the field
        if self.successful_executions is None and "successful_executions" in self.model_fields_set:
            _dict['successful_executions'] = None

        # set to None if failed_executions (nullable) is None
        # and model_fields_set contains the field
        if self.failed_executions is None and "failed_executions" in self.model_fields_set:
            _dict['failed_executions'] = None

        # set to None if timeout_executions (nullable) is None
        # and model_fields_set contains the field
        if self.timeout_executions is None and "timeout_executions" in self.model_fields_set:
            _dict['timeout_executions'] = None

        # set to None if success_rate (nullable) is None
        # and model_fields_set contains the field
        if self.success_rate is None and "success_rate" in self.model_fields_set:
            _dict['success_rate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ScriptAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "script_id": obj.get("script_id"),
            "script_name": obj.get("script_name"),
            "runtime": obj.get("runtime"),
            "total_executions": obj.get("total_executions"),
            "successful_executions": obj.get("successful_executions"),
            "failed_executions": obj.get("failed_executions"),
            "timeout_executions": obj.get("timeout_executions"),
            "success_rate": obj.get("success_rate"),
            "avg_success_time_ms": AvgSuccessTimeMs.from_dict(obj.get("avg_success_time_ms")) if obj.get("avg_success_time_ms") is not None else None,
            "min_success_time_ms": MinSuccessTimeMs.from_dict(obj.get("min_success_time_ms")) if obj.get("min_success_time_ms") is not None else None,
            "max_success_time_ms": MaxSuccessTimeMs.from_dict(obj.get("max_success_time_ms")) if obj.get("max_success_time_ms") is not None else None,
            "avg_memory_used_mb": AvgMemoryUsedMb.from_dict(obj.get("avg_memory_used_mb")) if obj.get("avg_memory_used_mb") is not None else None,
            "last_executed_at": LastExecutedAt.from_dict(obj.get("last_executed_at")) if obj.get("last_executed_at") is not None else None,
            "first_executed_at": FirstExecutedAt.from_dict(obj.get("first_executed_at")) if obj.get("first_executed_at") is not None else None
        })
        return _obj


