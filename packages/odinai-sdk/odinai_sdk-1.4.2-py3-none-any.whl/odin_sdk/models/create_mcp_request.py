# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.environment_variables import EnvironmentVariables
from odin_sdk.models.headers import Headers
from odin_sdk.models.requires_auth import RequiresAuth
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateMCPRequest(BaseModel):
    """
    CreateMCPRequest
    """ # noqa: E501
    service_name: Optional[Any] = Field(description="Name of the MCP service to create")
    transport: Optional[Any] = Field(description="Transport to use for the MCP (stdio or sse)")
    environment_variables: Optional[EnvironmentVariables] = None
    headers: Optional[Headers] = None
    requires_auth: Optional[RequiresAuth] = None
    __properties: ClassVar[List[str]] = ["service_name", "transport", "environment_variables", "headers", "requires_auth"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateMCPRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment_variables
        if self.environment_variables:
            _dict['environment_variables'] = self.environment_variables.to_dict()
        # override the default output from pydantic by calling `to_dict()` of headers
        if self.headers:
            _dict['headers'] = self.headers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requires_auth
        if self.requires_auth:
            _dict['requires_auth'] = self.requires_auth.to_dict()
        # set to None if service_name (nullable) is None
        # and model_fields_set contains the field
        if self.service_name is None and "service_name" in self.model_fields_set:
            _dict['service_name'] = None

        # set to None if transport (nullable) is None
        # and model_fields_set contains the field
        if self.transport is None and "transport" in self.model_fields_set:
            _dict['transport'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateMCPRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "service_name": obj.get("service_name"),
            "transport": obj.get("transport"),
            "environment_variables": EnvironmentVariables.from_dict(obj.get("environment_variables")) if obj.get("environment_variables") is not None else None,
            "headers": Headers.from_dict(obj.get("headers")) if obj.get("headers") is not None else None,
            "requires_auth": RequiresAuth.from_dict(obj.get("requires_auth")) if obj.get("requires_auth") is not None else None
        })
        return _obj


