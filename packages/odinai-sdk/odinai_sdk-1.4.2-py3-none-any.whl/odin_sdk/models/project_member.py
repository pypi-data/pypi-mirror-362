# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.email import Email
from odin_sdk.models.index import Index
from odin_sdk.models.invited_by import InvitedBy
from odin_sdk.models.is_pending1 import IsPending1
from odin_sdk.models.name import Name
from odin_sdk.models.role1 import Role1
from odin_sdk.models.role_id1 import RoleId1
from odin_sdk.models.user_id1 import UserId1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectMember(BaseModel):
    """
    ProjectMember
    """ # noqa: E501
    project_id: Optional[Any]
    invited_by: InvitedBy
    is_pending: IsPending1
    user_id: UserId1
    email: Email
    role: Role1
    role_id: RoleId1
    name: Name
    index: Index
    __properties: ClassVar[List[str]] = ["project_id", "invited_by", "is_pending", "user_id", "email", "role", "role_id", "name", "index"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of invited_by
        if self.invited_by:
            _dict['invited_by'] = self.invited_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_pending
        if self.is_pending:
            _dict['is_pending'] = self.is_pending.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_id
        if self.user_id:
            _dict['user_id'] = self.user_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_id
        if self.role_id:
            _dict['role_id'] = self.role_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of index
        if self.index:
            _dict['index'] = self.index.to_dict()
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "invited_by": InvitedBy.from_dict(obj.get("invited_by")) if obj.get("invited_by") is not None else None,
            "is_pending": IsPending1.from_dict(obj.get("is_pending")) if obj.get("is_pending") is not None else None,
            "user_id": UserId1.from_dict(obj.get("user_id")) if obj.get("user_id") is not None else None,
            "email": Email.from_dict(obj.get("email")) if obj.get("email") is not None else None,
            "role": Role1.from_dict(obj.get("role")) if obj.get("role") is not None else None,
            "role_id": RoleId1.from_dict(obj.get("role_id")) if obj.get("role_id") is not None else None,
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "index": Index.from_dict(obj.get("index")) if obj.get("index") is not None else None
        })
        return _obj


