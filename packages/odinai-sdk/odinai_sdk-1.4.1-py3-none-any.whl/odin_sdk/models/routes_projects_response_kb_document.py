# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.content2 import Content2
from odin_sdk.models.data_type1 import DataType1
from odin_sdk.models.data_type_extracted import DataTypeExtracted
from odin_sdk.models.data_type_id3 import DataTypeId3
from odin_sdk.models.data_type_name import DataTypeName
from odin_sdk.models.document_id2 import DocumentId2
from odin_sdk.models.extraction_with_comparison1 import ExtractionWithComparison1
from odin_sdk.models.extraction_with_confidence_from_llm1 import ExtractionWithConfidenceFromLlm1
from odin_sdk.models.metadata_extracted import MetadataExtracted
from odin_sdk.models.pii import Pii
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RoutesProjectsResponseKBDocument(BaseModel):
    """
    RoutesProjectsResponseKBDocument
    """ # noqa: E501
    id: Optional[Any] = Field(description="The ID of the document.")
    content_key: Optional[Any] = Field(description="The content key of the document - either full URL in case of web links stored in the KB or full filename, e.g. 'example.pdf'.")
    content: Optional[Content2] = None
    metadata: Optional[Any] = Field(description="The metadata of the document.")
    doc_type: Optional[Any] = Field(description="The type of the document.")
    metadata_extracted: Optional[MetadataExtracted] = None
    pii: Optional[Pii] = Field(default=None, alias="PII")
    data_type: Optional[DataType1] = None
    data_type_id: Optional[DataTypeId3] = None
    data_type_name: Optional[DataTypeName] = None
    data_type_extracted: Optional[DataTypeExtracted] = None
    document_id: Optional[DocumentId2] = None
    extraction_with_comparison: Optional[ExtractionWithComparison1] = None
    extraction_with_confidence_from_llm: Optional[ExtractionWithConfidenceFromLlm1] = None
    __properties: ClassVar[List[str]] = ["id", "content_key", "content", "metadata", "doc_type", "metadata_extracted", "PII", "data_type", "data_type_id", "data_type_name", "data_type_extracted", "document_id", "extraction_with_comparison", "extraction_with_confidence_from_llm"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RoutesProjectsResponseKBDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_extracted
        if self.metadata_extracted:
            _dict['metadata_extracted'] = self.metadata_extracted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pii
        if self.pii:
            _dict['PII'] = self.pii.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['data_type'] = self.data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type_id
        if self.data_type_id:
            _dict['data_type_id'] = self.data_type_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type_name
        if self.data_type_name:
            _dict['data_type_name'] = self.data_type_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type_extracted
        if self.data_type_extracted:
            _dict['data_type_extracted'] = self.data_type_extracted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_id
        if self.document_id:
            _dict['document_id'] = self.document_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_with_comparison
        if self.extraction_with_comparison:
            _dict['extraction_with_comparison'] = self.extraction_with_comparison.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_with_confidence_from_llm
        if self.extraction_with_confidence_from_llm:
            _dict['extraction_with_confidence_from_llm'] = self.extraction_with_confidence_from_llm.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if content_key (nullable) is None
        # and model_fields_set contains the field
        if self.content_key is None and "content_key" in self.model_fields_set:
            _dict['content_key'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if doc_type (nullable) is None
        # and model_fields_set contains the field
        if self.doc_type is None and "doc_type" in self.model_fields_set:
            _dict['doc_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RoutesProjectsResponseKBDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "content_key": obj.get("content_key"),
            "content": Content2.from_dict(obj.get("content")) if obj.get("content") is not None else None,
            "metadata": obj.get("metadata"),
            "doc_type": obj.get("doc_type"),
            "metadata_extracted": MetadataExtracted.from_dict(obj.get("metadata_extracted")) if obj.get("metadata_extracted") is not None else None,
            "PII": Pii.from_dict(obj.get("PII")) if obj.get("PII") is not None else None,
            "data_type": DataType1.from_dict(obj.get("data_type")) if obj.get("data_type") is not None else None,
            "data_type_id": DataTypeId3.from_dict(obj.get("data_type_id")) if obj.get("data_type_id") is not None else None,
            "data_type_name": DataTypeName.from_dict(obj.get("data_type_name")) if obj.get("data_type_name") is not None else None,
            "data_type_extracted": DataTypeExtracted.from_dict(obj.get("data_type_extracted")) if obj.get("data_type_extracted") is not None else None,
            "document_id": DocumentId2.from_dict(obj.get("document_id")) if obj.get("document_id") is not None else None,
            "extraction_with_comparison": ExtractionWithComparison1.from_dict(obj.get("extraction_with_comparison")) if obj.get("extraction_with_comparison") is not None else None,
            "extraction_with_confidence_from_llm": ExtractionWithConfidenceFromLlm1.from_dict(obj.get("extraction_with_confidence_from_llm")) if obj.get("extraction_with_confidence_from_llm") is not None else None
        })
        return _obj


