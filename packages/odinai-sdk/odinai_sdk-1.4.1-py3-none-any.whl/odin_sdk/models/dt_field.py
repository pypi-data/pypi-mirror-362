# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.deleted_time import DeletedTime
from odin_sdk.models.description8 import Description8
from odin_sdk.models.last_modified_by import LastModifiedBy
from odin_sdk.models.last_modified_time import LastModifiedTime
from odin_sdk.models.lookup_linked_field_id import LookupLinkedFieldId
from odin_sdk.models.lookup_options import LookupOptions
from odin_sdk.models.options2 import Options2
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DTField(BaseModel):
    """
    DTField
    """ # noqa: E501
    id: Optional[Any] = Field(description="Unique identifier for the field")
    name: Optional[Any] = Field(description="Name of the field")
    description: Optional[Description8] = None
    options: Optional[Options2] = None
    type: Optional[Any] = Field(description="Field type (e.g., text, number, etc.)")
    cell_value_type: Optional[Any] = Field(description="Type of value stored in cells")
    is_multiple_cell_value: Optional[Any] = Field(default=None, description="Whether field can contain multiple values")
    db_field_type: Optional[Any] = Field(description="Database field type")
    db_field_name: Optional[Any] = Field(description="Name of the field in database")
    not_null: Optional[Any] = Field(default=None, description="Whether field is required")
    unique: Optional[Any] = Field(default=None, description="Whether field values must be unique")
    is_primary: Optional[Any] = Field(default=None, description="Whether field is primary key")
    is_computed: Optional[Any] = Field(default=None, description="Whether field is computed")
    is_lookup: Optional[Any] = Field(default=None, description="Whether field is a lookup field")
    is_pending: Optional[Any] = Field(default=None, description="Whether field is pending creation")
    has_error: Optional[Any] = Field(default=None, description="Whether field has errors")
    lookup_linked_field_id: Optional[LookupLinkedFieldId] = None
    lookup_options: Optional[LookupOptions] = None
    table_id: Optional[Any] = Field(description="ID of the table this field belongs to")
    version: Optional[Any] = Field(default=None, description="Version number of the field")
    created_time: Optional[Any] = Field(default=None, description="Creation timestamp")
    last_modified_time: Optional[LastModifiedTime] = None
    deleted_time: Optional[DeletedTime] = None
    created_by: Optional[Any] = Field(description="User ID who created the field")
    last_modified_by: Optional[LastModifiedBy] = None
    __properties: ClassVar[List[str]] = ["id", "name", "description", "options", "type", "cell_value_type", "is_multiple_cell_value", "db_field_type", "db_field_name", "not_null", "unique", "is_primary", "is_computed", "is_lookup", "is_pending", "has_error", "lookup_linked_field_id", "lookup_options", "table_id", "version", "created_time", "last_modified_time", "deleted_time", "created_by", "last_modified_by"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DTField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookup_linked_field_id
        if self.lookup_linked_field_id:
            _dict['lookup_linked_field_id'] = self.lookup_linked_field_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookup_options
        if self.lookup_options:
            _dict['lookup_options'] = self.lookup_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_time
        if self.last_modified_time:
            _dict['last_modified_time'] = self.last_modified_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deleted_time
        if self.deleted_time:
            _dict['deleted_time'] = self.deleted_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_by
        if self.last_modified_by:
            _dict['last_modified_by'] = self.last_modified_by.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if cell_value_type (nullable) is None
        # and model_fields_set contains the field
        if self.cell_value_type is None and "cell_value_type" in self.model_fields_set:
            _dict['cell_value_type'] = None

        # set to None if is_multiple_cell_value (nullable) is None
        # and model_fields_set contains the field
        if self.is_multiple_cell_value is None and "is_multiple_cell_value" in self.model_fields_set:
            _dict['is_multiple_cell_value'] = None

        # set to None if db_field_type (nullable) is None
        # and model_fields_set contains the field
        if self.db_field_type is None and "db_field_type" in self.model_fields_set:
            _dict['db_field_type'] = None

        # set to None if db_field_name (nullable) is None
        # and model_fields_set contains the field
        if self.db_field_name is None and "db_field_name" in self.model_fields_set:
            _dict['db_field_name'] = None

        # set to None if not_null (nullable) is None
        # and model_fields_set contains the field
        if self.not_null is None and "not_null" in self.model_fields_set:
            _dict['not_null'] = None

        # set to None if unique (nullable) is None
        # and model_fields_set contains the field
        if self.unique is None and "unique" in self.model_fields_set:
            _dict['unique'] = None

        # set to None if is_primary (nullable) is None
        # and model_fields_set contains the field
        if self.is_primary is None and "is_primary" in self.model_fields_set:
            _dict['is_primary'] = None

        # set to None if is_computed (nullable) is None
        # and model_fields_set contains the field
        if self.is_computed is None and "is_computed" in self.model_fields_set:
            _dict['is_computed'] = None

        # set to None if is_lookup (nullable) is None
        # and model_fields_set contains the field
        if self.is_lookup is None and "is_lookup" in self.model_fields_set:
            _dict['is_lookup'] = None

        # set to None if is_pending (nullable) is None
        # and model_fields_set contains the field
        if self.is_pending is None and "is_pending" in self.model_fields_set:
            _dict['is_pending'] = None

        # set to None if has_error (nullable) is None
        # and model_fields_set contains the field
        if self.has_error is None and "has_error" in self.model_fields_set:
            _dict['has_error'] = None

        # set to None if table_id (nullable) is None
        # and model_fields_set contains the field
        if self.table_id is None and "table_id" in self.model_fields_set:
            _dict['table_id'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if created_time (nullable) is None
        # and model_fields_set contains the field
        if self.created_time is None and "created_time" in self.model_fields_set:
            _dict['created_time'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DTField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": Description8.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "options": Options2.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "type": obj.get("type"),
            "cell_value_type": obj.get("cell_value_type"),
            "is_multiple_cell_value": obj.get("is_multiple_cell_value"),
            "db_field_type": obj.get("db_field_type"),
            "db_field_name": obj.get("db_field_name"),
            "not_null": obj.get("not_null"),
            "unique": obj.get("unique"),
            "is_primary": obj.get("is_primary"),
            "is_computed": obj.get("is_computed"),
            "is_lookup": obj.get("is_lookup"),
            "is_pending": obj.get("is_pending"),
            "has_error": obj.get("has_error"),
            "lookup_linked_field_id": LookupLinkedFieldId.from_dict(obj.get("lookup_linked_field_id")) if obj.get("lookup_linked_field_id") is not None else None,
            "lookup_options": LookupOptions.from_dict(obj.get("lookup_options")) if obj.get("lookup_options") is not None else None,
            "table_id": obj.get("table_id"),
            "version": obj.get("version"),
            "created_time": obj.get("created_time"),
            "last_modified_time": LastModifiedTime.from_dict(obj.get("last_modified_time")) if obj.get("last_modified_time") is not None else None,
            "deleted_time": DeletedTime.from_dict(obj.get("deleted_time")) if obj.get("deleted_time") is not None else None,
            "created_by": obj.get("created_by"),
            "last_modified_by": LastModifiedBy.from_dict(obj.get("last_modified_by")) if obj.get("last_modified_by") is not None else None
        })
        return _obj


