# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.added_to_kb_log import AddedToKbLog
from odin_sdk.models.fiscal_quarter import FiscalQuarter
from odin_sdk.models.fiscal_year import FiscalYear
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FilingData(BaseModel):
    """
    Pydantic model representing processed filing information.  Attributes:     ticker (str): Company ticker symbol.     form (str): SEC form type.     date (int): Unix timestamp of the filing date.     url (str): URL to access the filing.     fiscal_year (Optional[int]): Fiscal year of the filing.     fiscal_quarter (Optional[str]): Fiscal quarter (e.g., 'Q4').     added_to_kb_log (Optional[str]): Log information about KB addition.
    """ # noqa: E501
    ticker: Optional[Any]
    form: Optional[Any]
    var_date: Optional[Any] = Field(alias="date")
    url: Optional[Any]
    fiscal_year: Optional[FiscalYear] = None
    fiscal_quarter: Optional[FiscalQuarter] = None
    added_to_kb_log: Optional[AddedToKbLog] = None
    __properties: ClassVar[List[str]] = ["ticker", "form", "date", "url", "fiscal_year", "fiscal_quarter", "added_to_kb_log"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FilingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fiscal_year
        if self.fiscal_year:
            _dict['fiscal_year'] = self.fiscal_year.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fiscal_quarter
        if self.fiscal_quarter:
            _dict['fiscal_quarter'] = self.fiscal_quarter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of added_to_kb_log
        if self.added_to_kb_log:
            _dict['added_to_kb_log'] = self.added_to_kb_log.to_dict()
        # set to None if ticker (nullable) is None
        # and model_fields_set contains the field
        if self.ticker is None and "ticker" in self.model_fields_set:
            _dict['ticker'] = None

        # set to None if form (nullable) is None
        # and model_fields_set contains the field
        if self.form is None and "form" in self.model_fields_set:
            _dict['form'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['date'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FilingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ticker": obj.get("ticker"),
            "form": obj.get("form"),
            "date": obj.get("date"),
            "url": obj.get("url"),
            "fiscal_year": FiscalYear.from_dict(obj.get("fiscal_year")) if obj.get("fiscal_year") is not None else None,
            "fiscal_quarter": FiscalQuarter.from_dict(obj.get("fiscal_quarter")) if obj.get("fiscal_quarter") is not None else None,
            "added_to_kb_log": AddedToKbLog.from_dict(obj.get("added_to_kb_log")) if obj.get("added_to_kb_log") is not None else None
        })
        return _obj


