# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.dashboard_period import DashboardPeriod
from odin_sdk.models.global_filters import GlobalFilters
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetDashboardDataRequest(BaseModel):
    """
    GetDashboardDataRequest
    """ # noqa: E501
    widgets: Optional[Any] = Field(description="List of widgets to fetch data for")
    global_filters: Optional[GlobalFilters] = None
    dashboard_period: Optional[DashboardPeriod] = None
    __properties: ClassVar[List[str]] = ["widgets", "global_filters", "dashboard_period"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetDashboardDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of global_filters
        if self.global_filters:
            _dict['global_filters'] = self.global_filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dashboard_period
        if self.dashboard_period:
            _dict['dashboard_period'] = self.dashboard_period.to_dict()
        # set to None if widgets (nullable) is None
        # and model_fields_set contains the field
        if self.widgets is None and "widgets" in self.model_fields_set:
            _dict['widgets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetDashboardDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "widgets": obj.get("widgets"),
            "global_filters": GlobalFilters.from_dict(obj.get("global_filters")) if obj.get("global_filters") is not None else None,
            "dashboard_period": DashboardPeriod.from_dict(obj.get("dashboard_period")) if obj.get("dashboard_period") is not None else None
        })
        return _obj


