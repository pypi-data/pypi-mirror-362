# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.domain_search_request import DomainSearchRequest
from odin_sdk.models.email_finder_request import EmailFinderRequest
from odin_sdk.models.email_verifier_request import EmailVerifierRequest
from odin_sdk.models.linked_in_email_finder_request import LinkedInEmailFinderRequest
from odin_sdk.models.prospeo_request import ProspeoRequest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BodyFindProspeoDataToolsProspeoPost(BaseModel):
    """
    BodyFindProspeoDataToolsProspeoPost
    """ # noqa: E501
    req: ProspeoRequest
    domain_search: Optional[DomainSearchRequest] = None
    email_finder: Optional[EmailFinderRequest] = None
    linkedin_email_finder: Optional[LinkedInEmailFinderRequest] = None
    email_verifier: Optional[EmailVerifierRequest] = None
    __properties: ClassVar[List[str]] = ["req", "domain_search", "email_finder", "linkedin_email_finder", "email_verifier"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BodyFindProspeoDataToolsProspeoPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of req
        if self.req:
            _dict['req'] = self.req.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain_search
        if self.domain_search:
            _dict['domain_search'] = self.domain_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_finder
        if self.email_finder:
            _dict['email_finder'] = self.email_finder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linkedin_email_finder
        if self.linkedin_email_finder:
            _dict['linkedin_email_finder'] = self.linkedin_email_finder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_verifier
        if self.email_verifier:
            _dict['email_verifier'] = self.email_verifier.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BodyFindProspeoDataToolsProspeoPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "req": ProspeoRequest.from_dict(obj.get("req")) if obj.get("req") is not None else None,
            "domain_search": DomainSearchRequest.from_dict(obj.get("domain_search")) if obj.get("domain_search") is not None else None,
            "email_finder": EmailFinderRequest.from_dict(obj.get("email_finder")) if obj.get("email_finder") is not None else None,
            "linkedin_email_finder": LinkedInEmailFinderRequest.from_dict(obj.get("linkedin_email_finder")) if obj.get("linkedin_email_finder") is not None else None,
            "email_verifier": EmailVerifierRequest.from_dict(obj.get("email_verifier")) if obj.get("email_verifier") is not None else None
        })
        return _obj


