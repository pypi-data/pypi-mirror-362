# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.extraction_time_ms import ExtractionTimeMs
from odin_sdk.models.extraction_with_comparison import ExtractionWithComparison
from odin_sdk.models.extraction_with_confidence_from_llm import ExtractionWithConfidenceFromLlm
from odin_sdk.models.validation_error import ValidationError
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PageExtractionResults(BaseModel):
    """
    PageExtractionResults
    """ # noqa: E501
    page_number: Optional[Any]
    extraction: Optional[Any]
    extraction_time_ms: Optional[ExtractionTimeMs] = None
    extraction_with_comparison: Optional[ExtractionWithComparison] = None
    extraction_with_confidence_from_llm: Optional[ExtractionWithConfidenceFromLlm] = None
    validation_error: Optional[ValidationError] = None
    __properties: ClassVar[List[str]] = ["page_number", "extraction", "extraction_time_ms", "extraction_with_comparison", "extraction_with_confidence_from_llm", "validation_error"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PageExtractionResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extraction_time_ms
        if self.extraction_time_ms:
            _dict['extraction_time_ms'] = self.extraction_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_with_comparison
        if self.extraction_with_comparison:
            _dict['extraction_with_comparison'] = self.extraction_with_comparison.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extraction_with_confidence_from_llm
        if self.extraction_with_confidence_from_llm:
            _dict['extraction_with_confidence_from_llm'] = self.extraction_with_confidence_from_llm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_error
        if self.validation_error:
            _dict['validation_error'] = self.validation_error.to_dict()
        # set to None if page_number (nullable) is None
        # and model_fields_set contains the field
        if self.page_number is None and "page_number" in self.model_fields_set:
            _dict['page_number'] = None

        # set to None if extraction (nullable) is None
        # and model_fields_set contains the field
        if self.extraction is None and "extraction" in self.model_fields_set:
            _dict['extraction'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PageExtractionResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page_number": obj.get("page_number"),
            "extraction": obj.get("extraction"),
            "extraction_time_ms": ExtractionTimeMs.from_dict(obj.get("extraction_time_ms")) if obj.get("extraction_time_ms") is not None else None,
            "extraction_with_comparison": ExtractionWithComparison.from_dict(obj.get("extraction_with_comparison")) if obj.get("extraction_with_comparison") is not None else None,
            "extraction_with_confidence_from_llm": ExtractionWithConfidenceFromLlm.from_dict(obj.get("extraction_with_confidence_from_llm")) if obj.get("extraction_with_confidence_from_llm") is not None else None,
            "validation_error": ValidationError.from_dict(obj.get("validation_error")) if obj.get("validation_error") is not None else None
        })
        return _obj


