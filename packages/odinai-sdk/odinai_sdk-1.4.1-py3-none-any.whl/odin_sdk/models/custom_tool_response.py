# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.description5 import Description5
from odin_sdk.models.published_at1 import PublishedAt1
from odin_sdk.models.version1 import Version1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomToolResponse(BaseModel):
    """
    CustomToolResponse
    """ # noqa: E501
    id: Optional[Any] = Field(description="Unique identifier for the custom tool")
    name: Optional[Any] = Field(description="Name of the custom tool")
    description: Optional[Description5] = None
    inputs: Optional[Any] = Field(description="Tool inputs configuration")
    steps: Optional[Any] = Field(description="Tool steps configuration")
    test_step_results: Optional[Any] = Field(default=None, description="Test step execution results")
    project_id: Optional[Any] = Field(description="Project ID this tool belongs to")
    created_by: Optional[Any] = Field(description="User ID who created this tool")
    created_at: Optional[Any] = Field(description="Creation timestamp")
    updated_at: Optional[Any] = Field(description="Last update timestamp")
    is_published: Optional[Any] = Field(description="Whether this tool is published")
    version: Optional[Version1] = None
    published_at: Optional[PublishedAt1] = None
    is_draft: Optional[Any] = Field(description="Whether this tool has unsaved draft changes")
    is_public: Optional[Any] = Field(description="Whether this tool is publicly available to all users")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "inputs", "steps", "test_step_results", "project_id", "created_by", "created_at", "updated_at", "is_published", "version", "published_at", "is_draft", "is_public"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomToolResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of published_at
        if self.published_at:
            _dict['published_at'] = self.published_at.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if inputs (nullable) is None
        # and model_fields_set contains the field
        if self.inputs is None and "inputs" in self.model_fields_set:
            _dict['inputs'] = None

        # set to None if steps (nullable) is None
        # and model_fields_set contains the field
        if self.steps is None and "steps" in self.model_fields_set:
            _dict['steps'] = None

        # set to None if test_step_results (nullable) is None
        # and model_fields_set contains the field
        if self.test_step_results is None and "test_step_results" in self.model_fields_set:
            _dict['test_step_results'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if self.created_by is None and "created_by" in self.model_fields_set:
            _dict['created_by'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if is_published (nullable) is None
        # and model_fields_set contains the field
        if self.is_published is None and "is_published" in self.model_fields_set:
            _dict['is_published'] = None

        # set to None if is_draft (nullable) is None
        # and model_fields_set contains the field
        if self.is_draft is None and "is_draft" in self.model_fields_set:
            _dict['is_draft'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict['is_public'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomToolResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": Description5.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "test_step_results": obj.get("test_step_results"),
            "project_id": obj.get("project_id"),
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "is_published": obj.get("is_published"),
            "version": Version1.from_dict(obj.get("version")) if obj.get("version") is not None else None,
            "published_at": PublishedAt1.from_dict(obj.get("published_at")) if obj.get("published_at") is not None else None,
            "is_draft": obj.get("is_draft"),
            "is_public": obj.get("is_public")
        })
        return _obj


