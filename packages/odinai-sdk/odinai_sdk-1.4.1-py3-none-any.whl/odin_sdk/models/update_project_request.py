# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.custom_chatbot import CustomChatbot
from odin_sdk.models.data_extraction_method import DataExtractionMethod
from odin_sdk.models.description1 import Description1
from odin_sdk.models.docx_extraction_method import DocxExtractionMethod
from odin_sdk.models.enable_temporary_message_retention import EnableTemporaryMessageRetention
from odin_sdk.models.enrich_question import EnrichQuestion
from odin_sdk.models.enrich_sources import EnrichSources
from odin_sdk.models.inline_citations1 import InlineCitations1
from odin_sdk.models.is_public2 import IsPublic2
from odin_sdk.models.mask_pii1 import MaskPii1
from odin_sdk.models.model_name4 import ModelName4
from odin_sdk.models.name import Name
from odin_sdk.models.no_context_answer import NoContextAnswer
from odin_sdk.models.only_answer_with_context import OnlyAnswerWithContext
from odin_sdk.models.shared_to_team import SharedToTeam
from odin_sdk.models.team_default_role import TeamDefaultRole
from odin_sdk.models.team_id import TeamId
from odin_sdk.models.teamsbot_show_feedback_buttons import TeamsbotShowFeedbackButtons
from odin_sdk.models.teamsbot_show_kb_search_message import TeamsbotShowKbSearchMessage
from odin_sdk.models.teamsbot_show_message_sources import TeamsbotShowMessageSources
from odin_sdk.models.teamsbot_static_message_footer import TeamsbotStaticMessageFooter
from odin_sdk.models.teamsbot_upload_method import TeamsbotUploadMethod
from odin_sdk.models.temporary_message_retention_duration import TemporaryMessageRetentionDuration
from odin_sdk.models.test_info import TestInfo
from odin_sdk.models.type5 import Type5
from odin_sdk.models.use_textract1 import UseTextract1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateProjectRequest(BaseModel):
    """
    UpdateProjectRequest
    """ # noqa: E501
    project_id: Optional[Any]
    name: Optional[Name] = None
    type: Optional[Type5] = None
    model_name: Optional[ModelName4] = None
    enrich_question: Optional[EnrichQuestion] = None
    enrich_sources: Optional[EnrichSources] = None
    description: Optional[Description1] = None
    test_info: Optional[TestInfo] = None
    is_public: Optional[IsPublic2] = None
    no_context_answer: Optional[NoContextAnswer] = None
    only_answer_with_context: Optional[OnlyAnswerWithContext] = None
    custom_chatbot: Optional[CustomChatbot] = None
    use_textract: Optional[UseTextract1] = None
    mask_pii: Optional[MaskPii1] = None
    inline_citations: Optional[InlineCitations1] = None
    data_extraction_method: Optional[DataExtractionMethod] = None
    teamsbot_upload_method: Optional[TeamsbotUploadMethod] = None
    teamsbot_static_message_footer: Optional[TeamsbotStaticMessageFooter] = None
    teamsbot_show_feedback_buttons: Optional[TeamsbotShowFeedbackButtons] = None
    teamsbot_show_kb_search_message: Optional[TeamsbotShowKbSearchMessage] = None
    teamsbot_show_message_sources: Optional[TeamsbotShowMessageSources] = None
    enable_temporary_message_retention: Optional[EnableTemporaryMessageRetention] = None
    temporary_message_retention_duration: Optional[TemporaryMessageRetentionDuration] = None
    docx_extraction_method: Optional[DocxExtractionMethod] = None
    shared_to_team: Optional[SharedToTeam] = None
    team_default_role: Optional[TeamDefaultRole] = None
    team_id: Optional[TeamId] = None
    __properties: ClassVar[List[str]] = ["project_id", "name", "type", "model_name", "enrich_question", "enrich_sources", "description", "test_info", "is_public", "no_context_answer", "only_answer_with_context", "custom_chatbot", "use_textract", "mask_pii", "inline_citations", "data_extraction_method", "teamsbot_upload_method", "teamsbot_static_message_footer", "teamsbot_show_feedback_buttons", "teamsbot_show_kb_search_message", "teamsbot_show_message_sources", "enable_temporary_message_retention", "temporary_message_retention_duration", "docx_extraction_method", "shared_to_team", "team_default_role", "team_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_name
        if self.model_name:
            _dict['model_name'] = self.model_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrich_question
        if self.enrich_question:
            _dict['enrich_question'] = self.enrich_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrich_sources
        if self.enrich_sources:
            _dict['enrich_sources'] = self.enrich_sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_info
        if self.test_info:
            _dict['test_info'] = self.test_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_public
        if self.is_public:
            _dict['is_public'] = self.is_public.to_dict()
        # override the default output from pydantic by calling `to_dict()` of no_context_answer
        if self.no_context_answer:
            _dict['no_context_answer'] = self.no_context_answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of only_answer_with_context
        if self.only_answer_with_context:
            _dict['only_answer_with_context'] = self.only_answer_with_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_chatbot
        if self.custom_chatbot:
            _dict['custom_chatbot'] = self.custom_chatbot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of use_textract
        if self.use_textract:
            _dict['use_textract'] = self.use_textract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mask_pii
        if self.mask_pii:
            _dict['mask_pii'] = self.mask_pii.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inline_citations
        if self.inline_citations:
            _dict['inline_citations'] = self.inline_citations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_extraction_method
        if self.data_extraction_method:
            _dict['data_extraction_method'] = self.data_extraction_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsbot_upload_method
        if self.teamsbot_upload_method:
            _dict['teamsbot_upload_method'] = self.teamsbot_upload_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsbot_static_message_footer
        if self.teamsbot_static_message_footer:
            _dict['teamsbot_static_message_footer'] = self.teamsbot_static_message_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsbot_show_feedback_buttons
        if self.teamsbot_show_feedback_buttons:
            _dict['teamsbot_show_feedback_buttons'] = self.teamsbot_show_feedback_buttons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsbot_show_kb_search_message
        if self.teamsbot_show_kb_search_message:
            _dict['teamsbot_show_kb_search_message'] = self.teamsbot_show_kb_search_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsbot_show_message_sources
        if self.teamsbot_show_message_sources:
            _dict['teamsbot_show_message_sources'] = self.teamsbot_show_message_sources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_temporary_message_retention
        if self.enable_temporary_message_retention:
            _dict['enable_temporary_message_retention'] = self.enable_temporary_message_retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporary_message_retention_duration
        if self.temporary_message_retention_duration:
            _dict['temporary_message_retention_duration'] = self.temporary_message_retention_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docx_extraction_method
        if self.docx_extraction_method:
            _dict['docx_extraction_method'] = self.docx_extraction_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_to_team
        if self.shared_to_team:
            _dict['shared_to_team'] = self.shared_to_team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_default_role
        if self.team_default_role:
            _dict['team_default_role'] = self.team_default_role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_id
        if self.team_id:
            _dict['team_id'] = self.team_id.to_dict()
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "type": Type5.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "model_name": ModelName4.from_dict(obj.get("model_name")) if obj.get("model_name") is not None else None,
            "enrich_question": EnrichQuestion.from_dict(obj.get("enrich_question")) if obj.get("enrich_question") is not None else None,
            "enrich_sources": EnrichSources.from_dict(obj.get("enrich_sources")) if obj.get("enrich_sources") is not None else None,
            "description": Description1.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "test_info": TestInfo.from_dict(obj.get("test_info")) if obj.get("test_info") is not None else None,
            "is_public": IsPublic2.from_dict(obj.get("is_public")) if obj.get("is_public") is not None else None,
            "no_context_answer": NoContextAnswer.from_dict(obj.get("no_context_answer")) if obj.get("no_context_answer") is not None else None,
            "only_answer_with_context": OnlyAnswerWithContext.from_dict(obj.get("only_answer_with_context")) if obj.get("only_answer_with_context") is not None else None,
            "custom_chatbot": CustomChatbot.from_dict(obj.get("custom_chatbot")) if obj.get("custom_chatbot") is not None else None,
            "use_textract": UseTextract1.from_dict(obj.get("use_textract")) if obj.get("use_textract") is not None else None,
            "mask_pii": MaskPii1.from_dict(obj.get("mask_pii")) if obj.get("mask_pii") is not None else None,
            "inline_citations": InlineCitations1.from_dict(obj.get("inline_citations")) if obj.get("inline_citations") is not None else None,
            "data_extraction_method": DataExtractionMethod.from_dict(obj.get("data_extraction_method")) if obj.get("data_extraction_method") is not None else None,
            "teamsbot_upload_method": TeamsbotUploadMethod.from_dict(obj.get("teamsbot_upload_method")) if obj.get("teamsbot_upload_method") is not None else None,
            "teamsbot_static_message_footer": TeamsbotStaticMessageFooter.from_dict(obj.get("teamsbot_static_message_footer")) if obj.get("teamsbot_static_message_footer") is not None else None,
            "teamsbot_show_feedback_buttons": TeamsbotShowFeedbackButtons.from_dict(obj.get("teamsbot_show_feedback_buttons")) if obj.get("teamsbot_show_feedback_buttons") is not None else None,
            "teamsbot_show_kb_search_message": TeamsbotShowKbSearchMessage.from_dict(obj.get("teamsbot_show_kb_search_message")) if obj.get("teamsbot_show_kb_search_message") is not None else None,
            "teamsbot_show_message_sources": TeamsbotShowMessageSources.from_dict(obj.get("teamsbot_show_message_sources")) if obj.get("teamsbot_show_message_sources") is not None else None,
            "enable_temporary_message_retention": EnableTemporaryMessageRetention.from_dict(obj.get("enable_temporary_message_retention")) if obj.get("enable_temporary_message_retention") is not None else None,
            "temporary_message_retention_duration": TemporaryMessageRetentionDuration.from_dict(obj.get("temporary_message_retention_duration")) if obj.get("temporary_message_retention_duration") is not None else None,
            "docx_extraction_method": DocxExtractionMethod.from_dict(obj.get("docx_extraction_method")) if obj.get("docx_extraction_method") is not None else None,
            "shared_to_team": SharedToTeam.from_dict(obj.get("shared_to_team")) if obj.get("shared_to_team") is not None else None,
            "team_default_role": TeamDefaultRole.from_dict(obj.get("team_default_role")) if obj.get("team_default_role") is not None else None,
            "team_id": TeamId.from_dict(obj.get("team_id")) if obj.get("team_id") is not None else None
        })
        return _obj


