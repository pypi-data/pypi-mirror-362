# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.attendees import Attendees
from odin_sdk.models.attendees_emails import AttendeesEmails
from odin_sdk.models.override_should_record import OverrideShouldRecord
from odin_sdk.models.teams_invite import TeamsInvite
from odin_sdk.models.visibility import Visibility
from odin_sdk.models.webex_invite import WebexInvite
from odin_sdk.models.zoom_invite import ZoomInvite
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class MeetingInfo(BaseModel):
    """
    MeetingInfo
    """ # noqa: E501
    title: Optional[Any]
    ical_uid: Optional[Any]
    is_recurring: Optional[Any]
    visibility: Optional[Visibility] = None
    webex_invite: Optional[WebexInvite] = None
    override_should_record: Optional[OverrideShouldRecord] = None
    end_time: Optional[Any]
    id: Optional[Any]
    meeting_platform: Optional[Any]
    calendar_platform: Optional[Any]
    is_hosted_by_me: Optional[Any]
    attendees_emails: Optional[AttendeesEmails] = None
    attendees: Optional[Attendees] = None
    organizer_email: Optional[Any]
    teams_invite: Optional[TeamsInvite] = None
    bot_id: Optional[Any]
    platform: Optional[Any]
    meet_invite: Optional[Any]
    is_external: Optional[Any]
    zoom_invite: Optional[ZoomInvite] = None
    will_record_reason: Optional[Any]
    will_record: Optional[Any]
    start_time: Optional[Any]
    __properties: ClassVar[List[str]] = ["title", "ical_uid", "is_recurring", "visibility", "webex_invite", "override_should_record", "end_time", "id", "meeting_platform", "calendar_platform", "is_hosted_by_me", "attendees_emails", "attendees", "organizer_email", "teams_invite", "bot_id", "platform", "meet_invite", "is_external", "zoom_invite", "will_record_reason", "will_record", "start_time"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of MeetingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webex_invite
        if self.webex_invite:
            _dict['webex_invite'] = self.webex_invite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of override_should_record
        if self.override_should_record:
            _dict['override_should_record'] = self.override_should_record.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attendees_emails
        if self.attendees_emails:
            _dict['attendees_emails'] = self.attendees_emails.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attendees
        if self.attendees:
            _dict['attendees'] = self.attendees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teams_invite
        if self.teams_invite:
            _dict['teams_invite'] = self.teams_invite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zoom_invite
        if self.zoom_invite:
            _dict['zoom_invite'] = self.zoom_invite.to_dict()
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if ical_uid (nullable) is None
        # and model_fields_set contains the field
        if self.ical_uid is None and "ical_uid" in self.model_fields_set:
            _dict['ical_uid'] = None

        # set to None if is_recurring (nullable) is None
        # and model_fields_set contains the field
        if self.is_recurring is None and "is_recurring" in self.model_fields_set:
            _dict['is_recurring'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if meeting_platform (nullable) is None
        # and model_fields_set contains the field
        if self.meeting_platform is None and "meeting_platform" in self.model_fields_set:
            _dict['meeting_platform'] = None

        # set to None if calendar_platform (nullable) is None
        # and model_fields_set contains the field
        if self.calendar_platform is None and "calendar_platform" in self.model_fields_set:
            _dict['calendar_platform'] = None

        # set to None if is_hosted_by_me (nullable) is None
        # and model_fields_set contains the field
        if self.is_hosted_by_me is None and "is_hosted_by_me" in self.model_fields_set:
            _dict['is_hosted_by_me'] = None

        # set to None if organizer_email (nullable) is None
        # and model_fields_set contains the field
        if self.organizer_email is None and "organizer_email" in self.model_fields_set:
            _dict['organizer_email'] = None

        # set to None if bot_id (nullable) is None
        # and model_fields_set contains the field
        if self.bot_id is None and "bot_id" in self.model_fields_set:
            _dict['bot_id'] = None

        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if meet_invite (nullable) is None
        # and model_fields_set contains the field
        if self.meet_invite is None and "meet_invite" in self.model_fields_set:
            _dict['meet_invite'] = None

        # set to None if is_external (nullable) is None
        # and model_fields_set contains the field
        if self.is_external is None and "is_external" in self.model_fields_set:
            _dict['is_external'] = None

        # set to None if will_record_reason (nullable) is None
        # and model_fields_set contains the field
        if self.will_record_reason is None and "will_record_reason" in self.model_fields_set:
            _dict['will_record_reason'] = None

        # set to None if will_record (nullable) is None
        # and model_fields_set contains the field
        if self.will_record is None and "will_record" in self.model_fields_set:
            _dict['will_record'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of MeetingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "ical_uid": obj.get("ical_uid"),
            "is_recurring": obj.get("is_recurring"),
            "visibility": Visibility.from_dict(obj.get("visibility")) if obj.get("visibility") is not None else None,
            "webex_invite": WebexInvite.from_dict(obj.get("webex_invite")) if obj.get("webex_invite") is not None else None,
            "override_should_record": OverrideShouldRecord.from_dict(obj.get("override_should_record")) if obj.get("override_should_record") is not None else None,
            "end_time": obj.get("end_time"),
            "id": obj.get("id"),
            "meeting_platform": obj.get("meeting_platform"),
            "calendar_platform": obj.get("calendar_platform"),
            "is_hosted_by_me": obj.get("is_hosted_by_me"),
            "attendees_emails": AttendeesEmails.from_dict(obj.get("attendees_emails")) if obj.get("attendees_emails") is not None else None,
            "attendees": Attendees.from_dict(obj.get("attendees")) if obj.get("attendees") is not None else None,
            "organizer_email": obj.get("organizer_email"),
            "teams_invite": TeamsInvite.from_dict(obj.get("teams_invite")) if obj.get("teams_invite") is not None else None,
            "bot_id": obj.get("bot_id"),
            "platform": obj.get("platform"),
            "meet_invite": obj.get("meet_invite"),
            "is_external": obj.get("is_external"),
            "zoom_invite": ZoomInvite.from_dict(obj.get("zoom_invite")) if obj.get("zoom_invite") is not None else None,
            "will_record_reason": obj.get("will_record_reason"),
            "will_record": obj.get("will_record"),
            "start_time": obj.get("start_time")
        })
        return _obj


