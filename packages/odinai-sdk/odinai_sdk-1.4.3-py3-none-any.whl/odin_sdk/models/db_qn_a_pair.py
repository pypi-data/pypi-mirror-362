# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.associated_file import AssociatedFile
from odin_sdk.models.auto_generated import AutoGenerated
from odin_sdk.models.context import Context
from odin_sdk.models.created_at import CreatedAt
from odin_sdk.models.embedding_record_id import EmbeddingRecordId
from odin_sdk.models.project_id import ProjectId
from odin_sdk.models.status3 import Status3
from odin_sdk.models.type1 import Type1
from odin_sdk.models.updated_at import UpdatedAt
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DbQnAPair(BaseModel):
    """
    DbQnAPair
    """ # noqa: E501
    question: Optional[Any]
    answer: Optional[Any]
    type: Optional[Type1] = None
    id: Optional[Any]
    status: Optional[Status3] = None
    created_at: Optional[CreatedAt] = None
    context: Optional[Context] = None
    associated_file: Optional[AssociatedFile] = None
    auto_generated: Optional[AutoGenerated] = None
    updated_at: Optional[UpdatedAt] = None
    project_id: Optional[ProjectId] = None
    embedding_record_id: Optional[EmbeddingRecordId] = None
    __properties: ClassVar[List[str]] = ["question", "answer", "type", "id", "status", "created_at", "context", "associated_file", "auto_generated", "updated_at", "project_id", "embedding_record_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DbQnAPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of associated_file
        if self.associated_file:
            _dict['associated_file'] = self.associated_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_generated
        if self.auto_generated:
            _dict['auto_generated'] = self.auto_generated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_id
        if self.project_id:
            _dict['project_id'] = self.project_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embedding_record_id
        if self.embedding_record_id:
            _dict['embedding_record_id'] = self.embedding_record_id.to_dict()
        # set to None if question (nullable) is None
        # and model_fields_set contains the field
        if self.question is None and "question" in self.model_fields_set:
            _dict['question'] = None

        # set to None if answer (nullable) is None
        # and model_fields_set contains the field
        if self.answer is None and "answer" in self.model_fields_set:
            _dict['answer'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DbQnAPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "question": obj.get("question"),
            "answer": obj.get("answer"),
            "type": Type1.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "id": obj.get("id"),
            "status": Status3.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "created_at": CreatedAt.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "context": Context.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "associated_file": AssociatedFile.from_dict(obj.get("associated_file")) if obj.get("associated_file") is not None else None,
            "auto_generated": AutoGenerated.from_dict(obj.get("auto_generated")) if obj.get("auto_generated") is not None else None,
            "updated_at": UpdatedAt.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
            "project_id": ProjectId.from_dict(obj.get("project_id")) if obj.get("project_id") is not None else None,
            "embedding_record_id": EmbeddingRecordId.from_dict(obj.get("embedding_record_id")) if obj.get("embedding_record_id") is not None else None
        })
        return _obj


