# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.parameters import Parameters
from odin_sdk.models.script_description import ScriptDescription
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateCodeRunnerActionRequest(BaseModel):
    """
    CreateCodeRunnerActionRequest
    """ # noqa: E501
    project_id: Optional[Any] = Field(description="The project ID")
    script_name: Optional[Any] = Field(description="The name of the script")
    script_description: Optional[ScriptDescription] = None
    script: Optional[Any] = Field(description="The script code")
    runtime: Optional[Any] = Field(description="Runtime version (e.g., python3.11, nodejs20.x)")
    entry_point: Optional[Any] = Field(default=None, description="Entry point function name")
    kwargs: Optional[Any] = Field(default=None, description="List of keyword argument names (deprecated, use parameters)")
    parameters: Optional[Parameters] = None
    __properties: ClassVar[List[str]] = ["project_id", "script_name", "script_description", "script", "runtime", "entry_point", "kwargs", "parameters"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateCodeRunnerActionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of script_description
        if self.script_description:
            _dict['script_description'] = self.script_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if script_name (nullable) is None
        # and model_fields_set contains the field
        if self.script_name is None and "script_name" in self.model_fields_set:
            _dict['script_name'] = None

        # set to None if script (nullable) is None
        # and model_fields_set contains the field
        if self.script is None and "script" in self.model_fields_set:
            _dict['script'] = None

        # set to None if runtime (nullable) is None
        # and model_fields_set contains the field
        if self.runtime is None and "runtime" in self.model_fields_set:
            _dict['runtime'] = None

        # set to None if entry_point (nullable) is None
        # and model_fields_set contains the field
        if self.entry_point is None and "entry_point" in self.model_fields_set:
            _dict['entry_point'] = None

        # set to None if kwargs (nullable) is None
        # and model_fields_set contains the field
        if self.kwargs is None and "kwargs" in self.model_fields_set:
            _dict['kwargs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateCodeRunnerActionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "script_name": obj.get("script_name"),
            "script_description": ScriptDescription.from_dict(obj.get("script_description")) if obj.get("script_description") is not None else None,
            "script": obj.get("script"),
            "runtime": obj.get("runtime"),
            "entry_point": obj.get("entry_point"),
            "kwargs": obj.get("kwargs"),
            "parameters": Parameters.from_dict(obj.get("parameters")) if obj.get("parameters") is not None else None
        })
        return _obj


