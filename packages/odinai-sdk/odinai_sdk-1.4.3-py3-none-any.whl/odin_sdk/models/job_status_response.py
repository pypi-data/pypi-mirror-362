# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.completed_at2 import CompletedAt2
from odin_sdk.models.created_at2 import CreatedAt2
from odin_sdk.models.error1 import Error1
from odin_sdk.models.progress import Progress
from odin_sdk.models.result1 import Result1
from odin_sdk.models.updated_at2 import UpdatedAt2
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobStatusResponse(BaseModel):
    """
    Response model for job status check
    """ # noqa: E501
    job_id: Optional[Any] = Field(description="Job identifier")
    status: Optional[Any] = Field(description="Current job status")
    result: Optional[Result1] = None
    error: Optional[Error1] = None
    progress: Optional[Progress] = None
    created_at: Optional[CreatedAt2] = None
    updated_at: Optional[UpdatedAt2] = None
    completed_at: Optional[CompletedAt2] = None
    __properties: ClassVar[List[str]] = ["job_id", "status", "result", "error", "progress", "created_at", "updated_at", "completed_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_at
        if self.completed_at:
            _dict['completed_at'] = self.completed_at.to_dict()
        # set to None if job_id (nullable) is None
        # and model_fields_set contains the field
        if self.job_id is None and "job_id" in self.model_fields_set:
            _dict['job_id'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "job_id": obj.get("job_id"),
            "status": obj.get("status"),
            "result": Result1.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "error": Error1.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "progress": Progress.from_dict(obj.get("progress")) if obj.get("progress") is not None else None,
            "created_at": CreatedAt2.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "updated_at": UpdatedAt2.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
            "completed_at": CompletedAt2.from_dict(obj.get("completed_at")) if obj.get("completed_at") is not None else None
        })
        return _obj


