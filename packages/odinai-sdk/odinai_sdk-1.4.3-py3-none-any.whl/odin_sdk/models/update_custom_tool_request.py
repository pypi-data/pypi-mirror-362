# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.description5 import Description5
from odin_sdk.models.inputs import Inputs
from odin_sdk.models.is_public1 import IsPublic1
from odin_sdk.models.name2 import Name2
from odin_sdk.models.steps import Steps
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateCustomToolRequest(BaseModel):
    """
    UpdateCustomToolRequest
    """ # noqa: E501
    name: Optional[Name2] = None
    description: Optional[Description5] = None
    inputs: Optional[Inputs] = None
    steps: Optional[Steps] = None
    is_public: Optional[IsPublic1] = None
    __properties: ClassVar[List[str]] = ["name", "description", "inputs", "steps", "is_public"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateCustomToolRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of steps
        if self.steps:
            _dict['steps'] = self.steps.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_public
        if self.is_public:
            _dict['is_public'] = self.is_public.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateCustomToolRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": Name2.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "description": Description5.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "inputs": Inputs.from_dict(obj.get("inputs")) if obj.get("inputs") is not None else None,
            "steps": Steps.from_dict(obj.get("steps")) if obj.get("steps") is not None else None,
            "is_public": IsPublic1.from_dict(obj.get("is_public")) if obj.get("is_public") is not None else None
        })
        return _obj


