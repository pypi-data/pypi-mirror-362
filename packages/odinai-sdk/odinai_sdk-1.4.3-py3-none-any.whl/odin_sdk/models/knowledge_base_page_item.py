# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.content_key1 import ContentKey1
from odin_sdk.models.doc_type1 import DocType1
from odin_sdk.models.document_id1 import DocumentId1
from odin_sdk.models.id2 import Id2
from odin_sdk.models.metadata3 import Metadata3
from odin_sdk.models.path2 import Path2
from odin_sdk.models.status4 import Status4
from odin_sdk.models.upload_date import UploadDate
from odin_sdk.models.url1 import Url1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class KnowledgeBasePageItem(BaseModel):
    """
    KnowledgeBasePageItem
    """ # noqa: E501
    id: Optional[Id2] = None
    content_key: Optional[ContentKey1] = None
    upload_date: Optional[UploadDate] = None
    doc_type: Optional[DocType1] = None
    url: Optional[Url1] = None
    status: Optional[Status4] = None
    path: Optional[Path2] = None
    document_id: Optional[DocumentId1] = None
    metadata: Optional[Metadata3] = None
    __properties: ClassVar[List[str]] = ["id", "content_key", "upload_date", "doc_type", "url", "status", "path", "document_id", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of KnowledgeBasePageItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_key
        if self.content_key:
            _dict['content_key'] = self.content_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload_date
        if self.upload_date:
            _dict['upload_date'] = self.upload_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of doc_type
        if self.doc_type:
            _dict['doc_type'] = self.doc_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_id
        if self.document_id:
            _dict['document_id'] = self.document_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of KnowledgeBasePageItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": Id2.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "content_key": ContentKey1.from_dict(obj.get("content_key")) if obj.get("content_key") is not None else None,
            "upload_date": UploadDate.from_dict(obj.get("upload_date")) if obj.get("upload_date") is not None else None,
            "doc_type": DocType1.from_dict(obj.get("doc_type")) if obj.get("doc_type") is not None else None,
            "url": Url1.from_dict(obj.get("url")) if obj.get("url") is not None else None,
            "status": Status4.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "path": Path2.from_dict(obj.get("path")) if obj.get("path") is not None else None,
            "document_id": DocumentId1.from_dict(obj.get("document_id")) if obj.get("document_id") is not None else None,
            "metadata": Metadata3.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None
        })
        return _obj


