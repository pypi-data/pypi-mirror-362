# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.agent_id import AgentId
from odin_sdk.models.agent_type import AgentType
from odin_sdk.models.ai_response import AiResponse
from odin_sdk.models.chat_id import ChatId
from odin_sdk.models.chat_name1 import ChatName1
from odin_sdk.models.document_keys1 import DocumentKeys1
from odin_sdk.models.example_json import ExampleJson
from odin_sdk.models.format_instructions import FormatInstructions
from odin_sdk.models.google_search import GoogleSearch
from odin_sdk.models.ignore_chat_history import IgnoreChatHistory
from odin_sdk.models.images1 import Images1
from odin_sdk.models.is_regenerating import IsRegenerating
from odin_sdk.models.is_teams_bot import IsTeamsBot
from odin_sdk.models.is_test import IsTest
from odin_sdk.models.message_id import MessageId
from odin_sdk.models.model_name import ModelName
from odin_sdk.models.personality_id import PersonalityId
from odin_sdk.models.personality_name import PersonalityName
from odin_sdk.models.request_metadata import RequestMetadata
from odin_sdk.models.return_message import ReturnMessage
from odin_sdk.models.send_message_request_artifact import SendMessageRequestArtifact
from odin_sdk.models.sent_from_automator import SentFromAutomator
from odin_sdk.models.skip_stream import SkipStream
from odin_sdk.models.ui_form import UiForm
from odin_sdk.models.use_knowledgebase import UseKnowledgebase
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SendMessageRequest(BaseModel):
    """
    SendMessageRequest
    """ # noqa: E501
    message: Optional[Any]
    project_id: Optional[Any]
    chat_id: Optional[ChatId] = None
    document_keys: Optional[DocumentKeys1] = None
    google_search: Optional[GoogleSearch] = None
    is_test: Optional[IsTest] = None
    personality_name: Optional[PersonalityName] = None
    return_message: Optional[ReturnMessage] = None
    ai_response: Optional[AiResponse] = None
    model_name: Optional[ModelName] = None
    agent_type: Optional[AgentType] = None
    chat_name: Optional[ChatName1] = None
    agent_id: Optional[AgentId] = None
    personality_id: Optional[PersonalityId] = None
    use_knowledgebase: Optional[UseKnowledgebase] = None
    is_regenerating: Optional[IsRegenerating] = None
    message_id: Optional[MessageId] = None
    ui_form: Optional[UiForm] = None
    images: Optional[Images1] = None
    format_instructions: Optional[FormatInstructions] = None
    ignore_chat_history: Optional[IgnoreChatHistory] = None
    example_json: Optional[ExampleJson] = None
    is_teams_bot: Optional[IsTeamsBot] = None
    sent_from_automator: Optional[SentFromAutomator] = None
    skip_stream: Optional[SkipStream] = None
    request_metadata: Optional[RequestMetadata] = None
    artifact: Optional[SendMessageRequestArtifact] = None
    __properties: ClassVar[List[str]] = ["message", "project_id", "chat_id", "document_keys", "google_search", "is_test", "personality_name", "return_message", "ai_response", "model_name", "agent_type", "chat_name", "agent_id", "personality_id", "use_knowledgebase", "is_regenerating", "message_id", "ui_form", "images", "format_instructions", "ignore_chat_history", "example_json", "is_teams_bot", "sent_from_automator", "skip_stream", "request_metadata", "artifact"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SendMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chat_id
        if self.chat_id:
            _dict['chat_id'] = self.chat_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_keys
        if self.document_keys:
            _dict['document_keys'] = self.document_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_search
        if self.google_search:
            _dict['google_search'] = self.google_search.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_test
        if self.is_test:
            _dict['is_test'] = self.is_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_name
        if self.personality_name:
            _dict['personality_name'] = self.personality_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_message
        if self.return_message:
            _dict['return_message'] = self.return_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ai_response
        if self.ai_response:
            _dict['ai_response'] = self.ai_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_name
        if self.model_name:
            _dict['model_name'] = self.model_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agent_type
        if self.agent_type:
            _dict['agent_type'] = self.agent_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_name
        if self.chat_name:
            _dict['chat_name'] = self.chat_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agent_id
        if self.agent_id:
            _dict['agent_id'] = self.agent_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personality_id
        if self.personality_id:
            _dict['personality_id'] = self.personality_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of use_knowledgebase
        if self.use_knowledgebase:
            _dict['use_knowledgebase'] = self.use_knowledgebase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_regenerating
        if self.is_regenerating:
            _dict['is_regenerating'] = self.is_regenerating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_id
        if self.message_id:
            _dict['message_id'] = self.message_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ui_form
        if self.ui_form:
            _dict['ui_form'] = self.ui_form.to_dict()
        # override the default output from pydantic by calling `to_dict()` of images
        if self.images:
            _dict['images'] = self.images.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format_instructions
        if self.format_instructions:
            _dict['format_instructions'] = self.format_instructions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ignore_chat_history
        if self.ignore_chat_history:
            _dict['ignore_chat_history'] = self.ignore_chat_history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of example_json
        if self.example_json:
            _dict['example_json'] = self.example_json.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_teams_bot
        if self.is_teams_bot:
            _dict['is_teams_bot'] = self.is_teams_bot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sent_from_automator
        if self.sent_from_automator:
            _dict['sent_from_automator'] = self.sent_from_automator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skip_stream
        if self.skip_stream:
            _dict['skip_stream'] = self.skip_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_metadata
        if self.request_metadata:
            _dict['request_metadata'] = self.request_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SendMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "project_id": obj.get("project_id"),
            "chat_id": ChatId.from_dict(obj.get("chat_id")) if obj.get("chat_id") is not None else None,
            "document_keys": DocumentKeys1.from_dict(obj.get("document_keys")) if obj.get("document_keys") is not None else None,
            "google_search": GoogleSearch.from_dict(obj.get("google_search")) if obj.get("google_search") is not None else None,
            "is_test": IsTest.from_dict(obj.get("is_test")) if obj.get("is_test") is not None else None,
            "personality_name": PersonalityName.from_dict(obj.get("personality_name")) if obj.get("personality_name") is not None else None,
            "return_message": ReturnMessage.from_dict(obj.get("return_message")) if obj.get("return_message") is not None else None,
            "ai_response": AiResponse.from_dict(obj.get("ai_response")) if obj.get("ai_response") is not None else None,
            "model_name": ModelName.from_dict(obj.get("model_name")) if obj.get("model_name") is not None else None,
            "agent_type": AgentType.from_dict(obj.get("agent_type")) if obj.get("agent_type") is not None else None,
            "chat_name": ChatName1.from_dict(obj.get("chat_name")) if obj.get("chat_name") is not None else None,
            "agent_id": AgentId.from_dict(obj.get("agent_id")) if obj.get("agent_id") is not None else None,
            "personality_id": PersonalityId.from_dict(obj.get("personality_id")) if obj.get("personality_id") is not None else None,
            "use_knowledgebase": UseKnowledgebase.from_dict(obj.get("use_knowledgebase")) if obj.get("use_knowledgebase") is not None else None,
            "is_regenerating": IsRegenerating.from_dict(obj.get("is_regenerating")) if obj.get("is_regenerating") is not None else None,
            "message_id": MessageId.from_dict(obj.get("message_id")) if obj.get("message_id") is not None else None,
            "ui_form": UiForm.from_dict(obj.get("ui_form")) if obj.get("ui_form") is not None else None,
            "images": Images1.from_dict(obj.get("images")) if obj.get("images") is not None else None,
            "format_instructions": FormatInstructions.from_dict(obj.get("format_instructions")) if obj.get("format_instructions") is not None else None,
            "ignore_chat_history": IgnoreChatHistory.from_dict(obj.get("ignore_chat_history")) if obj.get("ignore_chat_history") is not None else None,
            "example_json": ExampleJson.from_dict(obj.get("example_json")) if obj.get("example_json") is not None else None,
            "is_teams_bot": IsTeamsBot.from_dict(obj.get("is_teams_bot")) if obj.get("is_teams_bot") is not None else None,
            "sent_from_automator": SentFromAutomator.from_dict(obj.get("sent_from_automator")) if obj.get("sent_from_automator") is not None else None,
            "skip_stream": SkipStream.from_dict(obj.get("skip_stream")) if obj.get("skip_stream") is not None else None,
            "request_metadata": RequestMetadata.from_dict(obj.get("request_metadata")) if obj.get("request_metadata") is not None else None,
            "artifact": SendMessageRequestArtifact.from_dict(obj.get("artifact")) if obj.get("artifact") is not None else None
        })
        return _obj


