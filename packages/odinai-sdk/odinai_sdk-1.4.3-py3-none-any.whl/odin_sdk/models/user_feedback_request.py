# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.additional_feedback import AdditionalFeedback
from odin_sdk.models.correct_source_url import CorrectSourceUrl
from odin_sdk.models.expected_answer import ExpectedAnswer
from odin_sdk.models.is_correct_answer_option import IsCorrectAnswerOption
from odin_sdk.models.is_incorrect_answer_option import IsIncorrectAnswerOption
from odin_sdk.models.is_incorrect_source_url_option import IsIncorrectSourceUrlOption
from odin_sdk.models.new_unit_test_group_name import NewUnitTestGroupName
from odin_sdk.models.notes import Notes
from odin_sdk.models.question import Question
from odin_sdk.models.suggested_better_response import SuggestedBetterResponse
from odin_sdk.models.unit_test_existing_group_id import UnitTestExistingGroupId
from odin_sdk.models.user_feedback import UserFeedback
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UserFeedbackRequest(BaseModel):
    """
    UserFeedbackRequest
    """ # noqa: E501
    user_feedback: Optional[UserFeedback] = None
    message_id: Optional[Any]
    project_id: Optional[Any]
    chat_id: Optional[Any]
    additional_feedback: Optional[AdditionalFeedback] = None
    is_correct_answer_option: Optional[IsCorrectAnswerOption] = None
    notes: Optional[Notes] = None
    unit_test_existing_group_id: Optional[UnitTestExistingGroupId] = None
    new_unit_test_group_name: Optional[NewUnitTestGroupName] = None
    question: Optional[Question] = None
    expected_answer: Optional[ExpectedAnswer] = None
    is_incorrect_answer_option: Optional[IsIncorrectAnswerOption] = None
    suggested_better_response: Optional[SuggestedBetterResponse] = None
    is_incorrect_source_url_option: Optional[IsIncorrectSourceUrlOption] = None
    correct_source_url: Optional[CorrectSourceUrl] = None
    __properties: ClassVar[List[str]] = ["user_feedback", "message_id", "project_id", "chat_id", "additional_feedback", "is_correct_answer_option", "notes", "unit_test_existing_group_id", "new_unit_test_group_name", "question", "expected_answer", "is_incorrect_answer_option", "suggested_better_response", "is_incorrect_source_url_option", "correct_source_url"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UserFeedbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_feedback
        if self.user_feedback:
            _dict['user_feedback'] = self.user_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_feedback
        if self.additional_feedback:
            _dict['additional_feedback'] = self.additional_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_correct_answer_option
        if self.is_correct_answer_option:
            _dict['is_correct_answer_option'] = self.is_correct_answer_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notes
        if self.notes:
            _dict['notes'] = self.notes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unit_test_existing_group_id
        if self.unit_test_existing_group_id:
            _dict['unit_test_existing_group_id'] = self.unit_test_existing_group_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_unit_test_group_name
        if self.new_unit_test_group_name:
            _dict['new_unit_test_group_name'] = self.new_unit_test_group_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of question
        if self.question:
            _dict['question'] = self.question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expected_answer
        if self.expected_answer:
            _dict['expected_answer'] = self.expected_answer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_incorrect_answer_option
        if self.is_incorrect_answer_option:
            _dict['is_incorrect_answer_option'] = self.is_incorrect_answer_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggested_better_response
        if self.suggested_better_response:
            _dict['suggested_better_response'] = self.suggested_better_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_incorrect_source_url_option
        if self.is_incorrect_source_url_option:
            _dict['is_incorrect_source_url_option'] = self.is_incorrect_source_url_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of correct_source_url
        if self.correct_source_url:
            _dict['correct_source_url'] = self.correct_source_url.to_dict()
        # set to None if message_id (nullable) is None
        # and model_fields_set contains the field
        if self.message_id is None and "message_id" in self.model_fields_set:
            _dict['message_id'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if chat_id (nullable) is None
        # and model_fields_set contains the field
        if self.chat_id is None and "chat_id" in self.model_fields_set:
            _dict['chat_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UserFeedbackRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_feedback": UserFeedback.from_dict(obj.get("user_feedback")) if obj.get("user_feedback") is not None else None,
            "message_id": obj.get("message_id"),
            "project_id": obj.get("project_id"),
            "chat_id": obj.get("chat_id"),
            "additional_feedback": AdditionalFeedback.from_dict(obj.get("additional_feedback")) if obj.get("additional_feedback") is not None else None,
            "is_correct_answer_option": IsCorrectAnswerOption.from_dict(obj.get("is_correct_answer_option")) if obj.get("is_correct_answer_option") is not None else None,
            "notes": Notes.from_dict(obj.get("notes")) if obj.get("notes") is not None else None,
            "unit_test_existing_group_id": UnitTestExistingGroupId.from_dict(obj.get("unit_test_existing_group_id")) if obj.get("unit_test_existing_group_id") is not None else None,
            "new_unit_test_group_name": NewUnitTestGroupName.from_dict(obj.get("new_unit_test_group_name")) if obj.get("new_unit_test_group_name") is not None else None,
            "question": Question.from_dict(obj.get("question")) if obj.get("question") is not None else None,
            "expected_answer": ExpectedAnswer.from_dict(obj.get("expected_answer")) if obj.get("expected_answer") is not None else None,
            "is_incorrect_answer_option": IsIncorrectAnswerOption.from_dict(obj.get("is_incorrect_answer_option")) if obj.get("is_incorrect_answer_option") is not None else None,
            "suggested_better_response": SuggestedBetterResponse.from_dict(obj.get("suggested_better_response")) if obj.get("suggested_better_response") is not None else None,
            "is_incorrect_source_url_option": IsIncorrectSourceUrlOption.from_dict(obj.get("is_incorrect_source_url_option")) if obj.get("is_incorrect_source_url_option") is not None else None,
            "correct_source_url": CorrectSourceUrl.from_dict(obj.get("correct_source_url")) if obj.get("correct_source_url") is not None else None
        })
        return _obj


