# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class KnowledgeBaseSettings(BaseModel):
    """
    KnowledgeBaseSettings
    """ # noqa: E501
    project_id: Optional[Any]
    chunking_strategy: Optional[Any] = Field(description="Chunking strategy to use. Options: sentence (spaCy sentence tokenizer), token (tiktoken), markdown (preserves markdown), json (for JSON data), character (character count based)")
    embedding_model: Optional[Any] = Field(default=None, description="Embedding model to use. Options: BAAI/bge-small-en-v1.5 (384d), neuralmind/bert-base-portuguese-cased (768d), BAAI/bge-multilingual-gemma2 (3584d), Alibaba-NLP/gte-Qwen2-1.5B-instruct (1536d), Snowflake/snowflake-arctic-embed-m-v1.5, openai-ada (1536d)")
    chunk_size: Optional[Any] = Field(default=None, description="Size of chunks in tokens or characters depending on the strategy")
    chunk_overlap: Optional[Any] = Field(default=None, description="Number of overlapping tokens or characters between chunks")
    extraction_techniques: Optional[Any] = Field(default=None, description="Extraction techniques for different file types")
    __properties: ClassVar[List[str]] = ["project_id", "chunking_strategy", "embedding_model", "chunk_size", "chunk_overlap", "extraction_techniques"]

    @field_validator('chunking_strategy')
    def chunking_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('sentence', 'token', 'markdown', 'json', 'character'):
            raise ValueError("must be one of enum values ('sentence', 'token', 'markdown', 'json', 'character')")
        return value

    @field_validator('embedding_model')
    def embedding_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BAAI/bge-small-en-v1.5', 'neuralmind/bert-base-portuguese-cased', 'BAAI/bge-multilingual-gemma2', 'Alibaba-NLP/gte-Qwen2-1.5B-instruct', 'Snowflake/snowflake-arctic-embed-m-v1.5', 'openai-ada'):
            raise ValueError("must be one of enum values ('BAAI/bge-small-en-v1.5', 'neuralmind/bert-base-portuguese-cased', 'BAAI/bge-multilingual-gemma2', 'Alibaba-NLP/gte-Qwen2-1.5B-instruct', 'Snowflake/snowflake-arctic-embed-m-v1.5', 'openai-ada')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of KnowledgeBaseSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if chunking_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.chunking_strategy is None and "chunking_strategy" in self.model_fields_set:
            _dict['chunking_strategy'] = None

        # set to None if embedding_model (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_model is None and "embedding_model" in self.model_fields_set:
            _dict['embedding_model'] = None

        # set to None if chunk_size (nullable) is None
        # and model_fields_set contains the field
        if self.chunk_size is None and "chunk_size" in self.model_fields_set:
            _dict['chunk_size'] = None

        # set to None if chunk_overlap (nullable) is None
        # and model_fields_set contains the field
        if self.chunk_overlap is None and "chunk_overlap" in self.model_fields_set:
            _dict['chunk_overlap'] = None

        # set to None if extraction_techniques (nullable) is None
        # and model_fields_set contains the field
        if self.extraction_techniques is None and "extraction_techniques" in self.model_fields_set:
            _dict['extraction_techniques'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of KnowledgeBaseSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": obj.get("project_id"),
            "chunking_strategy": obj.get("chunking_strategy"),
            "embedding_model": obj.get("embedding_model"),
            "chunk_size": obj.get("chunk_size"),
            "chunk_overlap": obj.get("chunk_overlap"),
            "extraction_techniques": obj.get("extraction_techniques")
        })
        return _obj


