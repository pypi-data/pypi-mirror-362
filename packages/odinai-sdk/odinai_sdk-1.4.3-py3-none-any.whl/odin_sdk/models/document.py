# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.body import Body
from odin_sdk.models.content_key import ContentKey
from odin_sdk.models.created_at import CreatedAt
from odin_sdk.models.id1 import Id1
from odin_sdk.models.title import Title
from odin_sdk.models.updated_at import UpdatedAt
from odin_sdk.models.word_count import WordCount
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    id: Optional[Id1] = None
    title: Optional[Title] = None
    body: Optional[Body] = None
    word_count: Optional[WordCount] = None
    content_key: Optional[ContentKey] = None
    created_at: Optional[CreatedAt] = None
    updated_at: Optional[UpdatedAt] = None
    __properties: ClassVar[List[str]] = ["id", "title", "body", "word_count", "content_key", "created_at", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict['title'] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of body
        if self.body:
            _dict['body'] = self.body.to_dict()
        # override the default output from pydantic by calling `to_dict()` of word_count
        if self.word_count:
            _dict['word_count'] = self.word_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_key
        if self.content_key:
            _dict['content_key'] = self.content_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": Id1.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "title": Title.from_dict(obj.get("title")) if obj.get("title") is not None else None,
            "body": Body.from_dict(obj.get("body")) if obj.get("body") is not None else None,
            "word_count": WordCount.from_dict(obj.get("word_count")) if obj.get("word_count") is not None else None,
            "content_key": ContentKey.from_dict(obj.get("content_key")) if obj.get("content_key") is not None else None,
            "created_at": CreatedAt.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "updated_at": UpdatedAt.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None
        })
        return _obj


