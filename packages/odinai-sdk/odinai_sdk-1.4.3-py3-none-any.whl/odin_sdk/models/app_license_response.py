# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.credits import Credits
from odin_sdk.models.email import Email
from odin_sdk.models.plan_type import PlanType
from odin_sdk.models.seats import Seats
from odin_sdk.models.status2 import Status2
from odin_sdk.models.used import Used
from odin_sdk.models.user_id1 import UserId1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AppLicenseResponse(BaseModel):
    """
    AppLicenseResponse
    """ # noqa: E501
    seats: Optional[Seats] = None
    credits: Optional[Credits] = None
    status: Optional[Status2] = None
    plan_type: Optional[PlanType] = None
    license_key: Optional[Any]
    user_id: Optional[UserId1] = None
    email: Optional[Email] = None
    used: Optional[Used] = None
    __properties: ClassVar[List[str]] = ["seats", "credits", "status", "plan_type", "license_key", "user_id", "email", "used"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppLicenseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of seats
        if self.seats:
            _dict['seats'] = self.seats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_type
        if self.plan_type:
            _dict['plan_type'] = self.plan_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_id
        if self.user_id:
            _dict['user_id'] = self.user_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of used
        if self.used:
            _dict['used'] = self.used.to_dict()
        # set to None if license_key (nullable) is None
        # and model_fields_set contains the field
        if self.license_key is None and "license_key" in self.model_fields_set:
            _dict['license_key'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AppLicenseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "seats": Seats.from_dict(obj.get("seats")) if obj.get("seats") is not None else None,
            "credits": Credits.from_dict(obj.get("credits")) if obj.get("credits") is not None else None,
            "status": Status2.from_dict(obj.get("status")) if obj.get("status") is not None else None,
            "plan_type": PlanType.from_dict(obj.get("plan_type")) if obj.get("plan_type") is not None else None,
            "license_key": obj.get("license_key"),
            "user_id": UserId1.from_dict(obj.get("user_id")) if obj.get("user_id") is not None else None,
            "email": Email.from_dict(obj.get("email")) if obj.get("email") is not None else None,
            "used": Used.from_dict(obj.get("used")) if obj.get("used") is not None else None
        })
        return _obj


