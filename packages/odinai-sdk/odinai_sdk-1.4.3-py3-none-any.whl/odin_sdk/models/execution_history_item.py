# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.completed_at1 import CompletedAt1
from odin_sdk.models.error_message import ErrorMessage
from odin_sdk.models.error_type import ErrorType
from odin_sdk.models.execution_time_ms import ExecutionTimeMs
from odin_sdk.models.memory_used_mb import MemoryUsedMb
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExecutionHistoryItem(BaseModel):
    """
    Model for execution history item
    """ # noqa: E501
    id: Optional[Any]
    code_script_id: Optional[Any]
    version: Optional[Any]
    execution_status: Optional[Any]
    execution_time_ms: ExecutionTimeMs
    memory_used_mb: MemoryUsedMb
    started_at: Optional[Any]
    completed_at: CompletedAt1
    error_message: ErrorMessage
    error_type: ErrorType
    __properties: ClassVar[List[str]] = ["id", "code_script_id", "version", "execution_status", "execution_time_ms", "memory_used_mb", "started_at", "completed_at", "error_message", "error_type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExecutionHistoryItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_time_ms
        if self.execution_time_ms:
            _dict['execution_time_ms'] = self.execution_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory_used_mb
        if self.memory_used_mb:
            _dict['memory_used_mb'] = self.memory_used_mb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_at
        if self.completed_at:
            _dict['completed_at'] = self.completed_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_message
        if self.error_message:
            _dict['error_message'] = self.error_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_type
        if self.error_type:
            _dict['error_type'] = self.error_type.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if code_script_id (nullable) is None
        # and model_fields_set contains the field
        if self.code_script_id is None and "code_script_id" in self.model_fields_set:
            _dict['code_script_id'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if execution_status (nullable) is None
        # and model_fields_set contains the field
        if self.execution_status is None and "execution_status" in self.model_fields_set:
            _dict['execution_status'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExecutionHistoryItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "code_script_id": obj.get("code_script_id"),
            "version": obj.get("version"),
            "execution_status": obj.get("execution_status"),
            "execution_time_ms": ExecutionTimeMs.from_dict(obj.get("execution_time_ms")) if obj.get("execution_time_ms") is not None else None,
            "memory_used_mb": MemoryUsedMb.from_dict(obj.get("memory_used_mb")) if obj.get("memory_used_mb") is not None else None,
            "started_at": obj.get("started_at"),
            "completed_at": CompletedAt1.from_dict(obj.get("completed_at")) if obj.get("completed_at") is not None else None,
            "error_message": ErrorMessage.from_dict(obj.get("error_message")) if obj.get("error_message") is not None else None,
            "error_type": ErrorType.from_dict(obj.get("error_type")) if obj.get("error_type") is not None else None
        })
        return _obj


