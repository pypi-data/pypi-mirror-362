# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.content1 import Content1
from odin_sdk.models.content_keys1 import ContentKeys1
from odin_sdk.models.project_id5 import ProjectId5
from odin_sdk.models.scrub_pii import ScrubPii
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PIICheckRequest(BaseModel):
    """
    PIICheckRequest
    """ # noqa: E501
    project_id: Optional[ProjectId5] = None
    content_keys: Optional[ContentKeys1] = None
    content: Optional[Content1] = None
    scrub_pii: Optional[ScrubPii] = None
    __properties: ClassVar[List[str]] = ["project_id", "content_keys", "content", "scrub_pii"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PIICheckRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_id
        if self.project_id:
            _dict['project_id'] = self.project_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_keys
        if self.content_keys:
            _dict['content_keys'] = self.content_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scrub_pii
        if self.scrub_pii:
            _dict['scrub_pii'] = self.scrub_pii.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PIICheckRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project_id": ProjectId5.from_dict(obj.get("project_id")) if obj.get("project_id") is not None else None,
            "content_keys": ContentKeys1.from_dict(obj.get("content_keys")) if obj.get("content_keys") is not None else None,
            "content": Content1.from_dict(obj.get("content")) if obj.get("content") is not None else None,
            "scrub_pii": ScrubPii.from_dict(obj.get("scrub_pii")) if obj.get("scrub_pii") is not None else None
        })
        return _obj


