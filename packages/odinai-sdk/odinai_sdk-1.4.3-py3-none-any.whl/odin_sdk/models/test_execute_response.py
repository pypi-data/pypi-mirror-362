# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.error import Error
from odin_sdk.models.error_traceback import ErrorTraceback
from odin_sdk.models.error_type import ErrorType
from odin_sdk.models.execution_time_ms import ExecutionTimeMs
from odin_sdk.models.logs import Logs
from odin_sdk.models.memory_used_mb import MemoryUsedMb
from odin_sdk.models.result import Result
from odin_sdk.models.stderr import Stderr
from odin_sdk.models.stdout import Stdout
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TestExecuteResponse(BaseModel):
    """
    Response model for test execution
    """ # noqa: E501
    success: Optional[Any]
    result: Optional[Result] = None
    error: Optional[Error] = None
    error_type: Optional[ErrorType] = None
    error_traceback: Optional[ErrorTraceback] = None
    execution_time_ms: Optional[ExecutionTimeMs] = None
    memory_used_mb: Optional[MemoryUsedMb] = None
    logs: Optional[Logs] = None
    function_name: Optional[Any]
    stdout: Optional[Stdout] = None
    stderr: Optional[Stderr] = None
    __properties: ClassVar[List[str]] = ["success", "result", "error", "error_type", "error_traceback", "execution_time_ms", "memory_used_mb", "logs", "function_name", "stdout", "stderr"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TestExecuteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_type
        if self.error_type:
            _dict['error_type'] = self.error_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_traceback
        if self.error_traceback:
            _dict['error_traceback'] = self.error_traceback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_time_ms
        if self.execution_time_ms:
            _dict['execution_time_ms'] = self.execution_time_ms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory_used_mb
        if self.memory_used_mb:
            _dict['memory_used_mb'] = self.memory_used_mb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logs
        if self.logs:
            _dict['logs'] = self.logs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stdout
        if self.stdout:
            _dict['stdout'] = self.stdout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stderr
        if self.stderr:
            _dict['stderr'] = self.stderr.to_dict()
        # set to None if success (nullable) is None
        # and model_fields_set contains the field
        if self.success is None and "success" in self.model_fields_set:
            _dict['success'] = None

        # set to None if function_name (nullable) is None
        # and model_fields_set contains the field
        if self.function_name is None and "function_name" in self.model_fields_set:
            _dict['function_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TestExecuteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "result": Result.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "error": Error.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "error_type": ErrorType.from_dict(obj.get("error_type")) if obj.get("error_type") is not None else None,
            "error_traceback": ErrorTraceback.from_dict(obj.get("error_traceback")) if obj.get("error_traceback") is not None else None,
            "execution_time_ms": ExecutionTimeMs.from_dict(obj.get("execution_time_ms")) if obj.get("execution_time_ms") is not None else None,
            "memory_used_mb": MemoryUsedMb.from_dict(obj.get("memory_used_mb")) if obj.get("memory_used_mb") is not None else None,
            "logs": Logs.from_dict(obj.get("logs")) if obj.get("logs") is not None else None,
            "function_name": obj.get("function_name"),
            "stdout": Stdout.from_dict(obj.get("stdout")) if obj.get("stdout") is not None else None,
            "stderr": Stderr.from_dict(obj.get("stderr")) if obj.get("stderr") is not None else None
        })
        return _obj


