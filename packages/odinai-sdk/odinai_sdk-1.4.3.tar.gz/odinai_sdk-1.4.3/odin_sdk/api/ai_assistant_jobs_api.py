# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictStr

from typing import Any, Optional

from odin_sdk.models.ai_job_types_response import AIJobTypesResponse
from odin_sdk.models.content_spinner_request import ContentSpinnerRequest
from odin_sdk.models.content_spinner_response import ContentSpinnerResponse
from odin_sdk.models.create_assistent_job_response import CreateAssistentJobResponse
from odin_sdk.models.delete_ai_jobs_response import DeleteAIJobsResponse
from odin_sdk.models.email_creator_request import EmailCreatorRequest
from odin_sdk.models.email_creator_response import EmailCreatorResponse
from odin_sdk.models.extra_arguments import ExtraArguments
from odin_sdk.models.get_assistent_job_status import GetAssistentJobStatus

from odin_sdk.api_client import ApiClient
from odin_sdk.api_response import ApiResponse
from odin_sdk.rest import RESTResponseType


class AIAssistantJobsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_ai_assistant_job_v1_ai_jobs_create_post(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateAssistentJobResponse:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v1_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_ai_assistant_job_v1_ai_jobs_create_post_with_http_info(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateAssistentJobResponse]:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v1_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_ai_assistant_job_v1_ai_jobs_create_post_without_preload_content(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v1_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_ai_assistant_job_v1_ai_jobs_create_post_serialize(
        self,
        document_keys,
        job_type,
        project_id,
        x_api_key,
        x_api_secret,
        extra_arguments,
        job_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        if document_keys is not None:
            _form_params.append(('document_keys', document_keys))
        if job_type is not None:
            _form_params.append(('job_type', job_type))
        if extra_arguments is not None:
            _form_params.append(('extra_arguments', extra_arguments))
        if job_name is not None:
            _form_params.append(('job_name', job_name))
        if project_id is not None:
            _form_params.append(('project_id', project_id))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ai/jobs/create',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_ai_assistant_job_v2_v2_ai_jobs_create_post(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateAssistentJobResponse:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v2_v2_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_ai_assistant_job_v2_v2_ai_jobs_create_post_with_http_info(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateAssistentJobResponse]:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v2_v2_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_ai_assistant_job_v2_v2_ai_jobs_create_post_without_preload_content(
        self,
        document_keys: Annotated[Optional[Any], Field(description="Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"]")],
        job_type: Annotated[Optional[Any], Field(description="The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator.")],
        project_id: Annotated[Optional[Any], Field(description="The project ID to run the job in.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        extra_arguments: Optional[ExtraArguments] = None,
        job_name: Annotated[Optional[Any], Field(description="The desired output name for the job.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an AI Assistant Job

        This endpoint is used to enqueue new AI assistant jobs. Each job type has their own set of arguments, which are documented in the job_info field of the /ai/jobs/types endpoint, as well as in the endpoint description below.<br>The valid job types are: deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. <br><br> <b>Simple Summary</b> <br>Odin simplifies information processing by creating concise summaries from lengthy texts, capturing main points and key ideas swiftly and efficiently.<br> <u>Required arguments:</u> <ul> <li>objective: the objective prompt, explaining the task for the summary to the AI. For example: \"Extract all key data points and information into a detailed summary.\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Deposition Summary</b> <br>Odin proficiently creates deposition summaries, analyzes transcripts to highlight key evidence and testimonies, saving you time and effort.<br> <u>Required arguments:</u> <ul> <li>type_of_law: the desired type of law to use for the deposition summary. Examples include, but are not limited to:<ul> <li>Civil Litigation Law</li><li>Criminal Defense Law</li><li>Corporate Law</li><li>Employment Law</li><li>Environmental Law</li><li>Estate Planning Law</li><li>Family Law</li><li>Immigration Law</li><li>Intellectual Property Law</li><li>Real Estate Law</li><li>Personal Injury Law</li>.</ul></li> </ul> <b>AB Content Creation</b> <br>Create multiple versions of content based on your documents with unique tones. Great for email campaigns!<br> <u>Required arguments:</u> <ul> <li>instructions: the instructions for the AI to follow. For example: \"Write a blog post about the benefits of Odin.\"</li> <li>tones: the tones to use for the content creation. Multiple can be selected, supplied as an array of strings. Examples include, but are not limited to:<ul> <li>Formal and Professional</li><li>Friendly and Approachable</li><li>Inquisitive and Curious</li><li>Enthusiastic and Exciting</li><li>Empathetic and Supportive</li><li>Casual and Informal</li><li>Concise and Direct</li><li>Inspirational and Motivational</li><li>Authoritative and Confident</li><li>Educational and Informative</li>.</ul></li> <li>temperature: the desired creativity level to use for the content creation. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <b>Redline Summary</b> <br>Generate a summary of differences between two documents using Odin.<br> <u>Required arguments:</u> <ul> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview. Note that gpt-4 models are currently limited to subscription users only.</li> <li>ignore_instructions: the instructions for the model on what changes to ignore. Provided as an array of strings.</li> <li>ignore_pdf_headers_and_footers: whether to ignore PDF headers and footers. Provided as a boolean.</li> <li>credit_usage_limit: the maximum number of credits to use for the job. Provided as an integer.</li> <li>diff_ai_overide_limit: the maximum number of differences to track in a given block. Provided as an integer.</li> </ul> <b>Content Spinner</b> <br>Have Odin generate new content based on your original text and instructions!<br> <u>Required arguments:</u> <ul> <li>input_text: the input text to use for the content spinner. For example: \"Odin is a great tool for summarizing documents.\"</li> <li>temperature: the desired creativity level to use for the content spinner. A float between 0 and 1, with 0 being the least creative and 1 being the most creative.</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>additional_instructions: the additional instructions for the content spinner. Provided as an array of strings.</li> </ul> <b>Email Creator</b> <br>Have Odin generate an email based on your instructions, either as plain text or HTML!<br> <u>Required arguments:</u> <ul> <li>sender: the sender of the email.</li> <li>content_instructions: the instructions for the content of the email. Provided as an array of strings.</li> <li>formatting_example: the formatting example for the email. For example: \"Please format the email as follows: Greetings, [sender]! I hope you are doing well. [content] Sincerely, [recipient].\"</li> <li>model_name: the desired model name to use for the job. Options are: gpt-4-1106-preview, gpt-4o-mini. Note that gpt-4 models are currently limited to subscription users only.</li> </ul> <u>Optional arguments:</u> <ul> <li>recipient: the recipient of the email.</li> <li>generate_html: whether to generate the email as HTML. Provided as a boolean. False by default.</li> </ul>

        :param document_keys: Stringified json array of strings defining document keys to use with the assistant job.<br>The document keys are full raw file names and full raw URLs. For example: [\\\"test.pdf\\\", \\\"https://www.google.com\\\"] (required)
        :type document_keys: object
        :param job_type: The type of job to run.<br>Valid job types are deposition_summary, simple_summary, ab_content_creation, redline_summary, content_spinner, email_creator. (required)
        :type job_type: object
        :param project_id: The project ID to run the job in. (required)
        :type project_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param extra_arguments:
        :type extra_arguments: ExtraArguments
        :param job_name: The desired output name for the job.
        :type job_name: object
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ai_assistant_job_v2_v2_ai_jobs_create_post_serialize(
            document_keys=document_keys,
            job_type=job_type,
            project_id=project_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            extra_arguments=extra_arguments,
            job_name=job_name,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "CreateAssistentJobResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_ai_assistant_job_v2_v2_ai_jobs_create_post_serialize(
        self,
        document_keys,
        job_type,
        project_id,
        x_api_key,
        x_api_secret,
        extra_arguments,
        job_name,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        if document_keys is not None:
            _form_params.append(('document_keys', document_keys))
        if job_type is not None:
            _form_params.append(('job_type', job_type))
        if extra_arguments is not None:
            _form_params.append(('extra_arguments', extra_arguments))
        if job_name is not None:
            _form_params.append(('job_name', job_name))
        if project_id is not None:
            _form_params.append(('project_id', project_id))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v2/ai/jobs/create',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_ai_assistant_job_ai_jobs_project_id_job_id_delete(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to delete.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteAIJobsResponse:
        """Delete Job

        Delete a job and its result from storage.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to delete. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAIJobsResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_with_http_info(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to delete.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteAIJobsResponse]:
        """Delete Job

        Delete a job and its result from storage.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to delete. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAIJobsResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_without_preload_content(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to delete.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete Job

        Delete a job and its result from storage.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to delete. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAIJobsResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_ai_assistant_job_ai_jobs_project_id_job_id_delete_serialize(
        self,
        project_id,
        job_id,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if job_id is not None:
            _path_params['job_id'] = job_id
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/ai/jobs/{project_id}/{job_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def directly_access_content_spinner_ai_content_spinner_post(
        self,
        content_spinner_request: ContentSpinnerRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ContentSpinnerResponse:
        """Create Content from Instructions

        Create content from instructions. Accesses the content_spinner job type directly.

        :param content_spinner_request: (required)
        :type content_spinner_request: ContentSpinnerRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_content_spinner_ai_content_spinner_post_serialize(
            content_spinner_request=content_spinner_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContentSpinnerResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def directly_access_content_spinner_ai_content_spinner_post_with_http_info(
        self,
        content_spinner_request: ContentSpinnerRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ContentSpinnerResponse]:
        """Create Content from Instructions

        Create content from instructions. Accesses the content_spinner job type directly.

        :param content_spinner_request: (required)
        :type content_spinner_request: ContentSpinnerRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_content_spinner_ai_content_spinner_post_serialize(
            content_spinner_request=content_spinner_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContentSpinnerResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def directly_access_content_spinner_ai_content_spinner_post_without_preload_content(
        self,
        content_spinner_request: ContentSpinnerRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Content from Instructions

        Create content from instructions. Accesses the content_spinner job type directly.

        :param content_spinner_request: (required)
        :type content_spinner_request: ContentSpinnerRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_content_spinner_ai_content_spinner_post_serialize(
            content_spinner_request=content_spinner_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ContentSpinnerResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _directly_access_content_spinner_ai_content_spinner_post_serialize(
        self,
        content_spinner_request,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter
        if content_spinner_request is not None:
            _body_params = content_spinner_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ai/content_spinner',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def directly_access_email_creator_ai_email_creator_post(
        self,
        email_creator_request: EmailCreatorRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmailCreatorResponse:
        """Create an Email from Instructions

        Create an email from instructions, either as plain text or HTML. Accesses the email_creator job type directly.

        :param email_creator_request: (required)
        :type email_creator_request: EmailCreatorRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_email_creator_ai_email_creator_post_serialize(
            email_creator_request=email_creator_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailCreatorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def directly_access_email_creator_ai_email_creator_post_with_http_info(
        self,
        email_creator_request: EmailCreatorRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmailCreatorResponse]:
        """Create an Email from Instructions

        Create an email from instructions, either as plain text or HTML. Accesses the email_creator job type directly.

        :param email_creator_request: (required)
        :type email_creator_request: EmailCreatorRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_email_creator_ai_email_creator_post_serialize(
            email_creator_request=email_creator_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailCreatorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def directly_access_email_creator_ai_email_creator_post_without_preload_content(
        self,
        email_creator_request: EmailCreatorRequest,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an Email from Instructions

        Create an email from instructions, either as plain text or HTML. Accesses the email_creator job type directly.

        :param email_creator_request: (required)
        :type email_creator_request: EmailCreatorRequest
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._directly_access_email_creator_ai_email_creator_post_serialize(
            email_creator_request=email_creator_request,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EmailCreatorResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _directly_access_email_creator_ai_email_creator_post_serialize(
        self,
        email_creator_request,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter
        if email_creator_request is not None:
            _body_params = email_creator_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ai/email_creator',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to fetch.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Fetch Job Result

        Fetch the result of a job.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to fetch. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_with_http_info(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to fetch.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Fetch Job Result

        Fetch the result of a job.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to fetch. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_without_preload_content(
        self,
        project_id: Annotated[Any, Field(description="Project ID of the project the job belongs to.")],
        job_id: Annotated[Any, Field(description="Job ID of the job to fetch.")],
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch Job Result

        Fetch the result of a job.

        :param project_id: Project ID of the project the job belongs to. (required)
        :type project_id: object
        :param job_id: Job ID of the job to fetch. (required)
        :type job_id: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_serialize(
            project_id=project_id,
            job_id=job_id,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _fetch_ai_assistant_job_ai_jobs_project_id_job_id_fetch_get_serialize(
        self,
        project_id,
        job_id,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        if job_id is not None:
            _path_params['job_id'] = job_id
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ai/jobs/{project_id}/{job_id}/fetch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_available_ai_job_types_ai_jobs_types_get(
        self,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AIJobTypesResponse:
        """Get Available Job Types

        Get the information about available job types.

        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_ai_job_types_ai_jobs_types_get_serialize(
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AIJobTypesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_available_ai_job_types_ai_jobs_types_get_with_http_info(
        self,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AIJobTypesResponse]:
        """Get Available Job Types

        Get the information about available job types.

        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_ai_job_types_ai_jobs_types_get_serialize(
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AIJobTypesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_available_ai_job_types_ai_jobs_types_get_without_preload_content(
        self,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Available Job Types

        Get the information about available job types.

        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_available_ai_job_types_ai_jobs_types_get_serialize(
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AIJobTypesResponse",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_available_ai_job_types_ai_jobs_types_get_serialize(
        self,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ai/jobs/types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_jobs_status_ai_jobs_project_id_get(
        self,
        project_id: Annotated[Any, Field(description="The ID of the project for which to retrieve job statuses.")],
        limit: Annotated[Optional[Any], Field(description="The limit of jobs to retrieve. Use -1 to retrieve all jobs.")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAssistentJobStatus:
        """Get Job Statuses

        Get the statuses of all jobs in a project.

        :param project_id: The ID of the project for which to retrieve job statuses. (required)
        :type project_id: object
        :param limit: The limit of jobs to retrieve. Use -1 to retrieve all jobs.
        :type limit: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_jobs_status_ai_jobs_project_id_get_serialize(
            project_id=project_id,
            limit=limit,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAssistentJobStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_jobs_status_ai_jobs_project_id_get_with_http_info(
        self,
        project_id: Annotated[Any, Field(description="The ID of the project for which to retrieve job statuses.")],
        limit: Annotated[Optional[Any], Field(description="The limit of jobs to retrieve. Use -1 to retrieve all jobs.")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAssistentJobStatus]:
        """Get Job Statuses

        Get the statuses of all jobs in a project.

        :param project_id: The ID of the project for which to retrieve job statuses. (required)
        :type project_id: object
        :param limit: The limit of jobs to retrieve. Use -1 to retrieve all jobs.
        :type limit: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_jobs_status_ai_jobs_project_id_get_serialize(
            project_id=project_id,
            limit=limit,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAssistentJobStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_jobs_status_ai_jobs_project_id_get_without_preload_content(
        self,
        project_id: Annotated[Any, Field(description="The ID of the project for which to retrieve job statuses.")],
        limit: Annotated[Optional[Any], Field(description="The limit of jobs to retrieve. Use -1 to retrieve all jobs.")] = None,
        x_api_key: Annotated[Optional[StrictStr], Field(description="Your Odin API key.")] = None,
        x_api_secret: Annotated[Optional[StrictStr], Field(description="Your Odin API secret.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Job Statuses

        Get the statuses of all jobs in a project.

        :param project_id: The ID of the project for which to retrieve job statuses. (required)
        :type project_id: object
        :param limit: The limit of jobs to retrieve. Use -1 to retrieve all jobs.
        :type limit: object
        :param x_api_key: Your Odin API key.
        :type x_api_key: str
        :param x_api_secret: Your Odin API secret.
        :type x_api_secret: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_jobs_status_ai_jobs_project_id_get_serialize(
            project_id=project_id,
            limit=limit,
            x_api_key=x_api_key,
            x_api_secret=x_api_secret,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAssistentJobStatus",
            '422': "HTTPValidationError",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_jobs_status_ai_jobs_project_id_get_serialize(
        self,
        project_id,
        limit,
        x_api_key,
        x_api_secret,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['project_id'] = project_id
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        if x_api_key is not None:
            _header_params['X-API-KEY'] = x_api_key
        if x_api_secret is not None:
            _header_params['X-API-SECRET'] = x_api_secret
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ai/jobs/{project_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


