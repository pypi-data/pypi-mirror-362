# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.agents_created import AgentsCreated
from odin_sdk.models.created_at import CreatedAt
from odin_sdk.models.credits_used1 import CreditsUsed1
from odin_sdk.models.members1 import Members1
from odin_sdk.models.name import Name
from odin_sdk.models.owner import Owner
from odin_sdk.models.team_id import TeamId
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProjectResponse(BaseModel):
    """
    ProjectResponse
    """ # noqa: E501
    id: Optional[Any]
    name: Name
    owner: Owner
    members: Members1
    created_at: CreatedAt
    team_id: TeamId
    credits_used: Optional[CreditsUsed1] = None
    agents_created: Optional[AgentsCreated] = None
    __properties: ClassVar[List[str]] = ["id", "name", "owner", "members", "created_at", "team_id", "credits_used", "agents_created"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProjectResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of members
        if self.members:
            _dict['members'] = self.members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_id
        if self.team_id:
            _dict['team_id'] = self.team_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits_used
        if self.credits_used:
            _dict['credits_used'] = self.credits_used.to_dict()
        # override the default output from pydantic by calling `to_dict()` of agents_created
        if self.agents_created:
            _dict['agents_created'] = self.agents_created.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProjectResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": Name.from_dict(obj.get("name")) if obj.get("name") is not None else None,
            "owner": Owner.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "members": Members1.from_dict(obj.get("members")) if obj.get("members") is not None else None,
            "created_at": CreatedAt.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "team_id": TeamId.from_dict(obj.get("team_id")) if obj.get("team_id") is not None else None,
            "credits_used": CreditsUsed1.from_dict(obj.get("credits_used")) if obj.get("credits_used") is not None else None,
            "agents_created": AgentsCreated.from_dict(obj.get("agents_created")) if obj.get("agents_created") is not None else None
        })
        return _obj


