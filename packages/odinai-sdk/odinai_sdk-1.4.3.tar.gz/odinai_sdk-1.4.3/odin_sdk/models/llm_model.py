# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LLMModel(BaseModel):
    """
    LLMModel
    """ # noqa: E501
    key: Optional[Any] = Field(description="The unique key for the model, for example azure-gpt4.")
    display_name: Optional[Any] = Field(description="The name of the model to display in the UI.")
    name: Optional[Any] = Field(description="The name of the model.")
    api_type: Optional[Any] = Field(description="The type of the API, for example openai.")
    cost: Optional[Any] = Field(description="The cost of the model, in credits.")
    free_plan: Optional[Any] = Field(description="Whether the model is available on the free plan.")
    hidden: Optional[Any] = Field(description="Whether the model is hidden from the UI.")
    __properties: ClassVar[List[str]] = ["key", "display_name", "name", "api_type", "cost", "free_plan", "hidden"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LLMModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict['display_name'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if api_type (nullable) is None
        # and model_fields_set contains the field
        if self.api_type is None and "api_type" in self.model_fields_set:
            _dict['api_type'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if free_plan (nullable) is None
        # and model_fields_set contains the field
        if self.free_plan is None and "free_plan" in self.model_fields_set:
            _dict['free_plan'] = None

        # set to None if hidden (nullable) is None
        # and model_fields_set contains the field
        if self.hidden is None and "hidden" in self.model_fields_set:
            _dict['hidden'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LLMModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "display_name": obj.get("display_name"),
            "name": obj.get("name"),
            "api_type": obj.get("api_type"),
            "cost": obj.get("cost"),
            "free_plan": obj.get("free_plan"),
            "hidden": obj.get("hidden")
        })
        return _obj


