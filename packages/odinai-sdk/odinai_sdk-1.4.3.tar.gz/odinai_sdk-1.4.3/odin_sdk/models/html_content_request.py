# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.file_type1 import FileType1
from odin_sdk.models.force import Force
from odin_sdk.models.is_quick_upload import IsQuickUpload
from odin_sdk.models.metadata2 import Metadata2
from odin_sdk.models.path import Path
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HTMLContentRequest(BaseModel):
    """
    HTMLContentRequest
    """ # noqa: E501
    content: Optional[Any]
    project_id: Optional[Any]
    metadata: Optional[Metadata2] = None
    file_type: Optional[FileType1] = None
    force: Optional[Force] = None
    is_quick_upload: Optional[IsQuickUpload] = None
    pageurl: Optional[Any]
    path: Optional[Path] = None
    __properties: ClassVar[List[str]] = ["content", "project_id", "metadata", "file_type", "force", "is_quick_upload", "pageurl", "path"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HTMLContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_type
        if self.file_type:
            _dict['file_type'] = self.file_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of force
        if self.force:
            _dict['force'] = self.force.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_quick_upload
        if self.is_quick_upload:
            _dict['is_quick_upload'] = self.is_quick_upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path
        if self.path:
            _dict['path'] = self.path.to_dict()
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['project_id'] = None

        # set to None if pageurl (nullable) is None
        # and model_fields_set contains the field
        if self.pageurl is None and "pageurl" in self.model_fields_set:
            _dict['pageurl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HTMLContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "project_id": obj.get("project_id"),
            "metadata": Metadata2.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "file_type": FileType1.from_dict(obj.get("file_type")) if obj.get("file_type") is not None else None,
            "force": Force.from_dict(obj.get("force")) if obj.get("force") is not None else None,
            "is_quick_upload": IsQuickUpload.from_dict(obj.get("is_quick_upload")) if obj.get("is_quick_upload") is not None else None,
            "pageurl": obj.get("pageurl"),
            "path": Path.from_dict(obj.get("path")) if obj.get("path") is not None else None
        })
        return _obj


