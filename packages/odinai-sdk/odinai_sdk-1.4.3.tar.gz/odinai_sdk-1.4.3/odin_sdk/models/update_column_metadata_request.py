# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.default_value2 import DefaultValue2
from odin_sdk.models.description import Description
from odin_sdk.models.not_null import NotNull
from odin_sdk.models.options import Options
from odin_sdk.models.type4 import Type4
from odin_sdk.models.unique import Unique
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateColumnMetadataRequest(BaseModel):
    """
    UpdateColumnMetadataRequest
    """ # noqa: E501
    description: Optional[Description] = None
    type: Optional[Type4] = None
    options: Optional[Options] = None
    not_null: Optional[NotNull] = None
    unique: Optional[Unique] = None
    default_value: Optional[DefaultValue2] = None
    __properties: ClassVar[List[str]] = ["description", "type", "options", "not_null", "unique", "default_value"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateColumnMetadataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_null
        if self.not_null:
            _dict['not_null'] = self.not_null.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unique
        if self.unique:
            _dict['unique'] = self.unique.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['default_value'] = self.default_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateColumnMetadataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": Description.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "type": Type4.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "options": Options.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "not_null": NotNull.from_dict(obj.get("not_null")) if obj.get("not_null") is not None else None,
            "unique": Unique.from_dict(obj.get("unique")) if obj.get("unique") is not None else None,
            "default_value": DefaultValue2.from_dict(obj.get("default_value")) if obj.get("default_value") is not None else None
        })
        return _obj


