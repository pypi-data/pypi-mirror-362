# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetKbAnalyticsResponse(BaseModel):
    """
    GetKbAnalyticsResponse
    """ # noqa: E501
    doc_type_count: Optional[Any]
    average_word_count_per_doc: Optional[Any]
    words_and_docs_added_per_day: Optional[Any]
    categories: Optional[Any] = Field(alias="Categories")
    sources_info: Optional[Any]
    __properties: ClassVar[List[str]] = ["doc_type_count", "average_word_count_per_doc", "words_and_docs_added_per_day", "Categories", "sources_info"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetKbAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if doc_type_count (nullable) is None
        # and model_fields_set contains the field
        if self.doc_type_count is None and "doc_type_count" in self.model_fields_set:
            _dict['doc_type_count'] = None

        # set to None if average_word_count_per_doc (nullable) is None
        # and model_fields_set contains the field
        if self.average_word_count_per_doc is None and "average_word_count_per_doc" in self.model_fields_set:
            _dict['average_word_count_per_doc'] = None

        # set to None if words_and_docs_added_per_day (nullable) is None
        # and model_fields_set contains the field
        if self.words_and_docs_added_per_day is None and "words_and_docs_added_per_day" in self.model_fields_set:
            _dict['words_and_docs_added_per_day'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['Categories'] = None

        # set to None if sources_info (nullable) is None
        # and model_fields_set contains the field
        if self.sources_info is None and "sources_info" in self.model_fields_set:
            _dict['sources_info'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetKbAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "doc_type_count": obj.get("doc_type_count"),
            "average_word_count_per_doc": obj.get("average_word_count_per_doc"),
            "words_and_docs_added_per_day": obj.get("words_and_docs_added_per_day"),
            "Categories": obj.get("Categories"),
            "sources_info": obj.get("sources_info")
        })
        return _obj


