# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.config4 import Config4
from odin_sdk.models.type2 import Type2
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OdinActionModel(BaseModel):
    """
    OdinActionModel
    """ # noqa: E501
    flow_id: Optional[Any] = Field(description="The ID of the action flow.")
    action_name: Optional[Any] = Field(description="The name of the action.")
    action_description: Optional[Any] = Field(description="The description of the action.")
    required_fields_for_flow: Optional[Any] = Field(default=None, description="The list of fields required for the action flow.")
    autosend: Optional[Any] = Field(description="Whether the action is autosendable or not.")
    type: Optional[Type2] = None
    config: Optional[Config4] = None
    __properties: ClassVar[List[str]] = ["flow_id", "action_name", "action_description", "required_fields_for_flow", "autosend", "type", "config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OdinActionModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # set to None if flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.flow_id is None and "flow_id" in self.model_fields_set:
            _dict['flow_id'] = None

        # set to None if action_name (nullable) is None
        # and model_fields_set contains the field
        if self.action_name is None and "action_name" in self.model_fields_set:
            _dict['action_name'] = None

        # set to None if action_description (nullable) is None
        # and model_fields_set contains the field
        if self.action_description is None and "action_description" in self.model_fields_set:
            _dict['action_description'] = None

        # set to None if required_fields_for_flow (nullable) is None
        # and model_fields_set contains the field
        if self.required_fields_for_flow is None and "required_fields_for_flow" in self.model_fields_set:
            _dict['required_fields_for_flow'] = None

        # set to None if autosend (nullable) is None
        # and model_fields_set contains the field
        if self.autosend is None and "autosend" in self.model_fields_set:
            _dict['autosend'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OdinActionModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flow_id": obj.get("flow_id"),
            "action_name": obj.get("action_name"),
            "action_description": obj.get("action_description"),
            "required_fields_for_flow": obj.get("required_fields_for_flow"),
            "autosend": obj.get("autosend"),
            "type": Type2.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "config": Config4.from_dict(obj.get("config")) if obj.get("config") is not None else None
        })
        return _obj


