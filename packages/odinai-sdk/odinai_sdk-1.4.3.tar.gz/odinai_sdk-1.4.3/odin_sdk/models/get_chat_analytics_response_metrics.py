# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetChatAnalyticsResponseMetrics(BaseModel):
    """
    GetChatAnalyticsResponseMetrics
    """ # noqa: E501
    average_response_time: Optional[Any]
    average_queries_per_chat: Optional[Any]
    average_query_token_count: Optional[Any]
    average_response_token_count: Optional[Any]
    total_upvotes: Optional[Any]
    total_downvotes: Optional[Any]
    total_messages: Optional[Any]
    average_images_generated: Optional[Any]
    total_document_usage: Optional[Any]
    total_kb_search: Optional[Any]
    total_images_generated: Optional[Any]
    top_keywords: Optional[Any]
    top_questions: Optional[Any]
    regenerated_requests: Optional[Any]
    users_message_counts: Optional[Any]
    top_documents: Optional[Any]
    __properties: ClassVar[List[str]] = ["average_response_time", "average_queries_per_chat", "average_query_token_count", "average_response_token_count", "total_upvotes", "total_downvotes", "total_messages", "average_images_generated", "total_document_usage", "total_kb_search", "total_images_generated", "top_keywords", "top_questions", "regenerated_requests", "users_message_counts", "top_documents"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetChatAnalyticsResponseMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if average_response_time (nullable) is None
        # and model_fields_set contains the field
        if self.average_response_time is None and "average_response_time" in self.model_fields_set:
            _dict['average_response_time'] = None

        # set to None if average_queries_per_chat (nullable) is None
        # and model_fields_set contains the field
        if self.average_queries_per_chat is None and "average_queries_per_chat" in self.model_fields_set:
            _dict['average_queries_per_chat'] = None

        # set to None if average_query_token_count (nullable) is None
        # and model_fields_set contains the field
        if self.average_query_token_count is None and "average_query_token_count" in self.model_fields_set:
            _dict['average_query_token_count'] = None

        # set to None if average_response_token_count (nullable) is None
        # and model_fields_set contains the field
        if self.average_response_token_count is None and "average_response_token_count" in self.model_fields_set:
            _dict['average_response_token_count'] = None

        # set to None if total_upvotes (nullable) is None
        # and model_fields_set contains the field
        if self.total_upvotes is None and "total_upvotes" in self.model_fields_set:
            _dict['total_upvotes'] = None

        # set to None if total_downvotes (nullable) is None
        # and model_fields_set contains the field
        if self.total_downvotes is None and "total_downvotes" in self.model_fields_set:
            _dict['total_downvotes'] = None

        # set to None if total_messages (nullable) is None
        # and model_fields_set contains the field
        if self.total_messages is None and "total_messages" in self.model_fields_set:
            _dict['total_messages'] = None

        # set to None if average_images_generated (nullable) is None
        # and model_fields_set contains the field
        if self.average_images_generated is None and "average_images_generated" in self.model_fields_set:
            _dict['average_images_generated'] = None

        # set to None if total_document_usage (nullable) is None
        # and model_fields_set contains the field
        if self.total_document_usage is None and "total_document_usage" in self.model_fields_set:
            _dict['total_document_usage'] = None

        # set to None if total_kb_search (nullable) is None
        # and model_fields_set contains the field
        if self.total_kb_search is None and "total_kb_search" in self.model_fields_set:
            _dict['total_kb_search'] = None

        # set to None if total_images_generated (nullable) is None
        # and model_fields_set contains the field
        if self.total_images_generated is None and "total_images_generated" in self.model_fields_set:
            _dict['total_images_generated'] = None

        # set to None if top_keywords (nullable) is None
        # and model_fields_set contains the field
        if self.top_keywords is None and "top_keywords" in self.model_fields_set:
            _dict['top_keywords'] = None

        # set to None if top_questions (nullable) is None
        # and model_fields_set contains the field
        if self.top_questions is None and "top_questions" in self.model_fields_set:
            _dict['top_questions'] = None

        # set to None if regenerated_requests (nullable) is None
        # and model_fields_set contains the field
        if self.regenerated_requests is None and "regenerated_requests" in self.model_fields_set:
            _dict['regenerated_requests'] = None

        # set to None if users_message_counts (nullable) is None
        # and model_fields_set contains the field
        if self.users_message_counts is None and "users_message_counts" in self.model_fields_set:
            _dict['users_message_counts'] = None

        # set to None if top_documents (nullable) is None
        # and model_fields_set contains the field
        if self.top_documents is None and "top_documents" in self.model_fields_set:
            _dict['top_documents'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetChatAnalyticsResponseMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "average_response_time": obj.get("average_response_time"),
            "average_queries_per_chat": obj.get("average_queries_per_chat"),
            "average_query_token_count": obj.get("average_query_token_count"),
            "average_response_token_count": obj.get("average_response_token_count"),
            "total_upvotes": obj.get("total_upvotes"),
            "total_downvotes": obj.get("total_downvotes"),
            "total_messages": obj.get("total_messages"),
            "average_images_generated": obj.get("average_images_generated"),
            "total_document_usage": obj.get("total_document_usage"),
            "total_kb_search": obj.get("total_kb_search"),
            "total_images_generated": obj.get("total_images_generated"),
            "top_keywords": obj.get("top_keywords"),
            "top_questions": obj.get("top_questions"),
            "regenerated_requests": obj.get("regenerated_requests"),
            "users_message_counts": obj.get("users_message_counts"),
            "top_documents": obj.get("top_documents")
        })
        return _obj


