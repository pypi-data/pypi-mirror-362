# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.citation_correctness import CitationCorrectness
from odin_sdk.models.citation_redundancy import CitationRedundancy
from odin_sdk.models.document_keys1 import DocumentKeys1
from odin_sdk.models.project_id import ProjectId
from odin_sdk.models.retrieval_correctness import RetrievalCorrectness
from odin_sdk.models.retrieval_precision import RetrievalPrecision
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DbEvalQnAPair(BaseModel):
    """
    DbEvalQnAPair
    """ # noqa: E501
    id: Optional[Any]
    question: Optional[Any]
    answer: Optional[Any]
    relevant_chunks: Optional[Any]
    chunk_ids: Optional[Any]
    citation_correctness: Optional[CitationCorrectness] = None
    citation_redundancy: Optional[CitationRedundancy] = None
    retrieval_correctness: Optional[RetrievalCorrectness] = None
    retrieval_precision: Optional[RetrievalPrecision] = None
    document_keys: Optional[DocumentKeys1] = None
    created_at: Optional[Any]
    updated_at: Optional[Any]
    project_id: Optional[ProjectId] = None
    __properties: ClassVar[List[str]] = ["id", "question", "answer", "relevant_chunks", "chunk_ids", "citation_correctness", "citation_redundancy", "retrieval_correctness", "retrieval_precision", "document_keys", "created_at", "updated_at", "project_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DbEvalQnAPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of citation_correctness
        if self.citation_correctness:
            _dict['citation_correctness'] = self.citation_correctness.to_dict()
        # override the default output from pydantic by calling `to_dict()` of citation_redundancy
        if self.citation_redundancy:
            _dict['citation_redundancy'] = self.citation_redundancy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retrieval_correctness
        if self.retrieval_correctness:
            _dict['retrieval_correctness'] = self.retrieval_correctness.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retrieval_precision
        if self.retrieval_precision:
            _dict['retrieval_precision'] = self.retrieval_precision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_keys
        if self.document_keys:
            _dict['document_keys'] = self.document_keys.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project_id
        if self.project_id:
            _dict['project_id'] = self.project_id.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if question (nullable) is None
        # and model_fields_set contains the field
        if self.question is None and "question" in self.model_fields_set:
            _dict['question'] = None

        # set to None if answer (nullable) is None
        # and model_fields_set contains the field
        if self.answer is None and "answer" in self.model_fields_set:
            _dict['answer'] = None

        # set to None if relevant_chunks (nullable) is None
        # and model_fields_set contains the field
        if self.relevant_chunks is None and "relevant_chunks" in self.model_fields_set:
            _dict['relevant_chunks'] = None

        # set to None if chunk_ids (nullable) is None
        # and model_fields_set contains the field
        if self.chunk_ids is None and "chunk_ids" in self.model_fields_set:
            _dict['chunk_ids'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DbEvalQnAPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "question": obj.get("question"),
            "answer": obj.get("answer"),
            "relevant_chunks": obj.get("relevant_chunks"),
            "chunk_ids": obj.get("chunk_ids"),
            "citation_correctness": CitationCorrectness.from_dict(obj.get("citation_correctness")) if obj.get("citation_correctness") is not None else None,
            "citation_redundancy": CitationRedundancy.from_dict(obj.get("citation_redundancy")) if obj.get("citation_redundancy") is not None else None,
            "retrieval_correctness": RetrievalCorrectness.from_dict(obj.get("retrieval_correctness")) if obj.get("retrieval_correctness") is not None else None,
            "retrieval_precision": RetrievalPrecision.from_dict(obj.get("retrieval_precision")) if obj.get("retrieval_precision") is not None else None,
            "document_keys": DocumentKeys1.from_dict(obj.get("document_keys")) if obj.get("document_keys") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "project_id": ProjectId.from_dict(obj.get("project_id")) if obj.get("project_id") is not None else None
        })
        return _obj


