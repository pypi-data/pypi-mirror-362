# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class KnowledgeBaseAnalyticsResponse(BaseModel):
    """
    KnowledgeBaseAnalyticsResponse
    """ # noqa: E501
    total_messages: Optional[Any]
    total_responses: Optional[Any]
    failed_messages: Optional[Any]
    avg_messages_per_user: Optional[Any]
    avg_message_length: Optional[Any]
    avg_response_length: Optional[Any]
    avg_message_per_convo: Optional[Any]
    positive_feedback: Optional[Any]
    negative_feedback: Optional[Any]
    similar_messages: Optional[Any]
    __properties: ClassVar[List[str]] = ["total_messages", "total_responses", "failed_messages", "avg_messages_per_user", "avg_message_length", "avg_response_length", "avg_message_per_convo", "positive_feedback", "negative_feedback", "similar_messages"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of KnowledgeBaseAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if total_messages (nullable) is None
        # and model_fields_set contains the field
        if self.total_messages is None and "total_messages" in self.model_fields_set:
            _dict['total_messages'] = None

        # set to None if total_responses (nullable) is None
        # and model_fields_set contains the field
        if self.total_responses is None and "total_responses" in self.model_fields_set:
            _dict['total_responses'] = None

        # set to None if failed_messages (nullable) is None
        # and model_fields_set contains the field
        if self.failed_messages is None and "failed_messages" in self.model_fields_set:
            _dict['failed_messages'] = None

        # set to None if avg_messages_per_user (nullable) is None
        # and model_fields_set contains the field
        if self.avg_messages_per_user is None and "avg_messages_per_user" in self.model_fields_set:
            _dict['avg_messages_per_user'] = None

        # set to None if avg_message_length (nullable) is None
        # and model_fields_set contains the field
        if self.avg_message_length is None and "avg_message_length" in self.model_fields_set:
            _dict['avg_message_length'] = None

        # set to None if avg_response_length (nullable) is None
        # and model_fields_set contains the field
        if self.avg_response_length is None and "avg_response_length" in self.model_fields_set:
            _dict['avg_response_length'] = None

        # set to None if avg_message_per_convo (nullable) is None
        # and model_fields_set contains the field
        if self.avg_message_per_convo is None and "avg_message_per_convo" in self.model_fields_set:
            _dict['avg_message_per_convo'] = None

        # set to None if positive_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.positive_feedback is None and "positive_feedback" in self.model_fields_set:
            _dict['positive_feedback'] = None

        # set to None if negative_feedback (nullable) is None
        # and model_fields_set contains the field
        if self.negative_feedback is None and "negative_feedback" in self.model_fields_set:
            _dict['negative_feedback'] = None

        # set to None if similar_messages (nullable) is None
        # and model_fields_set contains the field
        if self.similar_messages is None and "similar_messages" in self.model_fields_set:
            _dict['similar_messages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of KnowledgeBaseAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_messages": obj.get("total_messages"),
            "total_responses": obj.get("total_responses"),
            "failed_messages": obj.get("failed_messages"),
            "avg_messages_per_user": obj.get("avg_messages_per_user"),
            "avg_message_length": obj.get("avg_message_length"),
            "avg_response_length": obj.get("avg_response_length"),
            "avg_message_per_convo": obj.get("avg_message_per_convo"),
            "positive_feedback": obj.get("positive_feedback"),
            "negative_feedback": obj.get("negative_feedback"),
        })
        return _obj


