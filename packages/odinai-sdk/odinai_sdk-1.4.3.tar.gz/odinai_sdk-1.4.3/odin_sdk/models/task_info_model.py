# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.args import Args
from odin_sdk.models.completed_at1 import CompletedAt1
from odin_sdk.models.duration_seconds import DurationSeconds
from odin_sdk.models.kwargs import Kwargs
from odin_sdk.models.project_id import ProjectId
from odin_sdk.models.result import Result
from odin_sdk.models.retries import Retries
from odin_sdk.models.started_at1 import StartedAt1
from odin_sdk.models.traceback import Traceback
from odin_sdk.models.worker import Worker
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class TaskInfoModel(BaseModel):
    """
    TaskInfoModel
    """ # noqa: E501
    task_id: Optional[Any]
    task_name: Optional[Any]
    status: Optional[Any]
    project_id: Optional[ProjectId] = None
    started_at: Optional[StartedAt1] = None
    completed_at: Optional[CompletedAt1] = None
    duration_seconds: Optional[DurationSeconds] = None
    args: Optional[Args] = None
    kwargs: Optional[Kwargs] = None
    result: Optional[Result] = None
    traceback: Optional[Traceback] = None
    worker: Optional[Worker] = None
    retries: Optional[Retries] = None
    __properties: ClassVar[List[str]] = ["task_id", "task_name", "status", "project_id", "started_at", "completed_at", "duration_seconds", "args", "kwargs", "result", "traceback", "worker", "retries"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of TaskInfoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_id
        if self.project_id:
            _dict['project_id'] = self.project_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of started_at
        if self.started_at:
            _dict['started_at'] = self.started_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of completed_at
        if self.completed_at:
            _dict['completed_at'] = self.completed_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duration_seconds
        if self.duration_seconds:
            _dict['duration_seconds'] = self.duration_seconds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of args
        if self.args:
            _dict['args'] = self.args.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kwargs
        if self.kwargs:
            _dict['kwargs'] = self.kwargs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of traceback
        if self.traceback:
            _dict['traceback'] = self.traceback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retries
        if self.retries:
            _dict['retries'] = self.retries.to_dict()
        # set to None if task_id (nullable) is None
        # and model_fields_set contains the field
        if self.task_id is None and "task_id" in self.model_fields_set:
            _dict['task_id'] = None

        # set to None if task_name (nullable) is None
        # and model_fields_set contains the field
        if self.task_name is None and "task_name" in self.model_fields_set:
            _dict['task_name'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of TaskInfoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "task_name": obj.get("task_name"),
            "status": obj.get("status"),
            "project_id": ProjectId.from_dict(obj.get("project_id")) if obj.get("project_id") is not None else None,
            "started_at": StartedAt1.from_dict(obj.get("started_at")) if obj.get("started_at") is not None else None,
            "completed_at": CompletedAt1.from_dict(obj.get("completed_at")) if obj.get("completed_at") is not None else None,
            "duration_seconds": DurationSeconds.from_dict(obj.get("duration_seconds")) if obj.get("duration_seconds") is not None else None,
            "args": Args.from_dict(obj.get("args")) if obj.get("args") is not None else None,
            "kwargs": Kwargs.from_dict(obj.get("kwargs")) if obj.get("kwargs") is not None else None,
            "result": Result.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "traceback": Traceback.from_dict(obj.get("traceback")) if obj.get("traceback") is not None else None,
            "worker": Worker.from_dict(obj.get("worker")) if obj.get("worker") is not None else None,
            "retries": Retries.from_dict(obj.get("retries")) if obj.get("retries") is not None else None
        })
        return _obj


