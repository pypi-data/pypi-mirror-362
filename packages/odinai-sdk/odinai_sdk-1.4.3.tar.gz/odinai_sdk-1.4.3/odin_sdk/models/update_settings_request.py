# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.aihub_projects_whitelist import AihubProjectsWhitelist
from odin_sdk.models.auto_add_users_by_domain1 import AutoAddUsersByDomain1
from odin_sdk.models.chat_mode_appearance import ChatModeAppearance
from odin_sdk.models.chat_mode_for_members import ChatModeForMembers
from odin_sdk.models.default_project_id import DefaultProjectId
from odin_sdk.models.default_user_credit_limit import DefaultUserCreditLimit
from odin_sdk.models.disable_meetings import DisableMeetings
from odin_sdk.models.enable_user_credit_limits import EnableUserCreditLimits
from odin_sdk.models.local_signups import LocalSignups
from odin_sdk.models.tags import Tags
from odin_sdk.models.team_email_domain import TeamEmailDomain
from odin_sdk.models.team_name import TeamName
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateSettingsRequest(BaseModel):
    """
    UpdateSettingsRequest
    """ # noqa: E501
    local_signups: Optional[LocalSignups] = None
    team_name: Optional[TeamName] = None
    disable_meetings: Optional[DisableMeetings] = None
    default_project_id: Optional[DefaultProjectId] = None
    aihub_projects_whitelist: Optional[AihubProjectsWhitelist] = None
    auto_add_users_by_domain: Optional[AutoAddUsersByDomain1] = None
    team_email_domain: Optional[TeamEmailDomain] = None
    chat_mode_appearance: Optional[ChatModeAppearance] = None
    chat_mode_for_members: Optional[ChatModeForMembers] = None
    enable_user_credit_limits: Optional[EnableUserCreditLimits] = None
    default_user_credit_limit: Optional[DefaultUserCreditLimit] = None
    tags: Optional[Tags] = None
    __properties: ClassVar[List[str]] = ["local_signups", "team_name", "disable_meetings", "default_project_id", "aihub_projects_whitelist", "auto_add_users_by_domain", "team_email_domain", "chat_mode_appearance", "chat_mode_for_members", "enable_user_credit_limits", "default_user_credit_limit", "tags"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_signups
        if self.local_signups:
            _dict['local_signups'] = self.local_signups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_name
        if self.team_name:
            _dict['team_name'] = self.team_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_meetings
        if self.disable_meetings:
            _dict['disable_meetings'] = self.disable_meetings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_project_id
        if self.default_project_id:
            _dict['default_project_id'] = self.default_project_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aihub_projects_whitelist
        if self.aihub_projects_whitelist:
            _dict['aihub_projects_whitelist'] = self.aihub_projects_whitelist.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_add_users_by_domain
        if self.auto_add_users_by_domain:
            _dict['auto_add_users_by_domain'] = self.auto_add_users_by_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of team_email_domain
        if self.team_email_domain:
            _dict['team_email_domain'] = self.team_email_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_mode_appearance
        if self.chat_mode_appearance:
            _dict['chat_mode_appearance'] = self.chat_mode_appearance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chat_mode_for_members
        if self.chat_mode_for_members:
            _dict['chat_mode_for_members'] = self.chat_mode_for_members.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_user_credit_limits
        if self.enable_user_credit_limits:
            _dict['enable_user_credit_limits'] = self.enable_user_credit_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_user_credit_limit
        if self.default_user_credit_limit:
            _dict['default_user_credit_limit'] = self.default_user_credit_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "local_signups": LocalSignups.from_dict(obj.get("local_signups")) if obj.get("local_signups") is not None else None,
            "team_name": TeamName.from_dict(obj.get("team_name")) if obj.get("team_name") is not None else None,
            "disable_meetings": DisableMeetings.from_dict(obj.get("disable_meetings")) if obj.get("disable_meetings") is not None else None,
            "default_project_id": DefaultProjectId.from_dict(obj.get("default_project_id")) if obj.get("default_project_id") is not None else None,
            "aihub_projects_whitelist": AihubProjectsWhitelist.from_dict(obj.get("aihub_projects_whitelist")) if obj.get("aihub_projects_whitelist") is not None else None,
            "auto_add_users_by_domain": AutoAddUsersByDomain1.from_dict(obj.get("auto_add_users_by_domain")) if obj.get("auto_add_users_by_domain") is not None else None,
            "team_email_domain": TeamEmailDomain.from_dict(obj.get("team_email_domain")) if obj.get("team_email_domain") is not None else None,
            "chat_mode_appearance": ChatModeAppearance.from_dict(obj.get("chat_mode_appearance")) if obj.get("chat_mode_appearance") is not None else None,
            "chat_mode_for_members": ChatModeForMembers.from_dict(obj.get("chat_mode_for_members")) if obj.get("chat_mode_for_members") is not None else None,
            "enable_user_credit_limits": EnableUserCreditLimits.from_dict(obj.get("enable_user_credit_limits")) if obj.get("enable_user_credit_limits") is not None else None,
            "default_user_credit_limit": DefaultUserCreditLimit.from_dict(obj.get("default_user_credit_limit")) if obj.get("default_user_credit_limit") is not None else None,
            "tags": Tags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None
        })
        return _obj


