# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LinkedInScrapeRequest(BaseModel):
    """
    LinkedInScrapeRequest
    """ # noqa: E501
    query: Optional[Any] = Field(description="The query to search for on LinkedIn")
    num_links: Optional[Any] = Field(default=None, description="The number of LinkedIn profiles to retrieve (default is 1)")
    urls_to_exclude: Optional[Any] = Field(default=None, description="List of LinkedIn profile URLs to exclude (optional)")
    __properties: ClassVar[List[str]] = ["query", "num_links", "urls_to_exclude"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LinkedInScrapeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if query (nullable) is None
        # and model_fields_set contains the field
        if self.query is None and "query" in self.model_fields_set:
            _dict['query'] = None

        # set to None if num_links (nullable) is None
        # and model_fields_set contains the field
        if self.num_links is None and "num_links" in self.model_fields_set:
            _dict['num_links'] = None

        # set to None if urls_to_exclude (nullable) is None
        # and model_fields_set contains the field
        if self.urls_to_exclude is None and "urls_to_exclude" in self.model_fields_set:
            _dict['urls_to_exclude'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LinkedInScrapeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "num_links": obj.get("num_links"),
            "urls_to_exclude": obj.get("urls_to_exclude")
        })
        return _obj


