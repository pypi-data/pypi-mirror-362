# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.companyname import Companyname
from odin_sdk.models.companysize import Companysize
from odin_sdk.models.department import Department
from odin_sdk.models.membercount import Membercount
from odin_sdk.models.teamname import Teamname
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OnboardingTeamInfo(BaseModel):
    """
    OnboardingTeamInfo
    """ # noqa: E501
    has_team: Optional[Any] = Field(alias="hasTeam")
    team_name: Optional[Teamname] = Field(default=None, alias="teamName")
    company_name: Optional[Companyname] = Field(default=None, alias="companyName")
    company_size: Optional[Companysize] = Field(default=None, alias="companySize")
    department: Optional[Department] = None
    member_count: Optional[Membercount] = Field(default=None, alias="memberCount")
    __properties: ClassVar[List[str]] = ["hasTeam", "teamName", "companyName", "companySize", "department", "memberCount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OnboardingTeamInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team_name
        if self.team_name:
            _dict['teamName'] = self.team_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_name
        if self.company_name:
            _dict['companyName'] = self.company_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of company_size
        if self.company_size:
            _dict['companySize'] = self.company_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of department
        if self.department:
            _dict['department'] = self.department.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member_count
        if self.member_count:
            _dict['memberCount'] = self.member_count.to_dict()
        # set to None if has_team (nullable) is None
        # and model_fields_set contains the field
        if self.has_team is None and "has_team" in self.model_fields_set:
            _dict['hasTeam'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OnboardingTeamInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hasTeam": obj.get("hasTeam"),
            "teamName": Teamname.from_dict(obj.get("teamName")) if obj.get("teamName") is not None else None,
            "companyName": Companyname.from_dict(obj.get("companyName")) if obj.get("companyName") is not None else None,
            "companySize": Companysize.from_dict(obj.get("companySize")) if obj.get("companySize") is not None else None,
            "department": Department.from_dict(obj.get("department")) if obj.get("department") is not None else None,
            "memberCount": Membercount.from_dict(obj.get("memberCount")) if obj.get("memberCount") is not None else None
        })
        return _obj


