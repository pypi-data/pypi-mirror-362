# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from odin_sdk.models.condition import Condition
from odin_sdk.models.count_type import CountType
from odin_sdk.models.filters import Filters
from odin_sdk.models.label import Label
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ChartSeries(BaseModel):
    """
    ChartSeries
    """ # noqa: E501
    id: Optional[Any] = Field(description="Unique identifier for the series")
    column: Optional[Any] = Field(description="Column name for the series")
    aggregation: Optional[Any] = Field(description="Aggregation function for the series")
    label: Optional[Label] = None
    count_type: Optional[CountType] = None
    condition: Optional[Condition] = None
    filters: Optional[Filters] = None
    __properties: ClassVar[List[str]] = ["id", "column", "aggregation", "label", "count_type", "condition", "filters"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ChartSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of label
        if self.label:
            _dict['label'] = self.label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of count_type
        if self.count_type:
            _dict['count_type'] = self.count_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if column (nullable) is None
        # and model_fields_set contains the field
        if self.column is None and "column" in self.model_fields_set:
            _dict['column'] = None

        # set to None if aggregation (nullable) is None
        # and model_fields_set contains the field
        if self.aggregation is None and "aggregation" in self.model_fields_set:
            _dict['aggregation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ChartSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "column": obj.get("column"),
            "aggregation": obj.get("aggregation"),
            "label": Label.from_dict(obj.get("label")) if obj.get("label") is not None else None,
            "count_type": CountType.from_dict(obj.get("count_type")) if obj.get("count_type") is not None else None,
            "condition": Condition.from_dict(obj.get("condition")) if obj.get("condition") is not None else None,
            "filters": Filters.from_dict(obj.get("filters")) if obj.get("filters") is not None else None
        })
        return _obj


