# coding: utf-8

"""
    API Docs

    API Documentation to interact with

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from odin_sdk.models.pagination import Pagination
from odin_sdk.models.total_count import TotalCount
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GetDataTypeViewResponse(BaseModel):
    """
    GetDataTypeViewResponse
    """ # noqa: E501
    message: Optional[Any]
    data_view: Optional[Any]
    data_schema: Optional[Any]
    views: Optional[Any]
    pagination: Optional[Pagination] = None
    total_count: Optional[TotalCount] = None
    __properties: ClassVar[List[str]] = ["message", "data_view", "data_schema", "views", "pagination", "total_count"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GetDataTypeViewResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_count
        if self.total_count:
            _dict['total_count'] = self.total_count.to_dict()
        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if data_view (nullable) is None
        # and model_fields_set contains the field
        if self.data_view is None and "data_view" in self.model_fields_set:
            _dict['data_view'] = None

        # set to None if data_schema (nullable) is None
        # and model_fields_set contains the field
        if self.data_schema is None and "data_schema" in self.model_fields_set:
            _dict['data_schema'] = None

        # set to None if views (nullable) is None
        # and model_fields_set contains the field
        if self.views is None and "views" in self.model_fields_set:
            _dict['views'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GetDataTypeViewResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "data_view": obj.get("data_view"),
            "data_schema": obj.get("data_schema"),
            "views": obj.get("views"),
            "pagination": Pagination.from_dict(obj.get("pagination")) if obj.get("pagination") is not None else None,
            "total_count": TotalCount.from_dict(obj.get("total_count")) if obj.get("total_count") is not None else None
        })
        return _obj


