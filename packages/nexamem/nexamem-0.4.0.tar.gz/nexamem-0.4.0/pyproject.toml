[build-system]
requires = ["setuptools>=61.0", "build"]
build-backend = "setuptools.build_meta"

[project]
name = "nexamem"
version = "0.4.0"
description = "NexaMem/AIMemory - Complete enterprise-grade Redis-backed conversational memory with built-in governance, Azure integration, content processing, and audit capabilities. Everything included - no extras needed!"
authors = [
    { name="Chad Adams", email="chadada@microsoft.com" }
]
maintainers = [
    { name="Chad Adams", email="chadada@microsoft.com" }
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "pydantic>=2.0,<3.0",
    
    # Redis dependencies (with async support)
    "redis[asyncio]>=5.0.0,<6.0",
    # Pin fakeredis to 2.21.0 for Python 3.8 compatibility
    # (newer versions use type annotations incompatible with Python 3.8)
    "fakeredis==2.21.0",
    
    # YAML configuration support
    "PyYAML>=6.0,<7.0",
    
    # Azure identity for Entra ID authentication
    "azure-identity>=1.15.0,<2.0",
    "azure-keyvault-secrets>=4.7.0,<5.0",
]
keywords = [
    "aimemory", "nexamem", "chatbot", "conversation", "memory", "llm", "ai", 
    "redis", "azure", "governance", "policy", "audit", "compliance", 
    "pii", "content-processing", "enterprise", "async", "channels"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: System :: Logging",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Typing :: Typed"
]

[project.optional-dependencies]
# Development and testing dependencies  
dev = [
    "pytest>=7.0.0,<9.0",
    "pytest-asyncio>=0.21.0,<2.0",
    "pytest-cov>=4.0.0,<7.0",
    "black>=23.0.0,<25.0",
    "mypy>=1.0.0,<2.0",
    "ruff>=0.1.0,<1.0",
    "pre-commit>=3.0.0,<4.0"
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0,<2.0",
    "mkdocs-material>=9.0.0,<10.0",
    "mkdocstrings[python]>=0.20.0,<1.0"
]

# Performance testing
perf = [
    "pytest-benchmark>=4.0.0,<5.0",
    "memory-profiler>=0.60.0,<1.0"
]

# All optional dependencies (dev tools only)
all = [
    "nexamem[dev,docs,perf]"
]

[project.urls]
"Homepage" = "https://github.com/microsoft/nexamem"
"Documentation" = "https://github.com/microsoft/nexamem/blob/main/README.md"
"Repository" = "https://github.com/microsoft/nexamem.git"
"Bug Tracker" = "https://github.com/microsoft/nexamem/issues"
"Changelog" = "https://github.com/microsoft/nexamem/releases"
"Discussions" = "https://github.com/microsoft/nexamem/discussions"

# Tool configurations for development

[tool.setuptools.packages.find]
where = ["src"]
include = ["nexamem*"]

[tool.setuptools.package-data]
nexamem = ["*.yaml", "*.yml", "py.typed"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "SIM"]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fakeredis.*",
    "redis.*",
    "azure.*",
    "yaml.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=nexamem",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "redis: marks tests that require Redis",
    "azure: marks tests that require Azure services",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src/nexamem"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# UV package manager configuration
[tool.uv]
# UV-specific configurations for faster dependency resolution
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0"
]

# UV workspace configuration for monorepo support
[tool.uv.workspace]
members = [".", "examples/*"]

# UV sources for faster resolution
[tool.uv.sources]
# Example: Use specific commit or branch if needed
# nexamem = { git = "https://github.com/microsoft/nexamem.git", branch = "main" }
