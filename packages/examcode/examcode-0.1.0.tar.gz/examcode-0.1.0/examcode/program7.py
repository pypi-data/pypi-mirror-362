def code():
    print('#7. Implement the non-parametric Locally Weighted Regression algorithm in order to fit data points. Select appropriate data set for your experiment and draw graphs.')
    print('')
    print('import numpy as np')
    print('import matplotlib.pyplot as plt')
    print('')
    print('# Step 1: Generate synthetic dataset')
    print('np.random.seed(0)')
    print('X = np.linspace(0, 10, 100)')
    print('y = np.sin(X) + 0.1 * np.random.randn(100)  # Noisy sine wave')
    print('')
    print('# Step 2: Add bias term to X')
    print('def add_bias(X):')
    print('    return np.c_[np.ones(X.shape[0]), X]')
    print('')
    print('X_bias = add_bias(X)')
    print('')
    print('# Step 3: Gaussian kernel function')
    print('def kernel(x_i, X, tau):')
    print('    return np.exp(-np.square(X - x_i) / (2 * tau**2))')
    print('')
    print('# Step 4: Locally Weighted Regression function')
    print('def locally_weighted_regression(X, y, x_query, tau):')
    print('    m = X.shape[0]')
    print('    W = np.eye(m)')
    print('    weights = kernel(x_query[1], X[:, 1], tau)')
    print('    for i in range(m):')
    print('        W[i, i] = weights[i]')
    print('    ')
    print('    XTWX = X.T @ W @ X')
    print('    if np.linalg.det(XTWX) == 0:')
    print('        theta = np.linalg.pinv(XTWX) @ X.T @ W @ y')
    print('    else:')
    print('        theta = np.linalg.inv(XTWX) @ X.T @ W @ y')
    print('    ')
    print('    return x_query @ theta')
    print('')
    print('# Step 5: Make predictions for each data point')
    print('tau = 0.5  # Bandwidth parameter')
    print('y_pred = []')
    print('')
    print('for xi in X:')
    print('    x_query = np.array([1, xi])  # bias + x value')
    print('    y_hat = locally_weighted_regression(X_bias, y, x_query, tau)')
    print('    y_pred.append(y_hat)')
    print('')
    print('y_pred = np.array(y_pred)')
    print('')
    print('# Step 6: Plot original and predicted data')
    print('plt.figure(figsize=(10, 6))')
    print("plt.scatter(X, y, color='blue', label='Noisy Data', alpha=0.6)")
    print("plt.plot(X, y_pred, color='red', linewidth=2, label='LWR Prediction')")
    print("plt.title('Locally Weighted Regression (Ï„ = 0.5)')")
    print("plt.xlabel('X')")
    print("plt.ylabel('y')")
    print('plt.legend()')
    print('plt.grid(True)')
    print('plt.show()')
    print('')
    print('')
