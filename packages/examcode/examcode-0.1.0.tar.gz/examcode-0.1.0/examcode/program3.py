def code():
    print('#Build an Artificial Neural Network by implementing the Back propagation algorithm and test the same using appropriate data sets ')
    print('import numpy as np')
    print('X = np.array(([2, 9], [1, 5], [3, 6]), dtype=float)')
    print('y = np.array(([92], [86], [89]), dtype=float)')
    print('X = X/np.amax(X,axis=0) ')
    print('y = y/100')
    print('def sigmoid (x):')
    print('    return 1/(1 + np.exp(-x))')
    print('')
    print('def derivatives_sigmoid(x):')
    print('    return x * (1 - x)')
    print('    epoch=7000 #number of iterations')
    print('learning_rate=0.1 #learning rate eta')
    print('inputlayer_neurons = 2 #number of neurons in input layer')
    print('hiddenlayer_neurons = 3 #number of neurons in hidden layer')
    print('output_neurons = 1 #number of neurons in output layer')
    print('wh=np.random.uniform(size=(inputlayer_neurons,hiddenlayer_neurons)) #wh=hidden layer weights')
    print('bh=np.random.uniform(size=(1,hiddenlayer_neurons))#bh=hidden layer bias')
    print('wo=np.random.uniform(size=(hiddenlayer_neurons,output_neurons)) #wo=output layer weights')
    print('bo=np.random.uniform(size=(1,output_neurons))#bo=output layer bias')
    print('for i in range(epoch):')
    print('#Forward Propogation')
    print('    net_h=np.dot(X,wh) + bh #net_h=net input for hidden layer')
    print('    sigma_h= sigmoid(net_h) #sigma_h=output of sigmoid function of hidden layer')
    print('    net_o= np.dot(sigma_h,wo)+ bo #net_o=net input for output layer')
    print('    output = sigmoid(net_o) #output= is the output of output layer i.e sigmoid of net_o')
    print('#Backpropagation')
    print('    deltaK = (y-output)* derivatives_sigmoid(output) ##calculate deltak')
    print('    deltaH =  deltaK.dot(wo.T) * derivatives_sigmoid(sigma_h) #deltaH')
    print('    wo = wo + sigma_h.T.dot(deltaK) *learning_rate #Update output layer weights')
    print('    wh = wh + X.T.dot(deltaH) *learning_rate #Update hidden layer weights')
    print('print("Input: \\n" + str(X))')
    print('print("Actual Output: \\n" + str(y))')
    print('print("Predicted Output: \\n" ,output)')
