def code():
    print('#5. Apply EM algorithm to cluster a set of data stored in a .CSV file. Use the same data set for clustering using k-Means algorithm. Compare the results of these two algorithms and comment on the quality of clustering. You can add Python ML library classes/API in the program.')
    print('')
    print('import pandas as pd')
    print('import numpy as np')
    print('from sklearn.cluster import KMeans')
    print('from sklearn.mixture import GaussianMixture')
    print('from sklearn.metrics import silhouette_score, adjusted_rand_score')
    print('import matplotlib.pyplot as plt')
    print('from sklearn.preprocessing import StandardScaler')
    print('import os')
    print('os.environ["OMP_NUM_THREADS"] = "1"')
    print('# Step 1: Load the data from a CSV file')
    print('data = pd.read_csv(r"C:\\Users\\BMSIT\\Downloads\\Iris.csv")  # Replace with your filename')
    print('X = data.select_dtypes(include=[np.number])  # Select only numeric columns')
    print('X = StandardScaler().fit_transform(X)  # Normalize features')
    print('')
    print('# Step 2: Apply k-Means Clustering')
    print('k = 3  # Change depending on your dataset')
    print('kmeans = KMeans(n_clusters=k, random_state=0)')
    print('kmeans_labels = kmeans.fit_predict(X)')
    print('')
    print('# Step 3: Apply EM Algorithm using Gaussian Mixture Model')
    print('gmm = GaussianMixture(n_components=k, random_state=0)')
    print('gmm_labels = gmm.fit_predict(X)')
    print('')
    print('# Step 4: Evaluate clustering performance')
    print('kmeans_silhouette = silhouette_score(X, kmeans_labels)')
    print('gmm_silhouette = silhouette_score(X, gmm_labels)')
    print('print("Silhouette Score (k-Means):", kmeans_silhouette)')
    print('print("Silhouette Score (EM / GMM):", gmm_silhouette)')
    print('')
    print('# Optional: if you have true labels')
    print('# true_labels = data["label"]  # Uncomment and modify if available')
    print('# print("Adjusted Rand Index (k-Means):", adjusted_rand_score(true_labels, kmeans_labels))')
    print('# print("Adjusted Rand Index (GMM):", adjusted_rand_score(true_labels, gmm_labels))')
    print('# Step 5: Visualize results')
    print('def plot_clusters(X, labels, title):')
    print("    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', s=30)")
    print('    plt.title(title)')
    print('    plt.xlabel("Feature 1")')
    print('    plt.ylabel("Feature 2")')
    print('    plt.grid(True)')
    print('plt.figure(figsize=(12, 5))')
    print('plt.subplot(1, 2, 1)')
    print('plot_clusters(X, kmeans_labels, "k-Means Clustering")')
    print('plt.subplot(1, 2, 2)')
    print('plot_clusters(X, gmm_labels, "EM (GMM) Clustering")')
    print('plt.tight_layout()')
    print('plt.show()')
