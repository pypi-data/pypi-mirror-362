def code():
    print('#8. Implement the SVM algorithm for classification.')
    print('')
    print('import numpy as np')
    print('import matplotlib.pyplot as plt')
    print('from sklearn import datasets')
    print('from sklearn.svm import SVC')
    print('from sklearn.model_selection import train_test_split')
    print('from sklearn.metrics import accuracy_score')
    print('')
    print('iris = datasets.load_iris()')
    print('X = iris.data[:, :2]')
    print('y = iris.target')
    print('')
    print('X = X[y != 2]')
    print('y = y[y != 2]')
    print('')
    print('X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)')
    print('')
    print("clf = SVC(kernel='linear')")
    print('clf.fit(X_train, y_train)')
    print('')
    print('y_pred = clf.predict(X_test)')
    print('print("Accuracy:", accuracy_score(y_test, y_pred))')
    print('')
    print('def plot_decision_boundary(clf, X, y):')
    print('    plt.figure(figsize=(8,6))')
    print('')
    print("    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='coolwarm', edgecolors='k')")
    print('    ax = plt.gca()')
    print('    xlim = ax.get_xlim()')
    print('    ylim = ax.get_ylim()')
    print('')
    print('    xx = np.linspace(xlim[0], xlim[1], 100)')
    print('    yy = np.linspace(ylim[0], ylim[1], 100)')
    print('    YY, XX = np.meshgrid(yy, xx)')
    print('    xy = np.vstack([XX.ravel(), YY.ravel()]).T')
    print('    Z = clf.decision_function(xy).reshape(XX.shape)')
    print('')
    print("    ax.contour(XX, YY, Z, colors='k', levels=[-1, 0, 1], linestyles=['--', '-', '--'])")
    print('')
    print('    ax.scatter(clf.support_vectors_[:, 0], clf.support_vectors_[:, 1],')
    print("               s=100, linewidth=1, facecolors='none', edgecolors='black')")
    print('')
    print('    plt.title("SVM Decision Boundary (Setosa vs Versicolor)")')
    print('    plt.xlabel("Sepal length")')
    print('    plt.ylabel("Sepal width")')
    print('    plt.show()')
    print('')
    print('plot_decision_boundary(clf, X, y)')
