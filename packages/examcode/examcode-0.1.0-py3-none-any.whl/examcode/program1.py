def code():
    print('#1. For a given set of training data examples stored in a .CSV file, implement and demonstrate the Candidate-Elimination algorithm to output a description of set of all hypothesis consistent with the training examples.')
    print('# Candidate Elimination Algorithm')
    print('# Simple implementation without user-defined functions')
    print('# Training examples - (instance, label)')
    print('# Each instance has attributes: [Sky, Temperature, Humidity, Wind]')
    print('# Label is True for positive examples, False for negative')
    print('examples = [')
    print("    (['Sunny', 'Warm', 'Normal', 'Strong'], True),")
    print("    (['Sunny', 'Warm', 'High', 'Strong'], True),")
    print("    (['Rainy', 'Cold', 'High', 'Strong'], False),")
    print("    (['Sunny', 'Warm', 'High', 'Weak'], True)")
    print(']')
    print('')
    print('# Find first positive example to initialize S')
    print('specific_boundary = None')
    print('for instance, label in examples:')
    print('    if label:')
    print('        specific_boundary = instance.copy()')
    print('        break')
    print('')
    print("# Initialize G to the most general hypothesis (all '?')")
    print("general_boundary = ['?' for _ in range(len(specific_boundary))]")
    print('')
    print('print("Candidate Elimination Algorithm")')
    print('print(f"Initial S: {specific_boundary}")')
    print('print(f"Initial G: {general_boundary}")')
    print('print("-" * 50)')
    print('')
    print('# Process each training example')
    print('for instance, label in examples:')
    print('    print(f"Example: {instance}, Label: {label}")')
    print('    ')
    print('    # If this is a positive example')
    print('    if label:')
    print("        # Update S: generalize S if it's too specific")
    print('        for i in range(len(specific_boundary)):')
    print('            if specific_boundary[i] != instance[i]:')
    print("                specific_boundary[i] = '?'  # Generalize with wildcard")
    print('    ')
    print('    # If this is a negative example')
    print('    else:')
    print('        # Update G: specialize G if it incorrectly covers this negative example')
    print('        for i in range(len(general_boundary)):')
    print('            # If G is too general (allows this negative example)')
    print("            if general_boundary[i] == '?' and specific_boundary[i] != '?':")
    print('                # Specialize G to match S at this attribute')
    print('                general_boundary[i] = specific_boundary[i]')
    print('    ')
    print('    print(f"S: {specific_boundary}")')
    print('    print(f"G: {general_boundary}")')
    print('    print("-" * 50)')
    print('')
    print('print("Final Version Space:")')
    print('print(f"S (most specific hypothesis): {specific_boundary}")')
    print('print(f"G (most general hypothesis): {general_boundary}")')
    print('')
    print('# Interpreting the results')
    print('print("\\nInterpretation:")')
    print('important_features = []')
    print('for i in range(len(general_boundary)):')
    print("    if general_boundary[i] != '?':")
    print('        feature_names = ["Sky", "Temperature", "Humidity", "Wind"]')
    print('        important_features.append(f"{feature_names[i]} must be {general_boundary[i]}")')
    print('')
    print('if important_features:')
    print('    print("For a positive classification, the following must be true:")')
    print('    for feature in important_features:')
    print('        print(f"- {feature}")')
    print('else:')
    print('    print("No specific features are required for a positive classification.")')
