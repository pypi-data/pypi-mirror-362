def code():
    print('import numpy as np')
    print('import math')
    print('import csv')
    print('def read_data(filename):')
    print("    with open(filename, 'r') as csvfile:")
    print("        datareader = csv.reader(csvfile, delimiter=',')")
    print('        headers = next(datareader)')
    print('        metadata = []')
    print('        traindata = []')
    print('        for name in headers:')
    print('            metadata.append(name)')
    print('        for row in datareader:')
    print('            traindata.append(row)')
    print('')
    print('    return (metadata, traindata)')
    print('class Node:')
    print('    def __init__(self, attribute):')
    print('        self.attribute = attribute')
    print('        self.children = []')
    print('        self.answer = ""')
    print('        ')
    print('    def __str__(self):')
    print('        return self.attribute')
    print('def subtables(data, col, delete):')
    print('    dict = {}')
    print('    items = np.unique(data[:, col])')
    print('    count = np.zeros((items.shape[0], 1), dtype=np.int32)    ')
    print('    ')
    print('    for x in range(items.shape[0]):')
    print('        for y in range(data.shape[0]):')
    print('            if data[y, col] == items[x]:')
    print('                count[x] += 1')
    print('                ')
    print('    for x in range(items.shape[0]):')
    print('        dict[items[x]] = np.empty((int(count[x]), data.shape[1]), dtype="|S32")')
    print('        pos = 0')
    print('        for y in range(data.shape[0]):')
    print('            if data[y, col] == items[x]:')
    print('                dict[items[x]][pos] = data[y]')
    print('                pos += 1       ')
    print('        if delete:')
    print('            dict[items[x]] = np.delete(dict[items[x]], col, 1)')
    print('        ')
    print('    return items, dict')
    print('def entropy(S):')
    print('    items = np.unique(S)')
    print('')
    print('    if items.size == 1:')
    print('        return 0')
    print('    ')
    print('    counts = np.zeros((items.shape[0], 1))')
    print('    sums = 0')
    print('    ')
    print('    for x in range(items.shape[0]):')
    print('        counts[x] = sum(S == items[x]) / (S.size * 1.0)')
    print('')
    print('    for count in counts:')
    print('        sums += -1 * count * math.log(count, 2)')
    print('    return sums')
    print('def gain_ratio(data, col):')
    print('    items, dict = subtables(data, col, delete=False) ')
    print('                ')
    print('    total_size = data.shape[0]')
    print('    entropies = np.zeros((items.shape[0], 1))')
    print('    intrinsic = np.zeros((items.shape[0], 1))')
    print('    ')
    print('    for x in range(items.shape[0]):')
    print('        ratio = dict[items[x]].shape[0]/(total_size * 1.0)')
    print('        entropies[x] = ratio * entropy(dict[items[x]][:, -1])')
    print('        intrinsic[x] = ratio * math.log(ratio, 2)')
    print('        ')
    print('    total_entropy = entropy(data[:, -1])')
    print('    iv = -1 * sum(intrinsic)')
    print('    ')
    print('    for x in range(entropies.shape[0]):')
    print('        total_entropy -= entropies[x]')
    print('        ')
    print('    return total_entropy / iv')
    print('def create_node(data, metadata):')
    print('    if (np.unique(data[:, -1])).shape[0] == 1:')
    print('        node = Node("")')
    print('        node.answer = np.unique(data[:, -1])[0]')
    print('        return node')
    print('        ')
    print('    gains = np.zeros((data.shape[1] - 1, 1))')
    print('    ')
    print('    for col in range(data.shape[1] - 1):')
    print('        gains[col] = gain_ratio(data, col)')
    print('        ')
    print('    split = np.argmax(gains)')
    print('    ')
    print('    node = Node(metadata[split])    ')
    print('    metadata = np.delete(metadata, split, 0)    ')
    print('    ')
    print('    items, dict = subtables(data, split, delete=True)')
    print('    ')
    print('    for x in range(items.shape[0]):')
    print('        child = create_node(dict[items[x]], metadata)')
    print('        node.children.append((items[x], child))')
    print('    ')
    print('    return node')
    print('def empty(size):')
    print('    s = ""')
    print('    for x in range(size):')
    print('        s += "   "')
    print('    return s')
    print('')
    print('def print_tree(node, level):')
    print('    if node.answer != "":')
    print('        print(empty(level), node.answer)')
    print('        return')
    print('    print(empty(level), node.attribute)')
    print('    for value, n in node.children:')
    print('        print(empty(level + 1), value)')
    print('        print_tree(n, level + 2)')
    print('metadata, traindata = read_data("tennis.csv")')
    print('data = np.array(traindata)')
    print('node = create_node(data, metadata)')
    print('print_tree(node, 0)')
