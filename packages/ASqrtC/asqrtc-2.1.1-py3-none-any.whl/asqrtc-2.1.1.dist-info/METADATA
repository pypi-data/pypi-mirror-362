Metadata-Version: 2.4
Name: ASqrtC
Version: 2.1.1
Summary: ASqrtC is a fast and accurate square root calculator with no size limit. It delivers exact results to any specified number of decimal places. ASqrtC outperforms Python’s built-in math and decimal modules in both speed and accuracy for large and high-precision calculations.
Home-page: https://github.com/SebastianTrumbore/ASqrtC
Author: Sebastian Trumbore
Author-email: Trumbore.Sebastian@gmail.com
Keywords: square root,sqrt,math,numerical methods,accurate,precision,high precision,exact decimal,arbitrary precision,fast math,root calculator,big number math,scientific computing,math utilities,python3,educational,lightweight
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: BSD License
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license-file
Dynamic: summary

# Accurate-Sqrt-Calculator (ASqrtC)
ASqrtC is a fast and accurate square root calculator with no size limit.
It delivers exact results to any specified number of decimal places.
ASqrtC outperforms Python’s built-in math and decimal modules in both speed and accuracy for large and high-precision calculations.

**How to Use**
1. Install the package using pip.
2. Import it in your script.
3. Call ASqrtC.sqrt(number, decimal_places) — replacing number with the value you want the square root of, and decimal_places with how many digits after the decimal you'd like.
4. That’s it! It’s that easy.

**If You Receive An Error Like:**

    ValueError: Exceeds the limit (4300 digits) for integer string conversion: value has 4301 digits
    
**Then Add The Following Code to the Top of Your Project:**

    import sys
    sys.set_int_max_str_digits(0)

This removes Python’s built-in limit on large integer string conversions.


**Note: This project does not support negative, imaginary, or complex numbers.**
