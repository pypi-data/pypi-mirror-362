# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class PriceDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price': 'float',
        'adjustment_reference_id': 'str',
        'adjustment_effective_from': 'datetime',
        'adjustment_effective_until': 'datetime'
    }

    attribute_map = {
        'price': 'price',
        'adjustment_reference_id': 'adjustmentReferenceId',
        'adjustment_effective_from': 'adjustmentEffectiveFrom',
        'adjustment_effective_until': 'adjustmentEffectiveUntil'
    }

    def __init__(self, price=None, adjustment_reference_id=None, adjustment_effective_from=None, adjustment_effective_until=None, local_vars_configuration=None):  # noqa: E501
        """PriceDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price = None
        self._adjustment_reference_id = None
        self._adjustment_effective_from = None
        self._adjustment_effective_until = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if adjustment_reference_id is not None:
            self.adjustment_reference_id = adjustment_reference_id
        if adjustment_effective_from is not None:
            self.adjustment_effective_from = adjustment_effective_from
        if adjustment_effective_until is not None:
            self.adjustment_effective_until = adjustment_effective_until

    @property
    def price(self):
        """Gets the price of this PriceDetail.  # noqa: E501

        The value of this price type.  # noqa: E501

        :return: The price of this PriceDetail.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PriceDetail.

        The value of this price type.  # noqa: E501

        :param price: The price of this PriceDetail.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def adjustment_reference_id(self):
        """Gets the adjustment_reference_id of this PriceDetail.  # noqa: E501

        The reference identifier of the selected price adjustment for this SKU.  # noqa: E501

        :return: The adjustment_reference_id of this PriceDetail.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_reference_id

    @adjustment_reference_id.setter
    def adjustment_reference_id(self, adjustment_reference_id):
        """Sets the adjustment_reference_id of this PriceDetail.

        The reference identifier of the selected price adjustment for this SKU.  # noqa: E501

        :param adjustment_reference_id: The adjustment_reference_id of this PriceDetail.  # noqa: E501
        :type: str
        """

        self._adjustment_reference_id = adjustment_reference_id

    @property
    def adjustment_effective_from(self):
        """Gets the adjustment_effective_from of this PriceDetail.  # noqa: E501

        The date and time from which the price adjustment is effective.  # noqa: E501

        :return: The adjustment_effective_from of this PriceDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._adjustment_effective_from

    @adjustment_effective_from.setter
    def adjustment_effective_from(self, adjustment_effective_from):
        """Sets the adjustment_effective_from of this PriceDetail.

        The date and time from which the price adjustment is effective.  # noqa: E501

        :param adjustment_effective_from: The adjustment_effective_from of this PriceDetail.  # noqa: E501
        :type: datetime
        """

        self._adjustment_effective_from = adjustment_effective_from

    @property
    def adjustment_effective_until(self):
        """Gets the adjustment_effective_until of this PriceDetail.  # noqa: E501

        The date and time until which the price adjustment is effective.  # noqa: E501

        :return: The adjustment_effective_until of this PriceDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._adjustment_effective_until

    @adjustment_effective_until.setter
    def adjustment_effective_until(self, adjustment_effective_until):
        """Sets the adjustment_effective_until of this PriceDetail.

        The date and time until which the price adjustment is effective.  # noqa: E501

        :param adjustment_effective_until: The adjustment_effective_until of this PriceDetail.  # noqa: E501
        :type: datetime
        """

        self._adjustment_effective_until = adjustment_effective_until

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PriceDetail):
            return True

        return self.to_dict() != other.to_dict()
