# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class Binding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'str',
        'expression': 'list[object]',
        'value_type': 'str',
        'min_value': 'float',
        'max_value': 'float',
        'attribute_id': 'int',
        'description': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'expression': 'expression',
        'value_type': 'valueType',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'attribute_id': 'attributeId',
        'description': 'description'
    }

    def __init__(self, name=None, type=None, expression=None, value_type=None, min_value=None, max_value=None, attribute_id=None, description=None, local_vars_configuration=None):  # noqa: E501
        """Binding - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._expression = None
        self._value_type = None
        self._min_value = None
        self._max_value = None
        self._attribute_id = None
        self._description = None
        self.discriminator = None

        self.name = name
        if type is not None:
            self.type = type
        self.expression = expression
        if value_type is not None:
            self.value_type = value_type
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if description is not None:
            self.description = description

    @property
    def name(self):
        """Gets the name of this Binding.  # noqa: E501

        A descriptive name for the value to be bound.  # noqa: E501

        :return: The name of this Binding.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Binding.

        A descriptive name for the value to be bound.  # noqa: E501

        :param name: The name of this Binding.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Binding.  # noqa: E501

        The kind of binding. Possible values are: - `bundle` - `cartItemFilter` - `subledgerBalance` - `templateParameter`   # noqa: E501

        :return: The type of this Binding.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Binding.

        The kind of binding. Possible values are: - `bundle` - `cartItemFilter` - `subledgerBalance` - `templateParameter`   # noqa: E501

        :param type: The type of this Binding.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def expression(self):
        """Gets the expression of this Binding.  # noqa: E501

        A Talang expression that will be evaluated and its result attached to the name of the binding.  # noqa: E501

        :return: The expression of this Binding.  # noqa: E501
        :rtype: list[object]
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Binding.

        A Talang expression that will be evaluated and its result attached to the name of the binding.  # noqa: E501

        :param expression: The expression of this Binding.  # noqa: E501
        :type: list[object]
        """
        if self.local_vars_configuration.client_side_validation and expression is None:  # noqa: E501
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501

        self._expression = expression

    @property
    def value_type(self):
        """Gets the value_type of this Binding.  # noqa: E501

        Can be one of the following: - `string` - `number` - `boolean`   # noqa: E501

        :return: The value_type of this Binding.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this Binding.

        Can be one of the following: - `string` - `number` - `boolean`   # noqa: E501

        :param value_type: The value_type of this Binding.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def min_value(self):
        """Gets the min_value of this Binding.  # noqa: E501

        The minimum value allowed for this placeholder.  # noqa: E501

        :return: The min_value of this Binding.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this Binding.

        The minimum value allowed for this placeholder.  # noqa: E501

        :param min_value: The min_value of this Binding.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this Binding.  # noqa: E501

        The maximum value allowed for this placeholder.  # noqa: E501

        :return: The max_value of this Binding.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this Binding.

        The maximum value allowed for this placeholder.  # noqa: E501

        :param max_value: The max_value of this Binding.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def attribute_id(self):
        """Gets the attribute_id of this Binding.  # noqa: E501

        Id of the attribute attached to the placeholder.  # noqa: E501

        :return: The attribute_id of this Binding.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this Binding.

        Id of the attribute attached to the placeholder.  # noqa: E501

        :param attribute_id: The attribute_id of this Binding.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def description(self):
        """Gets the description of this Binding.  # noqa: E501

        Describes the placeholder field and value in the template. This description can be used when creating campaigns from this template.  # noqa: E501

        :return: The description of this Binding.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Binding.

        Describes the placeholder field and value in the template. This description can be used when creating campaigns from this template.  # noqa: E501

        :param description: The description of this Binding.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Binding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Binding):
            return True

        return self.to_dict() != other.to_dict()
