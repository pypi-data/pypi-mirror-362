# coding: utf-8

"""
    Talon.One API

    Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}`   # noqa: E501

    The version of the OpenAPI document: 
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from talon_one.configuration import Configuration


class ExtendLoyaltyPointsExpiryDateEffectProps(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'program_id': 'int',
        'sub_ledger_id': 'str',
        'extension_duration': 'str',
        'transaction_uui_ds': 'list[str]',
        'previous_expiration_date': 'datetime'
    }

    attribute_map = {
        'program_id': 'programId',
        'sub_ledger_id': 'subLedgerId',
        'extension_duration': 'extensionDuration',
        'transaction_uui_ds': 'transactionUUIDs',
        'previous_expiration_date': 'previousExpirationDate'
    }

    def __init__(self, program_id=None, sub_ledger_id=None, extension_duration=None, transaction_uui_ds=None, previous_expiration_date=None, local_vars_configuration=None):  # noqa: E501
        """ExtendLoyaltyPointsExpiryDateEffectProps - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._program_id = None
        self._sub_ledger_id = None
        self._extension_duration = None
        self._transaction_uui_ds = None
        self._previous_expiration_date = None
        self.discriminator = None

        self.program_id = program_id
        self.sub_ledger_id = sub_ledger_id
        self.extension_duration = extension_duration
        if transaction_uui_ds is not None:
            self.transaction_uui_ds = transaction_uui_ds
        self.previous_expiration_date = previous_expiration_date

    @property
    def program_id(self):
        """Gets the program_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501

        ID of the loyalty program that contains these points.  # noqa: E501

        :return: The program_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this ExtendLoyaltyPointsExpiryDateEffectProps.

        ID of the loyalty program that contains these points.  # noqa: E501

        :param program_id: The program_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and program_id is None:  # noqa: E501
            raise ValueError("Invalid value for `program_id`, must not be `None`")  # noqa: E501

        self._program_id = program_id

    @property
    def sub_ledger_id(self):
        """Gets the sub_ledger_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501

        API name of the loyalty program subledger that contains these points. added.  # noqa: E501

        :return: The sub_ledger_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._sub_ledger_id

    @sub_ledger_id.setter
    def sub_ledger_id(self, sub_ledger_id):
        """Sets the sub_ledger_id of this ExtendLoyaltyPointsExpiryDateEffectProps.

        API name of the loyalty program subledger that contains these points. added.  # noqa: E501

        :param sub_ledger_id: The sub_ledger_id of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sub_ledger_id is None:  # noqa: E501
            raise ValueError("Invalid value for `sub_ledger_id`, must not be `None`")  # noqa: E501

        self._sub_ledger_id = sub_ledger_id

    @property
    def extension_duration(self):
        """Gets the extension_duration of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501

        Time frame by which the expiry date extends.  The time format is either: - immediate, or - an **integer** followed by a letter indicating the time unit.  Examples: `immediate`, `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year.   # noqa: E501

        :return: The extension_duration of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :rtype: str
        """
        return self._extension_duration

    @extension_duration.setter
    def extension_duration(self, extension_duration):
        """Sets the extension_duration of this ExtendLoyaltyPointsExpiryDateEffectProps.

        Time frame by which the expiry date extends.  The time format is either: - immediate, or - an **integer** followed by a letter indicating the time unit.  Examples: `immediate`, `30s`, `40m`, `1h`, `5D`, `7W`, `10M`, `15Y`.  Available units:  - `s`: seconds - `m`: minutes - `h`: hours - `D`: days - `W`: weeks - `M`: months - `Y`: years  You can round certain units up or down: - `_D` for rounding down days only. Signifies the start of the day. - `_U` for rounding up days, weeks, months and years. Signifies the end of the day, week, month or year.   # noqa: E501

        :param extension_duration: The extension_duration of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and extension_duration is None:  # noqa: E501
            raise ValueError("Invalid value for `extension_duration`, must not be `None`")  # noqa: E501

        self._extension_duration = extension_duration

    @property
    def transaction_uui_ds(self):
        """Gets the transaction_uui_ds of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501

        The list of identifiers of transactions affected affected by the extension.  # noqa: E501

        :return: The transaction_uui_ds of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_uui_ds

    @transaction_uui_ds.setter
    def transaction_uui_ds(self, transaction_uui_ds):
        """Sets the transaction_uui_ds of this ExtendLoyaltyPointsExpiryDateEffectProps.

        The list of identifiers of transactions affected affected by the extension.  # noqa: E501

        :param transaction_uui_ds: The transaction_uui_ds of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :type: list[str]
        """

        self._transaction_uui_ds = transaction_uui_ds

    @property
    def previous_expiration_date(self):
        """Gets the previous_expiration_date of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501

        Expiry date before applying the extension.  # noqa: E501

        :return: The previous_expiration_date of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :rtype: datetime
        """
        return self._previous_expiration_date

    @previous_expiration_date.setter
    def previous_expiration_date(self, previous_expiration_date):
        """Sets the previous_expiration_date of this ExtendLoyaltyPointsExpiryDateEffectProps.

        Expiry date before applying the extension.  # noqa: E501

        :param previous_expiration_date: The previous_expiration_date of this ExtendLoyaltyPointsExpiryDateEffectProps.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and previous_expiration_date is None:  # noqa: E501
            raise ValueError("Invalid value for `previous_expiration_date`, must not be `None`")  # noqa: E501

        self._previous_expiration_date = previous_expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendLoyaltyPointsExpiryDateEffectProps):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExtendLoyaltyPointsExpiryDateEffectProps):
            return True

        return self.to_dict() != other.to_dict()
