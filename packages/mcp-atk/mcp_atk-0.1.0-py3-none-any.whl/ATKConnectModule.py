# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ATKConnectModule
else:
    import _ATKConnectModule

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def atkExecuteScript_ext(strInput):
    return _ATKConnectModule.atkExecuteScript_ext(strInput)

def atkAllInstanceNamesReceive(nstrLength, strNetData):
    return _ATKConnectModule.atkAllInstanceNamesReceive(nstrLength, strNetData)

def atkGetTimePeriodReceive(nstrLength, strNetData):
    return _ATKConnectModule.atkGetTimePeriodReceive(nstrLength, strNetData)

def atkAERReceive(nstrLength, strNetData):
    return _ATKConnectModule.atkAERReceive(nstrLength, strNetData)

def atkAstrogator_RMReceive(nDataCount, nDataIndex, nstrLength, strNetData):
    return _ATKConnectModule.atkAstrogator_RMReceive(nDataCount, nDataIndex, nstrLength, strNetData)

def atkQuickReport_RMReceive(nDataCount, nDataIndex, nstrLength, strNetData):
    return _ATKConnectModule.atkQuickReport_RMReceive(nDataCount, nDataIndex, nstrLength, strNetData)

def atkAstrogator_ERMReceive(nDataCount, nDataIndex, nstrLength, strNetData):
    return _ATKConnectModule.atkAstrogator_ERMReceive(nDataCount, nDataIndex, nstrLength, strNetData)

def atkGetAttitudeReceive(nDataCount, nDataIndex, nstrLength, strNetData):
    return _ATKConnectModule.atkGetAttitudeReceive(nDataCount, nDataIndex, nstrLength, strNetData)

def atkConnectCMDAnalysis(strInput, strFunc, strCMD, strObjPath, strCMDParam):
    return _ATKConnectModule.atkConnectCMDAnalysis(strInput, strFunc, strCMD, strObjPath, strCMDParam)
BUF_LENGTH = _ATKConnectModule.BUF_LENGTH
class CMDRESULT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _ATKConnectModule.CMDRESULT_swiginit(self, _ATKConnectModule.new_CMDRESULT())
    m_vectData = property(_ATKConnectModule.CMDRESULT_m_vectData_get, _ATKConnectModule.CMDRESULT_m_vectData_set)

    def Item(self, nIndex):
        return _ATKConnectModule.CMDRESULT_Item(self, nIndex)
    __swig_destroy__ = _ATKConnectModule.delete_CMDRESULT

# Register CMDRESULT in _ATKConnectModule:
_ATKConnectModule.CMDRESULT_swigregister(CMDRESULT)

def InitConnector():
    return _ATKConnectModule.InitConnector()

def atkOpen(*args):
    return _ATKConnectModule.atkOpen(*args)

def atkConnect(*args):
    return _ATKConnectModule.atkConnect(*args)

def atkClose(conID):
    return _ATKConnectModule.atkClose(conID)

def atkConnectEx(conID, strCommand, striInput):
    return _ATKConnectModule.atkConnectEx(conID, strCommand, striInput)

def atkExecuteScript(striInput, strOutput):
    return _ATKConnectModule.atkExecuteScript(striInput, strOutput)

def atkExecuteCommand(*args):
    return _ATKConnectModule.atkExecuteCommand(*args)

def Send_Complete(sock, buf, len):
    return _ATKConnectModule.Send_Complete(sock, buf, len)

