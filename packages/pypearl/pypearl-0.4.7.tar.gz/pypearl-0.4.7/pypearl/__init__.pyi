def add(a: int, b: int) -> int: ...

class ArrayD1:
    def __init__(self, *, size: int) -> None: ...
    def get(self, n: int) -> float: ...
    def set(self, n: int, d: float) -> None: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...

class ArrayD2:
    def __init__(self, *, rows: int, cols: int) -> None: ...

class ArrayI2:
    def __init__(self, *, rows: int, cols: int) -> None: ...

class Layer:
    def __init__(self, *, prev_layer_size: int, this_size) -> None: ...
    def forward(self, x: ArrayD2) -> ArrayD2: ...
    def backward(self, dval: ArrayD2) -> ArrayD2: ...

class ReLU:
    def __init__(self) -> None: ...
    def forward(self, x: ArrayD2) -> ArrayD2: ...
    def backward(self, dval: ArrayD2) -> ArrayD2: ...

class Softmax:
    def __init__(self) -> None: ...
    def forward(self, x: ArrayD2) -> ArrayD2: ...
    def backward(self, dval: ArrayD2) -> ArrayD2: ...

class CCE:
    def __init__(self) -> None: ...
    def forward(self, output: ArrayD2, actual: ArrayI2) -> float: ...
    def backward(self, output: ArrayD2, actual: ArrayI2) -> ArrayD2: ...

class SGD:
    def __init__(self) -> None: ...
    def optimize(self, layer: Layer) -> None: ...