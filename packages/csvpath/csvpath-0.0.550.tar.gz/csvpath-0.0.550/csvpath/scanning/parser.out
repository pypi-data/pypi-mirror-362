Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANY
    NAME

Grammar

Rule 0     S' -> path
Rule 1     path -> FILENAME LEFT_BRACKET expression RIGHT_BRACKET
Rule 2     expression -> expression PLUS term
Rule 3     expression -> expression MINUS term
Rule 4     expression -> term
Rule 5     term -> NUMBER
Rule 6     term -> NUMBER ALL_LINES
Rule 7     term -> ALL_LINES

Terminals, with rules where they appear

ALL_LINES            : 6 7
ANY                  : 
FILENAME             : 1
LEFT_BRACKET         : 1
MINUS                : 3
NAME                 : 
NUMBER               : 5 6
PLUS                 : 2
RIGHT_BRACKET        : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3
path                 : 0
term                 : 2 3 4

Parsing method: LALR

state 0

    (0) S' -> . path
    (1) path -> . FILENAME LEFT_BRACKET expression RIGHT_BRACKET

    FILENAME        shift and go to state 2

    path                           shift and go to state 1

state 1

    (0) S' -> path .



state 2

    (1) path -> FILENAME . LEFT_BRACKET expression RIGHT_BRACKET

    LEFT_BRACKET    shift and go to state 3


state 3

    (1) path -> FILENAME LEFT_BRACKET . expression RIGHT_BRACKET
    (2) expression -> . expression PLUS term
    (3) expression -> . expression MINUS term
    (4) expression -> . term
    (5) term -> . NUMBER
    (6) term -> . NUMBER ALL_LINES
    (7) term -> . ALL_LINES

    NUMBER          shift and go to state 6
    ALL_LINES       shift and go to state 7

    expression                     shift and go to state 4
    term                           shift and go to state 5

state 4

    (1) path -> FILENAME LEFT_BRACKET expression . RIGHT_BRACKET
    (2) expression -> expression . PLUS term
    (3) expression -> expression . MINUS term

    RIGHT_BRACKET   shift and go to state 8
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10


state 5

    (4) expression -> term .

    RIGHT_BRACKET   reduce using rule 4 (expression -> term .)
    PLUS            reduce using rule 4 (expression -> term .)
    MINUS           reduce using rule 4 (expression -> term .)


state 6

    (5) term -> NUMBER .
    (6) term -> NUMBER . ALL_LINES

    RIGHT_BRACKET   reduce using rule 5 (term -> NUMBER .)
    PLUS            reduce using rule 5 (term -> NUMBER .)
    MINUS           reduce using rule 5 (term -> NUMBER .)
    ALL_LINES       shift and go to state 11


state 7

    (7) term -> ALL_LINES .

    RIGHT_BRACKET   reduce using rule 7 (term -> ALL_LINES .)
    PLUS            reduce using rule 7 (term -> ALL_LINES .)
    MINUS           reduce using rule 7 (term -> ALL_LINES .)


state 8

    (1) path -> FILENAME LEFT_BRACKET expression RIGHT_BRACKET .

    $end            reduce using rule 1 (path -> FILENAME LEFT_BRACKET expression RIGHT_BRACKET .)


state 9

    (2) expression -> expression PLUS . term
    (5) term -> . NUMBER
    (6) term -> . NUMBER ALL_LINES
    (7) term -> . ALL_LINES

    NUMBER          shift and go to state 6
    ALL_LINES       shift and go to state 7

    term                           shift and go to state 12

state 10

    (3) expression -> expression MINUS . term
    (5) term -> . NUMBER
    (6) term -> . NUMBER ALL_LINES
    (7) term -> . ALL_LINES

    NUMBER          shift and go to state 6
    ALL_LINES       shift and go to state 7

    term                           shift and go to state 13

state 11

    (6) term -> NUMBER ALL_LINES .

    RIGHT_BRACKET   reduce using rule 6 (term -> NUMBER ALL_LINES .)
    PLUS            reduce using rule 6 (term -> NUMBER ALL_LINES .)
    MINUS           reduce using rule 6 (term -> NUMBER ALL_LINES .)


state 12

    (2) expression -> expression PLUS term .

    RIGHT_BRACKET   reduce using rule 2 (expression -> expression PLUS term .)
    PLUS            reduce using rule 2 (expression -> expression PLUS term .)
    MINUS           reduce using rule 2 (expression -> expression PLUS term .)


state 13

    (3) expression -> expression MINUS term .

    RIGHT_BRACKET   reduce using rule 3 (expression -> expression MINUS term .)
    PLUS            reduce using rule 3 (expression -> expression MINUS term .)
    MINUS           reduce using rule 3 (expression -> expression MINUS term .)

