Metadata-Version: 2.1
Name: pixcdust
Version: 0.1.1
Summary: 
Author: zawadzl
Author-email: lionel.zawadzki@cnes.fr
Requires-Python: >=3.10,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: astropy (>=6.1.7,<7.0.0)
Requires-Dist: astropy-healpix (>=1.1.0,<2.0.0)
Requires-Dist: black (>=24.2.0,<25.0.0)
Requires-Dist: branca (>=0.7.2,<0.8.0)
Requires-Dist: click (>=8.1.7,<9.0.0)
Requires-Dist: eodag (>=2.12.1,<3.0.0)
Requires-Dist: fiona (>=1.9.5,<2.0.0)
Requires-Dist: flake8 (>=7.0.0,<8.0.0)
Requires-Dist: folium (>=0.16.0,<0.17.0)
Requires-Dist: geopandas (>=0.14.3,<0.15.0)
Requires-Dist: h3 (>=3.7.6,<4.0.0)
Requires-Dist: netcdf4 (>=1.6.5,<2.0.0)
Requires-Dist: numpy (>=1.26.4,<2.0.0)
Requires-Dist: pandas (>=2.2.0,<3.0.0)
Requires-Dist: pyarrow (>=16.1.0,<17.0.0)
Requires-Dist: pyogrio (>=0.8.0,<0.9.0)
Requires-Dist: shapely (>=2.0.3,<3.0.0)
Requires-Dist: tqdm (>=4.66.4,<5.0.0)
Requires-Dist: xarray (>=2024.2.0,<2025.0.0)
Requires-Dist: xdggs (>=0.2.0,<0.3.0)
Requires-Dist: xvec (>=0.3.0,<0.4.0)
Requires-Dist: zarr (>=2.11,<3.0)
Requires-Dist: zcollection (>=2024.2.0,<2025.0.0)
Description-Content-Type: text/markdown

# 🎩 🪄 A Pinch of PixC Dust 🐇

This python project centralizes librairies to facilitate local studies based on SWOT-HR Level-2 Pixel Cloud products.

🚀 Quick Start
--------------
This project is available with pip and conda-forge. You can install it with either

  * pip: ``pip install pixcdust``
  * conda: ``conda install -c conda-forge pixcdust``

🚀 Manual Installation
----------------------

Start by cloning this package and installing the environment with either
  * pip: ``pip install -e .``
  * poetry: ``poetry install``

## 📔 *Notebooks* 
Start here to understand what you can do: "There is nothing more frustrating than a good example" (Mark Twain)

## ⬇️ *Downloaders* 
The downloader classes allow you to directly download SWOT Pixel Cloud files from hydroweb.next (or other sources such as PO.DAAC to be implemented).  
For hydroweb.next, it requires you to create an account and an API Key (token) from the platform: https://hydroweb.next.theia-land.fr.
Then, carefully store your API-Key :
- either in your eodag configuration file (usually `~/.config/eodag/eodag.yml`, automatically generated the first time you use eodag) in `auth/credentials/apikey="PLEASE_CHANGE_ME"`;
- or in an environment variable `export EODAG__HYDROWEB_NEXT__AUTH__CREDENTIALS__APIKEY="PLEASE_CHANGE_ME"`.

## 🪄 *Converters* 
The converter classes allow you to create more easy-to-use databases than the original netcdf4 format. The various databases are designed for **local** studies, not for huge country-scale databases (though it should work, they will not be efficient).  
Zarr (with zcollection), geopackage and shapefile are currently supported.  
The converters allow you to limit the databases to areas of interest (provided by polygons) and variables of interest (limitated to the pixel_cloud group mono-dimensional variables).  
Users are encouraged to limit the number of variables to what is useful, especially for geopackage format, but also for the planet ;)

## 👓 *Readers* :
The reader classes allow you to read the original netcdf4 format or the databases generated by converters.

## 🧰 *Tools*
Here are some python script implementing the classes.

## 🔶 *Discrete Global Grid System (experimental)*
I enjoy DDGS a lot. It is pretty great if you want to perform on-the-fly "rasterization", partitionning, comparing pixels over time or space, etc.  
Currently H3 and HEALPix are implemented.  

## ✅ *Tests*
You first need to configure the tests and download the tests data with init_tests.py. We recommend setting the following options:
- INPUT_FOLDER is where the tests data will be downloaded (or are already available).
- HYDROWEB_AUTH is your hydroweb.next API key. It is required to automatically download the tests data or run the downloaders tests.
```
python tests/init_tests.py -I INPUT_FOLDER -H HYDROWEB_AUTH
```

You then can run the converters tests:
```
pytest
```
You can also run all the tests including the downloaders tests with:
```
pytest --dl
```

