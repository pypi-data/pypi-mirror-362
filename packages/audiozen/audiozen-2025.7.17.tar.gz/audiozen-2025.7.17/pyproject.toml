[project]
name = "audiozen"
dynamic = ["version"]
description = "Audio ZEN is a library for audio/speech signal processing."
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "einops",
    "librosa",
    "simple_parsing",
    "torchinfo",
    "pyyaml",
    "numpy",
    "rich",
    "numba>=0.60",
    "ipykernel",
    "tqdm",
    "pandas",
    "tabulate",
    "matplotlib",
    "joblib",
    "psutil",
    "torch==2.5.1",
    "torchaudio",
    "onnxruntime-gpu>=1.20.1",
    "pesq>=0.0.4",
    "pystoi>=0.4.1",
    "deprecated>=1.2.18",
    "tensorboard>=2.19.0",
    "colorlog>=6.9.0",
    "omegaconf>=2.3.0",
]

[dependency-groups]
demo = ["plotly>=5.24.1", "streamlit>=1.41.1"]
llm-tse = [
    "sentencepiece>=0.2.0",
    "asteroid-filterbanks>=0.4.0",
    "peft>=0.14.0",
    "transformers>=4.49.0",
    "accelerate==1.4.0",
    "peft==0.14.0",
    "huggingface-hub[hf-transfer]>=0.29.1",
]
dev = ["flit>=3.11.0", "huggingface-hub>=0.29.3"]
femtosense = ["femtodriver>=1.6.1", "fmot>=3.0.0", "femtocrux>=1.1.3"]


[build-system]
requires = ["flit_core >= 3.4"]
build-backend = "flit_core.buildapi"


# ========================
# Tool Configuration
# ========================
[tool.flit.external-data]
directory = "src/audiozen/external"
# Pyright (Pylance) configuration. It overrides the settings in vscode/settings.json.
[tool.pyright]
# Pylance uses the pyright as a backend You can use exclude to ignore files or directories to speed up the analysis,
# which is very useful for this large project. You may set the `exclude` according to this readme file:
# https://github.com/microsoft/pylance-release/blob/main/docs/settings/python_analysis_exclude.md#why-do-certain--patterns-fail-to-match-the-file-structure
# But notice that even you ignore all files, the opened files and the files that are referenced by the opened files
# will still be analyzed.
exclude = [
    ".vscode",
    "**/.vscode",
    ".git",
    "**/__pycache__",
    "__pycache__",
    ".*",
    "**/.*",
    "tests",
    "tools",
    "notebooks",
    "**/notebooks",
    "docs",
    "**/docs",
    "venv",
    "**/venv",
    "env",
    "**/env",
    ".venv",
    "**/.venv",
    ".env",
    "**/.env",
    "**/exp",
    "**/model_zoo",
    "build",
    "dist",
    "**/build",
    "**/dist",
    "**/*.pyc",
    "**/*.pyo",
    "**/*.pyd",
    ".pytest_cache",
    "**/.pytest_cache",
    "**/Amphion/",
    "**/*.egg-info",
    ".ruff_cache",
    "**/.ruff_cache",
    "**/.nfs*",
    ".ipynb_checkpoints",
    "**/.ipynb_checkpoints",
    "data",
]

[tool.ruff]
line-length = 119
indent-width = 4
target-version = "py312"
extend-exclude = ["exp"]
[tool.ruff.format]
docstring-code-format = true
[tool.ruff.lint]
# Never enforce `E501` (line length violations).
ignore = ["C901", "E501", "E741", "F402", "F823"]
select = ["C", "E", "F", "I", "W"]
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401", "F403", "F811"]
[tool.ruff.lint.isort]
lines-after-imports = 2
known-first-party = ["src"]
[tool.ruff.lint.pydocstyle]
convention = "google"
[tool.ruff.lint.pycodestyle]
max-doc-length = 119

[tool.docformatter]
wrap-summaries = 119
wrap-descriptions = 119
in-place = true
recursive = "src"

[tool.pytest.ini_options]
testpaths = ["tests"]
log_cli = true
log_cli_level = "INFO"
