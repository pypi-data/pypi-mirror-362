from typing import Any, Iterable, Optional, Tuple

from pydantic import BaseModel, ConfigDict, Field, field_validator

from vexipy._iri import Iri


class Vulnerability(BaseModel):
    id: Optional[Iri] = Field(alias="@id", default=None)
    name: str
    description: Optional[str] = None
    aliases: Optional[Tuple[str, ...]] = None

    model_config = ConfigDict(frozen=True, populate_by_name=True)

    @field_validator("aliases", mode="before")
    @classmethod
    def convert_to_tuple(cls, v: Optional[Iterable[str]]) -> Optional[Tuple[str, ...]]:
        """Convert dict input to tuple of tuples"""
        return None if v is None else tuple(v)

    def update(self, **kwargs: Any) -> "Vulnerability":
        obj = self.model_dump()
        obj.update(kwargs)
        return Vulnerability(**obj)

    def to_json(self, **kwargs: Any) -> str:
        """Return a JSON string representation of the model."""
        return self.model_dump_json(**kwargs)

    @classmethod
    def from_json(cls, json_string: str) -> "Vulnerability":
        """Create a model instance from a JSON string."""
        return cls.model_validate_json(json_string)
