# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoint The PowerBot service is available at the following REST endpoint:  ``` $api_url_placeholder ```  Access to the API is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)  # noqa: E501

    The version of the OpenAPI document: 2.24.1
    Contact: office@powerbot-trading.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from powerbot_asyncio_client.configuration import Configuration


class ApiKeyDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'email': 'str',
        'provider_id': 'str',
        'organization_id': 'str',
        'type': 'ApiKeyType',
        'tenant_id': 'str',
        'tenant_name': 'str',
        'inherit_tenant_portfolios': 'bool',
        'portfolios': 'list[Portfolio]',
        'tenant_risk_settings': 'RiskManagementSettings',
        'can_read': 'bool',
        'can_trade': 'bool',
        'can_signal': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'email': 'email',
        'provider_id': 'provider_id',
        'organization_id': 'organization_id',
        'type': 'type',
        'tenant_id': 'tenant_id',
        'tenant_name': 'tenant_name',
        'inherit_tenant_portfolios': 'inherit_tenant_portfolios',
        'portfolios': 'portfolios',
        'tenant_risk_settings': 'tenant_risk_settings',
        'can_read': 'can_read',
        'can_trade': 'can_trade',
        'can_signal': 'can_signal'
    }

    def __init__(self, name=None, description=None, email=None, provider_id=None, organization_id=None, type=None, tenant_id=None, tenant_name=None, inherit_tenant_portfolios=None, portfolios=None, tenant_risk_settings=None, can_read=None, can_trade=None, can_signal=None, local_vars_configuration=None):  # noqa: E501
        """ApiKeyDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._email = None
        self._provider_id = None
        self._organization_id = None
        self._type = None
        self._tenant_id = None
        self._tenant_name = None
        self._inherit_tenant_portfolios = None
        self._portfolios = None
        self._tenant_risk_settings = None
        self._can_read = None
        self._can_trade = None
        self._can_signal = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if provider_id is not None:
            self.provider_id = provider_id
        if organization_id is not None:
            self.organization_id = organization_id
        self.type = type
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        self.inherit_tenant_portfolios = inherit_tenant_portfolios
        if portfolios is not None:
            self.portfolios = portfolios
        if tenant_risk_settings is not None:
            self.tenant_risk_settings = tenant_risk_settings
        self.can_read = can_read
        self.can_trade = can_trade
        self.can_signal = can_signal

    @property
    def name(self):
        """Gets the name of this ApiKeyDetails.  # noqa: E501

        A name for the API key or SSO user  # noqa: E501

        :return: The name of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyDetails.

        A name for the API key or SSO user  # noqa: E501

        :param name: The name of this ApiKeyDetails.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApiKeyDetails.  # noqa: E501


        :return: The description of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiKeyDetails.


        :param description: The description of this ApiKeyDetails.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this ApiKeyDetails.  # noqa: E501

        Email a user can use to login with  # noqa: E501

        :return: The email of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApiKeyDetails.

        Email a user can use to login with  # noqa: E501

        :param email: The email of this ApiKeyDetails.  # noqa: E501
        :type email: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and not re.search(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$', email)):  # noqa: E501
            raise ValueError(r"Invalid value for `email`, must be a follow pattern or equal to `/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/`")  # noqa: E501

        self._email = email

    @property
    def provider_id(self):
        """Gets the provider_id of this ApiKeyDetails.  # noqa: E501

        Unique identifier for the SSO provider.  # noqa: E501

        :return: The provider_id of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ApiKeyDetails.

        Unique identifier for the SSO provider.  # noqa: E501

        :param provider_id: The provider_id of this ApiKeyDetails.  # noqa: E501
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiKeyDetails.  # noqa: E501

        Organization configured at the SSO provider.  # noqa: E501

        :return: The organization_id of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiKeyDetails.

        Organization configured at the SSO provider.  # noqa: E501

        :param organization_id: The organization_id of this ApiKeyDetails.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def type(self):
        """Gets the type of this ApiKeyDetails.  # noqa: E501


        :return: The type of this ApiKeyDetails.  # noqa: E501
        :rtype: ApiKeyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiKeyDetails.


        :param type: The type of this ApiKeyDetails.  # noqa: E501
        :type type: ApiKeyType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ApiKeyDetails.  # noqa: E501


        :return: The tenant_id of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ApiKeyDetails.


        :param tenant_id: The tenant_id of this ApiKeyDetails.  # noqa: E501
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this ApiKeyDetails.  # noqa: E501


        :return: The tenant_name of this ApiKeyDetails.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this ApiKeyDetails.


        :param tenant_name: The tenant_name of this ApiKeyDetails.  # noqa: E501
        :type tenant_name: str
        """

        self._tenant_name = tenant_name

    @property
    def inherit_tenant_portfolios(self):
        """Gets the inherit_tenant_portfolios of this ApiKeyDetails.  # noqa: E501

        If true, all tenant portfolios are accessible.  # noqa: E501

        :return: The inherit_tenant_portfolios of this ApiKeyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._inherit_tenant_portfolios

    @inherit_tenant_portfolios.setter
    def inherit_tenant_portfolios(self, inherit_tenant_portfolios):
        """Sets the inherit_tenant_portfolios of this ApiKeyDetails.

        If true, all tenant portfolios are accessible.  # noqa: E501

        :param inherit_tenant_portfolios: The inherit_tenant_portfolios of this ApiKeyDetails.  # noqa: E501
        :type inherit_tenant_portfolios: bool
        """
        if self.local_vars_configuration.client_side_validation and inherit_tenant_portfolios is None:  # noqa: E501
            raise ValueError("Invalid value for `inherit_tenant_portfolios`, must not be `None`")  # noqa: E501

        self._inherit_tenant_portfolios = inherit_tenant_portfolios

    @property
    def portfolios(self):
        """Gets the portfolios of this ApiKeyDetails.  # noqa: E501


        :return: The portfolios of this ApiKeyDetails.  # noqa: E501
        :rtype: list[Portfolio]
        """
        return self._portfolios

    @portfolios.setter
    def portfolios(self, portfolios):
        """Sets the portfolios of this ApiKeyDetails.


        :param portfolios: The portfolios of this ApiKeyDetails.  # noqa: E501
        :type portfolios: list[Portfolio]
        """

        self._portfolios = portfolios

    @property
    def tenant_risk_settings(self):
        """Gets the tenant_risk_settings of this ApiKeyDetails.  # noqa: E501


        :return: The tenant_risk_settings of this ApiKeyDetails.  # noqa: E501
        :rtype: RiskManagementSettings
        """
        return self._tenant_risk_settings

    @tenant_risk_settings.setter
    def tenant_risk_settings(self, tenant_risk_settings):
        """Sets the tenant_risk_settings of this ApiKeyDetails.


        :param tenant_risk_settings: The tenant_risk_settings of this ApiKeyDetails.  # noqa: E501
        :type tenant_risk_settings: RiskManagementSettings
        """

        self._tenant_risk_settings = tenant_risk_settings

    @property
    def can_read(self):
        """Gets the can_read of this ApiKeyDetails.  # noqa: E501

        Set to true if the API key is able to read data from the exchange (order-book, trades, etc.)  # noqa: E501

        :return: The can_read of this ApiKeyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this ApiKeyDetails.

        Set to true if the API key is able to read data from the exchange (order-book, trades, etc.)  # noqa: E501

        :param can_read: The can_read of this ApiKeyDetails.  # noqa: E501
        :type can_read: bool
        """
        if self.local_vars_configuration.client_side_validation and can_read is None:  # noqa: E501
            raise ValueError("Invalid value for `can_read`, must not be `None`")  # noqa: E501

        self._can_read = can_read

    @property
    def can_trade(self):
        """Gets the can_trade of this ApiKeyDetails.  # noqa: E501

        Set to true, if the API key should be able to trade.  # noqa: E501

        :return: The can_trade of this ApiKeyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_trade

    @can_trade.setter
    def can_trade(self, can_trade):
        """Sets the can_trade of this ApiKeyDetails.

        Set to true, if the API key should be able to trade.  # noqa: E501

        :param can_trade: The can_trade of this ApiKeyDetails.  # noqa: E501
        :type can_trade: bool
        """
        if self.local_vars_configuration.client_side_validation and can_trade is None:  # noqa: E501
            raise ValueError("Invalid value for `can_trade`, must not be `None`")  # noqa: E501

        self._can_trade = can_trade

    @property
    def can_signal(self):
        """Gets the can_signal of this ApiKeyDetails.  # noqa: E501

        Set to true, if the API key should be allowed to submit signals  # noqa: E501

        :return: The can_signal of this ApiKeyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._can_signal

    @can_signal.setter
    def can_signal(self, can_signal):
        """Sets the can_signal of this ApiKeyDetails.

        Set to true, if the API key should be allowed to submit signals  # noqa: E501

        :param can_signal: The can_signal of this ApiKeyDetails.  # noqa: E501
        :type can_signal: bool
        """
        if self.local_vars_configuration.client_side_validation and can_signal is None:  # noqa: E501
            raise ValueError("Invalid value for `can_signal`, must not be `None`")  # noqa: E501

        self._can_signal = can_signal

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiKeyDetails):
            return True

        return self.to_dict() != other.to_dict()
