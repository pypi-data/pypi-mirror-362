# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoint The PowerBot service is available at the following REST endpoint:  ``` $api_url_placeholder ```  Access to the API is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)  # noqa: E501

    The version of the OpenAPI document: 2.24.1
    Contact: office@powerbot-trading.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powerbot_asyncio_client.api_client import ApiClient
from powerbot_asyncio_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuctionTradeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_auction_trades(self, exchange, **kwargs):  # noqa: E501
        """Find trades  # noqa: E501

        Return a list of auction trades for the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_auction_trades(exchange, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param auction_ids:
        :type auction_ids: list[str]
        :param delivery_areas:
        :type delivery_areas: list[str]
        :param portfolio_ids:
        :type portfolio_ids: list[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionTrade]
        """
        kwargs['_return_http_data_only'] = True
        return self.find_auction_trades_with_http_info(exchange, **kwargs)  # noqa: E501

    def find_auction_trades_with_http_info(self, exchange, **kwargs):  # noqa: E501
        """Find trades  # noqa: E501

        Return a list of auction trades for the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_auction_trades_with_http_info(exchange, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param auction_ids:
        :type auction_ids: list[str]
        :param delivery_areas:
        :type delivery_areas: list[str]
        :param portfolio_ids:
        :type portfolio_ids: list[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionTrade], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'auction_ids',
            'delivery_areas',
            'portfolio_ids',
            'delivery_from',
            'delivery_to',
            'state',
            'processed_from',
            'processed_to'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_auction_trades" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `find_auction_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501

        query_params = []
        if local_var_params.get('auction_ids') is not None:  # noqa: E501
            query_params.append(('auction_ids', local_var_params['auction_ids']))  # noqa: E501
            collection_formats['auction_ids'] = 'csv'  # noqa: E501
        if local_var_params.get('delivery_areas') is not None:  # noqa: E501
            query_params.append(('delivery_areas', local_var_params['delivery_areas']))  # noqa: E501
            collection_formats['delivery_areas'] = 'csv'  # noqa: E501
        if local_var_params.get('portfolio_ids') is not None:  # noqa: E501
            query_params.append(('portfolio_ids', local_var_params['portfolio_ids']))  # noqa: E501
            collection_formats['portfolio_ids'] = 'multi'  # noqa: E501
        if local_var_params.get('delivery_from') is not None:  # noqa: E501
            query_params.append(('delivery_from', local_var_params['delivery_from']))  # noqa: E501
        if local_var_params.get('delivery_to') is not None:  # noqa: E501
            query_params.append(('delivery_to', local_var_params['delivery_to']))  # noqa: E501
        if local_var_params.get('state') is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if local_var_params.get('processed_from') is not None:  # noqa: E501
            query_params.append(('processed_from', local_var_params['processed_from']))  # noqa: E501
        if local_var_params.get('processed_to') is not None:  # noqa: E501
            query_params.append(('processed_to', local_var_params['processed_to']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionTrade]",
            404: None,
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def find_auction_trades_deprecated(self, exchange, exchange_id, **kwargs):  # noqa: E501
        """Find trades  # noqa: E501

        Return a list of auction trades for the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_auction_trades_deprecated(exchange, exchange_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_ids:
        :type auction_ids: list[str]
        :param delivery_areas:
        :type delivery_areas: list[str]
        :param portfolio_ids:
        :type portfolio_ids: list[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionTrade]
        """
        kwargs['_return_http_data_only'] = True
        return self.find_auction_trades_deprecated_with_http_info(exchange, exchange_id, **kwargs)  # noqa: E501

    def find_auction_trades_deprecated_with_http_info(self, exchange, exchange_id, **kwargs):  # noqa: E501
        """Find trades  # noqa: E501

        Return a list of auction trades for the search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.find_auction_trades_deprecated_with_http_info(exchange, exchange_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_ids:
        :type auction_ids: list[str]
        :param delivery_areas:
        :type delivery_areas: list[str]
        :param portfolio_ids:
        :type portfolio_ids: list[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionTrade], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'exchange_id',
            'auction_ids',
            'delivery_areas',
            'portfolio_ids',
            'delivery_from',
            'delivery_to',
            'state',
            'processed_from',
            'processed_to'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_auction_trades_deprecated" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `find_auction_trades_deprecated`")  # noqa: E501
        # verify the required parameter 'exchange_id' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange_id` when calling `find_auction_trades_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'exchange_id' in local_var_params:
            path_params['exchange_id'] = local_var_params['exchange_id']  # noqa: E501

        query_params = []
        if local_var_params.get('auction_ids') is not None:  # noqa: E501
            query_params.append(('auction_ids', local_var_params['auction_ids']))  # noqa: E501
            collection_formats['auction_ids'] = 'csv'  # noqa: E501
        if local_var_params.get('delivery_areas') is not None:  # noqa: E501
            query_params.append(('delivery_areas', local_var_params['delivery_areas']))  # noqa: E501
            collection_formats['delivery_areas'] = 'csv'  # noqa: E501
        if local_var_params.get('portfolio_ids') is not None:  # noqa: E501
            query_params.append(('portfolio_ids', local_var_params['portfolio_ids']))  # noqa: E501
            collection_formats['portfolio_ids'] = 'multi'  # noqa: E501
        if local_var_params.get('delivery_from') is not None:  # noqa: E501
            query_params.append(('delivery_from', local_var_params['delivery_from']))  # noqa: E501
        if local_var_params.get('delivery_to') is not None:  # noqa: E501
            query_params.append(('delivery_to', local_var_params['delivery_to']))  # noqa: E501
        if local_var_params.get('state') is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if local_var_params.get('processed_from') is not None:  # noqa: E501
            query_params.append(('processed_from', local_var_params['processed_from']))  # noqa: E501
        if local_var_params.get('processed_to') is not None:  # noqa: E501
            query_params.append(('processed_to', local_var_params['processed_to']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionTrade]",
            404: None,
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/{exchange_id}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auction_positions(self, exchange, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs):  # noqa: E501
        """Get auction positions  # noqa: E501

        Returns the traded and potential positions (min and max positions based on outstanding orders) for a given delivery period. The positions are calculated based trades and orders for a single exchange, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_positions(exchange, delivery_area, portfolio_id, delivery_from, delivery_to, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param delivery_area: (required)
        :type delivery_area: str
        :param portfolio_id: (required)
        :type portfolio_id: str
        :param delivery_from: (required)
        :type delivery_from: datetime
        :param delivery_to: (required)
        :type delivery_to: datetime
        :param position_durations: An optional parameter that refers to the time period in minutes for which the auction positions will be calculated. For example, requesting the positions for a hour and providing 15 as the position duration will return 4 objects, one for each quarter of an hour. Similarly, 30 minutes would yield 2 objects, one for each half of an hour. This affects the position calculations, so please refer to the field descriptions for more details. Multiple durations can be provided, as long as they are a multiple of 15 minutes.
        :type position_durations: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionPositions]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auction_positions_with_http_info(exchange, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs)  # noqa: E501

    def get_auction_positions_with_http_info(self, exchange, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs):  # noqa: E501
        """Get auction positions  # noqa: E501

        Returns the traded and potential positions (min and max positions based on outstanding orders) for a given delivery period. The positions are calculated based trades and orders for a single exchange, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_positions_with_http_info(exchange, delivery_area, portfolio_id, delivery_from, delivery_to, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param delivery_area: (required)
        :type delivery_area: str
        :param portfolio_id: (required)
        :type portfolio_id: str
        :param delivery_from: (required)
        :type delivery_from: datetime
        :param delivery_to: (required)
        :type delivery_to: datetime
        :param position_durations: An optional parameter that refers to the time period in minutes for which the auction positions will be calculated. For example, requesting the positions for a hour and providing 15 as the position duration will return 4 objects, one for each quarter of an hour. Similarly, 30 minutes would yield 2 objects, one for each half of an hour. This affects the position calculations, so please refer to the field descriptions for more details. Multiple durations can be provided, as long as they are a multiple of 15 minutes.
        :type position_durations: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionPositions], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'delivery_area',
            'portfolio_id',
            'delivery_from',
            'delivery_to',
            'position_durations'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auction_positions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `get_auction_positions`")  # noqa: E501
        # verify the required parameter 'delivery_area' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_area') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_area` when calling `get_auction_positions`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and local_var_params.get('portfolio_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `portfolio_id` when calling `get_auction_positions`")  # noqa: E501
        # verify the required parameter 'delivery_from' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_from') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_from` when calling `get_auction_positions`")  # noqa: E501
        # verify the required parameter 'delivery_to' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_to') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_to` when calling `get_auction_positions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'delivery_area' in local_var_params:
            path_params['delivery_area'] = local_var_params['delivery_area']  # noqa: E501
        if 'portfolio_id' in local_var_params:
            path_params['portfolio_id'] = local_var_params['portfolio_id']  # noqa: E501

        query_params = []
        if local_var_params.get('delivery_from') is not None:  # noqa: E501
            query_params.append(('delivery_from', local_var_params['delivery_from']))  # noqa: E501
        if local_var_params.get('delivery_to') is not None:  # noqa: E501
            query_params.append(('delivery_to', local_var_params['delivery_to']))  # noqa: E501
        if local_var_params.get('position_durations') is not None:  # noqa: E501
            query_params.append(('position_durations', local_var_params['position_durations']))  # noqa: E501
            collection_formats['position_durations'] = 'multi'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionPositions]",
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/{delivery_area}/{portfolio_id}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auction_positions_deprecated(self, exchange, exchange_id, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs):  # noqa: E501
        """Get auction positions  # noqa: E501

        Returns the traded and potential positions (min and max positions based on outstanding orders) for a given delivery period. The positions are calculated based trades and orders for a single exchange, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_positions_deprecated(exchange, exchange_id, delivery_area, portfolio_id, delivery_from, delivery_to, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param delivery_area: (required)
        :type delivery_area: str
        :param portfolio_id: (required)
        :type portfolio_id: str
        :param delivery_from: (required)
        :type delivery_from: datetime
        :param delivery_to: (required)
        :type delivery_to: datetime
        :param position_durations: An optional parameter that refers to the time period in minutes for which the auction positions will be calculated. For example, requesting the positions for a hour and providing 15 as the position duration will return 4 objects, one for each quarter of an hour. Similarly, 30 minutes would yield 2 objects, one for each half of an hour. This affects the position calculations, so please refer to the field descriptions for more details. Multiple durations can be provided, as long as they are a multiple of 15 minutes.
        :type position_durations: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionPositions]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auction_positions_deprecated_with_http_info(exchange, exchange_id, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs)  # noqa: E501

    def get_auction_positions_deprecated_with_http_info(self, exchange, exchange_id, delivery_area, portfolio_id, delivery_from, delivery_to, **kwargs):  # noqa: E501
        """Get auction positions  # noqa: E501

        Returns the traded and potential positions (min and max positions based on outstanding orders) for a given delivery period. The positions are calculated based trades and orders for a single exchange, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_positions_deprecated_with_http_info(exchange, exchange_id, delivery_area, portfolio_id, delivery_from, delivery_to, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param delivery_area: (required)
        :type delivery_area: str
        :param portfolio_id: (required)
        :type portfolio_id: str
        :param delivery_from: (required)
        :type delivery_from: datetime
        :param delivery_to: (required)
        :type delivery_to: datetime
        :param position_durations: An optional parameter that refers to the time period in minutes for which the auction positions will be calculated. For example, requesting the positions for a hour and providing 15 as the position duration will return 4 objects, one for each quarter of an hour. Similarly, 30 minutes would yield 2 objects, one for each half of an hour. This affects the position calculations, so please refer to the field descriptions for more details. Multiple durations can be provided, as long as they are a multiple of 15 minutes.
        :type position_durations: list[int]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionPositions], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'exchange_id',
            'delivery_area',
            'portfolio_id',
            'delivery_from',
            'delivery_to',
            'position_durations'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auction_positions_deprecated" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `get_auction_positions_deprecated`")  # noqa: E501
        # verify the required parameter 'exchange_id' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange_id` when calling `get_auction_positions_deprecated`")  # noqa: E501
        # verify the required parameter 'delivery_area' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_area') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_area` when calling `get_auction_positions_deprecated`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and local_var_params.get('portfolio_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `portfolio_id` when calling `get_auction_positions_deprecated`")  # noqa: E501
        # verify the required parameter 'delivery_from' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_from') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_from` when calling `get_auction_positions_deprecated`")  # noqa: E501
        # verify the required parameter 'delivery_to' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_to') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_to` when calling `get_auction_positions_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'exchange_id' in local_var_params:
            path_params['exchange_id'] = local_var_params['exchange_id']  # noqa: E501
        if 'delivery_area' in local_var_params:
            path_params['delivery_area'] = local_var_params['delivery_area']  # noqa: E501
        if 'portfolio_id' in local_var_params:
            path_params['portfolio_id'] = local_var_params['portfolio_id']  # noqa: E501

        query_params = []
        if local_var_params.get('delivery_from') is not None:  # noqa: E501
            query_params.append(('delivery_from', local_var_params['delivery_from']))  # noqa: E501
        if local_var_params.get('delivery_to') is not None:  # noqa: E501
            query_params.append(('delivery_to', local_var_params['delivery_to']))  # noqa: E501
        if local_var_params.get('position_durations') is not None:  # noqa: E501
            query_params.append(('position_durations', local_var_params['position_durations']))  # noqa: E501
            collection_formats['position_durations'] = 'multi'  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionPositions]",
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/{exchange_id}/{delivery_area}/{portfolio_id}/positions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auction_trades(self, exchange, auction_id, delivery_area, portfolio_id, **kwargs):  # noqa: E501
        """Get trades for auction  # noqa: E501

        Return a list of trades for the given auction, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_trades(exchange, auction_id, delivery_area, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param include_aggregated: include aggregated trades in the response
        :type include_aggregated: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionTrade]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auction_trades_with_http_info(exchange, auction_id, delivery_area, portfolio_id, **kwargs)  # noqa: E501

    def get_auction_trades_with_http_info(self, exchange, auction_id, delivery_area, portfolio_id, **kwargs):  # noqa: E501
        """Get trades for auction  # noqa: E501

        Return a list of trades for the given auction, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_trades_with_http_info(exchange, auction_id, delivery_area, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param include_aggregated: include aggregated trades in the response
        :type include_aggregated: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionTrade], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'auction_id',
            'delivery_area',
            'portfolio_id',
            'include_aggregated'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auction_trades" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `get_auction_trades`")  # noqa: E501
        # verify the required parameter 'auction_id' is set
        if self.api_client.client_side_validation and local_var_params.get('auction_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `auction_id` when calling `get_auction_trades`")  # noqa: E501
        # verify the required parameter 'delivery_area' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_area') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_area` when calling `get_auction_trades`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and local_var_params.get('portfolio_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `portfolio_id` when calling `get_auction_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'auction_id' in local_var_params:
            path_params['auction_id'] = local_var_params['auction_id']  # noqa: E501
        if 'delivery_area' in local_var_params:
            path_params['delivery_area'] = local_var_params['delivery_area']  # noqa: E501
        if 'portfolio_id' in local_var_params:
            path_params['portfolio_id'] = local_var_params['portfolio_id']  # noqa: E501

        query_params = []
        if local_var_params.get('include_aggregated') is not None:  # noqa: E501
            query_params.append(('include_aggregated', local_var_params['include_aggregated']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionTrade]",
            404: None,
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/{auction_id}/{delivery_area}/{portfolio_id}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_auction_trades_deprecated(self, exchange, exchange_id, auction_id, delivery_area, portfolio_id, **kwargs):  # noqa: E501
        """Get trades for auction  # noqa: E501

        Return a list of trades for the given auction, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_trades_deprecated(exchange, exchange_id, auction_id, delivery_area, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param include_aggregated: include aggregated trades in the response
        :type include_aggregated: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[AuctionTrade]
        """
        kwargs['_return_http_data_only'] = True
        return self.get_auction_trades_deprecated_with_http_info(exchange, exchange_id, auction_id, delivery_area, portfolio_id, **kwargs)  # noqa: E501

    def get_auction_trades_deprecated_with_http_info(self, exchange, exchange_id, auction_id, delivery_area, portfolio_id, **kwargs):  # noqa: E501
        """Get trades for auction  # noqa: E501

        Return a list of trades for the given auction, delivery area and portfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_auction_trades_deprecated_with_http_info(exchange, exchange_id, auction_id, delivery_area, portfolio_id, async_req=True)
        >>> result = thread.get()

        :param exchange: (required)
        :type exchange: Exchange
        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param include_aggregated: include aggregated trades in the response
        :type include_aggregated: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[AuctionTrade], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'exchange',
            'exchange_id',
            'auction_id',
            'delivery_area',
            'portfolio_id',
            'include_aggregated'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auction_trades_deprecated" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'exchange' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange` when calling `get_auction_trades_deprecated`")  # noqa: E501
        # verify the required parameter 'exchange_id' is set
        if self.api_client.client_side_validation and local_var_params.get('exchange_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `exchange_id` when calling `get_auction_trades_deprecated`")  # noqa: E501
        # verify the required parameter 'auction_id' is set
        if self.api_client.client_side_validation and local_var_params.get('auction_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `auction_id` when calling `get_auction_trades_deprecated`")  # noqa: E501
        # verify the required parameter 'delivery_area' is set
        if self.api_client.client_side_validation and local_var_params.get('delivery_area') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `delivery_area` when calling `get_auction_trades_deprecated`")  # noqa: E501
        # verify the required parameter 'portfolio_id' is set
        if self.api_client.client_side_validation and local_var_params.get('portfolio_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `portfolio_id` when calling `get_auction_trades_deprecated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exchange' in local_var_params:
            path_params['exchange'] = local_var_params['exchange']  # noqa: E501
        if 'exchange_id' in local_var_params:
            path_params['exchange_id'] = local_var_params['exchange_id']  # noqa: E501
        if 'auction_id' in local_var_params:
            path_params['auction_id'] = local_var_params['auction_id']  # noqa: E501
        if 'delivery_area' in local_var_params:
            path_params['delivery_area'] = local_var_params['delivery_area']  # noqa: E501
        if 'portfolio_id' in local_var_params:
            path_params['portfolio_id'] = local_var_params['portfolio_id']  # noqa: E501

        query_params = []
        if local_var_params.get('include_aggregated') is not None:  # noqa: E501
            query_params.append(('include_aggregated', local_var_params['include_aggregated']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        response_types_map = {
            200: "list[AuctionTrade]",
            404: None,
        }

        return self.api_client.call_api(
            '/{exchange}/v2/api/auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}/trades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
