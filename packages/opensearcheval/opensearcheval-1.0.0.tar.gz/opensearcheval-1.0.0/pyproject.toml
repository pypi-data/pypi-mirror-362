[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "opensearcheval"
version = "1.0.0"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
description = "A comprehensive search evaluation platform with agent architecture and MLX integration"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
    "Topic :: Database :: Database Engines/Servers",
    "Typing :: Typed",
]
keywords = [
    "search",
    "evaluation",
    "a/b testing",
    "mlx",
    "llm",
    "machine learning",
    "information retrieval",
    "search quality",
    "metrics",
    "analytics",
    "experiment",
    "ranking",
    "click-through rate",
    "precision",
    "recall",
    "ndcg",
    "mrr",
    "agent architecture",
    "fastapi",
    "dashboard",
    "visualization",
]
dependencies = [
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.23.2",
    "httpx>=0.24.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "mlx>=0.0.5",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "sqlalchemy>=2.0.0",
    "pyspark>=3.4.0",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "plotly>=5.14.0",
    "dash>=2.11.0",
    "dash-bootstrap-components>=1.4.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "redis>=4.5.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "openai>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.2.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "jupyter>=1.0.0",
    "notebook>=6.5.0",
]
gpu = [
    "torch[cuda]>=2.0.0",
    "tensorflow-gpu>=2.13.0",
    "cupy-cuda12x>=12.0.0",
]
all = [
    "torch[cuda]>=2.0.0",
    "tensorflow-gpu>=2.13.0",
    "cupy-cuda12x>=12.0.0",
]

[project.scripts]
opensearcheval = "opensearcheval.cli:main"
ose = "opensearcheval.cli:main"
opensearcheval-api = "opensearcheval.api.main:main"
opensearcheval-ui = "opensearcheval.ui.app:main"

[project.urls]
Homepage = "https://github.com/llamasearchai/OpenSearchEval"
Documentation = "https://opensearcheval.readthedocs.io/"
Repository = "https://github.com/llamasearchai/OpenSearchEval"
"Bug Tracker" = "https://github.com/llamasearchai/OpenSearchEval/issues"
Changelog = "https://github.com/llamasearchai/OpenSearchEval/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["opensearcheval*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
opensearcheval = ["ui/static/**/*", "ui/templates/**/*", "*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["opensearcheval"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "pandas", "numpy", "mlx"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "mlx.*",
    "transformers.*",
    "torch.*",
    "sklearn.*",
    "seaborn.*",
    "matplotlib.*",
    "plotly.*",
    "dash.*",
    "pyspark.*",
    "redis.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--color=yes",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "gpu: marks tests that require GPU",
    "mlx: marks tests that require MLX",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# coverage configuration
[tool.coverage.run]
source = ["opensearcheval"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/setup.py",
    "*/__main__.py",
]

[tool.coverage.report]
show_missing = true
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]

# flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml)
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
]

# commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
version_files = [
    "opensearcheval/__init__.py:__version__",
    "pyproject.toml:version"
]
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

# pycln configuration
[tool.pycln]
paths = ["opensearcheval"]
exclude = ["tests/"]
all = true 