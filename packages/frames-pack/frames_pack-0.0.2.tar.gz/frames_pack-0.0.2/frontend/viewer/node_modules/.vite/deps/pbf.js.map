{
  "version": 3,
  "sources": ["../../pbf/index.js"],
  "sourcesContent": ["\nconst SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// Threshold chosen based on both benchmarking and knowledge about browser string\n// data structures (which currently switch structure types at 12 bytes or more)\nconst TEXT_DECODER_MIN_LENGTH = 12;\nconst utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8');\n\nconst PBF_VARINT  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum\nconst PBF_FIXED64 = 1; // 64-bit: double, fixed64, sfixed64\nconst PBF_BYTES   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields\nconst PBF_FIXED32 = 5; // 32-bit: float, fixed32, sfixed32\n\nexport default class Pbf {\n    /**\n     * @param {Uint8Array | ArrayBuffer} [buf]\n     */\n    constructor(buf = new Uint8Array(16)) {\n        this.buf = ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf);\n        this.dataView = new DataView(this.buf.buffer);\n        this.pos = 0;\n        this.type = 0;\n        this.length = this.buf.length;\n    }\n\n    // === READING =================================================================\n\n    /**\n     * @template T\n     * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n     * @param {T} result\n     * @param {number} [end]\n     */\n    readFields(readField, result, end = this.length) {\n        while (this.pos < end) {\n            const val = this.readVarint(),\n                tag = val >> 3,\n                startPos = this.pos;\n\n            this.type = val & 0x7;\n            readField(tag, result, this);\n\n            if (this.pos === startPos) this.skip(val);\n        }\n        return result;\n    }\n\n    /**\n     * @template T\n     * @param {(tag: number, result: T, pbf: Pbf) => void} readField\n     * @param {T} result\n     */\n    readMessage(readField, result) {\n        return this.readFields(readField, result, this.readVarint() + this.pos);\n    }\n\n    readFixed32() {\n        const val = this.dataView.getUint32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    readSFixed32() {\n        const val = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)\n\n    readFixed64() {\n        const val = this.dataView.getUint32(this.pos, true) + this.dataView.getUint32(this.pos + 4, true) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    }\n\n    readSFixed64() {\n        const val = this.dataView.getUint32(this.pos, true) + this.dataView.getInt32(this.pos + 4, true) * SHIFT_LEFT_32;\n        this.pos += 8;\n        return val;\n    }\n\n    readFloat() {\n        const val = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return val;\n    }\n\n    readDouble() {\n        const val = this.dataView.getFloat64(this.pos, true);\n        this.pos += 8;\n        return val;\n    }\n\n    /**\n     * @param {boolean} [isSigned]\n     */\n    readVarint(isSigned) {\n        const buf = this.buf;\n        let val, b;\n\n        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;\n        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;\n        b = buf[this.pos];   val |= (b & 0x0f) << 28;\n\n        return readVarintRemainder(val, isSigned, this);\n    }\n\n    readVarint64() { // for compatibility with v2.0.1\n        return this.readVarint(true);\n    }\n\n    readSVarint() {\n        const num = this.readVarint();\n        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding\n    }\n\n    readBoolean() {\n        return Boolean(this.readVarint());\n    }\n\n    readString() {\n        const end = this.readVarint() + this.pos;\n        const pos = this.pos;\n        this.pos = end;\n\n        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {\n            // longer strings are fast with the built-in browser TextDecoder API\n            return utf8TextDecoder.decode(this.buf.subarray(pos, end));\n        }\n        // short strings are fast with our custom implementation\n        return readUtf8(this.buf, pos, end);\n    }\n\n    readBytes() {\n        const end = this.readVarint() + this.pos,\n            buffer = this.buf.subarray(this.pos, end);\n        this.pos = end;\n        return buffer;\n    }\n\n    // verbose for performance reasons; doesn't affect gzipped size\n\n    /**\n     * @param {number[]} [arr]\n     * @param {boolean} [isSigned]\n     */\n    readPackedVarint(arr = [], isSigned) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSVarint(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSVarint());\n        return arr;\n    }\n    /** @param {boolean[]} [arr] */\n    readPackedBoolean(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readBoolean());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFloat(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFloat());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedDouble(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readDouble());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFixed32(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFixed32());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSFixed32(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSFixed32());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedFixed64(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readFixed64());\n        return arr;\n    }\n    /** @param {number[]} [arr] */\n    readPackedSFixed64(arr = []) {\n        const end = this.readPackedEnd();\n        while (this.pos < end) arr.push(this.readSFixed64());\n        return arr;\n    }\n    readPackedEnd() {\n        return this.type === PBF_BYTES ? this.readVarint() + this.pos : this.pos + 1;\n    }\n\n    /** @param {number} val */\n    skip(val) {\n        const type = val & 0x7;\n        if (type === PBF_VARINT) while (this.buf[this.pos++] > 0x7f) {}\n        else if (type === PBF_BYTES) this.pos = this.readVarint() + this.pos;\n        else if (type === PBF_FIXED32) this.pos += 4;\n        else if (type === PBF_FIXED64) this.pos += 8;\n        else throw new Error(`Unimplemented type: ${type}`);\n    }\n\n    // === WRITING =================================================================\n\n    /**\n     * @param {number} tag\n     * @param {number} type\n     */\n    writeTag(tag, type) {\n        this.writeVarint((tag << 3) | type);\n    }\n\n    /** @param {number} min */\n    realloc(min) {\n        let length = this.length || 16;\n\n        while (length < this.pos + min) length *= 2;\n\n        if (length !== this.length) {\n            const buf = new Uint8Array(length);\n            buf.set(this.buf);\n            this.buf = buf;\n            this.dataView = new DataView(buf.buffer);\n            this.length = length;\n        }\n    }\n\n    finish() {\n        this.length = this.pos;\n        this.pos = 0;\n        return this.buf.subarray(0, this.length);\n    }\n\n    /** @param {number} val */\n    writeFixed32(val) {\n        this.realloc(4);\n        this.dataView.setInt32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeSFixed32(val) {\n        this.realloc(4);\n        this.dataView.setInt32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeFixed64(val) {\n        this.realloc(8);\n        this.dataView.setInt32(this.pos, val & -1, true);\n        this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n        this.pos += 8;\n    }\n\n    /** @param {number} val */\n    writeSFixed64(val) {\n        this.realloc(8);\n        this.dataView.setInt32(this.pos, val & -1, true);\n        this.dataView.setInt32(this.pos + 4, Math.floor(val * SHIFT_RIGHT_32), true);\n        this.pos += 8;\n    }\n\n    /** @param {number} val */\n    writeVarint(val) {\n        val = +val || 0;\n\n        if (val > 0xfffffff || val < 0) {\n            writeBigVarint(val, this);\n            return;\n        }\n\n        this.realloc(4);\n\n        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;\n        this.buf[this.pos++] =   (val >>> 7) & 0x7f;\n    }\n\n    /** @param {number} val */\n    writeSVarint(val) {\n        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);\n    }\n\n    /** @param {boolean} val */\n    writeBoolean(val) {\n        this.writeVarint(+val);\n    }\n\n    /** @param {string} str */\n    writeString(str) {\n        str = String(str);\n        this.realloc(str.length * 4);\n\n        this.pos++; // reserve 1 byte for short string length\n\n        const startPos = this.pos;\n        // write the string directly to the buffer and see how much was written\n        this.pos = writeUtf8(this.buf, str, this.pos);\n        const len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    }\n\n    /** @param {number} val */\n    writeFloat(val) {\n        this.realloc(4);\n        this.dataView.setFloat32(this.pos, val, true);\n        this.pos += 4;\n    }\n\n    /** @param {number} val */\n    writeDouble(val) {\n        this.realloc(8);\n        this.dataView.setFloat64(this.pos, val, true);\n        this.pos += 8;\n    }\n\n    /** @param {Uint8Array} buffer */\n    writeBytes(buffer) {\n        const len = buffer.length;\n        this.writeVarint(len);\n        this.realloc(len);\n        for (let i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];\n    }\n\n    /**\n     * @template T\n     * @param {(obj: T, pbf: Pbf) => void} fn\n     * @param {T} obj\n     */\n    writeRawMessage(fn, obj) {\n        this.pos++; // reserve 1 byte for short message length\n\n        // write the message directly to the buffer and see how much was written\n        const startPos = this.pos;\n        fn(obj, this);\n        const len = this.pos - startPos;\n\n        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);\n\n        // finally, write the message length in the reserved place and restore the position\n        this.pos = startPos - 1;\n        this.writeVarint(len);\n        this.pos += len;\n    }\n\n    /**\n     * @template T\n     * @param {number} tag\n     * @param {(obj: T, pbf: Pbf) => void} fn\n     * @param {T} obj\n     */\n    writeMessage(tag, fn, obj) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeRawMessage(fn, obj);\n    }\n\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedVarint(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedVarint, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSVarint(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {boolean[]} arr\n     */\n    writePackedBoolean(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFloat(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFloat, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedDouble(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedDouble, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFixed32(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSFixed32(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedFixed64(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);\n    }\n    /**\n     * @param {number} tag\n     * @param {number[]} arr\n     */\n    writePackedSFixed64(tag, arr) {\n        if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr);\n    }\n\n    /**\n     * @param {number} tag\n     * @param {Uint8Array} buffer\n     */\n    writeBytesField(tag, buffer) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeBytes(buffer);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFixed32Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeFixed32(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSFixed32Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeSFixed32(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFixed64Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeFixed64(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSFixed64Field(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeSFixed64(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeVarintField(tag, val) {\n        this.writeTag(tag, PBF_VARINT);\n        this.writeVarint(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeSVarintField(tag, val) {\n        this.writeTag(tag, PBF_VARINT);\n        this.writeSVarint(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {string} str\n     */\n    writeStringField(tag, str) {\n        this.writeTag(tag, PBF_BYTES);\n        this.writeString(str);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeFloatField(tag, val) {\n        this.writeTag(tag, PBF_FIXED32);\n        this.writeFloat(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {number} val\n     */\n    writeDoubleField(tag, val) {\n        this.writeTag(tag, PBF_FIXED64);\n        this.writeDouble(val);\n    }\n    /**\n     * @param {number} tag\n     * @param {boolean} val\n     */\n    writeBooleanField(tag, val) {\n        this.writeVarintField(tag, +val);\n    }\n};\n\n/**\n * @param {number} l\n * @param {boolean | undefined} s\n * @param {Pbf} p\n */\nfunction readVarintRemainder(l, s, p) {\n    const buf = p.buf;\n    let h, b;\n\n    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);\n    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);\n\n    throw new Error('Expected varint not more than 10 bytes');\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {boolean} [isSigned]\n */\nfunction toNum(low, high, isSigned) {\n    return isSigned ? high * 0x100000000 + (low >>> 0) : ((high >>> 0) * 0x100000000) + (low >>> 0);\n}\n\n/**\n * @param {number} val\n * @param {Pbf} pbf\n */\nfunction writeBigVarint(val, pbf) {\n    let low, high;\n\n    if (val >= 0) {\n        low  = (val % 0x100000000) | 0;\n        high = (val / 0x100000000) | 0;\n    } else {\n        low  = ~(-val % 0x100000000);\n        high = ~(-val / 0x100000000);\n\n        if (low ^ 0xffffffff) {\n            low = (low + 1) | 0;\n        } else {\n            low = 0;\n            high = (high + 1) | 0;\n        }\n    }\n\n    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {\n        throw new Error('Given varint doesn\\'t fit into 10 bytes');\n    }\n\n    pbf.realloc(10);\n\n    writeBigVarintLow(low, high, pbf);\n    writeBigVarintHigh(high, pbf);\n}\n\n/**\n * @param {number} high\n * @param {number} low\n * @param {Pbf} pbf\n */\nfunction writeBigVarintLow(low, high, pbf) {\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;\n    pbf.buf[pbf.pos]   = low & 0x7f;\n}\n\n/**\n * @param {number} high\n * @param {Pbf} pbf\n */\nfunction writeBigVarintHigh(high, pbf) {\n    const lsb = (high & 0x07) << 4;\n\n    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;\n    pbf.buf[pbf.pos++]  = high & 0x7f;\n}\n\n/**\n * @param {number} startPos\n * @param {number} len\n * @param {Pbf} pbf\n */\nfunction makeRoomForExtraLength(startPos, len, pbf) {\n    const extraLen =\n        len <= 0x3fff ? 1 :\n        len <= 0x1fffff ? 2 :\n        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));\n\n    // if 1 byte isn't enough for encoding message length, shift the data to the right\n    pbf.realloc(extraLen);\n    for (let i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];\n}\n\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedVarint(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSVarint(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFloat(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedDouble(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);\n}\n/**\n * @param {boolean[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedBoolean(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed32(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed32(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedFixed64(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);\n}\n/**\n * @param {number[]} arr\n * @param {Pbf} pbf\n */\nfunction writePackedSFixed64(arr, pbf) {\n    for (let i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]);\n}\n\n// Buffer code below from https://github.com/feross/buffer, MIT-licensed\n\n/**\n * @param {Uint8Array} buf\n * @param {number} pos\n * @param {number} end\n */\nfunction readUtf8(buf, pos, end) {\n    let str = '';\n    let i = pos;\n\n    while (i < end) {\n        const b0 = buf[i];\n        let c = null; // codepoint\n        let bytesPerSequence =\n            b0 > 0xEF ? 4 :\n            b0 > 0xDF ? 3 :\n            b0 > 0xBF ? 2 : 1;\n\n        if (i + bytesPerSequence > end) break;\n\n        let b1, b2, b3;\n\n        if (bytesPerSequence === 1) {\n            if (b0 < 0x80) {\n                c = b0;\n            }\n        } else if (bytesPerSequence === 2) {\n            b1 = buf[i + 1];\n            if ((b1 & 0xC0) === 0x80) {\n                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);\n                if (c <= 0x7F) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 3) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);\n                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {\n                    c = null;\n                }\n            }\n        } else if (bytesPerSequence === 4) {\n            b1 = buf[i + 1];\n            b2 = buf[i + 2];\n            b3 = buf[i + 3];\n            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);\n                if (c <= 0xFFFF || c >= 0x110000) {\n                    c = null;\n                }\n            }\n        }\n\n        if (c === null) {\n            c = 0xFFFD;\n            bytesPerSequence = 1;\n\n        } else if (c > 0xFFFF) {\n            c -= 0x10000;\n            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);\n            c = 0xDC00 | c & 0x3FF;\n        }\n\n        str += String.fromCharCode(c);\n        i += bytesPerSequence;\n    }\n\n    return str;\n}\n\n/**\n * @param {Uint8Array} buf\n * @param {string} str\n * @param {number} pos\n */\nfunction writeUtf8(buf, str, pos) {\n    for (let i = 0, c, lead; i < str.length; i++) {\n        c = str.charCodeAt(i); // code point\n\n        if (c > 0xD7FF && c < 0xE000) {\n            if (lead) {\n                if (c < 0xDC00) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                    lead = c;\n                    continue;\n                } else {\n                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;\n                    lead = null;\n                }\n            } else {\n                if (c > 0xDBFF || (i + 1 === str.length)) {\n                    buf[pos++] = 0xEF;\n                    buf[pos++] = 0xBF;\n                    buf[pos++] = 0xBD;\n                } else {\n                    lead = c;\n                }\n                continue;\n            }\n        } else if (lead) {\n            buf[pos++] = 0xEF;\n            buf[pos++] = 0xBF;\n            buf[pos++] = 0xBD;\n            lead = null;\n        }\n\n        if (c < 0x80) {\n            buf[pos++] = c;\n        } else {\n            if (c < 0x800) {\n                buf[pos++] = c >> 0x6 | 0xC0;\n            } else {\n                if (c < 0x10000) {\n                    buf[pos++] = c >> 0xC | 0xE0;\n                } else {\n                    buf[pos++] = c >> 0x12 | 0xF0;\n                    buf[pos++] = c >> 0xC & 0x3F | 0x80;\n                }\n                buf[pos++] = c >> 0x6 & 0x3F | 0x80;\n            }\n            buf[pos++] = c & 0x3F | 0x80;\n        }\n    }\n    return pos;\n}\n"],
  "mappings": "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",
  "names": []
}
