# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import bc_stark_sdk.main_mod.stark
import builtins
import typing
from enum import Enum

class BandPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float

class BandStopFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    d3: builtins.float
    d4: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float
    w3: builtins.float
    w4: builtins.float
    r: builtins.float
    s: builtins.float

class HighPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float

class LowPassFilter:
    a: builtins.float
    d1: builtins.float
    d2: builtins.float
    w0: builtins.float
    w1: builtins.float
    w2: builtins.float

class MessageParser:
    def __new__(cls, device_id:builtins.str, msg_type:MsgType) -> MessageParser: ...
    def receive_data(self, device_id:builtins.str, data:typing.Sequence[builtins.int]) -> None: ...
    def start_message_stream(self) -> typing.Any: ...

class MessageStream:
    def __aiter__(self) -> MessageStream: ...
    def __anext__(self) -> typing.Any: ...

class PyEduDevice:
    def __new__(cls, port_name:builtins.str, baudrate:builtins.int) -> PyEduDevice: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def get_dongle_info(self) -> typing.Any: ...
    def get_dongle_pair_stat(self) -> typing.Any: ...
    def get_dongle_pair_cfg(self) -> typing.Any: ...
    def get_device_info(self) -> typing.Any: ...
    def get_port_stat(self) -> typing.Any: ...
    def get_sensor_cfg(self) -> typing.Any: ...
    def start_sensor_data_stream(self) -> typing.Any: ...
    def stop_sensor_data_stream(self) -> typing.Any: ...
    def set_flex_config(self, fs:SamplingRate) -> typing.Any: ...
    def set_afe_config(self, afe_sr:AfeSampleRate, channel_bits:builtins.int) -> typing.Any: ...
    def set_imu_config(self, imu_sr:ImuSampleRate) -> typing.Any: ...

class PySerialStream:
    def __new__(cls, port_name:builtins.str, baudrate:builtins.int) -> PySerialStream: ...
    def start_data_stream(self, py_parser:MessageParser) -> typing.Any: ...
    def write_data(self, data:typing.Sequence[builtins.int]) -> typing.Any: ...

class AfeSampleRate(Enum):
    AFE_SR_INVALID = ...
    AFE_SR_OFF = ...
    AFE_SR_125 = ...
    AFE_SR_250 = ...
    AFE_SR_500 = ...
    AFE_SR_1000 = ...
    AFE_SR_2000 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> AfeSampleRate: ...

class AggOperations(Enum):
    Mean = ...
    Median = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> AggOperations: ...

class CtrlBoxPort(Enum):
    PORT_NONE = ...
    PORT_A = ...
    PORT_B = ...
    PORT_C = ...
    PORT_D = ...
    PORT_E = ...
    PORT_F = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> CtrlBoxPort: ...

class DownsamplingOperations(Enum):
    Mean = ...
    Median = ...
    Max = ...
    Min = ...
    Sum = ...
    First = ...
    Last = ...
    Extremes = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> DownsamplingOperations: ...

class ImuMode(Enum):
    NOT_SET = ...
    ACC = ...
    GYRO = ...
    ACC_GYRO = ...
    EULER = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ImuMode: ...

class ImuSampleRate(Enum):
    IMU_SR_UNUSED = ...
    IMU_SR_OFF = ...
    IMU_SR_25 = ...
    IMU_SR_50 = ...
    IMU_SR_100 = ...
    IMU_SR_400 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> ImuSampleRate: ...

class MagSampleRate(Enum):
    MAG_SR_UNUSED = ...
    MAG_SR_OFF = ...
    MAG_SR_10 = ...
    MAG_SR_20 = ...
    MAG_SR_50 = ...
    MAG_SR_100 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> MagSampleRate: ...

class NoiseTypes(Enum):
    FIFTY = ...
    SIXTY = ...
    FIFTY_AND_SIXTY = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> NoiseTypes: ...

class SamplingRate(Enum):
    SAMPLING_RATE_NONE = ...
    SAMPLING_RATE_OFF = ...
    SAMPLING_RATE_25 = ...
    SAMPLING_RATE_50 = ...
    SAMPLING_RATE_100 = ...
    SAMPLING_RATE_200 = ...

    int_value: builtins.int

    def __new__(cls, value:builtins.int) -> SamplingRate: ...

def set_eeg_data_callback(func:typing.Any) -> None: ...

def set_imp_data_callback(func:typing.Any) -> None: ...

def set_imu_data_callback(func:typing.Any) -> None: ...

def set_msg_resp_callback(func:typing.Any) -> None: ...

