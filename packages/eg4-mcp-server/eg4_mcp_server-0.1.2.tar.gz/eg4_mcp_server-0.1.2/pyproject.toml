[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "eg4-mcp-server"
version = "0.1.2"
description = "Model Context Protocol server for EG4 solar inverter monitoring and control"
readme = "README.md"
license = {file = "LICENSE.md"}
authors = [
    {name = "Matt Dreyer", email = "matt_dreyer@hotmail.com"}  # Replace with your actual email
]
maintainers = [
    {name = "Matt Dreyer", email = "matt_dreyer@hotmail.com"}  # Replace with your actual email
]
keywords = [
    "mcp", 
    "solar", 
    "eg4", 
    "inverter", 
    "monitoring", 
    "energy",
    "battery",
    "renewable",
    "photovoltaic",
    "home-automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
    "Environment :: Console",
    "Natural Language :: English"
]
requires-python = ">=3.10"
dependencies = [
    "aiohttp>=3.8.5",
    "python-dotenv>=1.0.0", 
    "mcp[cli]>=1.11.0",
    "httpx>=0.28.1",
    "eg4-python"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0"
]
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.0.0", 
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0"
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0"
]

[project.urls]
Homepage = "https://github.com/matt-dreyer/EG4_MCP_server"
Repository = "https://github.com/matt-dreyer/EG4_MCP_server"
Documentation = "https://github.com/matt-dreyer/EG4_MCP_server#readme"
Issues = "https://github.com/matt-dreyer/EG4_MCP_server/issues"
Discussions = "https://github.com/matt-dreyer/EG4_MCP_server/discussions"
Changelog = "https://github.com/matt-dreyer/EG4_MCP_server/blob/main/CHANGELOG.md"

[project.scripts]
eg4-mcp-server = "eg4_mcp_server:main"

# Entry points for MCP server discovery
[project.entry-points."mcp.servers"]
eg4 = "eg4_mcp_server.server:mcp"

# Hatch build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/eg4_mcp_server"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE", 
    "/CHANGELOG.md",
    "/pyproject.toml"
]

# Development environment
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "ruff",
    "mypy"
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=eg4_mcp_server {args:tests}"
cov-report = [
    "pytest --cov=eg4_mcp_server --cov-report=term-missing {args:tests}",
    "pytest --cov=eg4_mcp_server --cov-report=html {args:tests}"
]
lint = [
    "ruff check {args:.}",
    "black --check --diff {args:.}",
    "mypy {args:src/eg4_mcp_server}"
]
format = [
    "black {args:.}",
    "ruff check --fix {args:.}"
]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings"
]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"

# Coverage configuration  
[tool.coverage.run]
source = ["eg4_mcp_server"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@.*abstractmethod"
]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py310"
line-length = 100
extend-exclude = [
    ".eggs",
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".tox", 
    ".venv",
    "build",
    "dist"
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG001", "ARG002"]  # Allow unused arguments in tests

# MyPy type checking
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "eg4_python.*",
    "mcp.*"
]
ignore_missing_imports = true