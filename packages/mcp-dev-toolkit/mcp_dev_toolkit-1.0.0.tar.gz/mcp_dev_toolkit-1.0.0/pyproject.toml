[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-dev-toolkit"
version = "1.0.0"
description = "A comprehensive development toolkit for building Model Context Protocol (MCP) tools and servers"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    {name = "MCP Development Community", email = "mcp-dev-toolkit@proton.me"},
]
keywords = [
    "mcp",
    "model-context-protocol",
    "ai-tools",
    "development-toolkit",
    "sdk",
    "server-tools"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

# Core dependencies - minimal required for basic functionality
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/mcp-toolkit/mcp-dev-toolkit"
Documentation = "https://github.com/mcp-toolkit/mcp-dev-toolkit#readme"
Repository = "https://github.com/mcp-toolkit/mcp-dev-toolkit"
Issues = "https://github.com/mcp-toolkit/mcp-dev-toolkit/issues"
Changelog = "https://github.com/mcp-toolkit/mcp-dev-toolkit/releases"

[project.optional-dependencies]
# Full feature set with all integrations
full = [
    "aiohttp>=3.8.0",
    "jinja2>=3.0.0",
    "pyyaml>=6.0",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
]

# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

[project.scripts]
mcp-toolkit = "mcp_dev_toolkit.cli:main"

[tool.hatch.version]
path = "mcp_dev_toolkit/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/mcp_dev_toolkit",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["mcp_dev_toolkit"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_dev_toolkit"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["mcp_dev_toolkit"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "aiohttp.*",
    "jinja2.*",
    "yaml.*",
]
ignore_missing_imports = true
