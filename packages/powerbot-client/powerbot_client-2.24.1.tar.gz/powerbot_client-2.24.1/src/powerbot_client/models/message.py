# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoint The PowerBot service is available at the following REST endpoint:  ``` $api_url_placeholder ```  Access to the API is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)  # noqa: E501

    The version of the OpenAPI document: 2.24.1
    Contact: office@powerbot-trading.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from powerbot_client.configuration import Configuration


class Message(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message_id': 'str',
        'api_timestamp': 'datetime',
        'category': 'str',
        'message_class': 'str',
        'content_type': 'str',
        'correlation_id': 'str',
        'direction': 'str',
        'group_id': 'str',
        'group_sequence': 'str',
        'content': 'object'
    }

    attribute_map = {
        'message_id': 'message_id',
        'api_timestamp': 'api_timestamp',
        'category': 'category',
        'message_class': 'message_class',
        'content_type': 'content_type',
        'correlation_id': 'correlation_id',
        'direction': 'direction',
        'group_id': 'group_id',
        'group_sequence': 'group_sequence',
        'content': 'content'
    }

    def __init__(self, message_id=None, api_timestamp=None, category=None, message_class=None, content_type=None, correlation_id=None, direction=None, group_id=None, group_sequence=None, content=None, local_vars_configuration=None):  # noqa: E501
        """Message - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._message_id = None
        self._api_timestamp = None
        self._category = None
        self._message_class = None
        self._content_type = None
        self._correlation_id = None
        self._direction = None
        self._group_id = None
        self._group_sequence = None
        self._content = None
        self.discriminator = None

        if message_id is not None:
            self.message_id = message_id
        if api_timestamp is not None:
            self.api_timestamp = api_timestamp
        if category is not None:
            self.category = category
        if message_class is not None:
            self.message_class = message_class
        if content_type is not None:
            self.content_type = content_type
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if direction is not None:
            self.direction = direction
        if group_id is not None:
            self.group_id = group_id
        if group_sequence is not None:
            self.group_sequence = group_sequence
        if content is not None:
            self.content = content

    @property
    def message_id(self):
        """Gets the message_id of this Message.  # noqa: E501


        :return: The message_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Message.


        :param message_id: The message_id of this Message.  # noqa: E501
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def api_timestamp(self):
        """Gets the api_timestamp of this Message.  # noqa: E501


        :return: The api_timestamp of this Message.  # noqa: E501
        :rtype: datetime
        """
        return self._api_timestamp

    @api_timestamp.setter
    def api_timestamp(self, api_timestamp):
        """Sets the api_timestamp of this Message.


        :param api_timestamp: The api_timestamp of this Message.  # noqa: E501
        :type api_timestamp: datetime
        """

        self._api_timestamp = api_timestamp

    @property
    def category(self):
        """Gets the category of this Message.  # noqa: E501


        :return: The category of this Message.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Message.


        :param category: The category of this Message.  # noqa: E501
        :type category: str
        """
        allowed_values = ["INQUIRY_REQUEST", "MANAGEMENT_REQUEST", "RESPONSE", "BROADCAST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def message_class(self):
        """Gets the message_class of this Message.  # noqa: E501


        :return: The message_class of this Message.  # noqa: E501
        :rtype: str
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this Message.


        :param message_class: The message_class of this Message.  # noqa: E501
        :type message_class: str
        """

        self._message_class = message_class

    @property
    def content_type(self):
        """Gets the content_type of this Message.  # noqa: E501


        :return: The content_type of this Message.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Message.


        :param content_type: The content_type of this Message.  # noqa: E501
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def correlation_id(self):
        """Gets the correlation_id of this Message.  # noqa: E501


        :return: The correlation_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this Message.


        :param correlation_id: The correlation_id of this Message.  # noqa: E501
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def direction(self):
        """Gets the direction of this Message.  # noqa: E501


        :return: The direction of this Message.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Message.


        :param direction: The direction of this Message.  # noqa: E501
        :type direction: str
        """
        allowed_values = ["IN", "OUT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and direction not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def group_id(self):
        """Gets the group_id of this Message.  # noqa: E501


        :return: The group_id of this Message.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Message.


        :param group_id: The group_id of this Message.  # noqa: E501
        :type group_id: str
        """

        self._group_id = group_id

    @property
    def group_sequence(self):
        """Gets the group_sequence of this Message.  # noqa: E501


        :return: The group_sequence of this Message.  # noqa: E501
        :rtype: str
        """
        return self._group_sequence

    @group_sequence.setter
    def group_sequence(self, group_sequence):
        """Sets the group_sequence of this Message.


        :param group_sequence: The group_sequence of this Message.  # noqa: E501
        :type group_sequence: str
        """

        self._group_sequence = group_sequence

    @property
    def content(self):
        """Gets the content of this Message.  # noqa: E501


        :return: The content of this Message.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Message.


        :param content: The content of this Message.  # noqa: E501
        :type content: object
        """

        self._content = content

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Message):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Message):
            return True

        return self.to_dict() != other.to_dict()
