# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoint The PowerBot service is available at the following REST endpoint:  ``` $api_url_placeholder ```  Access to the API is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)  # noqa: E501

    The version of the OpenAPI document: 2.24.1
    Contact: office@powerbot-trading.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from powerbot_client.configuration import Configuration


class PositionLimit(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exchange': 'Exchange',
        'delivery_area': 'str',
        'min_netpos_limit': 'float',
        'max_netpos_limit': 'float',
        'abspos_limit': 'float',
        'min_net_pos_exposure_limit': 'float',
        'max_net_pos_exposure_limit': 'float'
    }

    attribute_map = {
        'exchange': 'exchange',
        'delivery_area': 'delivery_area',
        'min_netpos_limit': 'min_netpos_limit',
        'max_netpos_limit': 'max_netpos_limit',
        'abspos_limit': 'abspos_limit',
        'min_net_pos_exposure_limit': 'min_net_pos_exposure_limit',
        'max_net_pos_exposure_limit': 'max_net_pos_exposure_limit'
    }

    def __init__(self, exchange=None, delivery_area=None, min_netpos_limit=None, max_netpos_limit=None, abspos_limit=None, min_net_pos_exposure_limit=None, max_net_pos_exposure_limit=None, local_vars_configuration=None):  # noqa: E501
        """PositionLimit - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._exchange = None
        self._delivery_area = None
        self._min_netpos_limit = None
        self._max_netpos_limit = None
        self._abspos_limit = None
        self._min_net_pos_exposure_limit = None
        self._max_net_pos_exposure_limit = None
        self.discriminator = None

        self.exchange = exchange
        self.delivery_area = delivery_area
        if min_netpos_limit is not None:
            self.min_netpos_limit = min_netpos_limit
        if max_netpos_limit is not None:
            self.max_netpos_limit = max_netpos_limit
        if abspos_limit is not None:
            self.abspos_limit = abspos_limit
        if min_net_pos_exposure_limit is not None:
            self.min_net_pos_exposure_limit = min_net_pos_exposure_limit
        if max_net_pos_exposure_limit is not None:
            self.max_net_pos_exposure_limit = max_net_pos_exposure_limit

    @property
    def exchange(self):
        """Gets the exchange of this PositionLimit.  # noqa: E501


        :return: The exchange of this PositionLimit.  # noqa: E501
        :rtype: Exchange
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this PositionLimit.


        :param exchange: The exchange of this PositionLimit.  # noqa: E501
        :type exchange: Exchange
        """
        if self.local_vars_configuration.client_side_validation and exchange is None:  # noqa: E501
            raise ValueError("Invalid value for `exchange`, must not be `None`")  # noqa: E501

        self._exchange = exchange

    @property
    def delivery_area(self):
        """Gets the delivery_area of this PositionLimit.  # noqa: E501

        The Energy Identification Code (EIC).  # noqa: E501

        :return: The delivery_area of this PositionLimit.  # noqa: E501
        :rtype: str
        """
        return self._delivery_area

    @delivery_area.setter
    def delivery_area(self, delivery_area):
        """Sets the delivery_area of this PositionLimit.

        The Energy Identification Code (EIC).  # noqa: E501

        :param delivery_area: The delivery_area of this PositionLimit.  # noqa: E501
        :type delivery_area: str
        """
        if self.local_vars_configuration.client_side_validation and delivery_area is None:  # noqa: E501
            raise ValueError("Invalid value for `delivery_area`, must not be `None`")  # noqa: E501

        self._delivery_area = delivery_area

    @property
    def min_netpos_limit(self):
        """Gets the min_netpos_limit of this PositionLimit.  # noqa: E501

        The minimum net position limit defines how much the currently traded net position (in MW) can go below zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be less than or equal to zero.  # noqa: E501

        :return: The min_netpos_limit of this PositionLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_netpos_limit

    @min_netpos_limit.setter
    def min_netpos_limit(self, min_netpos_limit):
        """Sets the min_netpos_limit of this PositionLimit.

        The minimum net position limit defines how much the currently traded net position (in MW) can go below zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be less than or equal to zero.  # noqa: E501

        :param min_netpos_limit: The min_netpos_limit of this PositionLimit.  # noqa: E501
        :type min_netpos_limit: float
        """
        if (self.local_vars_configuration.client_side_validation and
                min_netpos_limit is not None and min_netpos_limit > 0):  # noqa: E501
            raise ValueError("Invalid value for `min_netpos_limit`, must be a value less than or equal to `0`")  # noqa: E501

        self._min_netpos_limit = min_netpos_limit

    @property
    def max_netpos_limit(self):
        """Gets the max_netpos_limit of this PositionLimit.  # noqa: E501

        The maximum net position limit defines how much the currently traded net position (in MW) can go above zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be greater than or equal to zero.  # noqa: E501

        :return: The max_netpos_limit of this PositionLimit.  # noqa: E501
        :rtype: float
        """
        return self._max_netpos_limit

    @max_netpos_limit.setter
    def max_netpos_limit(self, max_netpos_limit):
        """Sets the max_netpos_limit of this PositionLimit.

        The maximum net position limit defines how much the currently traded net position (in MW) can go above zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be greater than or equal to zero.  # noqa: E501

        :param max_netpos_limit: The max_netpos_limit of this PositionLimit.  # noqa: E501
        :type max_netpos_limit: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_netpos_limit is not None and max_netpos_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_netpos_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_netpos_limit = max_netpos_limit

    @property
    def abspos_limit(self):
        """Gets the abspos_limit of this PositionLimit.  # noqa: E501

        The absolute position defines the total quantity (in MW) that can possibly be traded. Calculated per timeframe of a particular contract (XBID and LOCAL Contract).  # noqa: E501

        :return: The abspos_limit of this PositionLimit.  # noqa: E501
        :rtype: float
        """
        return self._abspos_limit

    @abspos_limit.setter
    def abspos_limit(self, abspos_limit):
        """Sets the abspos_limit of this PositionLimit.

        The absolute position defines the total quantity (in MW) that can possibly be traded. Calculated per timeframe of a particular contract (XBID and LOCAL Contract).  # noqa: E501

        :param abspos_limit: The abspos_limit of this PositionLimit.  # noqa: E501
        :type abspos_limit: float
        """
        if (self.local_vars_configuration.client_side_validation and
                abspos_limit is not None and abspos_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `abspos_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._abspos_limit = abspos_limit

    @property
    def min_net_pos_exposure_limit(self):
        """Gets the min_net_pos_exposure_limit of this PositionLimit.  # noqa: E501

        Defines how much the minimum net position exposure (in MW) can go below zero. It's always zero or lower. See field min_net_pos_exposure for more details.  # noqa: E501

        :return: The min_net_pos_exposure_limit of this PositionLimit.  # noqa: E501
        :rtype: float
        """
        return self._min_net_pos_exposure_limit

    @min_net_pos_exposure_limit.setter
    def min_net_pos_exposure_limit(self, min_net_pos_exposure_limit):
        """Sets the min_net_pos_exposure_limit of this PositionLimit.

        Defines how much the minimum net position exposure (in MW) can go below zero. It's always zero or lower. See field min_net_pos_exposure for more details.  # noqa: E501

        :param min_net_pos_exposure_limit: The min_net_pos_exposure_limit of this PositionLimit.  # noqa: E501
        :type min_net_pos_exposure_limit: float
        """
        if (self.local_vars_configuration.client_side_validation and
                min_net_pos_exposure_limit is not None and min_net_pos_exposure_limit > 0):  # noqa: E501
            raise ValueError("Invalid value for `min_net_pos_exposure_limit`, must be a value less than or equal to `0`")  # noqa: E501

        self._min_net_pos_exposure_limit = min_net_pos_exposure_limit

    @property
    def max_net_pos_exposure_limit(self):
        """Gets the max_net_pos_exposure_limit of this PositionLimit.  # noqa: E501

        Defines how much the maximum net position exposure (in MW) can exceed zero. It's always zero or higher. See field max_net_pos_exposure for more details.  # noqa: E501

        :return: The max_net_pos_exposure_limit of this PositionLimit.  # noqa: E501
        :rtype: float
        """
        return self._max_net_pos_exposure_limit

    @max_net_pos_exposure_limit.setter
    def max_net_pos_exposure_limit(self, max_net_pos_exposure_limit):
        """Sets the max_net_pos_exposure_limit of this PositionLimit.

        Defines how much the maximum net position exposure (in MW) can exceed zero. It's always zero or higher. See field max_net_pos_exposure for more details.  # noqa: E501

        :param max_net_pos_exposure_limit: The max_net_pos_exposure_limit of this PositionLimit.  # noqa: E501
        :type max_net_pos_exposure_limit: float
        """
        if (self.local_vars_configuration.client_side_validation and
                max_net_pos_exposure_limit is not None and max_net_pos_exposure_limit < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_net_pos_exposure_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_net_pos_exposure_limit = max_net_pos_exposure_limit

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionLimit):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionLimit):
            return True

        return self.to_dict() != other.to_dict()
