# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoint The PowerBot service is available at the following REST endpoint:  ``` $api_url_placeholder ```  Access to the API is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)  # noqa: E501

    The version of the OpenAPI document: 2.24.1
    Contact: office@powerbot-trading.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from powerbot_client.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_timestamp': 'datetime',
        'cl_ordr_id': 'str',
        'txt': 'str',
        'net_cash_position': 'float',
        'currency': 'str',
        'auction_currency': 'str',
        'report_elements': 'list[ReportElement]'
    }

    attribute_map = {
        'api_timestamp': 'api_timestamp',
        'cl_ordr_id': 'clOrdrId',
        'txt': 'txt',
        'net_cash_position': 'net_cash_position',
        'currency': 'currency',
        'auction_currency': 'auction_currency',
        'report_elements': 'reportElements'
    }

    def __init__(self, api_timestamp=None, cl_ordr_id=None, txt=None, net_cash_position=None, currency=None, auction_currency=None, report_elements=None, local_vars_configuration=None):  # noqa: E501
        """Report - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._api_timestamp = None
        self._cl_ordr_id = None
        self._txt = None
        self._net_cash_position = None
        self._currency = None
        self._auction_currency = None
        self._report_elements = None
        self.discriminator = None

        if api_timestamp is not None:
            self.api_timestamp = api_timestamp
        if cl_ordr_id is not None:
            self.cl_ordr_id = cl_ordr_id
        if txt is not None:
            self.txt = txt
        if net_cash_position is not None:
            self.net_cash_position = net_cash_position
        if currency is not None:
            self.currency = currency
        if auction_currency is not None:
            self.auction_currency = auction_currency
        if report_elements is not None:
            self.report_elements = report_elements

    @property
    def api_timestamp(self):
        """Gets the api_timestamp of this Report.  # noqa: E501


        :return: The api_timestamp of this Report.  # noqa: E501
        :rtype: datetime
        """
        return self._api_timestamp

    @api_timestamp.setter
    def api_timestamp(self, api_timestamp):
        """Sets the api_timestamp of this Report.


        :param api_timestamp: The api_timestamp of this Report.  # noqa: E501
        :type api_timestamp: datetime
        """

        self._api_timestamp = api_timestamp

    @property
    def cl_ordr_id(self):
        """Gets the cl_ordr_id of this Report.  # noqa: E501


        :return: The cl_ordr_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._cl_ordr_id

    @cl_ordr_id.setter
    def cl_ordr_id(self, cl_ordr_id):
        """Sets the cl_ordr_id of this Report.


        :param cl_ordr_id: The cl_ordr_id of this Report.  # noqa: E501
        :type cl_ordr_id: str
        """

        self._cl_ordr_id = cl_ordr_id

    @property
    def txt(self):
        """Gets the txt of this Report.  # noqa: E501


        :return: The txt of this Report.  # noqa: E501
        :rtype: str
        """
        return self._txt

    @txt.setter
    def txt(self, txt):
        """Sets the txt of this Report.


        :param txt: The txt of this Report.  # noqa: E501
        :type txt: str
        """

        self._txt = txt

    @property
    def net_cash_position(self):
        """Gets the net_cash_position of this Report.  # noqa: E501

        The net cash position resulting from all continuous trades without auction trading.  # noqa: E501

        :return: The net_cash_position of this Report.  # noqa: E501
        :rtype: float
        """
        return self._net_cash_position

    @net_cash_position.setter
    def net_cash_position(self, net_cash_position):
        """Sets the net_cash_position of this Report.

        The net cash position resulting from all continuous trades without auction trading.  # noqa: E501

        :param net_cash_position: The net_cash_position of this Report.  # noqa: E501
        :type net_cash_position: float
        """

        self._net_cash_position = net_cash_position

    @property
    def currency(self):
        """Gets the currency of this Report.  # noqa: E501

        The currency used for the net cash position of continuous trading.  # noqa: E501

        :return: The currency of this Report.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Report.

        The currency used for the net cash position of continuous trading.  # noqa: E501

        :param currency: The currency of this Report.  # noqa: E501
        :type currency: str
        """

        self._currency = currency

    @property
    def auction_currency(self):
        """Gets the auction_currency of this Report.  # noqa: E501

        The currency used for the auction net cash positions.  # noqa: E501

        :return: The auction_currency of this Report.  # noqa: E501
        :rtype: str
        """
        return self._auction_currency

    @auction_currency.setter
    def auction_currency(self, auction_currency):
        """Sets the auction_currency of this Report.

        The currency used for the auction net cash positions.  # noqa: E501

        :param auction_currency: The auction_currency of this Report.  # noqa: E501
        :type auction_currency: str
        """

        self._auction_currency = auction_currency

    @property
    def report_elements(self):
        """Gets the report_elements of this Report.  # noqa: E501


        :return: The report_elements of this Report.  # noqa: E501
        :rtype: list[ReportElement]
        """
        return self._report_elements

    @report_elements.setter
    def report_elements(self, report_elements):
        """Sets the report_elements of this Report.


        :param report_elements: The report_elements of this Report.  # noqa: E501
        :type report_elements: list[ReportElement]
        """

        self._report_elements = report_elements

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
