# =============================================================================
# Project Configuration
# =============================================================================

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "manify"
version = "0.2.1"
description = "Manifold-based machine learning"
authors = [
    { name = "Philippe Chlenski", email = "pac@cs.columbia.edu"},
    { name = "Kaizhu Du", email = "kd2814@columbia.edu"}
]
dependencies = [
    "torch",
    "geoopt>=0.5.1",
    "numpy",
    "tqdm",
    "cvxpy",
    "scikit-learn==1.5.1",
    "datasets"
]

[project.optional-dependencies]
dev = [
    "mypy",
    "jaxtyping",
    "beartype",
    "pytest",
    "pytest-cov",
    "pytest-env",
    "ruff",
    "pre-commit",
    "typing_extensions",
    "pygments",
]
docs = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mkdocs-autorefs",
  "mkdocs-gen-files",
  "griffe"
]

[tool.setuptools]
packages = ["manify"]

[tool.setuptools.package-data]
"manify" = ["../data/**/*"]

# =============================================================================
# CI/CD Tool Configuration
# =============================================================================

# Linting and formatting with Ruff
[tool.ruff]
line-length = 120
target-version = "py310"
exclude = ["manify/optimizers/_adan.py"]  # Use unmodified adan.py code from original repo

[tool.ruff.lint]
# Enable pycodestyle (E/W), Pyflakes (F), isort (I), pydocstyle (D), pylint (PL), and more
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "D",     # pydocstyle
    "PL",    # pylint
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "D107",   # Missing docstring in __init__ (pydocstyle equivalent)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "D100",   # Missing docstring in public module (too strict for __init__.py files)
    "D104",   # Missing docstring in public package
    "F722",   # Syntax error in forward annotation (jaxtyping compatibility)
    "F821",   # Undefined name (jaxtyping string literals)
    "UP037",  # Remove quotes from type annotation (breaks jaxtyping)
    "T201",   # Print found (some prints are intentional)
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]  # Disable docstring checks in tests
"**/conftest.py" = ["D"]
"**/__init__.py" = ["D104", "F401"]  # Allow unused imports in __init__.py

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Type checking with MyPy
[tool.mypy]
packages = ["manify"]
exclude = ["manify/optimizers/_adan.py"]  # Use unmodified adan.py code from original repo
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = false
follow_imports = "skip"
ignore_missing_imports = true
disable_error_code = ["name-defined"]  # Needed for jaxtyping compatibility - else vector annotations fail

# Unit testing with pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--jaxtyping-packages=beartype.beartype"
python_files = "test_*.py"
env = ["BEARTYPE_ENABLE=true"]

# Code coverage
[tool.coverage.run]
source = ["manify"]
branch = true
omit = ["manify/optimizers/_adan.py"]  # Exclude from coverage reporting

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if \"ipykernel\" in sys.modules:",
]

[tool.coverage.xml]
output = "coverage.xml"
