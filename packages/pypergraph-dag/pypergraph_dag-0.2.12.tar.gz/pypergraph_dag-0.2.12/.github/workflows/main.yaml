name: "dag-pypergraph"

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

env:
  PYTHON_DEFAULT_VERSION: "3.11"

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ needs.version-and-tag.outputs.new_version }}"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff pytest pytest-asyncio bandit hatch pytest-httpx
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install project in editable mode for testing
          pip install -e . || echo "Editable install failed, continuing with regular install"

      - name: Lint with Ruff
        run: |
          # Auto-fix what can be automatically fixed
          ruff check . --fix --exit-zero --exclude docs
          # Check for remaining issues
          ruff check . --output-format=github --exclude docs
          # Check formatting
          ruff format --check . --exclude docs

      - name: Security check with Bandit
        run: |
          bandit -r . -f json -o bandit-report.json --exclude "tests/,test_*.py" || true
          bandit -r . --exclude "tests/,test_*.py" --severity-level medium --exit-zero

      - name: Run tests
        run: pytest -q -m "not integration" --verbose

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-py${{ matrix.python-version }}
          path: bandit-report.json
          retention-days: 30

  version-and-tag:
    name: Version and tag
    runs-on: ubuntu-latest
    needs: [ test ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      new_version: ${{ steps.version.outputs.new_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}

      - name: Install dependencies
        run: pip install hatch

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Get version and tag
        id: version
        run: |
          # Get current version from project (via Hatch)
          CURRENT_VERSION=$(hatch version)
          echo "Current version: $CURRENT_VERSION"

          # Output version variables
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Check if tag already exists
          if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
            echo "Tag v$CURRENT_VERSION already exists. Skipping."
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
            # Create and push new tag
            git tag "v$CURRENT_VERSION"
            git push origin "v$CURRENT_VERSION"
          fi

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: [test, version-and-tag]
    #if: needs.version-and-tag.outputs.version_changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install hatch build
          # Debug: Check pyproject.toml structure
          echo "=== pyproject.toml content ==="
          cat pyproject.toml
          echo "=== Current version ==="
          hatch version || echo "hatch version failed"

      - name: Build package
        run: |
          # Try hatch build first, fallback to python -m build
          hatch build || python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: dist/
          retention-days: 7

  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [version-and-tag, build]
    #if: needs.version-and-tag.outputs.version_changed == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: ./dist

      - name: List dist contents
        run: |
          echo "=== Contents of dist directory ==="
          ls -la ./dist/ || echo "dist directory is empty or doesn't exist"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.version-and-tag.outputs.new_version }}"
          name: "Pypergraph v${{ needs.version-and-tag.outputs.new_version }}"
          draft: false
          prerelease: ${{ contains(needs.version-and-tag.outputs.new_version, 'b') || github.ref == 'refs/heads/dev' }}
          files: ./dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [version-and-tag, build]
    if: github.ref == 'refs/heads/master'
    environment:
      name: pypi
      url: https://pypi.org/p/pypergraph-dag
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: ./dist

      - name: List dist contents
        run: |
          echo "=== Contents of dist directory ==="
          ls -la ./dist/ || echo "dist directory is empty or doesn't exist"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [version-and-tag, build]
    if: github.ref == 'refs/heads/dev'
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/pypergraph-dag
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: ./dist

      - name: List dist contents
        run: |
          echo "=== Contents of dist directory ==="
          ls -la ./dist/ || echo "dist directory is empty or doesn't exist"

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true