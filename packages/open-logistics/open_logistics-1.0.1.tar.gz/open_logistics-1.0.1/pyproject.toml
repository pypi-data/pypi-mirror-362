[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "open-logistics"
version = "1.0.1"
description = "AI-Driven Air Defense Supply Chain Optimization Platform"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
keywords = [
    "logistics", "optimization", "ai", "machine-learning", 
    "supply-chain", "defense", "mlx", "sap-btp"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.2",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "numpy>=1.24.3",
    "pandas>=2.1.4",
    "scikit-learn>=1.3.2",
    "ortools>=9.8.3296",
    "networkx>=3.2.1",
    "asyncpg>=0.29.0",
    "aioredis>=2.0.1",
    "prometheus-client>=0.19.0",
    "cryptography>=41.0.8",
    "requests>=2.31.0",
    "httpx>=0.25.2",
    "websockets>=12.0",
    "arrow>=1.3.0",
    "pytz>=2023.3",
    "openai>=1.12.0",
    "PyJWT>=2.8.0",
]

[project.optional-dependencies]
mlx = [
    "mlx>=0.0.8; sys_platform == 'darwin'",
    "mlx-lm>=0.0.6; sys_platform == 'darwin'",
]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.6.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
    "psutil>=5.9.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocs-mermaid2-plugin>=1.1.1",
]
prod = [
    "gunicorn>=21.2.0",
    "sentry-sdk>=1.38.0",
]

[project.scripts]
openlogistics = "open_logistics.presentation.cli.main:app"

[project.urls]
Homepage = "https://github.com/openlogistics/open-logistics"
Documentation = "https://open-logistics.readthedocs.io/"
Repository = "https://github.com/openlogistics/open-logistics.git"
Issues = "https://github.com/openlogistics/open-logistics/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/open_logistics"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=open_logistics --cov-report=html --cov-report=term-missing {args:tests}"
lint = "flake8 src tests"
format = "black src tests && isort src tests"
type-check = "mypy src"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["open_logistics"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=open_logistics",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=84",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "security: Security tests",
    "benchmark: Performance benchmark tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
