[project]
name = "truelink"
dynamic = ["version"]
description = "Extract direct download links from various URL formats"
authors = [
    {name = "5hojib", email = "yesiamshojib@gmail.com"}
]
maintainers = [
    {name = "5hojib", email = "yesiamshojib@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["download", "link", "extractor", "direct-link", "url"]
dependencies = [
    "aiohttp>=3.8.0",
    "lxml>=4.9.0",
    "validators>=0.20.0",
    "httpx>=0.20.0", # Added httpx
    "cloudscraper>=1.2.71", # Added cloudscraper
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/5hojib/truelink"
Repository = "https://github.com/5hojib/truelink"
Documentation = "https://github.com/5hojib/truelink#readme"
Issues = "https://github.com/5hojib/truelink/issues"
Changelog = "https://github.com/5hojib/truelink/releases"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/truelink/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/truelink"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
addopts = "-v --strict-markers"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/truelink"]
omit = ["tests/*", "src/truelink/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.ruff]
fix = true
unsafe-fixes = true
line-length = 85
target-version = "py313"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pylint]
max-statements = 75
max-branches = 30
allow-magic-value-types = ["int", "str", "bytes"]

[tool.ruff.lint.mccabe]
max-complexity = 50

[tool.ruff.lint]
select = [
    "E",        # pycodestyle: error
    "F",        # pyflakes
    "I",        # isort
    "W",        # pycodestyle: warning
    "B",        # flake8-bugbear
    "G",        # flake8-logging-format
    "N",        # pep8-naming
    "C4",       # flake8-comprehensions
    "UP",       # pyupgrade
    "FA",       # flake8-future-annotations
    "PL",       # pylint
    "PIE",      # flake8-pie
    "PYI",      # flake8-pyi
    "RET",      # flake8-return
    "RUF",      # ruff
    "SIM",      # flake8-simplify
    "TCH",      # flake8-type-checking
    "TID",      # flake8-tidy-imports
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "C90",      # mccabe
    "COM",      # flake8-commas
    "FURB",     # refurb
    "PERF",     # perflint
    "ASYNC",    # flake8-async
]

ignore = [
    "E501",
    "N818",
    "B904",
    "COM812",
]
