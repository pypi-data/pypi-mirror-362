# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package to TestPyPi

on:
  release:
    types: [prereleased]
  workflow_dispatch:
    inputs:
      release:
        type: boolean
        description: Release tag version
        default: true

permissions:
  contents: read

jobs:
  retrieve_tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag_extraction.outputs.tag }}
      release_tag: ${{ steps.tag_extraction2.outputs.tag_r }}
    steps:
    - uses: actions/checkout@v4
    - name: Get tag
      if:  ${{ inputs.release == true }}
      shell: bash
      id: tag_extraction
      run: |
        git fetch --all --unshallow
        if tag=$(git describe --tags --abbrev=0 2>/dev/null);then
          echo "Found tag $tag"
          echo "tag=$tag" >> $GITHUB_OUTPUT
        else
          echo "No tag found, exiting"
          exit 1
        fi
    - name: Get release tag
      id: tag_extraction2
      if: ${{ github.event.release.tag_name != '' && inputs.release != true }}
      shell: bash
      run: |
        tag=${{ github.event.release.tag_name }}
        echo "Found tag $tag"
        echo "tag_r=$tag" >> $GITHUB_OUTPUT

  release-build:
    needs:
      - retrieve_tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.build.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{matrix.p-version}}
      - name: Build release distributions
        id: build
        shell: bash
        run: |
          TAG=${{needs.retrieve_tag.outputs.tag}}
          if [ ! $TAG ];then
            TAG=${{needs.retrieve_tag.outputs.release_tag}}
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          sed -i "s/__VERSION__/$TAG/g" pyproject.toml
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
  publish-to-testpypi:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: testpypi

      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:https://test.pypi.org/manage/projects/
      url: https://test.pypi.org/project/project_visualization_tool_GDeLuisi/${{needs.release-build.outputs.tag}}_${{matrix.p-version}}
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TESTPYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
