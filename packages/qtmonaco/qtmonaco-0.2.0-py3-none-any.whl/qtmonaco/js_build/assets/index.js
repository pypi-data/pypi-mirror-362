var I=Object.defineProperty;var T=(l,e,t)=>e in l?I(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var d=(l,e,t)=>T(l,typeof e!="symbol"?e+"":e,t);import{l as w,e as C,P as R,S as L}from"./monaco-core.js";import{l as x}from"./vendor.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))r(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function t(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function r(n){if(n.ep)return;n.ep=!0;const i=t(n);fetch(n.href,i)}})();class _{constructor(e="localhost:1234"){d(this,"currentConnection",null);d(this,"reconnectAttempts",0);d(this,"baseReconnectDelay",1e3);d(this,"maxReconnectDelay",1e4);d(this,"providersRegistered",!1);d(this,"pylspUrl","localhost:1234");d(this,"providerDisposables",[]);d(this,"reconnectTimeoutId",null);d(this,"isDestroyed",!1);d(this,"healthCheckInterval",null);d(this,"webSocket",null);this.pylspUrl=e,this.connect()}connect(){if(this.isDestroyed){console.log("LSP client has been destroyed, skipping connection attempt");return}this.webSocket=new WebSocket("ws://"+this.pylspUrl);const e=this.webSocket;e.onopen=()=>{console.log("WebSocket connected"),this.reconnectAttempts=0},e.onerror=t=>{console.error("WebSocket error:",t)},e.onclose=t=>{if(console.log("WebSocket disconnected:",t.code,t.reason),this.currentConnection=null,this.stopHealthCheck(),this.isDestroyed){console.log("LSP client has been destroyed, skipping reconnection");return}this.reconnectTimeoutId!==null&&(clearTimeout(this.reconnectTimeoutId),this.reconnectTimeoutId=null);const r=Math.min(this.baseReconnectDelay*Math.min(Math.pow(1.5,this.reconnectAttempts),10),this.maxReconnectDelay);this.reconnectAttempts++,console.log(`Attempting to reconnect in ${r}ms (attempt ${this.reconnectAttempts})`),this.reconnectTimeoutId=window.setTimeout(()=>{this.reconnectTimeoutId=null,this.connect()},r)},x({webSocket:e,onConnection:t=>{this.currentConnection=t,t.listen();const r={processId:null,rootUri:null,capabilities:{}};t.sendRequest("initialize",r).then(()=>{t.sendNotification("initialized",{}),console.log("LSP connection initialized successfully"),this.startHealthCheck()}).catch(n=>{console.error("Failed to initialize LSP:",n),this.currentConnection===t&&(this.currentConnection=null,t.dispose(),e.close())}),this.registerMonacoProviders()}})}registerMonacoProviders(){this.providersRegistered&&(console.log("Disposing existing Monaco providers before re-registering"),this.providerDisposables.forEach(n=>n.dispose()),this.providerDisposables=[],this.providersRegistered=!1);const e=w.registerCompletionItemProvider("python",{triggerCharacters:["."],provideCompletionItems:async(n,i)=>{const s=this.currentConnection;if(!this.isConnectionValid(s))return console.warn("No valid LSP connection available for completion"),{suggestions:[]};const g=s,a=n.uri.toString(),h=i.lineNumber-1,p=i.column-1;g.sendNotification("textDocument/didOpen",{textDocument:{uri:a,languageId:"python",version:1,text:n.getValue()}});try{const o=await g.sendRequest("textDocument/completion",{textDocument:{uri:a},position:{line:h,character:p},context:{triggerKind:1}});return{suggestions:(Array.isArray(o)?o:o.items).map(c=>({label:c.label,kind:w.CompletionItemKind.Function,insertText:c.insertText??c.label,documentation:c.documentation?typeof c.documentation=="string"?{value:c.documentation}:c.documentation:void 0,range:c.range}))}}catch(o){return console.error("LSP completion failed:",o),o instanceof Error&&(o.message.includes("disposed")||o.message.includes("closed"))&&(console.warn("Connection was disposed during completion request, forcing reconnection"),this.currentConnection=null,this.forceReconnect()),{suggestions:[]}}}}),t=w.registerSignatureHelpProvider("python",{signatureHelpTriggerCharacters:["(",",","="],provideSignatureHelp:async(n,i,s,g)=>{var P;const a=this.currentConnection;if(!this.isConnectionValid(a))return console.warn("No valid LSP connection available for signature help"),{value:{signatures:[],activeSignature:0,activeParameter:0},dispose:()=>{}};const h=a,p=n.uri.toString(),o=i.lineNumber-1,f=i.column-1;h.sendNotification("textDocument/didOpen",{textDocument:{uri:p,languageId:"python",version:1,text:n.getValue()}});try{const c=await h.sendRequest("textDocument/signatureHelp",{textDocument:{uri:p},position:{line:o,character:f},context:{triggerKind:g.triggerKind,triggerCharacter:g.triggerCharacter}});return!c||!((P=c.signatures)!=null&&P.length)?{value:{signatures:[],activeSignature:0,activeParameter:0},dispose:()=>{}}:{value:{signatures:c.signatures.map(v=>{var k;return{label:v.label,documentation:v.documentation?typeof v.documentation=="string"?{value:v.documentation}:v.documentation:void 0,parameters:((k=v.parameters)==null?void 0:k.map(m=>({label:typeof m.label=="string"?m.label:m.label[0]+"-"+m.label[1],documentation:m.documentation?typeof m.documentation=="string"?{value:m.documentation}:m.documentation:void 0})))||[]}}),activeSignature:c.activeSignature??0,activeParameter:c.activeParameter??0},dispose:()=>{}}}catch(c){return console.error("LSP signature help failed:",c),c instanceof Error&&(c.message.includes("disposed")||c.message.includes("closed"))&&(console.warn("Connection was disposed during signature help request, forcing reconnection"),this.currentConnection=null,this.forceReconnect()),{value:{signatures:[],activeSignature:0,activeParameter:0},dispose:()=>{}}}}}),r=w.registerHoverProvider("python",{provideHover:async(n,i)=>{const s=this.currentConnection;if(!this.isConnectionValid(s))return console.warn("No valid LSP connection available for hover"),null;const g=s,a=n.uri.toString(),h=i.lineNumber-1,p=i.column-1;g.sendNotification("textDocument/didOpen",{textDocument:{uri:a,languageId:"python",version:1,text:n.getValue()}});try{const o=await g.sendRequest("textDocument/hover",{textDocument:{uri:a},position:{line:h,character:p}});if(o!=null&&o.contents)return{contents:Array.isArray(o.contents)?o.contents.map(f=>({value:f.value||f})):[{value:o.contents.value||o.contents}],range:o.range}}catch(o){console.error("LSP hover failed:",o),o instanceof Error&&(o.message.includes("disposed")||o.message.includes("closed"))&&(console.warn("Connection was disposed during hover request, forcing reconnection"),this.currentConnection=null,this.forceReconnect())}return null}});this.providerDisposables.push(e,t,r),this.providersRegistered=!0,console.log("Monaco language providers registered successfully")}isConnectionValid(e){var t;if(!e)return!1;try{if(e._disposed||(t=e.isDisposed)!=null&&t.call(e))return console.warn("Detected disposed connection via disposal flags"),this.currentConnection===e&&(this.currentConnection=null,this.forceReconnect()),!1;const r=e.state||e._state;return r==="closed"||r==="disposed"||r===3?(console.warn("Detected closed connection via state check"),this.currentConnection===e&&(this.currentConnection=null,this.forceReconnect()),!1):!0}catch(r){return console.warn("Error checking connection validity, treating as invalid:",r),this.currentConnection===e&&(this.currentConnection=null,this.forceReconnect()),!1}}forceReconnect(){this.isDestroyed||(console.log("Forcing reconnection due to disposed connection"),this.reconnectTimeoutId!==null&&(clearTimeout(this.reconnectTimeoutId),this.reconnectTimeoutId=null),this.reconnectTimeoutId=window.setTimeout(()=>{this.reconnectTimeoutId=null,this.connect()},100))}startHealthCheck(){this.stopHealthCheck(),this.healthCheckInterval=window.setInterval(async()=>{var e;if(this.isDestroyed){this.stopHealthCheck();return}if(console.log("Status of the current connection: ",this.isConnected()?"Connected":"Disconnected"),this.currentConnection&&!this.isConnectionValid(this.currentConnection)){console.log("Health check detected invalid connection via basic checks");return}if(((e=this.webSocket)==null?void 0:e.readyState)!==WebSocket.OPEN){console.log("Health check detected invalid connection via WebSocket state"),this.forceReconnect();return}},5e3)}stopHealthCheck(){this.healthCheckInterval!==null&&(clearInterval(this.healthCheckInterval),this.healthCheckInterval=null)}isConnected(){return this.isConnectionValid(this.currentConnection)}getConnection(){return this.currentConnection}setLspUrl(e){if(this.isDestroyed){console.warn("Cannot change URL: LSP client has been destroyed");return}console.log(`Changing LSP URL from ${this.pylspUrl} to ${e}`),this.pylspUrl=e,this.reconnectTimeoutId!==null&&(clearTimeout(this.reconnectTimeoutId),this.reconnectTimeoutId=null),this.currentConnection&&(this.currentConnection.dispose(),this.currentConnection=null),this.reconnectAttempts=0,this.connect()}destroy(){this.isDestroyed=!0,this.stopHealthCheck(),this.reconnectTimeoutId!==null&&(clearTimeout(this.reconnectTimeoutId),this.reconnectTimeoutId=null),this.providerDisposables.forEach(e=>e.dispose()),this.providerDisposables=[],this.providersRegistered=!1,this.currentConnection&&(this.currentConnection.dispose(),this.currentConnection=null),console.log("LSP client destroyed")}}const D=document.getElementById("container");if(!D)throw new Error("Container element not found");const u=C.create(D,{value:"",language:"python",automaticLayout:!0,theme:"vs-dark"});let b=null,S=null;function N(){console.log("Editor initialized"),y("bridge_initialized",!0)}window.onload=function(){console.log("Window loaded, initializing QWebChannel"),new QWebChannel(window.qt.webChannelTransport,function(l){b=l.objects.connector,b?(b.javascript_data_sent.connect(H),console.log("Successfully connected to javascript_data signal")):console.warn("Bridge javascript_data_sent.connect not available"),u.onDidChangeModelContent(e=>{const t=u.getModel();if(t){const r=t.getValue();y("_current_text",r)}}),N()})};function y(l,e){b&&b._receive(l,JSON.stringify(e))}function H(l,e){const t=JSON.parse(e);switch(console.log(`Received update from Python: ${l} =`,t),l){case"set_text":const r=u.getModel();r&&r.setValue(t);break;case"read":const n=u.getValue();y("_current_text",n);break;case"minimap":u.updateOptions({minimap:{enabled:t===!0}});break;case"set_cursor":{const s=t;if(u.getModel()){const a=s.line||1,h=s.column||1,p=s.moveToPosition||"",o=new R(a,h),f=new L(a,h,a,h);u.setPosition(o),u.setSelection(f),typeof p=="string"&&p&&(p==="center"?u.revealPositionInCenter(o):p==="top"?u.revealPositionNearTop(o,C.ScrollType.Smooth):u.revealPosition(o)),y("_current_cursor",{line:a,column:h})}break}case"readonly":const i=t===!0;u.updateOptions({readOnly:i});break;case"language":{const s=u.getModel();s&&C.setModelLanguage(s,t);break}case"theme":try{C.setTheme(t),console.log(`Applied theme: ${t}`),y("_theme",t)}catch(s){console.warn(`Failed to apply theme "${t}":`,s),C.setTheme("vs-dark"),y("_theme","vs-dark")}break;case"lsp_url":if(S&&(S.destroy(),S=null),t&&typeof t=="string"){const s=t;console.log(`Setting up LSP client with URL: ${s}`),S=new _(s)}break}}
