# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtProjectDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'name': 'str',
        'description': 'str',
        'project_type': 'MtProjectType',
        'num_sessions': 'int',
        'num_active_sessions': 'int',
        'num_data_versions': 'int',
        'created_at': 'str',
        'created_by': 'str',
        'updated_at': 'str',
        'updated_by': 'str',
        'is_archived': 'bool'
    }

    attribute_map = {
        'project_id': 'project_id',
        'name': 'name',
        'description': 'description',
        'project_type': 'project_type',
        'num_sessions': 'num_sessions',
        'num_active_sessions': 'num_active_sessions',
        'num_data_versions': 'num_data_versions',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'is_archived': 'is_archived'
    }

    def __init__(self, project_id=None, name=None, description=None, project_type=None, num_sessions=None, num_active_sessions=0, num_data_versions=None, created_at=None, created_by=None, updated_at=None, updated_by=None, is_archived=None, local_vars_configuration=None):  # noqa: E501
        """MtProjectDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._name = None
        self._description = None
        self._project_type = None
        self._num_sessions = None
        self._num_active_sessions = None
        self._num_data_versions = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self._is_archived = None
        self.discriminator = None

        self.project_id = project_id
        self.name = name
        if description is not None:
            self.description = description
        self.project_type = project_type
        self.num_sessions = num_sessions
        if num_active_sessions is not None:
            self.num_active_sessions = num_active_sessions
        self.num_data_versions = num_data_versions
        self.created_at = created_at
        self.created_by = created_by
        self.updated_at = updated_at
        self.updated_by = updated_by
        self.is_archived = is_archived

    @property
    def project_id(self):
        """Gets the project_id of this MtProjectDetails.  # noqa: E501


        :return: The project_id of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MtProjectDetails.


        :param project_id: The project_id of this MtProjectDetails.  # noqa: E501
        :type project_id: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this MtProjectDetails.  # noqa: E501


        :return: The name of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MtProjectDetails.


        :param name: The name of this MtProjectDetails.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MtProjectDetails.  # noqa: E501


        :return: The description of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MtProjectDetails.


        :param description: The description of this MtProjectDetails.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def project_type(self):
        """Gets the project_type of this MtProjectDetails.  # noqa: E501


        :return: The project_type of this MtProjectDetails.  # noqa: E501
        :rtype: MtProjectType
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this MtProjectDetails.


        :param project_type: The project_type of this MtProjectDetails.  # noqa: E501
        :type project_type: MtProjectType
        """
        if self.local_vars_configuration.client_side_validation and project_type is None:  # noqa: E501
            raise ValueError("Invalid value for `project_type`, must not be `None`")  # noqa: E501

        self._project_type = project_type

    @property
    def num_sessions(self):
        """Gets the num_sessions of this MtProjectDetails.  # noqa: E501


        :return: The num_sessions of this MtProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_sessions

    @num_sessions.setter
    def num_sessions(self, num_sessions):
        """Sets the num_sessions of this MtProjectDetails.


        :param num_sessions: The num_sessions of this MtProjectDetails.  # noqa: E501
        :type num_sessions: int
        """
        if self.local_vars_configuration.client_side_validation and num_sessions is None:  # noqa: E501
            raise ValueError("Invalid value for `num_sessions`, must not be `None`")  # noqa: E501

        self._num_sessions = num_sessions

    @property
    def num_active_sessions(self):
        """Gets the num_active_sessions of this MtProjectDetails.  # noqa: E501


        :return: The num_active_sessions of this MtProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_active_sessions

    @num_active_sessions.setter
    def num_active_sessions(self, num_active_sessions):
        """Sets the num_active_sessions of this MtProjectDetails.


        :param num_active_sessions: The num_active_sessions of this MtProjectDetails.  # noqa: E501
        :type num_active_sessions: int
        """

        self._num_active_sessions = num_active_sessions

    @property
    def num_data_versions(self):
        """Gets the num_data_versions of this MtProjectDetails.  # noqa: E501


        :return: The num_data_versions of this MtProjectDetails.  # noqa: E501
        :rtype: int
        """
        return self._num_data_versions

    @num_data_versions.setter
    def num_data_versions(self, num_data_versions):
        """Sets the num_data_versions of this MtProjectDetails.


        :param num_data_versions: The num_data_versions of this MtProjectDetails.  # noqa: E501
        :type num_data_versions: int
        """
        if self.local_vars_configuration.client_side_validation and num_data_versions is None:  # noqa: E501
            raise ValueError("Invalid value for `num_data_versions`, must not be `None`")  # noqa: E501

        self._num_data_versions = num_data_versions

    @property
    def created_at(self):
        """Gets the created_at of this MtProjectDetails.  # noqa: E501


        :return: The created_at of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MtProjectDetails.


        :param created_at: The created_at of this MtProjectDetails.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this MtProjectDetails.  # noqa: E501


        :return: The created_by of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MtProjectDetails.


        :param created_by: The created_by of this MtProjectDetails.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this MtProjectDetails.  # noqa: E501


        :return: The updated_at of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MtProjectDetails.


        :param updated_at: The updated_at of this MtProjectDetails.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this MtProjectDetails.  # noqa: E501


        :return: The updated_by of this MtProjectDetails.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this MtProjectDetails.


        :param updated_by: The updated_by of this MtProjectDetails.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def is_archived(self):
        """Gets the is_archived of this MtProjectDetails.  # noqa: E501


        :return: The is_archived of this MtProjectDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this MtProjectDetails.


        :param is_archived: The is_archived of this MtProjectDetails.  # noqa: E501
        :type is_archived: bool
        """
        if self.local_vars_configuration.client_side_validation and is_archived is None:  # noqa: E501
            raise ValueError("Invalid value for `is_archived`, must not be `None`")  # noqa: E501

        self._is_archived = is_archived

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtProjectDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtProjectDetails):
            return True

        return self.to_dict() != other.to_dict()
