# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PipelinePartitionCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partition_start': 'int',
        'partition_end': 'int',
        'blobs': 'list[str]',
        'thumbnail_blobs': 'list[str]',
        'img_end_indices': 'list[int]',
        'projections': 'str',
        'sketch': 'str',
        'coreset': 'str',
        'start_frame_indices': 'list[int]'
    }

    attribute_map = {
        'partition_start': 'partitionStart',
        'partition_end': 'partitionEnd',
        'blobs': 'blobs',
        'thumbnail_blobs': 'thumbnailBlobs',
        'img_end_indices': 'imgEndIndices',
        'projections': 'projections',
        'sketch': 'sketch',
        'coreset': 'coreset',
        'start_frame_indices': 'startFrameIndices'
    }

    def __init__(self, partition_start=None, partition_end=None, blobs=None, thumbnail_blobs=None, img_end_indices=None, projections=None, sketch=None, coreset=None, start_frame_indices=None, local_vars_configuration=None):  # noqa: E501
        """PipelinePartitionCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._partition_start = None
        self._partition_end = None
        self._blobs = None
        self._thumbnail_blobs = None
        self._img_end_indices = None
        self._projections = None
        self._sketch = None
        self._coreset = None
        self._start_frame_indices = None
        self.discriminator = None

        self.partition_start = partition_start
        self.partition_end = partition_end
        self.blobs = blobs
        if thumbnail_blobs is not None:
            self.thumbnail_blobs = thumbnail_blobs
        self.img_end_indices = img_end_indices
        self.projections = projections
        self.sketch = sketch
        self.coreset = coreset
        if start_frame_indices is not None:
            self.start_frame_indices = start_frame_indices

    @property
    def partition_start(self):
        """Gets the partition_start of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The partition_start of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._partition_start

    @partition_start.setter
    def partition_start(self, partition_start):
        """Sets the partition_start of this PipelinePartitionCreateRequest.


        :param partition_start: The partition_start of this PipelinePartitionCreateRequest.  # noqa: E501
        :type partition_start: int
        """
        if self.local_vars_configuration.client_side_validation and partition_start is None:  # noqa: E501
            raise ValueError("Invalid value for `partition_start`, must not be `None`")  # noqa: E501

        self._partition_start = partition_start

    @property
    def partition_end(self):
        """Gets the partition_end of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The partition_end of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._partition_end

    @partition_end.setter
    def partition_end(self, partition_end):
        """Sets the partition_end of this PipelinePartitionCreateRequest.


        :param partition_end: The partition_end of this PipelinePartitionCreateRequest.  # noqa: E501
        :type partition_end: int
        """
        if self.local_vars_configuration.client_side_validation and partition_end is None:  # noqa: E501
            raise ValueError("Invalid value for `partition_end`, must not be `None`")  # noqa: E501

        self._partition_end = partition_end

    @property
    def blobs(self):
        """Gets the blobs of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The blobs of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._blobs

    @blobs.setter
    def blobs(self, blobs):
        """Sets the blobs of this PipelinePartitionCreateRequest.


        :param blobs: The blobs of this PipelinePartitionCreateRequest.  # noqa: E501
        :type blobs: list[str]
        """
        if self.local_vars_configuration.client_side_validation and blobs is None:  # noqa: E501
            raise ValueError("Invalid value for `blobs`, must not be `None`")  # noqa: E501

        self._blobs = blobs

    @property
    def thumbnail_blobs(self):
        """Gets the thumbnail_blobs of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The thumbnail_blobs of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._thumbnail_blobs

    @thumbnail_blobs.setter
    def thumbnail_blobs(self, thumbnail_blobs):
        """Sets the thumbnail_blobs of this PipelinePartitionCreateRequest.


        :param thumbnail_blobs: The thumbnail_blobs of this PipelinePartitionCreateRequest.  # noqa: E501
        :type thumbnail_blobs: list[str]
        """

        self._thumbnail_blobs = thumbnail_blobs

    @property
    def img_end_indices(self):
        """Gets the img_end_indices of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The img_end_indices of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._img_end_indices

    @img_end_indices.setter
    def img_end_indices(self, img_end_indices):
        """Sets the img_end_indices of this PipelinePartitionCreateRequest.


        :param img_end_indices: The img_end_indices of this PipelinePartitionCreateRequest.  # noqa: E501
        :type img_end_indices: list[int]
        """
        if self.local_vars_configuration.client_side_validation and img_end_indices is None:  # noqa: E501
            raise ValueError("Invalid value for `img_end_indices`, must not be `None`")  # noqa: E501

        self._img_end_indices = img_end_indices

    @property
    def projections(self):
        """Gets the projections of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The projections of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._projections

    @projections.setter
    def projections(self, projections):
        """Sets the projections of this PipelinePartitionCreateRequest.


        :param projections: The projections of this PipelinePartitionCreateRequest.  # noqa: E501
        :type projections: str
        """
        if self.local_vars_configuration.client_side_validation and projections is None:  # noqa: E501
            raise ValueError("Invalid value for `projections`, must not be `None`")  # noqa: E501

        self._projections = projections

    @property
    def sketch(self):
        """Gets the sketch of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The sketch of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._sketch

    @sketch.setter
    def sketch(self, sketch):
        """Sets the sketch of this PipelinePartitionCreateRequest.


        :param sketch: The sketch of this PipelinePartitionCreateRequest.  # noqa: E501
        :type sketch: str
        """
        if self.local_vars_configuration.client_side_validation and sketch is None:  # noqa: E501
            raise ValueError("Invalid value for `sketch`, must not be `None`")  # noqa: E501

        self._sketch = sketch

    @property
    def coreset(self):
        """Gets the coreset of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The coreset of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._coreset

    @coreset.setter
    def coreset(self, coreset):
        """Sets the coreset of this PipelinePartitionCreateRequest.


        :param coreset: The coreset of this PipelinePartitionCreateRequest.  # noqa: E501
        :type coreset: str
        """
        if self.local_vars_configuration.client_side_validation and coreset is None:  # noqa: E501
            raise ValueError("Invalid value for `coreset`, must not be `None`")  # noqa: E501

        self._coreset = coreset

    @property
    def start_frame_indices(self):
        """Gets the start_frame_indices of this PipelinePartitionCreateRequest.  # noqa: E501


        :return: The start_frame_indices of this PipelinePartitionCreateRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._start_frame_indices

    @start_frame_indices.setter
    def start_frame_indices(self, start_frame_indices):
        """Sets the start_frame_indices of this PipelinePartitionCreateRequest.


        :param start_frame_indices: The start_frame_indices of this PipelinePartitionCreateRequest.  # noqa: E501
        :type start_frame_indices: list[int]
        """

        self._start_frame_indices = start_frame_indices

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelinePartitionCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelinePartitionCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
