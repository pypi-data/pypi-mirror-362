# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class FieldColumnsCatalogDBMap(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'score': 'str',
        'ground_truth_class': 'str',
        'prediction_class': 'str',
        'ground_truth_coords': 'str',
        'ground_truth_coords_class': 'str',
        'prediction_coords': 'str',
        'prediction_coords_class_score': 'str'
    }

    attribute_map = {
        'score': 'score',
        'ground_truth_class': 'ground_truth_class',
        'prediction_class': 'prediction_class',
        'ground_truth_coords': 'ground_truth_coords',
        'ground_truth_coords_class': 'ground_truth_coords_class',
        'prediction_coords': 'prediction_coords',
        'prediction_coords_class_score': 'prediction_coords_class_score'
    }

    def __init__(self, score=None, ground_truth_class=None, prediction_class=None, ground_truth_coords=None, ground_truth_coords_class=None, prediction_coords=None, prediction_coords_class_score=None, local_vars_configuration=None):  # noqa: E501
        """FieldColumnsCatalogDBMap - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._score = None
        self._ground_truth_class = None
        self._prediction_class = None
        self._ground_truth_coords = None
        self._ground_truth_coords_class = None
        self._prediction_coords = None
        self._prediction_coords_class_score = None
        self.discriminator = None

        if score is not None:
            self.score = score
        if ground_truth_class is not None:
            self.ground_truth_class = ground_truth_class
        if prediction_class is not None:
            self.prediction_class = prediction_class
        if ground_truth_coords is not None:
            self.ground_truth_coords = ground_truth_coords
        if ground_truth_coords_class is not None:
            self.ground_truth_coords_class = ground_truth_coords_class
        if prediction_coords is not None:
            self.prediction_coords = prediction_coords
        if prediction_coords_class_score is not None:
            self.prediction_coords_class_score = prediction_coords_class_score

    @property
    def score(self):
        """Gets the score of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The score of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FieldColumnsCatalogDBMap.


        :param score: The score of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type score: str
        """

        self._score = score

    @property
    def ground_truth_class(self):
        """Gets the ground_truth_class of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The ground_truth_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._ground_truth_class

    @ground_truth_class.setter
    def ground_truth_class(self, ground_truth_class):
        """Sets the ground_truth_class of this FieldColumnsCatalogDBMap.


        :param ground_truth_class: The ground_truth_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type ground_truth_class: str
        """

        self._ground_truth_class = ground_truth_class

    @property
    def prediction_class(self):
        """Gets the prediction_class of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The prediction_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._prediction_class

    @prediction_class.setter
    def prediction_class(self, prediction_class):
        """Sets the prediction_class of this FieldColumnsCatalogDBMap.


        :param prediction_class: The prediction_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type prediction_class: str
        """

        self._prediction_class = prediction_class

    @property
    def ground_truth_coords(self):
        """Gets the ground_truth_coords of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The ground_truth_coords of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._ground_truth_coords

    @ground_truth_coords.setter
    def ground_truth_coords(self, ground_truth_coords):
        """Sets the ground_truth_coords of this FieldColumnsCatalogDBMap.


        :param ground_truth_coords: The ground_truth_coords of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type ground_truth_coords: str
        """

        self._ground_truth_coords = ground_truth_coords

    @property
    def ground_truth_coords_class(self):
        """Gets the ground_truth_coords_class of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The ground_truth_coords_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._ground_truth_coords_class

    @ground_truth_coords_class.setter
    def ground_truth_coords_class(self, ground_truth_coords_class):
        """Sets the ground_truth_coords_class of this FieldColumnsCatalogDBMap.


        :param ground_truth_coords_class: The ground_truth_coords_class of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type ground_truth_coords_class: str
        """

        self._ground_truth_coords_class = ground_truth_coords_class

    @property
    def prediction_coords(self):
        """Gets the prediction_coords of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The prediction_coords of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._prediction_coords

    @prediction_coords.setter
    def prediction_coords(self, prediction_coords):
        """Sets the prediction_coords of this FieldColumnsCatalogDBMap.


        :param prediction_coords: The prediction_coords of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type prediction_coords: str
        """

        self._prediction_coords = prediction_coords

    @property
    def prediction_coords_class_score(self):
        """Gets the prediction_coords_class_score of this FieldColumnsCatalogDBMap.  # noqa: E501


        :return: The prediction_coords_class_score of this FieldColumnsCatalogDBMap.  # noqa: E501
        :rtype: str
        """
        return self._prediction_coords_class_score

    @prediction_coords_class_score.setter
    def prediction_coords_class_score(self, prediction_coords_class_score):
        """Sets the prediction_coords_class_score of this FieldColumnsCatalogDBMap.


        :param prediction_coords_class_score: The prediction_coords_class_score of this FieldColumnsCatalogDBMap.  # noqa: E501
        :type prediction_coords_class_score: str
        """

        self._prediction_coords_class_score = prediction_coords_class_score

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldColumnsCatalogDBMap):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldColumnsCatalogDBMap):
            return True

        return self.to_dict() != other.to_dict()
