# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GenerateSessionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_images': 'int',
        'session_tag': 'str',
        'background_images': 'BackgroundImage'
    }

    attribute_map = {
        'num_images': 'num_images',
        'session_tag': 'session_tag',
        'background_images': 'background_images'
    }

    def __init__(self, num_images=None, session_tag=None, background_images=None, local_vars_configuration=None):  # noqa: E501
        """GenerateSessionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._num_images = None
        self._session_tag = None
        self._background_images = None
        self.discriminator = None

        self.num_images = num_images
        self.session_tag = session_tag
        self.background_images = background_images

    @property
    def num_images(self):
        """Gets the num_images of this GenerateSessionRequest.  # noqa: E501


        :return: The num_images of this GenerateSessionRequest.  # noqa: E501
        :rtype: int
        """
        return self._num_images

    @num_images.setter
    def num_images(self, num_images):
        """Sets the num_images of this GenerateSessionRequest.


        :param num_images: The num_images of this GenerateSessionRequest.  # noqa: E501
        :type num_images: int
        """
        if self.local_vars_configuration.client_side_validation and num_images is None:  # noqa: E501
            raise ValueError("Invalid value for `num_images`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_images is not None and num_images > 10000):  # noqa: E501
            raise ValueError("Invalid value for `num_images`, must be a value less than or equal to `10000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_images is not None and num_images < 50):  # noqa: E501
            raise ValueError("Invalid value for `num_images`, must be a value greater than or equal to `50`")  # noqa: E501

        self._num_images = num_images

    @property
    def session_tag(self):
        """Gets the session_tag of this GenerateSessionRequest.  # noqa: E501


        :return: The session_tag of this GenerateSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._session_tag

    @session_tag.setter
    def session_tag(self, session_tag):
        """Sets the session_tag of this GenerateSessionRequest.


        :param session_tag: The session_tag of this GenerateSessionRequest.  # noqa: E501
        :type session_tag: str
        """
        if self.local_vars_configuration.client_side_validation and session_tag is None:  # noqa: E501
            raise ValueError("Invalid value for `session_tag`, must not be `None`")  # noqa: E501

        self._session_tag = session_tag

    @property
    def background_images(self):
        """Gets the background_images of this GenerateSessionRequest.  # noqa: E501


        :return: The background_images of this GenerateSessionRequest.  # noqa: E501
        :rtype: BackgroundImage
        """
        return self._background_images

    @background_images.setter
    def background_images(self, background_images):
        """Sets the background_images of this GenerateSessionRequest.


        :param background_images: The background_images of this GenerateSessionRequest.  # noqa: E501
        :type background_images: BackgroundImage
        """
        if self.local_vars_configuration.client_side_validation and background_images is None:  # noqa: E501
            raise ValueError("Invalid value for `background_images`, must not be `None`")  # noqa: E501

        self._background_images = background_images

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateSessionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateSessionRequest):
            return True

        return self.to_dict() != other.to_dict()
