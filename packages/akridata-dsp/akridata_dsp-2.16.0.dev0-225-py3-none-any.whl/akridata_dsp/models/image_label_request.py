# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ImageLabelRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'point_ids': 'list[int]',
        'filters': 'list[ImageLabelFilter]',
        'sort_by': 'str',
        'descending': 'bool'
    }

    attribute_map = {
        'point_ids': 'point_ids',
        'filters': 'filters',
        'sort_by': 'sort_by',
        'descending': 'descending'
    }

    def __init__(self, point_ids=None, filters=None, sort_by=None, descending=False, local_vars_configuration=None):  # noqa: E501
        """ImageLabelRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._point_ids = None
        self._filters = None
        self._sort_by = None
        self._descending = None
        self.discriminator = None

        if point_ids is not None:
            self.point_ids = point_ids
        if filters is not None:
            self.filters = filters
        if sort_by is not None:
            self.sort_by = sort_by
        if descending is not None:
            self.descending = descending

    @property
    def point_ids(self):
        """Gets the point_ids of this ImageLabelRequest.  # noqa: E501


        :return: The point_ids of this ImageLabelRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._point_ids

    @point_ids.setter
    def point_ids(self, point_ids):
        """Sets the point_ids of this ImageLabelRequest.


        :param point_ids: The point_ids of this ImageLabelRequest.  # noqa: E501
        :type point_ids: list[int]
        """
        if (self.local_vars_configuration.client_side_validation and
                point_ids is not None and len(point_ids) > 200):
            raise ValueError("Invalid value for `point_ids`, number of items must be less than or equal to `200`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                point_ids is not None and len(point_ids) < 1):
            raise ValueError("Invalid value for `point_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._point_ids = point_ids

    @property
    def filters(self):
        """Gets the filters of this ImageLabelRequest.  # noqa: E501


        :return: The filters of this ImageLabelRequest.  # noqa: E501
        :rtype: list[ImageLabelFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ImageLabelRequest.


        :param filters: The filters of this ImageLabelRequest.  # noqa: E501
        :type filters: list[ImageLabelFilter]
        """

        self._filters = filters

    @property
    def sort_by(self):
        """Gets the sort_by of this ImageLabelRequest.  # noqa: E501


        :return: The sort_by of this ImageLabelRequest.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ImageLabelRequest.


        :param sort_by: The sort_by of this ImageLabelRequest.  # noqa: E501
        :type sort_by: str
        """

        self._sort_by = sort_by

    @property
    def descending(self):
        """Gets the descending of this ImageLabelRequest.  # noqa: E501


        :return: The descending of this ImageLabelRequest.  # noqa: E501
        :rtype: bool
        """
        return self._descending

    @descending.setter
    def descending(self, descending):
        """Sets the descending of this ImageLabelRequest.


        :param descending: The descending of this ImageLabelRequest.  # noqa: E501
        :type descending: bool
        """

        self._descending = descending

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageLabelRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageLabelRequest):
            return True

        return self.to_dict() != other.to_dict()
