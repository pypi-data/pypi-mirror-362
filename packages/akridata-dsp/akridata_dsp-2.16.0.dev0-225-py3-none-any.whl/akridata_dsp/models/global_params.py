# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GlobalParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conf_threshold': 'float',
        'top_k': 'int',
        'remove_same_cls_nested_boxes': 'bool',
        'nestedness_threshold': 'float',
        'text_prompt_weight': 'float',
        'softmax_scaling': 'float',
        'use_mocae': 'bool',
        'increment_conf_model': 'bool',
        'increment_conf_ensemble': 'bool',
        'model_top_k': 'int',
        'model_conf_threshold': 'float',
        'ensemble_type': 'str',
        'use_meta_adapter': 'bool',
        'models': 'str',
        'raw_outputs': 'bool',
        'fine_grained_models': 'list[str]',
        'fine_grained_params': 'FineGrainedParams',
        'synthesize': 'int',
        'run_segmentation': 'bool',
        'use_adapter': 'bool',
        'same_class_iou_threshold': 'float',
        'diff_class_iou_threshold': 'float'
    }

    attribute_map = {
        'conf_threshold': 'conf_threshold',
        'top_k': 'top_k',
        'remove_same_cls_nested_boxes': 'remove_same_cls_nested_boxes',
        'nestedness_threshold': 'nestedness_threshold',
        'text_prompt_weight': 'text_prompt_weight',
        'softmax_scaling': 'softmax_scaling',
        'use_mocae': 'use_mocae',
        'increment_conf_model': 'increment_conf_model',
        'increment_conf_ensemble': 'increment_conf_ensemble',
        'model_top_k': 'model_top_k',
        'model_conf_threshold': 'model_conf_threshold',
        'ensemble_type': 'ensemble_type',
        'use_meta_adapter': 'use_meta_adapter',
        'models': 'models',
        'raw_outputs': 'raw_outputs',
        'fine_grained_models': 'fine_grained_models',
        'fine_grained_params': 'fine_grained_params',
        'synthesize': 'synthesize',
        'run_segmentation': 'run_segmentation',
        'use_adapter': 'use_adapter',
        'same_class_iou_threshold': 'same_class_iou_threshold',
        'diff_class_iou_threshold': 'diff_class_iou_threshold'
    }

    def __init__(self, conf_threshold=None, top_k=None, remove_same_cls_nested_boxes=None, nestedness_threshold=None, text_prompt_weight=None, softmax_scaling=None, use_mocae=None, increment_conf_model=None, increment_conf_ensemble=None, model_top_k=None, model_conf_threshold=None, ensemble_type=None, use_meta_adapter=None, models=None, raw_outputs=None, fine_grained_models=None, fine_grained_params=None, synthesize=None, run_segmentation=None, use_adapter=None, same_class_iou_threshold=None, diff_class_iou_threshold=None, local_vars_configuration=None):  # noqa: E501
        """GlobalParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._conf_threshold = None
        self._top_k = None
        self._remove_same_cls_nested_boxes = None
        self._nestedness_threshold = None
        self._text_prompt_weight = None
        self._softmax_scaling = None
        self._use_mocae = None
        self._increment_conf_model = None
        self._increment_conf_ensemble = None
        self._model_top_k = None
        self._model_conf_threshold = None
        self._ensemble_type = None
        self._use_meta_adapter = None
        self._models = None
        self._raw_outputs = None
        self._fine_grained_models = None
        self._fine_grained_params = None
        self._synthesize = None
        self._run_segmentation = None
        self._use_adapter = None
        self._same_class_iou_threshold = None
        self._diff_class_iou_threshold = None
        self.discriminator = None

        if conf_threshold is not None:
            self.conf_threshold = conf_threshold
        if top_k is not None:
            self.top_k = top_k
        if remove_same_cls_nested_boxes is not None:
            self.remove_same_cls_nested_boxes = remove_same_cls_nested_boxes
        if nestedness_threshold is not None:
            self.nestedness_threshold = nestedness_threshold
        if text_prompt_weight is not None:
            self.text_prompt_weight = text_prompt_weight
        if softmax_scaling is not None:
            self.softmax_scaling = softmax_scaling
        if use_mocae is not None:
            self.use_mocae = use_mocae
        if increment_conf_model is not None:
            self.increment_conf_model = increment_conf_model
        if increment_conf_ensemble is not None:
            self.increment_conf_ensemble = increment_conf_ensemble
        if model_top_k is not None:
            self.model_top_k = model_top_k
        if model_conf_threshold is not None:
            self.model_conf_threshold = model_conf_threshold
        if ensemble_type is not None:
            self.ensemble_type = ensemble_type
        if use_meta_adapter is not None:
            self.use_meta_adapter = use_meta_adapter
        if models is not None:
            self.models = models
        if raw_outputs is not None:
            self.raw_outputs = raw_outputs
        if fine_grained_models is not None:
            self.fine_grained_models = fine_grained_models
        if fine_grained_params is not None:
            self.fine_grained_params = fine_grained_params
        if synthesize is not None:
            self.synthesize = synthesize
        if run_segmentation is not None:
            self.run_segmentation = run_segmentation
        if use_adapter is not None:
            self.use_adapter = use_adapter
        if same_class_iou_threshold is not None:
            self.same_class_iou_threshold = same_class_iou_threshold
        if diff_class_iou_threshold is not None:
            self.diff_class_iou_threshold = diff_class_iou_threshold

    @property
    def conf_threshold(self):
        """Gets the conf_threshold of this GlobalParams.  # noqa: E501


        :return: The conf_threshold of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._conf_threshold

    @conf_threshold.setter
    def conf_threshold(self, conf_threshold):
        """Sets the conf_threshold of this GlobalParams.


        :param conf_threshold: The conf_threshold of this GlobalParams.  # noqa: E501
        :type conf_threshold: float
        """

        self._conf_threshold = conf_threshold

    @property
    def top_k(self):
        """Gets the top_k of this GlobalParams.  # noqa: E501


        :return: The top_k of this GlobalParams.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this GlobalParams.


        :param top_k: The top_k of this GlobalParams.  # noqa: E501
        :type top_k: int
        """

        self._top_k = top_k

    @property
    def remove_same_cls_nested_boxes(self):
        """Gets the remove_same_cls_nested_boxes of this GlobalParams.  # noqa: E501


        :return: The remove_same_cls_nested_boxes of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._remove_same_cls_nested_boxes

    @remove_same_cls_nested_boxes.setter
    def remove_same_cls_nested_boxes(self, remove_same_cls_nested_boxes):
        """Sets the remove_same_cls_nested_boxes of this GlobalParams.


        :param remove_same_cls_nested_boxes: The remove_same_cls_nested_boxes of this GlobalParams.  # noqa: E501
        :type remove_same_cls_nested_boxes: bool
        """

        self._remove_same_cls_nested_boxes = remove_same_cls_nested_boxes

    @property
    def nestedness_threshold(self):
        """Gets the nestedness_threshold of this GlobalParams.  # noqa: E501


        :return: The nestedness_threshold of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._nestedness_threshold

    @nestedness_threshold.setter
    def nestedness_threshold(self, nestedness_threshold):
        """Sets the nestedness_threshold of this GlobalParams.


        :param nestedness_threshold: The nestedness_threshold of this GlobalParams.  # noqa: E501
        :type nestedness_threshold: float
        """
        if (self.local_vars_configuration.client_side_validation and
                nestedness_threshold is not None and nestedness_threshold > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `nestedness_threshold`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nestedness_threshold is not None and nestedness_threshold < 0.25):  # noqa: E501
            raise ValueError("Invalid value for `nestedness_threshold`, must be a value greater than or equal to `0.25`")  # noqa: E501

        self._nestedness_threshold = nestedness_threshold

    @property
    def text_prompt_weight(self):
        """Gets the text_prompt_weight of this GlobalParams.  # noqa: E501


        :return: The text_prompt_weight of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._text_prompt_weight

    @text_prompt_weight.setter
    def text_prompt_weight(self, text_prompt_weight):
        """Sets the text_prompt_weight of this GlobalParams.


        :param text_prompt_weight: The text_prompt_weight of this GlobalParams.  # noqa: E501
        :type text_prompt_weight: float
        """
        if (self.local_vars_configuration.client_side_validation and
                text_prompt_weight is not None and text_prompt_weight > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `text_prompt_weight`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                text_prompt_weight is not None and text_prompt_weight < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `text_prompt_weight`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._text_prompt_weight = text_prompt_weight

    @property
    def softmax_scaling(self):
        """Gets the softmax_scaling of this GlobalParams.  # noqa: E501


        :return: The softmax_scaling of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._softmax_scaling

    @softmax_scaling.setter
    def softmax_scaling(self, softmax_scaling):
        """Sets the softmax_scaling of this GlobalParams.


        :param softmax_scaling: The softmax_scaling of this GlobalParams.  # noqa: E501
        :type softmax_scaling: float
        """

        self._softmax_scaling = softmax_scaling

    @property
    def use_mocae(self):
        """Gets the use_mocae of this GlobalParams.  # noqa: E501


        :return: The use_mocae of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._use_mocae

    @use_mocae.setter
    def use_mocae(self, use_mocae):
        """Sets the use_mocae of this GlobalParams.


        :param use_mocae: The use_mocae of this GlobalParams.  # noqa: E501
        :type use_mocae: bool
        """

        self._use_mocae = use_mocae

    @property
    def increment_conf_model(self):
        """Gets the increment_conf_model of this GlobalParams.  # noqa: E501


        :return: The increment_conf_model of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._increment_conf_model

    @increment_conf_model.setter
    def increment_conf_model(self, increment_conf_model):
        """Sets the increment_conf_model of this GlobalParams.


        :param increment_conf_model: The increment_conf_model of this GlobalParams.  # noqa: E501
        :type increment_conf_model: bool
        """

        self._increment_conf_model = increment_conf_model

    @property
    def increment_conf_ensemble(self):
        """Gets the increment_conf_ensemble of this GlobalParams.  # noqa: E501


        :return: The increment_conf_ensemble of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._increment_conf_ensemble

    @increment_conf_ensemble.setter
    def increment_conf_ensemble(self, increment_conf_ensemble):
        """Sets the increment_conf_ensemble of this GlobalParams.


        :param increment_conf_ensemble: The increment_conf_ensemble of this GlobalParams.  # noqa: E501
        :type increment_conf_ensemble: bool
        """

        self._increment_conf_ensemble = increment_conf_ensemble

    @property
    def model_top_k(self):
        """Gets the model_top_k of this GlobalParams.  # noqa: E501


        :return: The model_top_k of this GlobalParams.  # noqa: E501
        :rtype: int
        """
        return self._model_top_k

    @model_top_k.setter
    def model_top_k(self, model_top_k):
        """Sets the model_top_k of this GlobalParams.


        :param model_top_k: The model_top_k of this GlobalParams.  # noqa: E501
        :type model_top_k: int
        """

        self._model_top_k = model_top_k

    @property
    def model_conf_threshold(self):
        """Gets the model_conf_threshold of this GlobalParams.  # noqa: E501


        :return: The model_conf_threshold of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._model_conf_threshold

    @model_conf_threshold.setter
    def model_conf_threshold(self, model_conf_threshold):
        """Sets the model_conf_threshold of this GlobalParams.


        :param model_conf_threshold: The model_conf_threshold of this GlobalParams.  # noqa: E501
        :type model_conf_threshold: float
        """

        self._model_conf_threshold = model_conf_threshold

    @property
    def ensemble_type(self):
        """Gets the ensemble_type of this GlobalParams.  # noqa: E501


        :return: The ensemble_type of this GlobalParams.  # noqa: E501
        :rtype: str
        """
        return self._ensemble_type

    @ensemble_type.setter
    def ensemble_type(self, ensemble_type):
        """Sets the ensemble_type of this GlobalParams.


        :param ensemble_type: The ensemble_type of this GlobalParams.  # noqa: E501
        :type ensemble_type: str
        """

        self._ensemble_type = ensemble_type

    @property
    def use_meta_adapter(self):
        """Gets the use_meta_adapter of this GlobalParams.  # noqa: E501


        :return: The use_meta_adapter of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._use_meta_adapter

    @use_meta_adapter.setter
    def use_meta_adapter(self, use_meta_adapter):
        """Sets the use_meta_adapter of this GlobalParams.


        :param use_meta_adapter: The use_meta_adapter of this GlobalParams.  # noqa: E501
        :type use_meta_adapter: bool
        """

        self._use_meta_adapter = use_meta_adapter

    @property
    def models(self):
        """Gets the models of this GlobalParams.  # noqa: E501


        :return: The models of this GlobalParams.  # noqa: E501
        :rtype: str
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this GlobalParams.


        :param models: The models of this GlobalParams.  # noqa: E501
        :type models: str
        """

        self._models = models

    @property
    def raw_outputs(self):
        """Gets the raw_outputs of this GlobalParams.  # noqa: E501


        :return: The raw_outputs of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._raw_outputs

    @raw_outputs.setter
    def raw_outputs(self, raw_outputs):
        """Sets the raw_outputs of this GlobalParams.


        :param raw_outputs: The raw_outputs of this GlobalParams.  # noqa: E501
        :type raw_outputs: bool
        """

        self._raw_outputs = raw_outputs

    @property
    def fine_grained_models(self):
        """Gets the fine_grained_models of this GlobalParams.  # noqa: E501


        :return: The fine_grained_models of this GlobalParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._fine_grained_models

    @fine_grained_models.setter
    def fine_grained_models(self, fine_grained_models):
        """Sets the fine_grained_models of this GlobalParams.


        :param fine_grained_models: The fine_grained_models of this GlobalParams.  # noqa: E501
        :type fine_grained_models: list[str]
        """

        self._fine_grained_models = fine_grained_models

    @property
    def fine_grained_params(self):
        """Gets the fine_grained_params of this GlobalParams.  # noqa: E501


        :return: The fine_grained_params of this GlobalParams.  # noqa: E501
        :rtype: FineGrainedParams
        """
        return self._fine_grained_params

    @fine_grained_params.setter
    def fine_grained_params(self, fine_grained_params):
        """Sets the fine_grained_params of this GlobalParams.


        :param fine_grained_params: The fine_grained_params of this GlobalParams.  # noqa: E501
        :type fine_grained_params: FineGrainedParams
        """

        self._fine_grained_params = fine_grained_params

    @property
    def synthesize(self):
        """Gets the synthesize of this GlobalParams.  # noqa: E501


        :return: The synthesize of this GlobalParams.  # noqa: E501
        :rtype: int
        """
        return self._synthesize

    @synthesize.setter
    def synthesize(self, synthesize):
        """Sets the synthesize of this GlobalParams.


        :param synthesize: The synthesize of this GlobalParams.  # noqa: E501
        :type synthesize: int
        """

        self._synthesize = synthesize

    @property
    def run_segmentation(self):
        """Gets the run_segmentation of this GlobalParams.  # noqa: E501


        :return: The run_segmentation of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._run_segmentation

    @run_segmentation.setter
    def run_segmentation(self, run_segmentation):
        """Sets the run_segmentation of this GlobalParams.


        :param run_segmentation: The run_segmentation of this GlobalParams.  # noqa: E501
        :type run_segmentation: bool
        """

        self._run_segmentation = run_segmentation

    @property
    def use_adapter(self):
        """Gets the use_adapter of this GlobalParams.  # noqa: E501


        :return: The use_adapter of this GlobalParams.  # noqa: E501
        :rtype: bool
        """
        return self._use_adapter

    @use_adapter.setter
    def use_adapter(self, use_adapter):
        """Sets the use_adapter of this GlobalParams.


        :param use_adapter: The use_adapter of this GlobalParams.  # noqa: E501
        :type use_adapter: bool
        """

        self._use_adapter = use_adapter

    @property
    def same_class_iou_threshold(self):
        """Gets the same_class_iou_threshold of this GlobalParams.  # noqa: E501


        :return: The same_class_iou_threshold of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._same_class_iou_threshold

    @same_class_iou_threshold.setter
    def same_class_iou_threshold(self, same_class_iou_threshold):
        """Sets the same_class_iou_threshold of this GlobalParams.


        :param same_class_iou_threshold: The same_class_iou_threshold of this GlobalParams.  # noqa: E501
        :type same_class_iou_threshold: float
        """

        self._same_class_iou_threshold = same_class_iou_threshold

    @property
    def diff_class_iou_threshold(self):
        """Gets the diff_class_iou_threshold of this GlobalParams.  # noqa: E501


        :return: The diff_class_iou_threshold of this GlobalParams.  # noqa: E501
        :rtype: float
        """
        return self._diff_class_iou_threshold

    @diff_class_iou_threshold.setter
    def diff_class_iou_threshold(self, diff_class_iou_threshold):
        """Sets the diff_class_iou_threshold of this GlobalParams.


        :param diff_class_iou_threshold: The diff_class_iou_threshold of this GlobalParams.  # noqa: E501
        :type diff_class_iou_threshold: float
        """

        self._diff_class_iou_threshold = diff_class_iou_threshold

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalParams):
            return True

        return self.to_dict() != other.to_dict()
