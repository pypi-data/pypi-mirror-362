# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LabelPrompt(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prompt': 'str',
        'superclass': 'str',
        'prompt_description': 'str',
        'superclass_description': 'str',
        'extra_prompts': 'list[str]'
    }

    attribute_map = {
        'prompt': 'prompt',
        'superclass': 'superclass',
        'prompt_description': 'prompt_description',
        'superclass_description': 'superclass_description',
        'extra_prompts': 'extra_prompts'
    }

    def __init__(self, prompt=None, superclass=None, prompt_description=None, superclass_description=None, extra_prompts=None, local_vars_configuration=None):  # noqa: E501
        """LabelPrompt - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._prompt = None
        self._superclass = None
        self._prompt_description = None
        self._superclass_description = None
        self._extra_prompts = None
        self.discriminator = None

        self.prompt = prompt
        if superclass is not None:
            self.superclass = superclass
        if prompt_description is not None:
            self.prompt_description = prompt_description
        if superclass_description is not None:
            self.superclass_description = superclass_description
        if extra_prompts is not None:
            self.extra_prompts = extra_prompts

    @property
    def prompt(self):
        """Gets the prompt of this LabelPrompt.  # noqa: E501


        :return: The prompt of this LabelPrompt.  # noqa: E501
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this LabelPrompt.


        :param prompt: The prompt of this LabelPrompt.  # noqa: E501
        :type prompt: str
        """
        if self.local_vars_configuration.client_side_validation and prompt is None:  # noqa: E501
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def superclass(self):
        """Gets the superclass of this LabelPrompt.  # noqa: E501


        :return: The superclass of this LabelPrompt.  # noqa: E501
        :rtype: str
        """
        return self._superclass

    @superclass.setter
    def superclass(self, superclass):
        """Sets the superclass of this LabelPrompt.


        :param superclass: The superclass of this LabelPrompt.  # noqa: E501
        :type superclass: str
        """

        self._superclass = superclass

    @property
    def prompt_description(self):
        """Gets the prompt_description of this LabelPrompt.  # noqa: E501


        :return: The prompt_description of this LabelPrompt.  # noqa: E501
        :rtype: str
        """
        return self._prompt_description

    @prompt_description.setter
    def prompt_description(self, prompt_description):
        """Sets the prompt_description of this LabelPrompt.


        :param prompt_description: The prompt_description of this LabelPrompt.  # noqa: E501
        :type prompt_description: str
        """

        self._prompt_description = prompt_description

    @property
    def superclass_description(self):
        """Gets the superclass_description of this LabelPrompt.  # noqa: E501


        :return: The superclass_description of this LabelPrompt.  # noqa: E501
        :rtype: str
        """
        return self._superclass_description

    @superclass_description.setter
    def superclass_description(self, superclass_description):
        """Sets the superclass_description of this LabelPrompt.


        :param superclass_description: The superclass_description of this LabelPrompt.  # noqa: E501
        :type superclass_description: str
        """

        self._superclass_description = superclass_description

    @property
    def extra_prompts(self):
        """Gets the extra_prompts of this LabelPrompt.  # noqa: E501


        :return: The extra_prompts of this LabelPrompt.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra_prompts

    @extra_prompts.setter
    def extra_prompts(self, extra_prompts):
        """Sets the extra_prompts of this LabelPrompt.


        :param extra_prompts: The extra_prompts of this LabelPrompt.  # noqa: E501
        :type extra_prompts: list[str]
        """

        self._extra_prompts = extra_prompts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelPrompt):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelPrompt):
            return True

        return self.to_dict() != other.to_dict()
