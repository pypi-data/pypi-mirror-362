# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtSessionDetailsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_id': 'str',
        'project_id': 'str',
        'project_type': 'MtProjectType',
        'model_metrics': 'TrainingModelMetrics',
        'status': 'ModelTrainingStatus',
        'status_message': 'str',
        'started_at': 'str',
        'completed_at': 'str',
        'progress_pct': 'float',
        'analyze_job_id': 'str',
        'is_archived': 'bool',
        'early_stopped_at_epoch': 'int',
        'abort_requested': 'bool',
        'evaluation_status': 'ModelEvaluationStatus',
        'model_export_count': 'int',
        'name': 'str',
        'description': 'str',
        'data_version': 'str',
        'action': 'TrainingJobAction',
        'model_params': 'ModelParams',
        'refine_config': 'TrainingRefinementConfig',
        'training_params': 'TrainingJobParams',
        'evaluation_params': 'EvaluationJobParams',
        'early_stop_config': 'EarlyStopConfig'
    }

    attribute_map = {
        'session_id': 'session_id',
        'project_id': 'project_id',
        'project_type': 'project_type',
        'model_metrics': 'model_metrics',
        'status': 'status',
        'status_message': 'status_message',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'progress_pct': 'progress_pct',
        'analyze_job_id': 'analyze_job_id',
        'is_archived': 'is_archived',
        'early_stopped_at_epoch': 'early_stopped_at_epoch',
        'abort_requested': 'abort_requested',
        'evaluation_status': 'evaluation_status',
        'model_export_count': 'model_export_count',
        'name': 'name',
        'description': 'description',
        'data_version': 'data_version',
        'action': 'action',
        'model_params': 'model_params',
        'refine_config': 'refine_config',
        'training_params': 'training_params',
        'evaluation_params': 'evaluation_params',
        'early_stop_config': 'early_stop_config'
    }

    def __init__(self, session_id=None, project_id=None, project_type=None, model_metrics=None, status=None, status_message=None, started_at=None, completed_at=None, progress_pct=0.0, analyze_job_id=None, is_archived=None, early_stopped_at_epoch=None, abort_requested=False, evaluation_status=None, model_export_count=0, name=None, description=None, data_version=None, action=None, model_params=None, refine_config=None, training_params=None, evaluation_params=None, early_stop_config=None, local_vars_configuration=None):  # noqa: E501
        """MtSessionDetailsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._session_id = None
        self._project_id = None
        self._project_type = None
        self._model_metrics = None
        self._status = None
        self._status_message = None
        self._started_at = None
        self._completed_at = None
        self._progress_pct = None
        self._analyze_job_id = None
        self._is_archived = None
        self._early_stopped_at_epoch = None
        self._abort_requested = None
        self._evaluation_status = None
        self._model_export_count = None
        self._name = None
        self._description = None
        self._data_version = None
        self._action = None
        self._model_params = None
        self._refine_config = None
        self._training_params = None
        self._evaluation_params = None
        self._early_stop_config = None
        self.discriminator = None

        self.session_id = session_id
        self.project_id = project_id
        self.project_type = project_type
        self.model_metrics = model_metrics
        self.status = status
        if status_message is not None:
            self.status_message = status_message
        self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if progress_pct is not None:
            self.progress_pct = progress_pct
        if analyze_job_id is not None:
            self.analyze_job_id = analyze_job_id
        self.is_archived = is_archived
        if early_stopped_at_epoch is not None:
            self.early_stopped_at_epoch = early_stopped_at_epoch
        if abort_requested is not None:
            self.abort_requested = abort_requested
        if evaluation_status is not None:
            self.evaluation_status = evaluation_status
        if model_export_count is not None:
            self.model_export_count = model_export_count
        self.name = name
        if description is not None:
            self.description = description
        self.data_version = data_version
        self.action = action
        if model_params is not None:
            self.model_params = model_params
        if refine_config is not None:
            self.refine_config = refine_config
        self.training_params = training_params
        self.evaluation_params = evaluation_params
        if early_stop_config is not None:
            self.early_stop_config = early_stop_config

    @property
    def session_id(self):
        """Gets the session_id of this MtSessionDetailsResponse.  # noqa: E501


        :return: The session_id of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MtSessionDetailsResponse.


        :param session_id: The session_id of this MtSessionDetailsResponse.  # noqa: E501
        :type session_id: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def project_id(self):
        """Gets the project_id of this MtSessionDetailsResponse.  # noqa: E501


        :return: The project_id of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MtSessionDetailsResponse.


        :param project_id: The project_id of this MtSessionDetailsResponse.  # noqa: E501
        :type project_id: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def project_type(self):
        """Gets the project_type of this MtSessionDetailsResponse.  # noqa: E501


        :return: The project_type of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: MtProjectType
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this MtSessionDetailsResponse.


        :param project_type: The project_type of this MtSessionDetailsResponse.  # noqa: E501
        :type project_type: MtProjectType
        """
        if self.local_vars_configuration.client_side_validation and project_type is None:  # noqa: E501
            raise ValueError("Invalid value for `project_type`, must not be `None`")  # noqa: E501

        self._project_type = project_type

    @property
    def model_metrics(self):
        """Gets the model_metrics of this MtSessionDetailsResponse.  # noqa: E501


        :return: The model_metrics of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: TrainingModelMetrics
        """
        return self._model_metrics

    @model_metrics.setter
    def model_metrics(self, model_metrics):
        """Sets the model_metrics of this MtSessionDetailsResponse.


        :param model_metrics: The model_metrics of this MtSessionDetailsResponse.  # noqa: E501
        :type model_metrics: TrainingModelMetrics
        """
        if self.local_vars_configuration.client_side_validation and model_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `model_metrics`, must not be `None`")  # noqa: E501

        self._model_metrics = model_metrics

    @property
    def status(self):
        """Gets the status of this MtSessionDetailsResponse.  # noqa: E501


        :return: The status of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: ModelTrainingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MtSessionDetailsResponse.


        :param status: The status of this MtSessionDetailsResponse.  # noqa: E501
        :type status: ModelTrainingStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this MtSessionDetailsResponse.  # noqa: E501


        :return: The status_message of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this MtSessionDetailsResponse.


        :param status_message: The status_message of this MtSessionDetailsResponse.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def started_at(self):
        """Gets the started_at of this MtSessionDetailsResponse.  # noqa: E501


        :return: The started_at of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MtSessionDetailsResponse.


        :param started_at: The started_at of this MtSessionDetailsResponse.  # noqa: E501
        :type started_at: str
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this MtSessionDetailsResponse.  # noqa: E501


        :return: The completed_at of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this MtSessionDetailsResponse.


        :param completed_at: The completed_at of this MtSessionDetailsResponse.  # noqa: E501
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def progress_pct(self):
        """Gets the progress_pct of this MtSessionDetailsResponse.  # noqa: E501


        :return: The progress_pct of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: float
        """
        return self._progress_pct

    @progress_pct.setter
    def progress_pct(self, progress_pct):
        """Sets the progress_pct of this MtSessionDetailsResponse.


        :param progress_pct: The progress_pct of this MtSessionDetailsResponse.  # noqa: E501
        :type progress_pct: float
        """

        self._progress_pct = progress_pct

    @property
    def analyze_job_id(self):
        """Gets the analyze_job_id of this MtSessionDetailsResponse.  # noqa: E501


        :return: The analyze_job_id of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._analyze_job_id

    @analyze_job_id.setter
    def analyze_job_id(self, analyze_job_id):
        """Sets the analyze_job_id of this MtSessionDetailsResponse.


        :param analyze_job_id: The analyze_job_id of this MtSessionDetailsResponse.  # noqa: E501
        :type analyze_job_id: str
        """

        self._analyze_job_id = analyze_job_id

    @property
    def is_archived(self):
        """Gets the is_archived of this MtSessionDetailsResponse.  # noqa: E501


        :return: The is_archived of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this MtSessionDetailsResponse.


        :param is_archived: The is_archived of this MtSessionDetailsResponse.  # noqa: E501
        :type is_archived: bool
        """
        if self.local_vars_configuration.client_side_validation and is_archived is None:  # noqa: E501
            raise ValueError("Invalid value for `is_archived`, must not be `None`")  # noqa: E501

        self._is_archived = is_archived

    @property
    def early_stopped_at_epoch(self):
        """Gets the early_stopped_at_epoch of this MtSessionDetailsResponse.  # noqa: E501


        :return: The early_stopped_at_epoch of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._early_stopped_at_epoch

    @early_stopped_at_epoch.setter
    def early_stopped_at_epoch(self, early_stopped_at_epoch):
        """Sets the early_stopped_at_epoch of this MtSessionDetailsResponse.


        :param early_stopped_at_epoch: The early_stopped_at_epoch of this MtSessionDetailsResponse.  # noqa: E501
        :type early_stopped_at_epoch: int
        """

        self._early_stopped_at_epoch = early_stopped_at_epoch

    @property
    def abort_requested(self):
        """Gets the abort_requested of this MtSessionDetailsResponse.  # noqa: E501


        :return: The abort_requested of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._abort_requested

    @abort_requested.setter
    def abort_requested(self, abort_requested):
        """Sets the abort_requested of this MtSessionDetailsResponse.


        :param abort_requested: The abort_requested of this MtSessionDetailsResponse.  # noqa: E501
        :type abort_requested: bool
        """

        self._abort_requested = abort_requested

    @property
    def evaluation_status(self):
        """Gets the evaluation_status of this MtSessionDetailsResponse.  # noqa: E501


        :return: The evaluation_status of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: ModelEvaluationStatus
        """
        return self._evaluation_status

    @evaluation_status.setter
    def evaluation_status(self, evaluation_status):
        """Sets the evaluation_status of this MtSessionDetailsResponse.


        :param evaluation_status: The evaluation_status of this MtSessionDetailsResponse.  # noqa: E501
        :type evaluation_status: ModelEvaluationStatus
        """

        self._evaluation_status = evaluation_status

    @property
    def model_export_count(self):
        """Gets the model_export_count of this MtSessionDetailsResponse.  # noqa: E501


        :return: The model_export_count of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._model_export_count

    @model_export_count.setter
    def model_export_count(self, model_export_count):
        """Sets the model_export_count of this MtSessionDetailsResponse.


        :param model_export_count: The model_export_count of this MtSessionDetailsResponse.  # noqa: E501
        :type model_export_count: int
        """

        self._model_export_count = model_export_count

    @property
    def name(self):
        """Gets the name of this MtSessionDetailsResponse.  # noqa: E501


        :return: The name of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MtSessionDetailsResponse.


        :param name: The name of this MtSessionDetailsResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MtSessionDetailsResponse.  # noqa: E501


        :return: The description of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MtSessionDetailsResponse.


        :param description: The description of this MtSessionDetailsResponse.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def data_version(self):
        """Gets the data_version of this MtSessionDetailsResponse.  # noqa: E501


        :return: The data_version of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this MtSessionDetailsResponse.


        :param data_version: The data_version of this MtSessionDetailsResponse.  # noqa: E501
        :type data_version: str
        """
        if self.local_vars_configuration.client_side_validation and data_version is None:  # noqa: E501
            raise ValueError("Invalid value for `data_version`, must not be `None`")  # noqa: E501

        self._data_version = data_version

    @property
    def action(self):
        """Gets the action of this MtSessionDetailsResponse.  # noqa: E501


        :return: The action of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: TrainingJobAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MtSessionDetailsResponse.


        :param action: The action of this MtSessionDetailsResponse.  # noqa: E501
        :type action: TrainingJobAction
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def model_params(self):
        """Gets the model_params of this MtSessionDetailsResponse.  # noqa: E501


        :return: The model_params of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: ModelParams
        """
        return self._model_params

    @model_params.setter
    def model_params(self, model_params):
        """Sets the model_params of this MtSessionDetailsResponse.


        :param model_params: The model_params of this MtSessionDetailsResponse.  # noqa: E501
        :type model_params: ModelParams
        """

        self._model_params = model_params

    @property
    def refine_config(self):
        """Gets the refine_config of this MtSessionDetailsResponse.  # noqa: E501


        :return: The refine_config of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: TrainingRefinementConfig
        """
        return self._refine_config

    @refine_config.setter
    def refine_config(self, refine_config):
        """Sets the refine_config of this MtSessionDetailsResponse.


        :param refine_config: The refine_config of this MtSessionDetailsResponse.  # noqa: E501
        :type refine_config: TrainingRefinementConfig
        """

        self._refine_config = refine_config

    @property
    def training_params(self):
        """Gets the training_params of this MtSessionDetailsResponse.  # noqa: E501


        :return: The training_params of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: TrainingJobParams
        """
        return self._training_params

    @training_params.setter
    def training_params(self, training_params):
        """Sets the training_params of this MtSessionDetailsResponse.


        :param training_params: The training_params of this MtSessionDetailsResponse.  # noqa: E501
        :type training_params: TrainingJobParams
        """
        if self.local_vars_configuration.client_side_validation and training_params is None:  # noqa: E501
            raise ValueError("Invalid value for `training_params`, must not be `None`")  # noqa: E501

        self._training_params = training_params

    @property
    def evaluation_params(self):
        """Gets the evaluation_params of this MtSessionDetailsResponse.  # noqa: E501


        :return: The evaluation_params of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: EvaluationJobParams
        """
        return self._evaluation_params

    @evaluation_params.setter
    def evaluation_params(self, evaluation_params):
        """Sets the evaluation_params of this MtSessionDetailsResponse.


        :param evaluation_params: The evaluation_params of this MtSessionDetailsResponse.  # noqa: E501
        :type evaluation_params: EvaluationJobParams
        """
        if self.local_vars_configuration.client_side_validation and evaluation_params is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation_params`, must not be `None`")  # noqa: E501

        self._evaluation_params = evaluation_params

    @property
    def early_stop_config(self):
        """Gets the early_stop_config of this MtSessionDetailsResponse.  # noqa: E501


        :return: The early_stop_config of this MtSessionDetailsResponse.  # noqa: E501
        :rtype: EarlyStopConfig
        """
        return self._early_stop_config

    @early_stop_config.setter
    def early_stop_config(self, early_stop_config):
        """Sets the early_stop_config of this MtSessionDetailsResponse.


        :param early_stop_config: The early_stop_config of this MtSessionDetailsResponse.  # noqa: E501
        :type early_stop_config: EarlyStopConfig
        """

        self._early_stop_config = early_stop_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtSessionDetailsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtSessionDetailsResponse):
            return True

        return self.to_dict() != other.to_dict()
