# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResponseGetSummaryStatsDsSummaryStatsGet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'explore': 'int',
        'compare': 'int',
        'global_search': 'int',
        'analyze': 'int',
        'vseq': 'int',
        'label': 'int'
    }

    attribute_map = {
        'explore': 'explore',
        'compare': 'compare',
        'global_search': 'global_search',
        'analyze': 'analyze',
        'vseq': 'vseq',
        'label': 'label'
    }

    def __init__(self, explore=None, compare=None, global_search=None, analyze=None, vseq=None, label=None, local_vars_configuration=None):  # noqa: E501
        """ResponseGetSummaryStatsDsSummaryStatsGet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._explore = None
        self._compare = None
        self._global_search = None
        self._analyze = None
        self._vseq = None
        self._label = None
        self.discriminator = None

        self.explore = explore
        self.compare = compare
        self.global_search = global_search
        self.analyze = analyze
        self.vseq = vseq
        self.label = label

    @property
    def explore(self):
        """Gets the explore of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The explore of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._explore

    @explore.setter
    def explore(self, explore):
        """Sets the explore of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param explore: The explore of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type explore: int
        """
        if self.local_vars_configuration.client_side_validation and explore is None:  # noqa: E501
            raise ValueError("Invalid value for `explore`, must not be `None`")  # noqa: E501

        self._explore = explore

    @property
    def compare(self):
        """Gets the compare of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The compare of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._compare

    @compare.setter
    def compare(self, compare):
        """Sets the compare of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param compare: The compare of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type compare: int
        """
        if self.local_vars_configuration.client_side_validation and compare is None:  # noqa: E501
            raise ValueError("Invalid value for `compare`, must not be `None`")  # noqa: E501

        self._compare = compare

    @property
    def global_search(self):
        """Gets the global_search of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The global_search of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._global_search

    @global_search.setter
    def global_search(self, global_search):
        """Sets the global_search of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param global_search: The global_search of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type global_search: int
        """
        if self.local_vars_configuration.client_side_validation and global_search is None:  # noqa: E501
            raise ValueError("Invalid value for `global_search`, must not be `None`")  # noqa: E501

        self._global_search = global_search

    @property
    def analyze(self):
        """Gets the analyze of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The analyze of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._analyze

    @analyze.setter
    def analyze(self, analyze):
        """Sets the analyze of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param analyze: The analyze of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type analyze: int
        """
        if self.local_vars_configuration.client_side_validation and analyze is None:  # noqa: E501
            raise ValueError("Invalid value for `analyze`, must not be `None`")  # noqa: E501

        self._analyze = analyze

    @property
    def vseq(self):
        """Gets the vseq of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The vseq of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param vseq: The vseq of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type vseq: int
        """
        if self.local_vars_configuration.client_side_validation and vseq is None:  # noqa: E501
            raise ValueError("Invalid value for `vseq`, must not be `None`")  # noqa: E501

        self._vseq = vseq

    @property
    def label(self):
        """Gets the label of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501


        :return: The label of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :rtype: int
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ResponseGetSummaryStatsDsSummaryStatsGet.


        :param label: The label of this ResponseGetSummaryStatsDsSummaryStatsGet.  # noqa: E501
        :type label: int
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseGetSummaryStatsDsSummaryStatsGet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseGetSummaryStatsDsSummaryStatsGet):
            return True

        return self.to_dict() != other.to_dict()
