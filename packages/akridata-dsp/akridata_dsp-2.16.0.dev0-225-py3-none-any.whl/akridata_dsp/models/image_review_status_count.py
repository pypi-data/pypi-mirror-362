# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ImageReviewStatusCount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pending': 'int',
        'in_progress': 'int',
        'complete': 'int',
        'retrieved': 'int'
    }

    attribute_map = {
        'pending': 'PENDING',
        'in_progress': 'IN_PROGRESS',
        'complete': 'COMPLETE',
        'retrieved': 'RETRIEVED'
    }

    def __init__(self, pending=0, in_progress=0, complete=0, retrieved=0, local_vars_configuration=None):  # noqa: E501
        """ImageReviewStatusCount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pending = None
        self._in_progress = None
        self._complete = None
        self._retrieved = None
        self.discriminator = None

        if pending is not None:
            self.pending = pending
        if in_progress is not None:
            self.in_progress = in_progress
        if complete is not None:
            self.complete = complete
        if retrieved is not None:
            self.retrieved = retrieved

    @property
    def pending(self):
        """Gets the pending of this ImageReviewStatusCount.  # noqa: E501


        :return: The pending of this ImageReviewStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this ImageReviewStatusCount.


        :param pending: The pending of this ImageReviewStatusCount.  # noqa: E501
        :type pending: int
        """

        self._pending = pending

    @property
    def in_progress(self):
        """Gets the in_progress of this ImageReviewStatusCount.  # noqa: E501


        :return: The in_progress of this ImageReviewStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this ImageReviewStatusCount.


        :param in_progress: The in_progress of this ImageReviewStatusCount.  # noqa: E501
        :type in_progress: int
        """

        self._in_progress = in_progress

    @property
    def complete(self):
        """Gets the complete of this ImageReviewStatusCount.  # noqa: E501


        :return: The complete of this ImageReviewStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this ImageReviewStatusCount.


        :param complete: The complete of this ImageReviewStatusCount.  # noqa: E501
        :type complete: int
        """

        self._complete = complete

    @property
    def retrieved(self):
        """Gets the retrieved of this ImageReviewStatusCount.  # noqa: E501


        :return: The retrieved of this ImageReviewStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._retrieved

    @retrieved.setter
    def retrieved(self, retrieved):
        """Sets the retrieved of this ImageReviewStatusCount.


        :param retrieved: The retrieved of this ImageReviewStatusCount.  # noqa: E501
        :type retrieved: int
        """

        self._retrieved = retrieved

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageReviewStatusCount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageReviewStatusCount):
            return True

        return self.to_dict() != other.to_dict()
