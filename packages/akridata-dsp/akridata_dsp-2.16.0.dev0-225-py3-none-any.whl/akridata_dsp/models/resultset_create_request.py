# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'dataset_id': 'str',
        'frames': 'Frames',
        'tags': 'list[str]',
        'source': 'ResultsetCreateExternalSource',
        'is_top_level': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'dataset_id': 'dataset_id',
        'frames': 'frames',
        'tags': 'tags',
        'source': 'source',
        'is_top_level': 'is_top_level'
    }

    def __init__(self, name=None, description=None, dataset_id=None, frames=None, tags=[], source=None, is_top_level=None, local_vars_configuration=None):  # noqa: E501
        """ResultsetCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._dataset_id = None
        self._frames = None
        self._tags = None
        self._source = None
        self._is_top_level = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.dataset_id = dataset_id
        if frames is not None:
            self.frames = frames
        if tags is not None:
            self.tags = tags
        if source is not None:
            self.source = source
        if is_top_level is not None:
            self.is_top_level = is_top_level

    @property
    def name(self):
        """Gets the name of this ResultsetCreateRequest.  # noqa: E501


        :return: The name of this ResultsetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResultsetCreateRequest.


        :param name: The name of this ResultsetCreateRequest.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ResultsetCreateRequest.  # noqa: E501


        :return: The description of this ResultsetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResultsetCreateRequest.


        :param description: The description of this ResultsetCreateRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ResultsetCreateRequest.  # noqa: E501


        :return: The dataset_id of this ResultsetCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ResultsetCreateRequest.


        :param dataset_id: The dataset_id of this ResultsetCreateRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def frames(self):
        """Gets the frames of this ResultsetCreateRequest.  # noqa: E501


        :return: The frames of this ResultsetCreateRequest.  # noqa: E501
        :rtype: Frames
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this ResultsetCreateRequest.


        :param frames: The frames of this ResultsetCreateRequest.  # noqa: E501
        :type frames: Frames
        """

        self._frames = frames

    @property
    def tags(self):
        """Gets the tags of this ResultsetCreateRequest.  # noqa: E501


        :return: The tags of this ResultsetCreateRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResultsetCreateRequest.


        :param tags: The tags of this ResultsetCreateRequest.  # noqa: E501
        :type tags: list[str]
        """
        if (self.local_vars_configuration.client_side_validation and
                tags is not None and len(tags) < 1):
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._tags = tags

    @property
    def source(self):
        """Gets the source of this ResultsetCreateRequest.  # noqa: E501


        :return: The source of this ResultsetCreateRequest.  # noqa: E501
        :rtype: ResultsetCreateExternalSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResultsetCreateRequest.


        :param source: The source of this ResultsetCreateRequest.  # noqa: E501
        :type source: ResultsetCreateExternalSource
        """

        self._source = source

    @property
    def is_top_level(self):
        """Gets the is_top_level of this ResultsetCreateRequest.  # noqa: E501


        :return: The is_top_level of this ResultsetCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this ResultsetCreateRequest.


        :param is_top_level: The is_top_level of this ResultsetCreateRequest.  # noqa: E501
        :type is_top_level: bool
        """

        self._is_top_level = is_top_level

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
