# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SimSearchInfoForDetailV2(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reqid': 'str',
        'version': 'int',
        'visibility': 'str',
        'sim_search_rid': 'str',
        'sim_search_title': 'str',
        'search_quality': 'ScenarioSearchQuality',
        'distance_metric': 'SimSearchDistanceMetric',
        'reduction_method': 'SimSearchReductionMethod',
        'reduction_size': 'int',
        'use_patch_restriction': 'bool',
        'sim_search_description': 'str',
        'vseq': 'VseqConfigResponse',
        'points_meta': 'dict[str, PointsMetaInfo]',
        'n_neighbors': 'int',
        'timestamp': 'str',
        'search_space': 'SimSearchSpace',
        'feature_space': 'FeatureSpace',
        'supported_feature_spaces': 'list[FeatureSpace]',
        'tags': 'list[str]',
        'trajectory_mode': 'bool',
        'roi_specs': 'RoiSpecs'
    }

    attribute_map = {
        'reqid': 'reqid',
        'version': 'version',
        'visibility': 'visibility',
        'sim_search_rid': 'sim_search_rid',
        'sim_search_title': 'sim_search_title',
        'search_quality': 'search_quality',
        'distance_metric': 'distance_metric',
        'reduction_method': 'reduction_method',
        'reduction_size': 'reduction_size',
        'use_patch_restriction': 'use_patch_restriction',
        'sim_search_description': 'sim_search_description',
        'vseq': 'vseq',
        'points_meta': 'points_meta',
        'n_neighbors': 'n_neighbors',
        'timestamp': 'timestamp',
        'search_space': 'search_space',
        'feature_space': 'feature_space',
        'supported_feature_spaces': 'supported_feature_spaces',
        'tags': 'tags',
        'trajectory_mode': 'trajectory_mode',
        'roi_specs': 'roi_specs'
    }

    def __init__(self, reqid=None, version=None, visibility=None, sim_search_rid=None, sim_search_title=None, search_quality=None, distance_metric=None, reduction_method=None, reduction_size=None, use_patch_restriction=False, sim_search_description=None, vseq=None, points_meta=None, n_neighbors=None, timestamp=None, search_space=None, feature_space=None, supported_feature_spaces=None, tags=None, trajectory_mode=None, roi_specs=None, local_vars_configuration=None):  # noqa: E501
        """SimSearchInfoForDetailV2 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reqid = None
        self._version = None
        self._visibility = None
        self._sim_search_rid = None
        self._sim_search_title = None
        self._search_quality = None
        self._distance_metric = None
        self._reduction_method = None
        self._reduction_size = None
        self._use_patch_restriction = None
        self._sim_search_description = None
        self._vseq = None
        self._points_meta = None
        self._n_neighbors = None
        self._timestamp = None
        self._search_space = None
        self._feature_space = None
        self._supported_feature_spaces = None
        self._tags = None
        self._trajectory_mode = None
        self._roi_specs = None
        self.discriminator = None

        self.reqid = reqid
        self.version = version
        self.visibility = visibility
        self.sim_search_rid = sim_search_rid
        self.sim_search_title = sim_search_title
        self.search_quality = search_quality
        if distance_metric is not None:
            self.distance_metric = distance_metric
        self.reduction_method = reduction_method
        self.reduction_size = reduction_size
        if use_patch_restriction is not None:
            self.use_patch_restriction = use_patch_restriction
        self.sim_search_description = sim_search_description
        if vseq is not None:
            self.vseq = vseq
        self.points_meta = points_meta
        self.n_neighbors = n_neighbors
        self.timestamp = timestamp
        self.search_space = search_space
        self.feature_space = feature_space
        self.supported_feature_spaces = supported_feature_spaces
        self.tags = tags
        if trajectory_mode is not None:
            self.trajectory_mode = trajectory_mode
        if roi_specs is not None:
            self.roi_specs = roi_specs

    @property
    def reqid(self):
        """Gets the reqid of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The reqid of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._reqid

    @reqid.setter
    def reqid(self, reqid):
        """Sets the reqid of this SimSearchInfoForDetailV2.


        :param reqid: The reqid of this SimSearchInfoForDetailV2.  # noqa: E501
        :type reqid: str
        """
        if self.local_vars_configuration.client_side_validation and reqid is None:  # noqa: E501
            raise ValueError("Invalid value for `reqid`, must not be `None`")  # noqa: E501

        self._reqid = reqid

    @property
    def version(self):
        """Gets the version of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The version of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SimSearchInfoForDetailV2.


        :param version: The version of this SimSearchInfoForDetailV2.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def visibility(self):
        """Gets the visibility of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The visibility of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this SimSearchInfoForDetailV2.


        :param visibility: The visibility of this SimSearchInfoForDetailV2.  # noqa: E501
        :type visibility: str
        """
        if self.local_vars_configuration.client_side_validation and visibility is None:  # noqa: E501
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def sim_search_rid(self):
        """Gets the sim_search_rid of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The sim_search_rid of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_rid

    @sim_search_rid.setter
    def sim_search_rid(self, sim_search_rid):
        """Sets the sim_search_rid of this SimSearchInfoForDetailV2.


        :param sim_search_rid: The sim_search_rid of this SimSearchInfoForDetailV2.  # noqa: E501
        :type sim_search_rid: str
        """
        if self.local_vars_configuration.client_side_validation and sim_search_rid is None:  # noqa: E501
            raise ValueError("Invalid value for `sim_search_rid`, must not be `None`")  # noqa: E501

        self._sim_search_rid = sim_search_rid

    @property
    def sim_search_title(self):
        """Gets the sim_search_title of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The sim_search_title of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_title

    @sim_search_title.setter
    def sim_search_title(self, sim_search_title):
        """Sets the sim_search_title of this SimSearchInfoForDetailV2.


        :param sim_search_title: The sim_search_title of this SimSearchInfoForDetailV2.  # noqa: E501
        :type sim_search_title: str
        """
        if self.local_vars_configuration.client_side_validation and sim_search_title is None:  # noqa: E501
            raise ValueError("Invalid value for `sim_search_title`, must not be `None`")  # noqa: E501

        self._sim_search_title = sim_search_title

    @property
    def search_quality(self):
        """Gets the search_quality of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The search_quality of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: ScenarioSearchQuality
        """
        return self._search_quality

    @search_quality.setter
    def search_quality(self, search_quality):
        """Sets the search_quality of this SimSearchInfoForDetailV2.


        :param search_quality: The search_quality of this SimSearchInfoForDetailV2.  # noqa: E501
        :type search_quality: ScenarioSearchQuality
        """
        if self.local_vars_configuration.client_side_validation and search_quality is None:  # noqa: E501
            raise ValueError("Invalid value for `search_quality`, must not be `None`")  # noqa: E501

        self._search_quality = search_quality

    @property
    def distance_metric(self):
        """Gets the distance_metric of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The distance_metric of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: SimSearchDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this SimSearchInfoForDetailV2.


        :param distance_metric: The distance_metric of this SimSearchInfoForDetailV2.  # noqa: E501
        :type distance_metric: SimSearchDistanceMetric
        """

        self._distance_metric = distance_metric

    @property
    def reduction_method(self):
        """Gets the reduction_method of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The reduction_method of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: SimSearchReductionMethod
        """
        return self._reduction_method

    @reduction_method.setter
    def reduction_method(self, reduction_method):
        """Sets the reduction_method of this SimSearchInfoForDetailV2.


        :param reduction_method: The reduction_method of this SimSearchInfoForDetailV2.  # noqa: E501
        :type reduction_method: SimSearchReductionMethod
        """
        if self.local_vars_configuration.client_side_validation and reduction_method is None:  # noqa: E501
            raise ValueError("Invalid value for `reduction_method`, must not be `None`")  # noqa: E501

        self._reduction_method = reduction_method

    @property
    def reduction_size(self):
        """Gets the reduction_size of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The reduction_size of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: int
        """
        return self._reduction_size

    @reduction_size.setter
    def reduction_size(self, reduction_size):
        """Sets the reduction_size of this SimSearchInfoForDetailV2.


        :param reduction_size: The reduction_size of this SimSearchInfoForDetailV2.  # noqa: E501
        :type reduction_size: int
        """
        if self.local_vars_configuration.client_side_validation and reduction_size is None:  # noqa: E501
            raise ValueError("Invalid value for `reduction_size`, must not be `None`")  # noqa: E501

        self._reduction_size = reduction_size

    @property
    def use_patch_restriction(self):
        """Gets the use_patch_restriction of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The use_patch_restriction of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: bool
        """
        return self._use_patch_restriction

    @use_patch_restriction.setter
    def use_patch_restriction(self, use_patch_restriction):
        """Sets the use_patch_restriction of this SimSearchInfoForDetailV2.


        :param use_patch_restriction: The use_patch_restriction of this SimSearchInfoForDetailV2.  # noqa: E501
        :type use_patch_restriction: bool
        """

        self._use_patch_restriction = use_patch_restriction

    @property
    def sim_search_description(self):
        """Gets the sim_search_description of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The sim_search_description of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._sim_search_description

    @sim_search_description.setter
    def sim_search_description(self, sim_search_description):
        """Sets the sim_search_description of this SimSearchInfoForDetailV2.


        :param sim_search_description: The sim_search_description of this SimSearchInfoForDetailV2.  # noqa: E501
        :type sim_search_description: str
        """
        if self.local_vars_configuration.client_side_validation and sim_search_description is None:  # noqa: E501
            raise ValueError("Invalid value for `sim_search_description`, must not be `None`")  # noqa: E501

        self._sim_search_description = sim_search_description

    @property
    def vseq(self):
        """Gets the vseq of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The vseq of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this SimSearchInfoForDetailV2.


        :param vseq: The vseq of this SimSearchInfoForDetailV2.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    @property
    def points_meta(self):
        """Gets the points_meta of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The points_meta of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: dict[str, PointsMetaInfo]
        """
        return self._points_meta

    @points_meta.setter
    def points_meta(self, points_meta):
        """Sets the points_meta of this SimSearchInfoForDetailV2.


        :param points_meta: The points_meta of this SimSearchInfoForDetailV2.  # noqa: E501
        :type points_meta: dict[str, PointsMetaInfo]
        """
        if self.local_vars_configuration.client_side_validation and points_meta is None:  # noqa: E501
            raise ValueError("Invalid value for `points_meta`, must not be `None`")  # noqa: E501

        self._points_meta = points_meta

    @property
    def n_neighbors(self):
        """Gets the n_neighbors of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The n_neighbors of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: int
        """
        return self._n_neighbors

    @n_neighbors.setter
    def n_neighbors(self, n_neighbors):
        """Sets the n_neighbors of this SimSearchInfoForDetailV2.


        :param n_neighbors: The n_neighbors of this SimSearchInfoForDetailV2.  # noqa: E501
        :type n_neighbors: int
        """
        if self.local_vars_configuration.client_side_validation and n_neighbors is None:  # noqa: E501
            raise ValueError("Invalid value for `n_neighbors`, must not be `None`")  # noqa: E501

        self._n_neighbors = n_neighbors

    @property
    def timestamp(self):
        """Gets the timestamp of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The timestamp of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SimSearchInfoForDetailV2.


        :param timestamp: The timestamp of this SimSearchInfoForDetailV2.  # noqa: E501
        :type timestamp: str
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def search_space(self):
        """Gets the search_space of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The search_space of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: SimSearchSpace
        """
        return self._search_space

    @search_space.setter
    def search_space(self, search_space):
        """Sets the search_space of this SimSearchInfoForDetailV2.


        :param search_space: The search_space of this SimSearchInfoForDetailV2.  # noqa: E501
        :type search_space: SimSearchSpace
        """
        if self.local_vars_configuration.client_side_validation and search_space is None:  # noqa: E501
            raise ValueError("Invalid value for `search_space`, must not be `None`")  # noqa: E501

        self._search_space = search_space

    @property
    def feature_space(self):
        """Gets the feature_space of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The feature_space of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: FeatureSpace
        """
        return self._feature_space

    @feature_space.setter
    def feature_space(self, feature_space):
        """Sets the feature_space of this SimSearchInfoForDetailV2.


        :param feature_space: The feature_space of this SimSearchInfoForDetailV2.  # noqa: E501
        :type feature_space: FeatureSpace
        """
        if self.local_vars_configuration.client_side_validation and feature_space is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_space`, must not be `None`")  # noqa: E501

        self._feature_space = feature_space

    @property
    def supported_feature_spaces(self):
        """Gets the supported_feature_spaces of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The supported_feature_spaces of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: list[FeatureSpace]
        """
        return self._supported_feature_spaces

    @supported_feature_spaces.setter
    def supported_feature_spaces(self, supported_feature_spaces):
        """Sets the supported_feature_spaces of this SimSearchInfoForDetailV2.


        :param supported_feature_spaces: The supported_feature_spaces of this SimSearchInfoForDetailV2.  # noqa: E501
        :type supported_feature_spaces: list[FeatureSpace]
        """
        if self.local_vars_configuration.client_side_validation and supported_feature_spaces is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_feature_spaces`, must not be `None`")  # noqa: E501

        self._supported_feature_spaces = supported_feature_spaces

    @property
    def tags(self):
        """Gets the tags of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The tags of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SimSearchInfoForDetailV2.


        :param tags: The tags of this SimSearchInfoForDetailV2.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def trajectory_mode(self):
        """Gets the trajectory_mode of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The trajectory_mode of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: bool
        """
        return self._trajectory_mode

    @trajectory_mode.setter
    def trajectory_mode(self, trajectory_mode):
        """Sets the trajectory_mode of this SimSearchInfoForDetailV2.


        :param trajectory_mode: The trajectory_mode of this SimSearchInfoForDetailV2.  # noqa: E501
        :type trajectory_mode: bool
        """

        self._trajectory_mode = trajectory_mode

    @property
    def roi_specs(self):
        """Gets the roi_specs of this SimSearchInfoForDetailV2.  # noqa: E501


        :return: The roi_specs of this SimSearchInfoForDetailV2.  # noqa: E501
        :rtype: RoiSpecs
        """
        return self._roi_specs

    @roi_specs.setter
    def roi_specs(self, roi_specs):
        """Sets the roi_specs of this SimSearchInfoForDetailV2.


        :param roi_specs: The roi_specs of this SimSearchInfoForDetailV2.  # noqa: E501
        :type roi_specs: RoiSpecs
        """

        self._roi_specs = roi_specs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimSearchInfoForDetailV2):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimSearchInfoForDetailV2):
            return True

        return self.to_dict() != other.to_dict()
