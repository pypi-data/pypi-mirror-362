# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class AnomalySegmentationModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'clone_model_id': 'str',
        'model_id': 'str',
        'created_at': 'str',
        'created_by': 'str',
        'spec_id': 'str',
        'session_id': 'str',
        'status': 'AnomalySegmentationModelStatus',
        'error': 'ErrorResponse',
        'is_archived': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'clone_model_id': 'clone_model_id',
        'model_id': 'model_id',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'spec_id': 'spec_id',
        'session_id': 'session_id',
        'status': 'status',
        'error': 'error',
        'is_archived': 'is_archived'
    }

    def __init__(self, name=None, description=None, clone_model_id=None, model_id=None, created_at=None, created_by=None, spec_id=None, session_id=None, status=None, error=None, is_archived=None, local_vars_configuration=None):  # noqa: E501
        """AnomalySegmentationModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._clone_model_id = None
        self._model_id = None
        self._created_at = None
        self._created_by = None
        self._spec_id = None
        self._session_id = None
        self._status = None
        self._error = None
        self._is_archived = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        if clone_model_id is not None:
            self.clone_model_id = clone_model_id
        self.model_id = model_id
        self.created_at = created_at
        self.created_by = created_by
        self.spec_id = spec_id
        if session_id is not None:
            self.session_id = session_id
        self.status = status
        if error is not None:
            self.error = error
        if is_archived is not None:
            self.is_archived = is_archived

    @property
    def name(self):
        """Gets the name of this AnomalySegmentationModel.  # noqa: E501


        :return: The name of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnomalySegmentationModel.


        :param name: The name of this AnomalySegmentationModel.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 50):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 3):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this AnomalySegmentationModel.  # noqa: E501


        :return: The description of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AnomalySegmentationModel.


        :param description: The description of this AnomalySegmentationModel.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def clone_model_id(self):
        """Gets the clone_model_id of this AnomalySegmentationModel.  # noqa: E501


        :return: The clone_model_id of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._clone_model_id

    @clone_model_id.setter
    def clone_model_id(self, clone_model_id):
        """Sets the clone_model_id of this AnomalySegmentationModel.


        :param clone_model_id: The clone_model_id of this AnomalySegmentationModel.  # noqa: E501
        :type clone_model_id: str
        """

        self._clone_model_id = clone_model_id

    @property
    def model_id(self):
        """Gets the model_id of this AnomalySegmentationModel.  # noqa: E501


        :return: The model_id of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this AnomalySegmentationModel.


        :param model_id: The model_id of this AnomalySegmentationModel.  # noqa: E501
        :type model_id: str
        """
        if self.local_vars_configuration.client_side_validation and model_id is None:  # noqa: E501
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def created_at(self):
        """Gets the created_at of this AnomalySegmentationModel.  # noqa: E501


        :return: The created_at of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnomalySegmentationModel.


        :param created_at: The created_at of this AnomalySegmentationModel.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this AnomalySegmentationModel.  # noqa: E501


        :return: The created_by of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AnomalySegmentationModel.


        :param created_by: The created_by of this AnomalySegmentationModel.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def spec_id(self):
        """Gets the spec_id of this AnomalySegmentationModel.  # noqa: E501


        :return: The spec_id of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._spec_id

    @spec_id.setter
    def spec_id(self, spec_id):
        """Sets the spec_id of this AnomalySegmentationModel.


        :param spec_id: The spec_id of this AnomalySegmentationModel.  # noqa: E501
        :type spec_id: str
        """
        if self.local_vars_configuration.client_side_validation and spec_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spec_id`, must not be `None`")  # noqa: E501

        self._spec_id = spec_id

    @property
    def session_id(self):
        """Gets the session_id of this AnomalySegmentationModel.  # noqa: E501


        :return: The session_id of this AnomalySegmentationModel.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this AnomalySegmentationModel.


        :param session_id: The session_id of this AnomalySegmentationModel.  # noqa: E501
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def status(self):
        """Gets the status of this AnomalySegmentationModel.  # noqa: E501


        :return: The status of this AnomalySegmentationModel.  # noqa: E501
        :rtype: AnomalySegmentationModelStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AnomalySegmentationModel.


        :param status: The status of this AnomalySegmentationModel.  # noqa: E501
        :type status: AnomalySegmentationModelStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error(self):
        """Gets the error of this AnomalySegmentationModel.  # noqa: E501


        :return: The error of this AnomalySegmentationModel.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AnomalySegmentationModel.


        :param error: The error of this AnomalySegmentationModel.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def is_archived(self):
        """Gets the is_archived of this AnomalySegmentationModel.  # noqa: E501


        :return: The is_archived of this AnomalySegmentationModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this AnomalySegmentationModel.


        :param is_archived: The is_archived of this AnomalySegmentationModel.  # noqa: E501
        :type is_archived: bool
        """

        self._is_archived = is_archived

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnomalySegmentationModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnomalySegmentationModel):
            return True

        return self.to_dict() != other.to_dict()
