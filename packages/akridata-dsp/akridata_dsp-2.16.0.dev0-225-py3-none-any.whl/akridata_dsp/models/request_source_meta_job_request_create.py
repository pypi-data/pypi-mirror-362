# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RequestSourceMetaJobRequestCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vcs_query_id': 'str',
        'text_pipeline_id': 'str',
        'feature_table_alias': 'str'
    }

    attribute_map = {
        'vcs_query_id': 'vcs_query_id',
        'text_pipeline_id': 'text_pipeline_id',
        'feature_table_alias': 'feature_table_alias'
    }

    def __init__(self, vcs_query_id=None, text_pipeline_id=None, feature_table_alias=None, local_vars_configuration=None):  # noqa: E501
        """RequestSourceMetaJobRequestCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._vcs_query_id = None
        self._text_pipeline_id = None
        self._feature_table_alias = None
        self.discriminator = None

        if vcs_query_id is not None:
            self.vcs_query_id = vcs_query_id
        if text_pipeline_id is not None:
            self.text_pipeline_id = text_pipeline_id
        if feature_table_alias is not None:
            self.feature_table_alias = feature_table_alias

    @property
    def vcs_query_id(self):
        """Gets the vcs_query_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501


        :return: The vcs_query_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._vcs_query_id

    @vcs_query_id.setter
    def vcs_query_id(self, vcs_query_id):
        """Sets the vcs_query_id of this RequestSourceMetaJobRequestCreate.


        :param vcs_query_id: The vcs_query_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :type vcs_query_id: str
        """

        self._vcs_query_id = vcs_query_id

    @property
    def text_pipeline_id(self):
        """Gets the text_pipeline_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501


        :return: The text_pipeline_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._text_pipeline_id

    @text_pipeline_id.setter
    def text_pipeline_id(self, text_pipeline_id):
        """Sets the text_pipeline_id of this RequestSourceMetaJobRequestCreate.


        :param text_pipeline_id: The text_pipeline_id of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :type text_pipeline_id: str
        """

        self._text_pipeline_id = text_pipeline_id

    @property
    def feature_table_alias(self):
        """Gets the feature_table_alias of this RequestSourceMetaJobRequestCreate.  # noqa: E501

        In case there are multiple visualizable table with a given pipeline, User should be prompted to select table, alias name to be passed of selected table in this field. In case alias name is not passed then first visualizable table with given pipeline is used to create job  # noqa: E501

        :return: The feature_table_alias of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :rtype: str
        """
        return self._feature_table_alias

    @feature_table_alias.setter
    def feature_table_alias(self, feature_table_alias):
        """Sets the feature_table_alias of this RequestSourceMetaJobRequestCreate.

        In case there are multiple visualizable table with a given pipeline, User should be prompted to select table, alias name to be passed of selected table in this field. In case alias name is not passed then first visualizable table with given pipeline is used to create job  # noqa: E501

        :param feature_table_alias: The feature_table_alias of this RequestSourceMetaJobRequestCreate.  # noqa: E501
        :type feature_table_alias: str
        """

        self._feature_table_alias = feature_table_alias

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestSourceMetaJobRequestCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestSourceMetaJobRequestCreate):
            return True

        return self.to_dict() != other.to_dict()
