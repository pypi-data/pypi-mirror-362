# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class Scenario(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'int',
        'name': 'str',
        'init_dataset_id': 'str',
        'init_dataset_name': 'str',
        'supported_pipelines': 'list[SupportedPipeline]',
        'scenario_id': 'str',
        'num_executions': 'int',
        'last_execution_at': 'str',
        'created_at': 'str',
        'num_query_points': 'int',
        'is_top_level': 'bool',
        'archived': 'bool',
        'vseq': 'VseqConfigResponse',
        'roi_specs': 'RoiSpecs'
    }

    attribute_map = {
        'version': 'version',
        'name': 'name',
        'init_dataset_id': 'init_dataset_id',
        'init_dataset_name': 'init_dataset_name',
        'supported_pipelines': 'supported_pipelines',
        'scenario_id': 'scenario_id',
        'num_executions': 'num_executions',
        'last_execution_at': 'last_execution_at',
        'created_at': 'created_at',
        'num_query_points': 'num_query_points',
        'is_top_level': 'is_top_level',
        'archived': 'archived',
        'vseq': 'vseq',
        'roi_specs': 'roi_specs'
    }

    def __init__(self, version=None, name=None, init_dataset_id=None, init_dataset_name=None, supported_pipelines=None, scenario_id=None, num_executions=None, last_execution_at=None, created_at=None, num_query_points=None, is_top_level=None, archived=None, vseq=None, roi_specs=None, local_vars_configuration=None):  # noqa: E501
        """Scenario - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._name = None
        self._init_dataset_id = None
        self._init_dataset_name = None
        self._supported_pipelines = None
        self._scenario_id = None
        self._num_executions = None
        self._last_execution_at = None
        self._created_at = None
        self._num_query_points = None
        self._is_top_level = None
        self._archived = None
        self._vseq = None
        self._roi_specs = None
        self.discriminator = None

        self.version = version
        self.name = name
        self.init_dataset_id = init_dataset_id
        self.init_dataset_name = init_dataset_name
        self.supported_pipelines = supported_pipelines
        self.scenario_id = scenario_id
        if num_executions is not None:
            self.num_executions = num_executions
        if last_execution_at is not None:
            self.last_execution_at = last_execution_at
        self.created_at = created_at
        self.num_query_points = num_query_points
        self.is_top_level = is_top_level
        self.archived = archived
        if vseq is not None:
            self.vseq = vseq
        if roi_specs is not None:
            self.roi_specs = roi_specs

    @property
    def version(self):
        """Gets the version of this Scenario.  # noqa: E501


        :return: The version of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Scenario.


        :param version: The version of this Scenario.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def name(self):
        """Gets the name of this Scenario.  # noqa: E501


        :return: The name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scenario.


        :param name: The name of this Scenario.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def init_dataset_id(self):
        """Gets the init_dataset_id of this Scenario.  # noqa: E501


        :return: The init_dataset_id of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._init_dataset_id

    @init_dataset_id.setter
    def init_dataset_id(self, init_dataset_id):
        """Sets the init_dataset_id of this Scenario.


        :param init_dataset_id: The init_dataset_id of this Scenario.  # noqa: E501
        :type init_dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and init_dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `init_dataset_id`, must not be `None`")  # noqa: E501

        self._init_dataset_id = init_dataset_id

    @property
    def init_dataset_name(self):
        """Gets the init_dataset_name of this Scenario.  # noqa: E501


        :return: The init_dataset_name of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._init_dataset_name

    @init_dataset_name.setter
    def init_dataset_name(self, init_dataset_name):
        """Sets the init_dataset_name of this Scenario.


        :param init_dataset_name: The init_dataset_name of this Scenario.  # noqa: E501
        :type init_dataset_name: str
        """
        if self.local_vars_configuration.client_side_validation and init_dataset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `init_dataset_name`, must not be `None`")  # noqa: E501

        self._init_dataset_name = init_dataset_name

    @property
    def supported_pipelines(self):
        """Gets the supported_pipelines of this Scenario.  # noqa: E501


        :return: The supported_pipelines of this Scenario.  # noqa: E501
        :rtype: list[SupportedPipeline]
        """
        return self._supported_pipelines

    @supported_pipelines.setter
    def supported_pipelines(self, supported_pipelines):
        """Sets the supported_pipelines of this Scenario.


        :param supported_pipelines: The supported_pipelines of this Scenario.  # noqa: E501
        :type supported_pipelines: list[SupportedPipeline]
        """
        if self.local_vars_configuration.client_side_validation and supported_pipelines is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_pipelines`, must not be `None`")  # noqa: E501

        self._supported_pipelines = supported_pipelines

    @property
    def scenario_id(self):
        """Gets the scenario_id of this Scenario.  # noqa: E501


        :return: The scenario_id of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this Scenario.


        :param scenario_id: The scenario_id of this Scenario.  # noqa: E501
        :type scenario_id: str
        """
        if self.local_vars_configuration.client_side_validation and scenario_id is None:  # noqa: E501
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def num_executions(self):
        """Gets the num_executions of this Scenario.  # noqa: E501


        :return: The num_executions of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._num_executions

    @num_executions.setter
    def num_executions(self, num_executions):
        """Sets the num_executions of this Scenario.


        :param num_executions: The num_executions of this Scenario.  # noqa: E501
        :type num_executions: int
        """

        self._num_executions = num_executions

    @property
    def last_execution_at(self):
        """Gets the last_execution_at of this Scenario.  # noqa: E501


        :return: The last_execution_at of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._last_execution_at

    @last_execution_at.setter
    def last_execution_at(self, last_execution_at):
        """Sets the last_execution_at of this Scenario.


        :param last_execution_at: The last_execution_at of this Scenario.  # noqa: E501
        :type last_execution_at: str
        """

        self._last_execution_at = last_execution_at

    @property
    def created_at(self):
        """Gets the created_at of this Scenario.  # noqa: E501


        :return: The created_at of this Scenario.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Scenario.


        :param created_at: The created_at of this Scenario.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def num_query_points(self):
        """Gets the num_query_points of this Scenario.  # noqa: E501


        :return: The num_query_points of this Scenario.  # noqa: E501
        :rtype: int
        """
        return self._num_query_points

    @num_query_points.setter
    def num_query_points(self, num_query_points):
        """Sets the num_query_points of this Scenario.


        :param num_query_points: The num_query_points of this Scenario.  # noqa: E501
        :type num_query_points: int
        """
        if self.local_vars_configuration.client_side_validation and num_query_points is None:  # noqa: E501
            raise ValueError("Invalid value for `num_query_points`, must not be `None`")  # noqa: E501

        self._num_query_points = num_query_points

    @property
    def is_top_level(self):
        """Gets the is_top_level of this Scenario.  # noqa: E501


        :return: The is_top_level of this Scenario.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this Scenario.


        :param is_top_level: The is_top_level of this Scenario.  # noqa: E501
        :type is_top_level: bool
        """
        if self.local_vars_configuration.client_side_validation and is_top_level is None:  # noqa: E501
            raise ValueError("Invalid value for `is_top_level`, must not be `None`")  # noqa: E501

        self._is_top_level = is_top_level

    @property
    def archived(self):
        """Gets the archived of this Scenario.  # noqa: E501


        :return: The archived of this Scenario.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Scenario.


        :param archived: The archived of this Scenario.  # noqa: E501
        :type archived: bool
        """
        if self.local_vars_configuration.client_side_validation and archived is None:  # noqa: E501
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def vseq(self):
        """Gets the vseq of this Scenario.  # noqa: E501


        :return: The vseq of this Scenario.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this Scenario.


        :param vseq: The vseq of this Scenario.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    @property
    def roi_specs(self):
        """Gets the roi_specs of this Scenario.  # noqa: E501


        :return: The roi_specs of this Scenario.  # noqa: E501
        :rtype: RoiSpecs
        """
        return self._roi_specs

    @roi_specs.setter
    def roi_specs(self, roi_specs):
        """Sets the roi_specs of this Scenario.


        :param roi_specs: The roi_specs of this Scenario.  # noqa: E501
        :type roi_specs: RoiSpecs
        """

        self._roi_specs = roi_specs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scenario):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Scenario):
            return True

        return self.to_dict() != other.to_dict()
