# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetDataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resultset_name': 'str',
        'dataset_id': 'str',
        'pipeline_id': 'str',
        'dataset_data_type': 'str',
        'object_id': 'str',
        'bucket_name': 'str',
        'presigned_url': 'str',
        'vseq_config': 'VseqConfigResponse',
        'expiry': 'str',
        'num_frames': 'int'
    }

    attribute_map = {
        'resultset_name': 'resultset_name',
        'dataset_id': 'dataset_id',
        'pipeline_id': 'pipeline_id',
        'dataset_data_type': 'dataset_data_type',
        'object_id': 'object_id',
        'bucket_name': 'bucket_name',
        'presigned_url': 'presigned_url',
        'vseq_config': 'vseq_config',
        'expiry': 'expiry',
        'num_frames': 'num_frames'
    }

    def __init__(self, resultset_name=None, dataset_id=None, pipeline_id=None, dataset_data_type=None, object_id=None, bucket_name=None, presigned_url=None, vseq_config=None, expiry=None, num_frames=None, local_vars_configuration=None):  # noqa: E501
        """ResultsetDataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._resultset_name = None
        self._dataset_id = None
        self._pipeline_id = None
        self._dataset_data_type = None
        self._object_id = None
        self._bucket_name = None
        self._presigned_url = None
        self._vseq_config = None
        self._expiry = None
        self._num_frames = None
        self.discriminator = None

        self.resultset_name = resultset_name
        self.dataset_id = dataset_id
        self.pipeline_id = pipeline_id
        self.dataset_data_type = dataset_data_type
        self.object_id = object_id
        self.bucket_name = bucket_name
        self.presigned_url = presigned_url
        if vseq_config is not None:
            self.vseq_config = vseq_config
        self.expiry = expiry
        self.num_frames = num_frames

    @property
    def resultset_name(self):
        """Gets the resultset_name of this ResultsetDataResponse.  # noqa: E501


        :return: The resultset_name of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._resultset_name

    @resultset_name.setter
    def resultset_name(self, resultset_name):
        """Sets the resultset_name of this ResultsetDataResponse.


        :param resultset_name: The resultset_name of this ResultsetDataResponse.  # noqa: E501
        :type resultset_name: str
        """
        if self.local_vars_configuration.client_side_validation and resultset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `resultset_name`, must not be `None`")  # noqa: E501

        self._resultset_name = resultset_name

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ResultsetDataResponse.  # noqa: E501


        :return: The dataset_id of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ResultsetDataResponse.


        :param dataset_id: The dataset_id of this ResultsetDataResponse.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this ResultsetDataResponse.  # noqa: E501


        :return: The pipeline_id of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this ResultsetDataResponse.


        :param pipeline_id: The pipeline_id of this ResultsetDataResponse.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def dataset_data_type(self):
        """Gets the dataset_data_type of this ResultsetDataResponse.  # noqa: E501


        :return: The dataset_data_type of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_data_type

    @dataset_data_type.setter
    def dataset_data_type(self, dataset_data_type):
        """Sets the dataset_data_type of this ResultsetDataResponse.


        :param dataset_data_type: The dataset_data_type of this ResultsetDataResponse.  # noqa: E501
        :type dataset_data_type: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_data_type`, must not be `None`")  # noqa: E501

        self._dataset_data_type = dataset_data_type

    @property
    def object_id(self):
        """Gets the object_id of this ResultsetDataResponse.  # noqa: E501


        :return: The object_id of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ResultsetDataResponse.


        :param object_id: The object_id of this ResultsetDataResponse.  # noqa: E501
        :type object_id: str
        """
        if self.local_vars_configuration.client_side_validation and object_id is None:  # noqa: E501
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ResultsetDataResponse.  # noqa: E501


        :return: The bucket_name of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ResultsetDataResponse.


        :param bucket_name: The bucket_name of this ResultsetDataResponse.  # noqa: E501
        :type bucket_name: str
        """
        if self.local_vars_configuration.client_side_validation and bucket_name is None:  # noqa: E501
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")  # noqa: E501

        self._bucket_name = bucket_name

    @property
    def presigned_url(self):
        """Gets the presigned_url of this ResultsetDataResponse.  # noqa: E501


        :return: The presigned_url of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._presigned_url

    @presigned_url.setter
    def presigned_url(self, presigned_url):
        """Sets the presigned_url of this ResultsetDataResponse.


        :param presigned_url: The presigned_url of this ResultsetDataResponse.  # noqa: E501
        :type presigned_url: str
        """
        if self.local_vars_configuration.client_side_validation and presigned_url is None:  # noqa: E501
            raise ValueError("Invalid value for `presigned_url`, must not be `None`")  # noqa: E501

        self._presigned_url = presigned_url

    @property
    def vseq_config(self):
        """Gets the vseq_config of this ResultsetDataResponse.  # noqa: E501


        :return: The vseq_config of this ResultsetDataResponse.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq_config

    @vseq_config.setter
    def vseq_config(self, vseq_config):
        """Sets the vseq_config of this ResultsetDataResponse.


        :param vseq_config: The vseq_config of this ResultsetDataResponse.  # noqa: E501
        :type vseq_config: VseqConfigResponse
        """

        self._vseq_config = vseq_config

    @property
    def expiry(self):
        """Gets the expiry of this ResultsetDataResponse.  # noqa: E501

        expiry time in UTC format  # noqa: E501

        :return: The expiry of this ResultsetDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ResultsetDataResponse.

        expiry time in UTC format  # noqa: E501

        :param expiry: The expiry of this ResultsetDataResponse.  # noqa: E501
        :type expiry: str
        """
        if self.local_vars_configuration.client_side_validation and expiry is None:  # noqa: E501
            raise ValueError("Invalid value for `expiry`, must not be `None`")  # noqa: E501

        self._expiry = expiry

    @property
    def num_frames(self):
        """Gets the num_frames of this ResultsetDataResponse.  # noqa: E501


        :return: The num_frames of this ResultsetDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_frames

    @num_frames.setter
    def num_frames(self, num_frames):
        """Sets the num_frames of this ResultsetDataResponse.


        :param num_frames: The num_frames of this ResultsetDataResponse.  # noqa: E501
        :type num_frames: int
        """
        if self.local_vars_configuration.client_side_validation and num_frames is None:  # noqa: E501
            raise ValueError("Invalid value for `num_frames`, must not be `None`")  # noqa: E501

        self._num_frames = num_frames

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetDataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetDataResponse):
            return True

        return self.to_dict() != other.to_dict()
