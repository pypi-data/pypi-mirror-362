# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ViewDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'view_id': 'str',
        'view_name': 'str',
        'tables': 'list[list[object]]',
        'columns': 'list[object]',
        'udf_columns': 'list[object]',
        'udfs_info': 'list[object]',
        'created_at': 'str',
        'created_by': 'str',
        'invalid': 'bool'
    }

    attribute_map = {
        'view_id': 'view_id',
        'view_name': 'view_name',
        'tables': 'tables',
        'columns': 'columns',
        'udf_columns': 'udf_columns',
        'udfs_info': 'udfs_info',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'invalid': 'invalid'
    }

    def __init__(self, view_id=None, view_name=None, tables=None, columns=None, udf_columns=None, udfs_info=None, created_at=None, created_by=None, invalid=None, local_vars_configuration=None):  # noqa: E501
        """ViewDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._view_id = None
        self._view_name = None
        self._tables = None
        self._columns = None
        self._udf_columns = None
        self._udfs_info = None
        self._created_at = None
        self._created_by = None
        self._invalid = None
        self.discriminator = None

        self.view_id = view_id
        self.view_name = view_name
        self.tables = tables
        self.columns = columns
        if udf_columns is not None:
            self.udf_columns = udf_columns
        if udfs_info is not None:
            self.udfs_info = udfs_info
        self.created_at = created_at
        self.created_by = created_by
        self.invalid = invalid

    @property
    def view_id(self):
        """Gets the view_id of this ViewDetails.  # noqa: E501


        :return: The view_id of this ViewDetails.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this ViewDetails.


        :param view_id: The view_id of this ViewDetails.  # noqa: E501
        :type view_id: str
        """
        if self.local_vars_configuration.client_side_validation and view_id is None:  # noqa: E501
            raise ValueError("Invalid value for `view_id`, must not be `None`")  # noqa: E501

        self._view_id = view_id

    @property
    def view_name(self):
        """Gets the view_name of this ViewDetails.  # noqa: E501


        :return: The view_name of this ViewDetails.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this ViewDetails.


        :param view_name: The view_name of this ViewDetails.  # noqa: E501
        :type view_name: str
        """
        if self.local_vars_configuration.client_side_validation and view_name is None:  # noqa: E501
            raise ValueError("Invalid value for `view_name`, must not be `None`")  # noqa: E501

        self._view_name = view_name

    @property
    def tables(self):
        """Gets the tables of this ViewDetails.  # noqa: E501


        :return: The tables of this ViewDetails.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this ViewDetails.


        :param tables: The tables of this ViewDetails.  # noqa: E501
        :type tables: list[list[object]]
        """
        if self.local_vars_configuration.client_side_validation and tables is None:  # noqa: E501
            raise ValueError("Invalid value for `tables`, must not be `None`")  # noqa: E501

        self._tables = tables

    @property
    def columns(self):
        """Gets the columns of this ViewDetails.  # noqa: E501


        :return: The columns of this ViewDetails.  # noqa: E501
        :rtype: list[object]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ViewDetails.


        :param columns: The columns of this ViewDetails.  # noqa: E501
        :type columns: list[object]
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def udf_columns(self):
        """Gets the udf_columns of this ViewDetails.  # noqa: E501


        :return: The udf_columns of this ViewDetails.  # noqa: E501
        :rtype: list[object]
        """
        return self._udf_columns

    @udf_columns.setter
    def udf_columns(self, udf_columns):
        """Sets the udf_columns of this ViewDetails.


        :param udf_columns: The udf_columns of this ViewDetails.  # noqa: E501
        :type udf_columns: list[object]
        """

        self._udf_columns = udf_columns

    @property
    def udfs_info(self):
        """Gets the udfs_info of this ViewDetails.  # noqa: E501


        :return: The udfs_info of this ViewDetails.  # noqa: E501
        :rtype: list[object]
        """
        return self._udfs_info

    @udfs_info.setter
    def udfs_info(self, udfs_info):
        """Sets the udfs_info of this ViewDetails.


        :param udfs_info: The udfs_info of this ViewDetails.  # noqa: E501
        :type udfs_info: list[object]
        """

        self._udfs_info = udfs_info

    @property
    def created_at(self):
        """Gets the created_at of this ViewDetails.  # noqa: E501


        :return: The created_at of this ViewDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ViewDetails.


        :param created_at: The created_at of this ViewDetails.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this ViewDetails.  # noqa: E501


        :return: The created_by of this ViewDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ViewDetails.


        :param created_by: The created_by of this ViewDetails.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def invalid(self):
        """Gets the invalid of this ViewDetails.  # noqa: E501


        :return: The invalid of this ViewDetails.  # noqa: E501
        :rtype: bool
        """
        return self._invalid

    @invalid.setter
    def invalid(self, invalid):
        """Sets the invalid of this ViewDetails.


        :param invalid: The invalid of this ViewDetails.  # noqa: E501
        :type invalid: bool
        """
        if self.local_vars_configuration.client_side_validation and invalid is None:  # noqa: E501
            raise ValueError("Invalid value for `invalid`, must not be `None`")  # noqa: E501

        self._invalid = invalid

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ViewDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ViewDetails):
            return True

        return self.to_dict() != other.to_dict()
