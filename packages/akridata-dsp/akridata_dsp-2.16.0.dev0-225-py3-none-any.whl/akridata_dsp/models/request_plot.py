# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RequestPlot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tunables': 'PlotRequestTunables',
        'points': 'list[int]',
        'timeout': 'int',
        'cluster_map': 'object',
        'local_reclustering': 'LocalReclustering',
        'cluster_snapshot_id': 'str'
    }

    attribute_map = {
        'tunables': 'tunables',
        'points': 'points',
        'timeout': 'timeout',
        'cluster_map': 'cluster_map',
        'local_reclustering': 'local_reclustering',
        'cluster_snapshot_id': 'cluster_snapshot_id'
    }

    def __init__(self, tunables=None, points=None, timeout=120, cluster_map=None, local_reclustering=None, cluster_snapshot_id=None, local_vars_configuration=None):  # noqa: E501
        """RequestPlot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._tunables = None
        self._points = None
        self._timeout = None
        self._cluster_map = None
        self._local_reclustering = None
        self._cluster_snapshot_id = None
        self.discriminator = None

        if tunables is not None:
            self.tunables = tunables
        if points is not None:
            self.points = points
        if timeout is not None:
            self.timeout = timeout
        if cluster_map is not None:
            self.cluster_map = cluster_map
        if local_reclustering is not None:
            self.local_reclustering = local_reclustering
        if cluster_snapshot_id is not None:
            self.cluster_snapshot_id = cluster_snapshot_id

    @property
    def tunables(self):
        """Gets the tunables of this RequestPlot.  # noqa: E501


        :return: The tunables of this RequestPlot.  # noqa: E501
        :rtype: PlotRequestTunables
        """
        return self._tunables

    @tunables.setter
    def tunables(self, tunables):
        """Sets the tunables of this RequestPlot.


        :param tunables: The tunables of this RequestPlot.  # noqa: E501
        :type tunables: PlotRequestTunables
        """

        self._tunables = tunables

    @property
    def points(self):
        """Gets the points of this RequestPlot.  # noqa: E501


        :return: The points of this RequestPlot.  # noqa: E501
        :rtype: list[int]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RequestPlot.


        :param points: The points of this RequestPlot.  # noqa: E501
        :type points: list[int]
        """

        self._points = points

    @property
    def timeout(self):
        """Gets the timeout of this RequestPlot.  # noqa: E501


        :return: The timeout of this RequestPlot.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this RequestPlot.


        :param timeout: The timeout of this RequestPlot.  # noqa: E501
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def cluster_map(self):
        """Gets the cluster_map of this RequestPlot.  # noqa: E501


        :return: The cluster_map of this RequestPlot.  # noqa: E501
        :rtype: object
        """
        return self._cluster_map

    @cluster_map.setter
    def cluster_map(self, cluster_map):
        """Sets the cluster_map of this RequestPlot.


        :param cluster_map: The cluster_map of this RequestPlot.  # noqa: E501
        :type cluster_map: object
        """

        self._cluster_map = cluster_map

    @property
    def local_reclustering(self):
        """Gets the local_reclustering of this RequestPlot.  # noqa: E501


        :return: The local_reclustering of this RequestPlot.  # noqa: E501
        :rtype: LocalReclustering
        """
        return self._local_reclustering

    @local_reclustering.setter
    def local_reclustering(self, local_reclustering):
        """Sets the local_reclustering of this RequestPlot.


        :param local_reclustering: The local_reclustering of this RequestPlot.  # noqa: E501
        :type local_reclustering: LocalReclustering
        """

        self._local_reclustering = local_reclustering

    @property
    def cluster_snapshot_id(self):
        """Gets the cluster_snapshot_id of this RequestPlot.  # noqa: E501


        :return: The cluster_snapshot_id of this RequestPlot.  # noqa: E501
        :rtype: str
        """
        return self._cluster_snapshot_id

    @cluster_snapshot_id.setter
    def cluster_snapshot_id(self, cluster_snapshot_id):
        """Sets the cluster_snapshot_id of this RequestPlot.


        :param cluster_snapshot_id: The cluster_snapshot_id of this RequestPlot.  # noqa: E501
        :type cluster_snapshot_id: str
        """

        self._cluster_snapshot_id = cluster_snapshot_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestPlot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestPlot):
            return True

        return self.to_dict() != other.to_dict()
