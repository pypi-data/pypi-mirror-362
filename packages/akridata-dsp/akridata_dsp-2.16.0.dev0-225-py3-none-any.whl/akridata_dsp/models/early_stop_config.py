# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class EarlyStopConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'patience': 'int',
        'min_loss_delta': 'float',
        'min_accuracy_delta': 'float',
        'min_epochs': 'int'
    }

    attribute_map = {
        'patience': 'patience',
        'min_loss_delta': 'min_loss_delta',
        'min_accuracy_delta': 'min_accuracy_delta',
        'min_epochs': 'min_epochs'
    }

    def __init__(self, patience=10, min_loss_delta=0.0, min_accuracy_delta=0.0, min_epochs=10, local_vars_configuration=None):  # noqa: E501
        """EarlyStopConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._patience = None
        self._min_loss_delta = None
        self._min_accuracy_delta = None
        self._min_epochs = None
        self.discriminator = None

        if patience is not None:
            self.patience = patience
        if min_loss_delta is not None:
            self.min_loss_delta = min_loss_delta
        if min_accuracy_delta is not None:
            self.min_accuracy_delta = min_accuracy_delta
        if min_epochs is not None:
            self.min_epochs = min_epochs

    @property
    def patience(self):
        """Gets the patience of this EarlyStopConfig.  # noqa: E501


        :return: The patience of this EarlyStopConfig.  # noqa: E501
        :rtype: int
        """
        return self._patience

    @patience.setter
    def patience(self, patience):
        """Sets the patience of this EarlyStopConfig.


        :param patience: The patience of this EarlyStopConfig.  # noqa: E501
        :type patience: int
        """

        self._patience = patience

    @property
    def min_loss_delta(self):
        """Gets the min_loss_delta of this EarlyStopConfig.  # noqa: E501


        :return: The min_loss_delta of this EarlyStopConfig.  # noqa: E501
        :rtype: float
        """
        return self._min_loss_delta

    @min_loss_delta.setter
    def min_loss_delta(self, min_loss_delta):
        """Sets the min_loss_delta of this EarlyStopConfig.


        :param min_loss_delta: The min_loss_delta of this EarlyStopConfig.  # noqa: E501
        :type min_loss_delta: float
        """

        self._min_loss_delta = min_loss_delta

    @property
    def min_accuracy_delta(self):
        """Gets the min_accuracy_delta of this EarlyStopConfig.  # noqa: E501


        :return: The min_accuracy_delta of this EarlyStopConfig.  # noqa: E501
        :rtype: float
        """
        return self._min_accuracy_delta

    @min_accuracy_delta.setter
    def min_accuracy_delta(self, min_accuracy_delta):
        """Sets the min_accuracy_delta of this EarlyStopConfig.


        :param min_accuracy_delta: The min_accuracy_delta of this EarlyStopConfig.  # noqa: E501
        :type min_accuracy_delta: float
        """

        self._min_accuracy_delta = min_accuracy_delta

    @property
    def min_epochs(self):
        """Gets the min_epochs of this EarlyStopConfig.  # noqa: E501


        :return: The min_epochs of this EarlyStopConfig.  # noqa: E501
        :rtype: int
        """
        return self._min_epochs

    @min_epochs.setter
    def min_epochs(self, min_epochs):
        """Sets the min_epochs of this EarlyStopConfig.


        :param min_epochs: The min_epochs of this EarlyStopConfig.  # noqa: E501
        :type min_epochs: int
        """
        if (self.local_vars_configuration.client_side_validation and
                min_epochs is not None and min_epochs < 0):  # noqa: E501
            raise ValueError("Invalid value for `min_epochs`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_epochs = min_epochs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EarlyStopConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EarlyStopConfig):
            return True

        return self.to_dict() != other.to_dict()
