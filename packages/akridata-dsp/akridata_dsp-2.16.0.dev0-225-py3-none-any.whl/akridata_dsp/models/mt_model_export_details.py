# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtModelExportDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_id': 'str',
        'epoch': 'int',
        'status': 'ModelExportStatus',
        'export_options': 'ExportOptions',
        'model_metrics': 'ExportModelMetrics',
        'created_at': 'str',
        'updated_at': 'str',
        'session_name': 'str',
        'status_message': 'str',
        'docker_image_uri': 'str',
        'docker_export_tar_file_path': 'str',
        'onnx_export_tar_file_path': 'str',
        'class_labels': 'dict[str, int]'
    }

    attribute_map = {
        'session_id': 'session_id',
        'epoch': 'epoch',
        'status': 'status',
        'export_options': 'export_options',
        'model_metrics': 'model_metrics',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'session_name': 'session_name',
        'status_message': 'status_message',
        'docker_image_uri': 'docker_image_uri',
        'docker_export_tar_file_path': 'docker_export_tar_file_path',
        'onnx_export_tar_file_path': 'onnx_export_tar_file_path',
        'class_labels': 'class_labels'
    }

    def __init__(self, session_id=None, epoch=None, status=None, export_options=None, model_metrics=None, created_at=None, updated_at=None, session_name='', status_message='', docker_image_uri=None, docker_export_tar_file_path=None, onnx_export_tar_file_path=None, class_labels=None, local_vars_configuration=None):  # noqa: E501
        """MtModelExportDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._session_id = None
        self._epoch = None
        self._status = None
        self._export_options = None
        self._model_metrics = None
        self._created_at = None
        self._updated_at = None
        self._session_name = None
        self._status_message = None
        self._docker_image_uri = None
        self._docker_export_tar_file_path = None
        self._onnx_export_tar_file_path = None
        self._class_labels = None
        self.discriminator = None

        self.session_id = session_id
        self.epoch = epoch
        self.status = status
        self.export_options = export_options
        self.model_metrics = model_metrics
        self.created_at = created_at
        self.updated_at = updated_at
        if session_name is not None:
            self.session_name = session_name
        if status_message is not None:
            self.status_message = status_message
        if docker_image_uri is not None:
            self.docker_image_uri = docker_image_uri
        if docker_export_tar_file_path is not None:
            self.docker_export_tar_file_path = docker_export_tar_file_path
        if onnx_export_tar_file_path is not None:
            self.onnx_export_tar_file_path = onnx_export_tar_file_path
        if class_labels is not None:
            self.class_labels = class_labels

    @property
    def session_id(self):
        """Gets the session_id of this MtModelExportDetails.  # noqa: E501


        :return: The session_id of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MtModelExportDetails.


        :param session_id: The session_id of this MtModelExportDetails.  # noqa: E501
        :type session_id: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def epoch(self):
        """Gets the epoch of this MtModelExportDetails.  # noqa: E501


        :return: The epoch of this MtModelExportDetails.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this MtModelExportDetails.


        :param epoch: The epoch of this MtModelExportDetails.  # noqa: E501
        :type epoch: int
        """
        if self.local_vars_configuration.client_side_validation and epoch is None:  # noqa: E501
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch

    @property
    def status(self):
        """Gets the status of this MtModelExportDetails.  # noqa: E501


        :return: The status of this MtModelExportDetails.  # noqa: E501
        :rtype: ModelExportStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MtModelExportDetails.


        :param status: The status of this MtModelExportDetails.  # noqa: E501
        :type status: ModelExportStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def export_options(self):
        """Gets the export_options of this MtModelExportDetails.  # noqa: E501


        :return: The export_options of this MtModelExportDetails.  # noqa: E501
        :rtype: ExportOptions
        """
        return self._export_options

    @export_options.setter
    def export_options(self, export_options):
        """Sets the export_options of this MtModelExportDetails.


        :param export_options: The export_options of this MtModelExportDetails.  # noqa: E501
        :type export_options: ExportOptions
        """
        if self.local_vars_configuration.client_side_validation and export_options is None:  # noqa: E501
            raise ValueError("Invalid value for `export_options`, must not be `None`")  # noqa: E501

        self._export_options = export_options

    @property
    def model_metrics(self):
        """Gets the model_metrics of this MtModelExportDetails.  # noqa: E501


        :return: The model_metrics of this MtModelExportDetails.  # noqa: E501
        :rtype: ExportModelMetrics
        """
        return self._model_metrics

    @model_metrics.setter
    def model_metrics(self, model_metrics):
        """Sets the model_metrics of this MtModelExportDetails.


        :param model_metrics: The model_metrics of this MtModelExportDetails.  # noqa: E501
        :type model_metrics: ExportModelMetrics
        """
        if self.local_vars_configuration.client_side_validation and model_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `model_metrics`, must not be `None`")  # noqa: E501

        self._model_metrics = model_metrics

    @property
    def created_at(self):
        """Gets the created_at of this MtModelExportDetails.  # noqa: E501


        :return: The created_at of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MtModelExportDetails.


        :param created_at: The created_at of this MtModelExportDetails.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MtModelExportDetails.  # noqa: E501


        :return: The updated_at of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MtModelExportDetails.


        :param updated_at: The updated_at of this MtModelExportDetails.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def session_name(self):
        """Gets the session_name of this MtModelExportDetails.  # noqa: E501


        :return: The session_name of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._session_name

    @session_name.setter
    def session_name(self, session_name):
        """Sets the session_name of this MtModelExportDetails.


        :param session_name: The session_name of this MtModelExportDetails.  # noqa: E501
        :type session_name: str
        """

        self._session_name = session_name

    @property
    def status_message(self):
        """Gets the status_message of this MtModelExportDetails.  # noqa: E501


        :return: The status_message of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this MtModelExportDetails.


        :param status_message: The status_message of this MtModelExportDetails.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def docker_image_uri(self):
        """Gets the docker_image_uri of this MtModelExportDetails.  # noqa: E501


        :return: The docker_image_uri of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._docker_image_uri

    @docker_image_uri.setter
    def docker_image_uri(self, docker_image_uri):
        """Sets the docker_image_uri of this MtModelExportDetails.


        :param docker_image_uri: The docker_image_uri of this MtModelExportDetails.  # noqa: E501
        :type docker_image_uri: str
        """

        self._docker_image_uri = docker_image_uri

    @property
    def docker_export_tar_file_path(self):
        """Gets the docker_export_tar_file_path of this MtModelExportDetails.  # noqa: E501


        :return: The docker_export_tar_file_path of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._docker_export_tar_file_path

    @docker_export_tar_file_path.setter
    def docker_export_tar_file_path(self, docker_export_tar_file_path):
        """Sets the docker_export_tar_file_path of this MtModelExportDetails.


        :param docker_export_tar_file_path: The docker_export_tar_file_path of this MtModelExportDetails.  # noqa: E501
        :type docker_export_tar_file_path: str
        """

        self._docker_export_tar_file_path = docker_export_tar_file_path

    @property
    def onnx_export_tar_file_path(self):
        """Gets the onnx_export_tar_file_path of this MtModelExportDetails.  # noqa: E501


        :return: The onnx_export_tar_file_path of this MtModelExportDetails.  # noqa: E501
        :rtype: str
        """
        return self._onnx_export_tar_file_path

    @onnx_export_tar_file_path.setter
    def onnx_export_tar_file_path(self, onnx_export_tar_file_path):
        """Sets the onnx_export_tar_file_path of this MtModelExportDetails.


        :param onnx_export_tar_file_path: The onnx_export_tar_file_path of this MtModelExportDetails.  # noqa: E501
        :type onnx_export_tar_file_path: str
        """

        self._onnx_export_tar_file_path = onnx_export_tar_file_path

    @property
    def class_labels(self):
        """Gets the class_labels of this MtModelExportDetails.  # noqa: E501


        :return: The class_labels of this MtModelExportDetails.  # noqa: E501
        :rtype: dict[str, int]
        """
        return self._class_labels

    @class_labels.setter
    def class_labels(self, class_labels):
        """Sets the class_labels of this MtModelExportDetails.


        :param class_labels: The class_labels of this MtModelExportDetails.  # noqa: E501
        :type class_labels: dict[str, int]
        """

        self._class_labels = class_labels

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtModelExportDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtModelExportDetails):
            return True

        return self.to_dict() != other.to_dict()
