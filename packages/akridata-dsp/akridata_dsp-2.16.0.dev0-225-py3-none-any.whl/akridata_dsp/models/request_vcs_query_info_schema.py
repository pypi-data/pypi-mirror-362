# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RequestVCSQueryInfoSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_id': 'str',
        'query_json': 'object',
        'feature_table_alias': 'str',
        'num_rows': 'int',
        'catalog_table_name': 'str',
        'view_id': 'str',
        'catalog_table_info': 'CatalogTableInfo',
        'view_info': 'ViewInfo',
        'primary_pipeline_id': 'str',
        'primary_table_alias': 'str'
    }

    attribute_map = {
        'query_id': 'query_id',
        'query_json': 'query_json',
        'feature_table_alias': 'feature_table_alias',
        'num_rows': 'num_rows',
        'catalog_table_name': 'catalog_table_name',
        'view_id': 'view_id',
        'catalog_table_info': 'catalog_table_info',
        'view_info': 'view_info',
        'primary_pipeline_id': 'primary_pipeline_id',
        'primary_table_alias': 'primary_table_alias'
    }

    def __init__(self, query_id=None, query_json=None, feature_table_alias=None, num_rows=None, catalog_table_name=None, view_id=None, catalog_table_info=None, view_info=None, primary_pipeline_id=None, primary_table_alias=None, local_vars_configuration=None):  # noqa: E501
        """RequestVCSQueryInfoSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._query_id = None
        self._query_json = None
        self._feature_table_alias = None
        self._num_rows = None
        self._catalog_table_name = None
        self._view_id = None
        self._catalog_table_info = None
        self._view_info = None
        self._primary_pipeline_id = None
        self._primary_table_alias = None
        self.discriminator = None

        if query_id is not None:
            self.query_id = query_id
        self.query_json = query_json
        if feature_table_alias is not None:
            self.feature_table_alias = feature_table_alias
        if num_rows is not None:
            self.num_rows = num_rows
        if catalog_table_name is not None:
            self.catalog_table_name = catalog_table_name
        if view_id is not None:
            self.view_id = view_id
        if catalog_table_info is not None:
            self.catalog_table_info = catalog_table_info
        if view_info is not None:
            self.view_info = view_info
        if primary_pipeline_id is not None:
            self.primary_pipeline_id = primary_pipeline_id
        if primary_table_alias is not None:
            self.primary_table_alias = primary_table_alias

    @property
    def query_id(self):
        """Gets the query_id of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The query_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this RequestVCSQueryInfoSchema.


        :param query_id: The query_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type query_id: str
        """

        self._query_id = query_id

    @property
    def query_json(self):
        """Gets the query_json of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The query_json of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: object
        """
        return self._query_json

    @query_json.setter
    def query_json(self, query_json):
        """Sets the query_json of this RequestVCSQueryInfoSchema.


        :param query_json: The query_json of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type query_json: object
        """

        self._query_json = query_json

    @property
    def feature_table_alias(self):
        """Gets the feature_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The feature_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._feature_table_alias

    @feature_table_alias.setter
    def feature_table_alias(self, feature_table_alias):
        """Sets the feature_table_alias of this RequestVCSQueryInfoSchema.


        :param feature_table_alias: The feature_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type feature_table_alias: str
        """

        self._feature_table_alias = feature_table_alias

    @property
    def num_rows(self):
        """Gets the num_rows of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The num_rows of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: int
        """
        return self._num_rows

    @num_rows.setter
    def num_rows(self, num_rows):
        """Sets the num_rows of this RequestVCSQueryInfoSchema.


        :param num_rows: The num_rows of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type num_rows: int
        """

        self._num_rows = num_rows

    @property
    def catalog_table_name(self):
        """Gets the catalog_table_name of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The catalog_table_name of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._catalog_table_name

    @catalog_table_name.setter
    def catalog_table_name(self, catalog_table_name):
        """Sets the catalog_table_name of this RequestVCSQueryInfoSchema.


        :param catalog_table_name: The catalog_table_name of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type catalog_table_name: str
        """

        self._catalog_table_name = catalog_table_name

    @property
    def view_id(self):
        """Gets the view_id of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The view_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this RequestVCSQueryInfoSchema.


        :param view_id: The view_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type view_id: str
        """

        self._view_id = view_id

    @property
    def catalog_table_info(self):
        """Gets the catalog_table_info of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The catalog_table_info of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: CatalogTableInfo
        """
        return self._catalog_table_info

    @catalog_table_info.setter
    def catalog_table_info(self, catalog_table_info):
        """Sets the catalog_table_info of this RequestVCSQueryInfoSchema.


        :param catalog_table_info: The catalog_table_info of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type catalog_table_info: CatalogTableInfo
        """

        self._catalog_table_info = catalog_table_info

    @property
    def view_info(self):
        """Gets the view_info of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The view_info of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: ViewInfo
        """
        return self._view_info

    @view_info.setter
    def view_info(self, view_info):
        """Sets the view_info of this RequestVCSQueryInfoSchema.


        :param view_info: The view_info of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type view_info: ViewInfo
        """

        self._view_info = view_info

    @property
    def primary_pipeline_id(self):
        """Gets the primary_pipeline_id of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The primary_pipeline_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._primary_pipeline_id

    @primary_pipeline_id.setter
    def primary_pipeline_id(self, primary_pipeline_id):
        """Sets the primary_pipeline_id of this RequestVCSQueryInfoSchema.


        :param primary_pipeline_id: The primary_pipeline_id of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type primary_pipeline_id: str
        """

        self._primary_pipeline_id = primary_pipeline_id

    @property
    def primary_table_alias(self):
        """Gets the primary_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501


        :return: The primary_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501
        :rtype: str
        """
        return self._primary_table_alias

    @primary_table_alias.setter
    def primary_table_alias(self, primary_table_alias):
        """Sets the primary_table_alias of this RequestVCSQueryInfoSchema.


        :param primary_table_alias: The primary_table_alias of this RequestVCSQueryInfoSchema.  # noqa: E501
        :type primary_table_alias: str
        """

        self._primary_table_alias = primary_table_alias

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestVCSQueryInfoSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestVCSQueryInfoSchema):
            return True

        return self.to_dict() != other.to_dict()
