# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetCatalogSyncSessionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_catalog_table_name': 'str',
        'description': 'str',
        'attributes_to_be_synced': 'dict[str, str]',
        'create_table': 'bool',
        'version': 'int'
    }

    attribute_map = {
        'target_catalog_table_name': 'target_catalog_table_name',
        'description': 'description',
        'attributes_to_be_synced': 'attributes_to_be_synced',
        'create_table': 'create_table',
        'version': 'version'
    }

    def __init__(self, target_catalog_table_name=None, description=None, attributes_to_be_synced=None, create_table=True, version=None, local_vars_configuration=None):  # noqa: E501
        """ResultsetCatalogSyncSessionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._target_catalog_table_name = None
        self._description = None
        self._attributes_to_be_synced = None
        self._create_table = None
        self._version = None
        self.discriminator = None

        self.target_catalog_table_name = target_catalog_table_name
        if description is not None:
            self.description = description
        if attributes_to_be_synced is not None:
            self.attributes_to_be_synced = attributes_to_be_synced
        if create_table is not None:
            self.create_table = create_table
        self.version = version

    @property
    def target_catalog_table_name(self):
        """Gets the target_catalog_table_name of this ResultsetCatalogSyncSessionRequest.  # noqa: E501


        :return: The target_catalog_table_name of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._target_catalog_table_name

    @target_catalog_table_name.setter
    def target_catalog_table_name(self, target_catalog_table_name):
        """Sets the target_catalog_table_name of this ResultsetCatalogSyncSessionRequest.


        :param target_catalog_table_name: The target_catalog_table_name of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :type target_catalog_table_name: str
        """
        if self.local_vars_configuration.client_side_validation and target_catalog_table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `target_catalog_table_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_catalog_table_name is not None and len(target_catalog_table_name) > 27):
            raise ValueError("Invalid value for `target_catalog_table_name`, length must be less than or equal to `27`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_catalog_table_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', target_catalog_table_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `target_catalog_table_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501

        self._target_catalog_table_name = target_catalog_table_name

    @property
    def description(self):
        """Gets the description of this ResultsetCatalogSyncSessionRequest.  # noqa: E501


        :return: The description of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResultsetCatalogSyncSessionRequest.


        :param description: The description of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def attributes_to_be_synced(self):
        """Gets the attributes_to_be_synced of this ResultsetCatalogSyncSessionRequest.  # noqa: E501

        key is attribute original name and value is alias name of that attribute provided by user. Only attributes part of this map will be synced to catalog. If attributes to be synced are not provided then all the available attributes for catalog sync will be synced to the catalog  # noqa: E501

        :return: The attributes_to_be_synced of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._attributes_to_be_synced

    @attributes_to_be_synced.setter
    def attributes_to_be_synced(self, attributes_to_be_synced):
        """Sets the attributes_to_be_synced of this ResultsetCatalogSyncSessionRequest.

        key is attribute original name and value is alias name of that attribute provided by user. Only attributes part of this map will be synced to catalog. If attributes to be synced are not provided then all the available attributes for catalog sync will be synced to the catalog  # noqa: E501

        :param attributes_to_be_synced: The attributes_to_be_synced of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :type attributes_to_be_synced: dict[str, str]
        """

        self._attributes_to_be_synced = attributes_to_be_synced

    @property
    def create_table(self):
        """Gets the create_table of this ResultsetCatalogSyncSessionRequest.  # noqa: E501

        Need to create a new table or not  # noqa: E501

        :return: The create_table of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._create_table

    @create_table.setter
    def create_table(self, create_table):
        """Sets the create_table of this ResultsetCatalogSyncSessionRequest.

        Need to create a new table or not  # noqa: E501

        :param create_table: The create_table of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :type create_table: bool
        """

        self._create_table = create_table

    @property
    def version(self):
        """Gets the version of this ResultsetCatalogSyncSessionRequest.  # noqa: E501


        :return: The version of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ResultsetCatalogSyncSessionRequest.


        :param version: The version of this ResultsetCatalogSyncSessionRequest.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetCatalogSyncSessionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetCatalogSyncSessionRequest):
            return True

        return self.to_dict() != other.to_dict()
