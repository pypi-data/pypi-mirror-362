# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtSessionMetricsCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'epoch': 'int',
        'timestamp': 'str',
        'training_accuracy': 'float',
        'training_loss': 'float',
        'validation_accuracy': 'float',
        'validation_loss': 'float',
        'additional_attributes': 'object'
    }

    attribute_map = {
        'epoch': 'epoch',
        'timestamp': 'timestamp',
        'training_accuracy': 'training_accuracy',
        'training_loss': 'training_loss',
        'validation_accuracy': 'validation_accuracy',
        'validation_loss': 'validation_loss',
        'additional_attributes': 'additional_attributes'
    }

    def __init__(self, epoch=None, timestamp=None, training_accuracy=None, training_loss=None, validation_accuracy=None, validation_loss=None, additional_attributes=None, local_vars_configuration=None):  # noqa: E501
        """MtSessionMetricsCommon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._epoch = None
        self._timestamp = None
        self._training_accuracy = None
        self._training_loss = None
        self._validation_accuracy = None
        self._validation_loss = None
        self._additional_attributes = None
        self.discriminator = None

        self.epoch = epoch
        self.timestamp = timestamp
        if training_accuracy is not None:
            self.training_accuracy = training_accuracy
        if training_loss is not None:
            self.training_loss = training_loss
        if validation_accuracy is not None:
            self.validation_accuracy = validation_accuracy
        if validation_loss is not None:
            self.validation_loss = validation_loss
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes

    @property
    def epoch(self):
        """Gets the epoch of this MtSessionMetricsCommon.  # noqa: E501


        :return: The epoch of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this MtSessionMetricsCommon.


        :param epoch: The epoch of this MtSessionMetricsCommon.  # noqa: E501
        :type epoch: int
        """
        if self.local_vars_configuration.client_side_validation and epoch is None:  # noqa: E501
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch

    @property
    def timestamp(self):
        """Gets the timestamp of this MtSessionMetricsCommon.  # noqa: E501


        :return: The timestamp of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MtSessionMetricsCommon.


        :param timestamp: The timestamp of this MtSessionMetricsCommon.  # noqa: E501
        :type timestamp: str
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def training_accuracy(self):
        """Gets the training_accuracy of this MtSessionMetricsCommon.  # noqa: E501


        :return: The training_accuracy of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: float
        """
        return self._training_accuracy

    @training_accuracy.setter
    def training_accuracy(self, training_accuracy):
        """Sets the training_accuracy of this MtSessionMetricsCommon.


        :param training_accuracy: The training_accuracy of this MtSessionMetricsCommon.  # noqa: E501
        :type training_accuracy: float
        """

        self._training_accuracy = training_accuracy

    @property
    def training_loss(self):
        """Gets the training_loss of this MtSessionMetricsCommon.  # noqa: E501


        :return: The training_loss of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: float
        """
        return self._training_loss

    @training_loss.setter
    def training_loss(self, training_loss):
        """Sets the training_loss of this MtSessionMetricsCommon.


        :param training_loss: The training_loss of this MtSessionMetricsCommon.  # noqa: E501
        :type training_loss: float
        """

        self._training_loss = training_loss

    @property
    def validation_accuracy(self):
        """Gets the validation_accuracy of this MtSessionMetricsCommon.  # noqa: E501


        :return: The validation_accuracy of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: float
        """
        return self._validation_accuracy

    @validation_accuracy.setter
    def validation_accuracy(self, validation_accuracy):
        """Sets the validation_accuracy of this MtSessionMetricsCommon.


        :param validation_accuracy: The validation_accuracy of this MtSessionMetricsCommon.  # noqa: E501
        :type validation_accuracy: float
        """

        self._validation_accuracy = validation_accuracy

    @property
    def validation_loss(self):
        """Gets the validation_loss of this MtSessionMetricsCommon.  # noqa: E501


        :return: The validation_loss of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: float
        """
        return self._validation_loss

    @validation_loss.setter
    def validation_loss(self, validation_loss):
        """Sets the validation_loss of this MtSessionMetricsCommon.


        :param validation_loss: The validation_loss of this MtSessionMetricsCommon.  # noqa: E501
        :type validation_loss: float
        """

        self._validation_loss = validation_loss

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this MtSessionMetricsCommon.  # noqa: E501


        :return: The additional_attributes of this MtSessionMetricsCommon.  # noqa: E501
        :rtype: object
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this MtSessionMetricsCommon.


        :param additional_attributes: The additional_attributes of this MtSessionMetricsCommon.  # noqa: E501
        :type additional_attributes: object
        """

        self._additional_attributes = additional_attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtSessionMetricsCommon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtSessionMetricsCommon):
            return True

        return self.to_dict() != other.to_dict()
