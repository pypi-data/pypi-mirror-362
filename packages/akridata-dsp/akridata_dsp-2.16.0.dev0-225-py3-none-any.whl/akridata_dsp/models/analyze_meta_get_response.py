# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class AnalyzeMetaGetResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'classes': 'list[str]',
        'other_classes': 'list[str]',
        'confidence_config': 'AnalyzeMetaConfigItem',
        'iou_config': 'AnalyzeMetaConfigItem',
        'data_source': 'DataSourceFieldColumn',
        'plot_featurizer': 'PlotFeaturizer',
        'analyze_slice': 'AnalyzeSliceInfo',
        'stats_classes': 'list[str]'
    }

    attribute_map = {
        'classes': 'classes',
        'other_classes': 'other_classes',
        'confidence_config': 'confidence_config',
        'iou_config': 'iou_config',
        'data_source': 'data_source',
        'plot_featurizer': 'plot_featurizer',
        'analyze_slice': 'analyze_slice',
        'stats_classes': 'stats_classes'
    }

    def __init__(self, classes=None, other_classes=None, confidence_config=None, iou_config=None, data_source=None, plot_featurizer=None, analyze_slice=None, stats_classes=None, local_vars_configuration=None):  # noqa: E501
        """AnalyzeMetaGetResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._classes = None
        self._other_classes = None
        self._confidence_config = None
        self._iou_config = None
        self._data_source = None
        self._plot_featurizer = None
        self._analyze_slice = None
        self._stats_classes = None
        self.discriminator = None

        if classes is not None:
            self.classes = classes
        if other_classes is not None:
            self.other_classes = other_classes
        self.confidence_config = confidence_config
        self.iou_config = iou_config
        self.data_source = data_source
        if plot_featurizer is not None:
            self.plot_featurizer = plot_featurizer
        if analyze_slice is not None:
            self.analyze_slice = analyze_slice
        if stats_classes is not None:
            self.stats_classes = stats_classes

    @property
    def classes(self):
        """Gets the classes of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this AnalyzeMetaGetResponse.


        :param classes: The classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :type classes: list[str]
        """

        self._classes = classes

    @property
    def other_classes(self):
        """Gets the other_classes of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The other_classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_classes

    @other_classes.setter
    def other_classes(self, other_classes):
        """Sets the other_classes of this AnalyzeMetaGetResponse.


        :param other_classes: The other_classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :type other_classes: list[str]
        """

        self._other_classes = other_classes

    @property
    def confidence_config(self):
        """Gets the confidence_config of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The confidence_config of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: AnalyzeMetaConfigItem
        """
        return self._confidence_config

    @confidence_config.setter
    def confidence_config(self, confidence_config):
        """Sets the confidence_config of this AnalyzeMetaGetResponse.


        :param confidence_config: The confidence_config of this AnalyzeMetaGetResponse.  # noqa: E501
        :type confidence_config: AnalyzeMetaConfigItem
        """
        if self.local_vars_configuration.client_side_validation and confidence_config is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence_config`, must not be `None`")  # noqa: E501

        self._confidence_config = confidence_config

    @property
    def iou_config(self):
        """Gets the iou_config of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The iou_config of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: AnalyzeMetaConfigItem
        """
        return self._iou_config

    @iou_config.setter
    def iou_config(self, iou_config):
        """Sets the iou_config of this AnalyzeMetaGetResponse.


        :param iou_config: The iou_config of this AnalyzeMetaGetResponse.  # noqa: E501
        :type iou_config: AnalyzeMetaConfigItem
        """
        if self.local_vars_configuration.client_side_validation and iou_config is None:  # noqa: E501
            raise ValueError("Invalid value for `iou_config`, must not be `None`")  # noqa: E501

        self._iou_config = iou_config

    @property
    def data_source(self):
        """Gets the data_source of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The data_source of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: DataSourceFieldColumn
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this AnalyzeMetaGetResponse.


        :param data_source: The data_source of this AnalyzeMetaGetResponse.  # noqa: E501
        :type data_source: DataSourceFieldColumn
        """
        if self.local_vars_configuration.client_side_validation and data_source is None:  # noqa: E501
            raise ValueError("Invalid value for `data_source`, must not be `None`")  # noqa: E501

        self._data_source = data_source

    @property
    def plot_featurizer(self):
        """Gets the plot_featurizer of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The plot_featurizer of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: PlotFeaturizer
        """
        return self._plot_featurizer

    @plot_featurizer.setter
    def plot_featurizer(self, plot_featurizer):
        """Sets the plot_featurizer of this AnalyzeMetaGetResponse.


        :param plot_featurizer: The plot_featurizer of this AnalyzeMetaGetResponse.  # noqa: E501
        :type plot_featurizer: PlotFeaturizer
        """

        self._plot_featurizer = plot_featurizer

    @property
    def analyze_slice(self):
        """Gets the analyze_slice of this AnalyzeMetaGetResponse.  # noqa: E501


        :return: The analyze_slice of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: AnalyzeSliceInfo
        """
        return self._analyze_slice

    @analyze_slice.setter
    def analyze_slice(self, analyze_slice):
        """Sets the analyze_slice of this AnalyzeMetaGetResponse.


        :param analyze_slice: The analyze_slice of this AnalyzeMetaGetResponse.  # noqa: E501
        :type analyze_slice: AnalyzeSliceInfo
        """

        self._analyze_slice = analyze_slice

    @property
    def stats_classes(self):
        """Gets the stats_classes of this AnalyzeMetaGetResponse.  # noqa: E501

        stats classes is used for statistics calculation and may not be equal to all classes when analyze slice is defined  # noqa: E501

        :return: The stats_classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._stats_classes

    @stats_classes.setter
    def stats_classes(self, stats_classes):
        """Sets the stats_classes of this AnalyzeMetaGetResponse.

        stats classes is used for statistics calculation and may not be equal to all classes when analyze slice is defined  # noqa: E501

        :param stats_classes: The stats_classes of this AnalyzeMetaGetResponse.  # noqa: E501
        :type stats_classes: list[str]
        """

        self._stats_classes = stats_classes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzeMetaGetResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnalyzeMetaGetResponse):
            return True

        return self.to_dict() != other.to_dict()
