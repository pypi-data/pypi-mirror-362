# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PointResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'point_id': 'int',
        'label': 'str',
        'anomaly_score': 'float',
        'pixel_anomaly_pct': 'float',
        'max_anomaly_blob_size': 'float',
        'min_anomaly_blob_size': 'float',
        'max_anomaly_blob_pct': 'float',
        'min_anomaly_blob_pct': 'float'
    }

    attribute_map = {
        'point_id': 'point_id',
        'label': 'label',
        'anomaly_score': 'anomaly_score',
        'pixel_anomaly_pct': 'pixel_anomaly_pct',
        'max_anomaly_blob_size': 'max_anomaly_blob_size',
        'min_anomaly_blob_size': 'min_anomaly_blob_size',
        'max_anomaly_blob_pct': 'max_anomaly_blob_pct',
        'min_anomaly_blob_pct': 'min_anomaly_blob_pct'
    }

    def __init__(self, point_id=None, label=None, anomaly_score=None, pixel_anomaly_pct=None, max_anomaly_blob_size=None, min_anomaly_blob_size=None, max_anomaly_blob_pct=None, min_anomaly_blob_pct=None, local_vars_configuration=None):  # noqa: E501
        """PointResults - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._point_id = None
        self._label = None
        self._anomaly_score = None
        self._pixel_anomaly_pct = None
        self._max_anomaly_blob_size = None
        self._min_anomaly_blob_size = None
        self._max_anomaly_blob_pct = None
        self._min_anomaly_blob_pct = None
        self.discriminator = None

        self.point_id = point_id
        self.label = label
        if anomaly_score is not None:
            self.anomaly_score = anomaly_score
        if pixel_anomaly_pct is not None:
            self.pixel_anomaly_pct = pixel_anomaly_pct
        if max_anomaly_blob_size is not None:
            self.max_anomaly_blob_size = max_anomaly_blob_size
        if min_anomaly_blob_size is not None:
            self.min_anomaly_blob_size = min_anomaly_blob_size
        if max_anomaly_blob_pct is not None:
            self.max_anomaly_blob_pct = max_anomaly_blob_pct
        if min_anomaly_blob_pct is not None:
            self.min_anomaly_blob_pct = min_anomaly_blob_pct

    @property
    def point_id(self):
        """Gets the point_id of this PointResults.  # noqa: E501


        :return: The point_id of this PointResults.  # noqa: E501
        :rtype: int
        """
        return self._point_id

    @point_id.setter
    def point_id(self, point_id):
        """Sets the point_id of this PointResults.


        :param point_id: The point_id of this PointResults.  # noqa: E501
        :type point_id: int
        """
        if self.local_vars_configuration.client_side_validation and point_id is None:  # noqa: E501
            raise ValueError("Invalid value for `point_id`, must not be `None`")  # noqa: E501

        self._point_id = point_id

    @property
    def label(self):
        """Gets the label of this PointResults.  # noqa: E501


        :return: The label of this PointResults.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PointResults.


        :param label: The label of this PointResults.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def anomaly_score(self):
        """Gets the anomaly_score of this PointResults.  # noqa: E501


        :return: The anomaly_score of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._anomaly_score

    @anomaly_score.setter
    def anomaly_score(self, anomaly_score):
        """Sets the anomaly_score of this PointResults.


        :param anomaly_score: The anomaly_score of this PointResults.  # noqa: E501
        :type anomaly_score: float
        """

        self._anomaly_score = anomaly_score

    @property
    def pixel_anomaly_pct(self):
        """Gets the pixel_anomaly_pct of this PointResults.  # noqa: E501


        :return: The pixel_anomaly_pct of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._pixel_anomaly_pct

    @pixel_anomaly_pct.setter
    def pixel_anomaly_pct(self, pixel_anomaly_pct):
        """Sets the pixel_anomaly_pct of this PointResults.


        :param pixel_anomaly_pct: The pixel_anomaly_pct of this PointResults.  # noqa: E501
        :type pixel_anomaly_pct: float
        """

        self._pixel_anomaly_pct = pixel_anomaly_pct

    @property
    def max_anomaly_blob_size(self):
        """Gets the max_anomaly_blob_size of this PointResults.  # noqa: E501


        :return: The max_anomaly_blob_size of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._max_anomaly_blob_size

    @max_anomaly_blob_size.setter
    def max_anomaly_blob_size(self, max_anomaly_blob_size):
        """Sets the max_anomaly_blob_size of this PointResults.


        :param max_anomaly_blob_size: The max_anomaly_blob_size of this PointResults.  # noqa: E501
        :type max_anomaly_blob_size: float
        """

        self._max_anomaly_blob_size = max_anomaly_blob_size

    @property
    def min_anomaly_blob_size(self):
        """Gets the min_anomaly_blob_size of this PointResults.  # noqa: E501


        :return: The min_anomaly_blob_size of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._min_anomaly_blob_size

    @min_anomaly_blob_size.setter
    def min_anomaly_blob_size(self, min_anomaly_blob_size):
        """Sets the min_anomaly_blob_size of this PointResults.


        :param min_anomaly_blob_size: The min_anomaly_blob_size of this PointResults.  # noqa: E501
        :type min_anomaly_blob_size: float
        """

        self._min_anomaly_blob_size = min_anomaly_blob_size

    @property
    def max_anomaly_blob_pct(self):
        """Gets the max_anomaly_blob_pct of this PointResults.  # noqa: E501


        :return: The max_anomaly_blob_pct of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._max_anomaly_blob_pct

    @max_anomaly_blob_pct.setter
    def max_anomaly_blob_pct(self, max_anomaly_blob_pct):
        """Sets the max_anomaly_blob_pct of this PointResults.


        :param max_anomaly_blob_pct: The max_anomaly_blob_pct of this PointResults.  # noqa: E501
        :type max_anomaly_blob_pct: float
        """

        self._max_anomaly_blob_pct = max_anomaly_blob_pct

    @property
    def min_anomaly_blob_pct(self):
        """Gets the min_anomaly_blob_pct of this PointResults.  # noqa: E501


        :return: The min_anomaly_blob_pct of this PointResults.  # noqa: E501
        :rtype: float
        """
        return self._min_anomaly_blob_pct

    @min_anomaly_blob_pct.setter
    def min_anomaly_blob_pct(self, min_anomaly_blob_pct):
        """Sets the min_anomaly_blob_pct of this PointResults.


        :param min_anomaly_blob_pct: The min_anomaly_blob_pct of this PointResults.  # noqa: E501
        :type min_anomaly_blob_pct: float
        """

        self._min_anomaly_blob_pct = min_anomaly_blob_pct

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PointResults):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PointResults):
            return True

        return self.to_dict() != other.to_dict()
