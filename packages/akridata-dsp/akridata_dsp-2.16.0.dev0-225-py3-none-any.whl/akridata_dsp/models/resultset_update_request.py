# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetUpdateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'int',
        'metadata': 'ResultsetMetadata',
        'export_to_top_level': 'bool',
        'persist_sim_search_resultset': 'bool',
        'frames': 'ResultsetUpdateRequestFrame',
        'source': 'ResultsetUpdateExternalSource'
    }

    attribute_map = {
        'version': 'version',
        'metadata': 'metadata',
        'export_to_top_level': 'export_to_top_level',
        'persist_sim_search_resultset': 'persist_sim_search_resultset',
        'frames': 'frames',
        'source': 'source'
    }

    def __init__(self, version=None, metadata=None, export_to_top_level=None, persist_sim_search_resultset=None, frames=None, source=None, local_vars_configuration=None):  # noqa: E501
        """ResultsetUpdateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._metadata = None
        self._export_to_top_level = None
        self._persist_sim_search_resultset = None
        self._frames = None
        self._source = None
        self.discriminator = None

        self.version = version
        if metadata is not None:
            self.metadata = metadata
        if export_to_top_level is not None:
            self.export_to_top_level = export_to_top_level
        if persist_sim_search_resultset is not None:
            self.persist_sim_search_resultset = persist_sim_search_resultset
        if frames is not None:
            self.frames = frames
        if source is not None:
            self.source = source

    @property
    def version(self):
        """Gets the version of this ResultsetUpdateRequest.  # noqa: E501


        :return: The version of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ResultsetUpdateRequest.


        :param version: The version of this ResultsetUpdateRequest.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def metadata(self):
        """Gets the metadata of this ResultsetUpdateRequest.  # noqa: E501


        :return: The metadata of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: ResultsetMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ResultsetUpdateRequest.


        :param metadata: The metadata of this ResultsetUpdateRequest.  # noqa: E501
        :type metadata: ResultsetMetadata
        """

        self._metadata = metadata

    @property
    def export_to_top_level(self):
        """Gets the export_to_top_level of this ResultsetUpdateRequest.  # noqa: E501


        :return: The export_to_top_level of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._export_to_top_level

    @export_to_top_level.setter
    def export_to_top_level(self, export_to_top_level):
        """Sets the export_to_top_level of this ResultsetUpdateRequest.


        :param export_to_top_level: The export_to_top_level of this ResultsetUpdateRequest.  # noqa: E501
        :type export_to_top_level: bool
        """

        self._export_to_top_level = export_to_top_level

    @property
    def persist_sim_search_resultset(self):
        """Gets the persist_sim_search_resultset of this ResultsetUpdateRequest.  # noqa: E501


        :return: The persist_sim_search_resultset of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._persist_sim_search_resultset

    @persist_sim_search_resultset.setter
    def persist_sim_search_resultset(self, persist_sim_search_resultset):
        """Sets the persist_sim_search_resultset of this ResultsetUpdateRequest.


        :param persist_sim_search_resultset: The persist_sim_search_resultset of this ResultsetUpdateRequest.  # noqa: E501
        :type persist_sim_search_resultset: bool
        """

        self._persist_sim_search_resultset = persist_sim_search_resultset

    @property
    def frames(self):
        """Gets the frames of this ResultsetUpdateRequest.  # noqa: E501


        :return: The frames of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: ResultsetUpdateRequestFrame
        """
        return self._frames

    @frames.setter
    def frames(self, frames):
        """Sets the frames of this ResultsetUpdateRequest.


        :param frames: The frames of this ResultsetUpdateRequest.  # noqa: E501
        :type frames: ResultsetUpdateRequestFrame
        """

        self._frames = frames

    @property
    def source(self):
        """Gets the source of this ResultsetUpdateRequest.  # noqa: E501


        :return: The source of this ResultsetUpdateRequest.  # noqa: E501
        :rtype: ResultsetUpdateExternalSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ResultsetUpdateRequest.


        :param source: The source of this ResultsetUpdateRequest.  # noqa: E501
        :type source: ResultsetUpdateExternalSource
        """

        self._source = source

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
