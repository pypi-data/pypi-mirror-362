# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PlotFilters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partition_ids': 'list[str]',
        'weight': 'Range',
        'cluster_ids': 'list[int]',
        'confidence': 'Range',
        'analyze_slice_only': 'bool'
    }

    attribute_map = {
        'partition_ids': 'partition_ids',
        'weight': 'weight',
        'cluster_ids': 'cluster_ids',
        'confidence': 'confidence',
        'analyze_slice_only': 'analyze_slice_only'
    }

    def __init__(self, partition_ids=None, weight=None, cluster_ids=None, confidence=None, analyze_slice_only=None, local_vars_configuration=None):  # noqa: E501
        """PlotFilters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._partition_ids = None
        self._weight = None
        self._cluster_ids = None
        self._confidence = None
        self._analyze_slice_only = None
        self.discriminator = None

        if partition_ids is not None:
            self.partition_ids = partition_ids
        if weight is not None:
            self.weight = weight
        if cluster_ids is not None:
            self.cluster_ids = cluster_ids
        if confidence is not None:
            self.confidence = confidence
        if analyze_slice_only is not None:
            self.analyze_slice_only = analyze_slice_only

    @property
    def partition_ids(self):
        """Gets the partition_ids of this PlotFilters.  # noqa: E501


        :return: The partition_ids of this PlotFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._partition_ids

    @partition_ids.setter
    def partition_ids(self, partition_ids):
        """Sets the partition_ids of this PlotFilters.


        :param partition_ids: The partition_ids of this PlotFilters.  # noqa: E501
        :type partition_ids: list[str]
        """

        self._partition_ids = partition_ids

    @property
    def weight(self):
        """Gets the weight of this PlotFilters.  # noqa: E501


        :return: The weight of this PlotFilters.  # noqa: E501
        :rtype: Range
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this PlotFilters.


        :param weight: The weight of this PlotFilters.  # noqa: E501
        :type weight: Range
        """

        self._weight = weight

    @property
    def cluster_ids(self):
        """Gets the cluster_ids of this PlotFilters.  # noqa: E501


        :return: The cluster_ids of this PlotFilters.  # noqa: E501
        :rtype: list[int]
        """
        return self._cluster_ids

    @cluster_ids.setter
    def cluster_ids(self, cluster_ids):
        """Sets the cluster_ids of this PlotFilters.


        :param cluster_ids: The cluster_ids of this PlotFilters.  # noqa: E501
        :type cluster_ids: list[int]
        """

        self._cluster_ids = cluster_ids

    @property
    def confidence(self):
        """Gets the confidence of this PlotFilters.  # noqa: E501


        :return: The confidence of this PlotFilters.  # noqa: E501
        :rtype: Range
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this PlotFilters.


        :param confidence: The confidence of this PlotFilters.  # noqa: E501
        :type confidence: Range
        """

        self._confidence = confidence

    @property
    def analyze_slice_only(self):
        """Gets the analyze_slice_only of this PlotFilters.  # noqa: E501


        :return: The analyze_slice_only of this PlotFilters.  # noqa: E501
        :rtype: bool
        """
        return self._analyze_slice_only

    @analyze_slice_only.setter
    def analyze_slice_only(self, analyze_slice_only):
        """Sets the analyze_slice_only of this PlotFilters.


        :param analyze_slice_only: The analyze_slice_only of this PlotFilters.  # noqa: E501
        :type analyze_slice_only: bool
        """

        self._analyze_slice_only = analyze_slice_only

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotFilters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlotFilters):
            return True

        return self.to_dict() != other.to_dict()
