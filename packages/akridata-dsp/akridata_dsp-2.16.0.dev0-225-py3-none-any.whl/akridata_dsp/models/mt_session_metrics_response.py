# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtSessionMetricsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'ModelTrainingStatus',
        'started_at': 'str',
        'completed_at': 'str',
        'progress_pct': 'float',
        'model_metrics': 'TrainingModelMetrics',
        'train_metrics': 'list[TrainingSessionMetrics]'
    }

    attribute_map = {
        'status': 'status',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'progress_pct': 'progress_pct',
        'model_metrics': 'model_metrics',
        'train_metrics': 'train_metrics'
    }

    def __init__(self, status=None, started_at=None, completed_at=None, progress_pct=0.0, model_metrics=None, train_metrics=None, local_vars_configuration=None):  # noqa: E501
        """MtSessionMetricsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._started_at = None
        self._completed_at = None
        self._progress_pct = None
        self._model_metrics = None
        self._train_metrics = None
        self.discriminator = None

        self.status = status
        self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        if progress_pct is not None:
            self.progress_pct = progress_pct
        if model_metrics is not None:
            self.model_metrics = model_metrics
        self.train_metrics = train_metrics

    @property
    def status(self):
        """Gets the status of this MtSessionMetricsResponse.  # noqa: E501


        :return: The status of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: ModelTrainingStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MtSessionMetricsResponse.


        :param status: The status of this MtSessionMetricsResponse.  # noqa: E501
        :type status: ModelTrainingStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def started_at(self):
        """Gets the started_at of this MtSessionMetricsResponse.  # noqa: E501


        :return: The started_at of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this MtSessionMetricsResponse.


        :param started_at: The started_at of this MtSessionMetricsResponse.  # noqa: E501
        :type started_at: str
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this MtSessionMetricsResponse.  # noqa: E501


        :return: The completed_at of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this MtSessionMetricsResponse.


        :param completed_at: The completed_at of this MtSessionMetricsResponse.  # noqa: E501
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def progress_pct(self):
        """Gets the progress_pct of this MtSessionMetricsResponse.  # noqa: E501


        :return: The progress_pct of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: float
        """
        return self._progress_pct

    @progress_pct.setter
    def progress_pct(self, progress_pct):
        """Sets the progress_pct of this MtSessionMetricsResponse.


        :param progress_pct: The progress_pct of this MtSessionMetricsResponse.  # noqa: E501
        :type progress_pct: float
        """

        self._progress_pct = progress_pct

    @property
    def model_metrics(self):
        """Gets the model_metrics of this MtSessionMetricsResponse.  # noqa: E501


        :return: The model_metrics of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: TrainingModelMetrics
        """
        return self._model_metrics

    @model_metrics.setter
    def model_metrics(self, model_metrics):
        """Sets the model_metrics of this MtSessionMetricsResponse.


        :param model_metrics: The model_metrics of this MtSessionMetricsResponse.  # noqa: E501
        :type model_metrics: TrainingModelMetrics
        """

        self._model_metrics = model_metrics

    @property
    def train_metrics(self):
        """Gets the train_metrics of this MtSessionMetricsResponse.  # noqa: E501


        :return: The train_metrics of this MtSessionMetricsResponse.  # noqa: E501
        :rtype: list[TrainingSessionMetrics]
        """
        return self._train_metrics

    @train_metrics.setter
    def train_metrics(self, train_metrics):
        """Sets the train_metrics of this MtSessionMetricsResponse.


        :param train_metrics: The train_metrics of this MtSessionMetricsResponse.  # noqa: E501
        :type train_metrics: list[TrainingSessionMetrics]
        """
        if self.local_vars_configuration.client_side_validation and train_metrics is None:  # noqa: E501
            raise ValueError("Invalid value for `train_metrics`, must not be `None`")  # noqa: E501

        self._train_metrics = train_metrics

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtSessionMetricsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtSessionMetricsResponse):
            return True

        return self.to_dict() != other.to_dict()
