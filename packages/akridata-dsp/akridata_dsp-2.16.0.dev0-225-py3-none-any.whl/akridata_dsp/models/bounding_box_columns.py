# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class BoundingBoxColumns(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'x_left': 'str',
        'y_top': 'str',
        'x_right': 'str',
        'y_bottom': 'str'
    }

    attribute_map = {
        'x_left': 'x_left',
        'y_top': 'y_top',
        'x_right': 'x_right',
        'y_bottom': 'y_bottom'
    }

    def __init__(self, x_left=None, y_top=None, x_right=None, y_bottom=None, local_vars_configuration=None):  # noqa: E501
        """BoundingBoxColumns - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._x_left = None
        self._y_top = None
        self._x_right = None
        self._y_bottom = None
        self.discriminator = None

        self.x_left = x_left
        self.y_top = y_top
        self.x_right = x_right
        self.y_bottom = y_bottom

    @property
    def x_left(self):
        """Gets the x_left of this BoundingBoxColumns.  # noqa: E501


        :return: The x_left of this BoundingBoxColumns.  # noqa: E501
        :rtype: str
        """
        return self._x_left

    @x_left.setter
    def x_left(self, x_left):
        """Sets the x_left of this BoundingBoxColumns.


        :param x_left: The x_left of this BoundingBoxColumns.  # noqa: E501
        :type x_left: str
        """
        if self.local_vars_configuration.client_side_validation and x_left is None:  # noqa: E501
            raise ValueError("Invalid value for `x_left`, must not be `None`")  # noqa: E501

        self._x_left = x_left

    @property
    def y_top(self):
        """Gets the y_top of this BoundingBoxColumns.  # noqa: E501


        :return: The y_top of this BoundingBoxColumns.  # noqa: E501
        :rtype: str
        """
        return self._y_top

    @y_top.setter
    def y_top(self, y_top):
        """Sets the y_top of this BoundingBoxColumns.


        :param y_top: The y_top of this BoundingBoxColumns.  # noqa: E501
        :type y_top: str
        """
        if self.local_vars_configuration.client_side_validation and y_top is None:  # noqa: E501
            raise ValueError("Invalid value for `y_top`, must not be `None`")  # noqa: E501

        self._y_top = y_top

    @property
    def x_right(self):
        """Gets the x_right of this BoundingBoxColumns.  # noqa: E501


        :return: The x_right of this BoundingBoxColumns.  # noqa: E501
        :rtype: str
        """
        return self._x_right

    @x_right.setter
    def x_right(self, x_right):
        """Sets the x_right of this BoundingBoxColumns.


        :param x_right: The x_right of this BoundingBoxColumns.  # noqa: E501
        :type x_right: str
        """
        if self.local_vars_configuration.client_side_validation and x_right is None:  # noqa: E501
            raise ValueError("Invalid value for `x_right`, must not be `None`")  # noqa: E501

        self._x_right = x_right

    @property
    def y_bottom(self):
        """Gets the y_bottom of this BoundingBoxColumns.  # noqa: E501


        :return: The y_bottom of this BoundingBoxColumns.  # noqa: E501
        :rtype: str
        """
        return self._y_bottom

    @y_bottom.setter
    def y_bottom(self, y_bottom):
        """Sets the y_bottom of this BoundingBoxColumns.


        :param y_bottom: The y_bottom of this BoundingBoxColumns.  # noqa: E501
        :type y_bottom: str
        """
        if self.local_vars_configuration.client_side_validation and y_bottom is None:  # noqa: E501
            raise ValueError("Invalid value for `y_bottom`, must not be `None`")  # noqa: E501

        self._y_bottom = y_bottom

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BoundingBoxColumns):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BoundingBoxColumns):
            return True

        return self.to_dict() != other.to_dict()
