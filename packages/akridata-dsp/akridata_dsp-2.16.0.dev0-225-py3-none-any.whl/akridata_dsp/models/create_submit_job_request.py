# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateSubmitJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance_metric': 'EmbedDistanceMetric',
        'patches': 'list[AppSchemaCommonBoundingBoxBoundingBox]',
        'tunables': 'SubmitRequestTunables',
        'job_type': 'JobType',
        'data_source': 'DataSourceSubmitRequest',
        'src': 'RequestDataSourceSubmit',
        'request_source_meta': 'RequestSourceMetaJobRequestSubmit',
        'advanced_config': 'object',
        'vseq_config': 'VseqConfigRequest',
        'manual_labeling_config': 'ManualLabelingConfig',
        'saliency_map_config': 'SaliencyMapConfig',
        'labeling_config': 'LabelingConfig',
        'roi_specs': 'RoiSpecs'
    }

    attribute_map = {
        'distance_metric': 'distance_metric',
        'patches': 'patches',
        'tunables': 'tunables',
        'job_type': 'job_type',
        'data_source': 'data_source',
        'src': 'src',
        'request_source_meta': 'request_source_meta',
        'advanced_config': 'advanced_config',
        'vseq_config': 'vseq_config',
        'manual_labeling_config': 'manual_labeling_config',
        'saliency_map_config': 'saliency_map_config',
        'labeling_config': 'labeling_config',
        'roi_specs': 'roi_specs'
    }

    def __init__(self, distance_metric=None, patches=None, tunables=None, job_type=None, data_source=None, src=None, request_source_meta=None, advanced_config=None, vseq_config=None, manual_labeling_config=None, saliency_map_config=None, labeling_config=None, roi_specs=None, local_vars_configuration=None):  # noqa: E501
        """CreateSubmitJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._distance_metric = None
        self._patches = None
        self._tunables = None
        self._job_type = None
        self._data_source = None
        self._src = None
        self._request_source_meta = None
        self._advanced_config = None
        self._vseq_config = None
        self._manual_labeling_config = None
        self._saliency_map_config = None
        self._labeling_config = None
        self._roi_specs = None
        self.discriminator = None

        if distance_metric is not None:
            self.distance_metric = distance_metric
        if patches is not None:
            self.patches = patches
        if tunables is not None:
            self.tunables = tunables
        if job_type is not None:
            self.job_type = job_type
        if data_source is not None:
            self.data_source = data_source
        if src is not None:
            self.src = src
        if request_source_meta is not None:
            self.request_source_meta = request_source_meta
        if advanced_config is not None:
            self.advanced_config = advanced_config
        if vseq_config is not None:
            self.vseq_config = vseq_config
        if manual_labeling_config is not None:
            self.manual_labeling_config = manual_labeling_config
        if saliency_map_config is not None:
            self.saliency_map_config = saliency_map_config
        if labeling_config is not None:
            self.labeling_config = labeling_config
        if roi_specs is not None:
            self.roi_specs = roi_specs

    @property
    def distance_metric(self):
        """Gets the distance_metric of this CreateSubmitJobRequest.  # noqa: E501


        :return: The distance_metric of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: EmbedDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this CreateSubmitJobRequest.


        :param distance_metric: The distance_metric of this CreateSubmitJobRequest.  # noqa: E501
        :type distance_metric: EmbedDistanceMetric
        """

        self._distance_metric = distance_metric

    @property
    def patches(self):
        """Gets the patches of this CreateSubmitJobRequest.  # noqa: E501


        :return: The patches of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: list[AppSchemaCommonBoundingBoxBoundingBox]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this CreateSubmitJobRequest.


        :param patches: The patches of this CreateSubmitJobRequest.  # noqa: E501
        :type patches: list[AppSchemaCommonBoundingBoxBoundingBox]
        """

        self._patches = patches

    @property
    def tunables(self):
        """Gets the tunables of this CreateSubmitJobRequest.  # noqa: E501


        :return: The tunables of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: SubmitRequestTunables
        """
        return self._tunables

    @tunables.setter
    def tunables(self, tunables):
        """Sets the tunables of this CreateSubmitJobRequest.


        :param tunables: The tunables of this CreateSubmitJobRequest.  # noqa: E501
        :type tunables: SubmitRequestTunables
        """

        self._tunables = tunables

    @property
    def job_type(self):
        """Gets the job_type of this CreateSubmitJobRequest.  # noqa: E501


        :return: The job_type of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateSubmitJobRequest.


        :param job_type: The job_type of this CreateSubmitJobRequest.  # noqa: E501
        :type job_type: JobType
        """

        self._job_type = job_type

    @property
    def data_source(self):
        """Gets the data_source of this CreateSubmitJobRequest.  # noqa: E501


        :return: The data_source of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: DataSourceSubmitRequest
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this CreateSubmitJobRequest.


        :param data_source: The data_source of this CreateSubmitJobRequest.  # noqa: E501
        :type data_source: DataSourceSubmitRequest
        """

        self._data_source = data_source

    @property
    def src(self):
        """Gets the src of this CreateSubmitJobRequest.  # noqa: E501


        :return: The src of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: RequestDataSourceSubmit
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this CreateSubmitJobRequest.


        :param src: The src of this CreateSubmitJobRequest.  # noqa: E501
        :type src: RequestDataSourceSubmit
        """

        self._src = src

    @property
    def request_source_meta(self):
        """Gets the request_source_meta of this CreateSubmitJobRequest.  # noqa: E501


        :return: The request_source_meta of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: RequestSourceMetaJobRequestSubmit
        """
        return self._request_source_meta

    @request_source_meta.setter
    def request_source_meta(self, request_source_meta):
        """Sets the request_source_meta of this CreateSubmitJobRequest.


        :param request_source_meta: The request_source_meta of this CreateSubmitJobRequest.  # noqa: E501
        :type request_source_meta: RequestSourceMetaJobRequestSubmit
        """

        self._request_source_meta = request_source_meta

    @property
    def advanced_config(self):
        """Gets the advanced_config of this CreateSubmitJobRequest.  # noqa: E501


        :return: The advanced_config of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: object
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this CreateSubmitJobRequest.


        :param advanced_config: The advanced_config of this CreateSubmitJobRequest.  # noqa: E501
        :type advanced_config: object
        """

        self._advanced_config = advanced_config

    @property
    def vseq_config(self):
        """Gets the vseq_config of this CreateSubmitJobRequest.  # noqa: E501


        :return: The vseq_config of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: VseqConfigRequest
        """
        return self._vseq_config

    @vseq_config.setter
    def vseq_config(self, vseq_config):
        """Sets the vseq_config of this CreateSubmitJobRequest.


        :param vseq_config: The vseq_config of this CreateSubmitJobRequest.  # noqa: E501
        :type vseq_config: VseqConfigRequest
        """

        self._vseq_config = vseq_config

    @property
    def manual_labeling_config(self):
        """Gets the manual_labeling_config of this CreateSubmitJobRequest.  # noqa: E501


        :return: The manual_labeling_config of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: ManualLabelingConfig
        """
        return self._manual_labeling_config

    @manual_labeling_config.setter
    def manual_labeling_config(self, manual_labeling_config):
        """Sets the manual_labeling_config of this CreateSubmitJobRequest.


        :param manual_labeling_config: The manual_labeling_config of this CreateSubmitJobRequest.  # noqa: E501
        :type manual_labeling_config: ManualLabelingConfig
        """

        self._manual_labeling_config = manual_labeling_config

    @property
    def saliency_map_config(self):
        """Gets the saliency_map_config of this CreateSubmitJobRequest.  # noqa: E501


        :return: The saliency_map_config of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: SaliencyMapConfig
        """
        return self._saliency_map_config

    @saliency_map_config.setter
    def saliency_map_config(self, saliency_map_config):
        """Sets the saliency_map_config of this CreateSubmitJobRequest.


        :param saliency_map_config: The saliency_map_config of this CreateSubmitJobRequest.  # noqa: E501
        :type saliency_map_config: SaliencyMapConfig
        """

        self._saliency_map_config = saliency_map_config

    @property
    def labeling_config(self):
        """Gets the labeling_config of this CreateSubmitJobRequest.  # noqa: E501


        :return: The labeling_config of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: LabelingConfig
        """
        return self._labeling_config

    @labeling_config.setter
    def labeling_config(self, labeling_config):
        """Sets the labeling_config of this CreateSubmitJobRequest.


        :param labeling_config: The labeling_config of this CreateSubmitJobRequest.  # noqa: E501
        :type labeling_config: LabelingConfig
        """

        self._labeling_config = labeling_config

    @property
    def roi_specs(self):
        """Gets the roi_specs of this CreateSubmitJobRequest.  # noqa: E501


        :return: The roi_specs of this CreateSubmitJobRequest.  # noqa: E501
        :rtype: RoiSpecs
        """
        return self._roi_specs

    @roi_specs.setter
    def roi_specs(self, roi_specs):
        """Sets the roi_specs of this CreateSubmitJobRequest.


        :param roi_specs: The roi_specs of this CreateSubmitJobRequest.  # noqa: E501
        :type roi_specs: RoiSpecs
        """

        self._roi_specs = roi_specs

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubmitJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSubmitJobRequest):
            return True

        return self.to_dict() != other.to_dict()
