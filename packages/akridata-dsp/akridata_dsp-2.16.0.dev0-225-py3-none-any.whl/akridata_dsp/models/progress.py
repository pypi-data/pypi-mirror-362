# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class Progress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'chunk_size': 'int',
        'num_chunks': 'int',
        'chunks_processed': 'int'
    }

    attribute_map = {
        'chunk_size': 'chunk_size',
        'num_chunks': 'num_chunks',
        'chunks_processed': 'chunks_processed'
    }

    def __init__(self, chunk_size=None, num_chunks=None, chunks_processed=None, local_vars_configuration=None):  # noqa: E501
        """Progress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._chunk_size = None
        self._num_chunks = None
        self._chunks_processed = None
        self.discriminator = None

        self.chunk_size = chunk_size
        self.num_chunks = num_chunks
        self.chunks_processed = chunks_processed

    @property
    def chunk_size(self):
        """Gets the chunk_size of this Progress.  # noqa: E501


        :return: The chunk_size of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._chunk_size

    @chunk_size.setter
    def chunk_size(self, chunk_size):
        """Sets the chunk_size of this Progress.


        :param chunk_size: The chunk_size of this Progress.  # noqa: E501
        :type chunk_size: int
        """
        if self.local_vars_configuration.client_side_validation and chunk_size is None:  # noqa: E501
            raise ValueError("Invalid value for `chunk_size`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                chunk_size is not None and chunk_size < 1):  # noqa: E501
            raise ValueError("Invalid value for `chunk_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._chunk_size = chunk_size

    @property
    def num_chunks(self):
        """Gets the num_chunks of this Progress.  # noqa: E501


        :return: The num_chunks of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._num_chunks

    @num_chunks.setter
    def num_chunks(self, num_chunks):
        """Sets the num_chunks of this Progress.


        :param num_chunks: The num_chunks of this Progress.  # noqa: E501
        :type num_chunks: int
        """
        if self.local_vars_configuration.client_side_validation and num_chunks is None:  # noqa: E501
            raise ValueError("Invalid value for `num_chunks`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                num_chunks is not None and num_chunks < 1):  # noqa: E501
            raise ValueError("Invalid value for `num_chunks`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_chunks = num_chunks

    @property
    def chunks_processed(self):
        """Gets the chunks_processed of this Progress.  # noqa: E501


        :return: The chunks_processed of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._chunks_processed

    @chunks_processed.setter
    def chunks_processed(self, chunks_processed):
        """Sets the chunks_processed of this Progress.


        :param chunks_processed: The chunks_processed of this Progress.  # noqa: E501
        :type chunks_processed: int
        """
        if self.local_vars_configuration.client_side_validation and chunks_processed is None:  # noqa: E501
            raise ValueError("Invalid value for `chunks_processed`, must not be `None`")  # noqa: E501

        self._chunks_processed = chunks_processed

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Progress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Progress):
            return True

        return self.to_dict() != other.to_dict()
