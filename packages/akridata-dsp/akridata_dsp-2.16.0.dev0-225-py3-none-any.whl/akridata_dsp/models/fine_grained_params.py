# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class FineGrainedParams(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'slice_size': 'float',
        'overlap_ratio': 'float',
        'iou_thresholds': 'list[float]',
        'ensemble_score_reduction_factor': 'float',
        'border_extend_frac': 'float'
    }

    attribute_map = {
        'slice_size': 'slice_size',
        'overlap_ratio': 'overlap_ratio',
        'iou_thresholds': 'iou_thresholds',
        'ensemble_score_reduction_factor': 'ensemble_score_reduction_factor',
        'border_extend_frac': 'border_extend_frac'
    }

    def __init__(self, slice_size=None, overlap_ratio=None, iou_thresholds=None, ensemble_score_reduction_factor=None, border_extend_frac=None, local_vars_configuration=None):  # noqa: E501
        """FineGrainedParams - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._slice_size = None
        self._overlap_ratio = None
        self._iou_thresholds = None
        self._ensemble_score_reduction_factor = None
        self._border_extend_frac = None
        self.discriminator = None

        if slice_size is not None:
            self.slice_size = slice_size
        if overlap_ratio is not None:
            self.overlap_ratio = overlap_ratio
        if iou_thresholds is not None:
            self.iou_thresholds = iou_thresholds
        if ensemble_score_reduction_factor is not None:
            self.ensemble_score_reduction_factor = ensemble_score_reduction_factor
        if border_extend_frac is not None:
            self.border_extend_frac = border_extend_frac

    @property
    def slice_size(self):
        """Gets the slice_size of this FineGrainedParams.  # noqa: E501


        :return: The slice_size of this FineGrainedParams.  # noqa: E501
        :rtype: float
        """
        return self._slice_size

    @slice_size.setter
    def slice_size(self, slice_size):
        """Sets the slice_size of this FineGrainedParams.


        :param slice_size: The slice_size of this FineGrainedParams.  # noqa: E501
        :type slice_size: float
        """
        if (self.local_vars_configuration.client_side_validation and
                slice_size is not None and slice_size > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `slice_size`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                slice_size is not None and slice_size < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `slice_size`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._slice_size = slice_size

    @property
    def overlap_ratio(self):
        """Gets the overlap_ratio of this FineGrainedParams.  # noqa: E501


        :return: The overlap_ratio of this FineGrainedParams.  # noqa: E501
        :rtype: float
        """
        return self._overlap_ratio

    @overlap_ratio.setter
    def overlap_ratio(self, overlap_ratio):
        """Sets the overlap_ratio of this FineGrainedParams.


        :param overlap_ratio: The overlap_ratio of this FineGrainedParams.  # noqa: E501
        :type overlap_ratio: float
        """
        if (self.local_vars_configuration.client_side_validation and
                overlap_ratio is not None and overlap_ratio > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `overlap_ratio`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                overlap_ratio is not None and overlap_ratio < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `overlap_ratio`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._overlap_ratio = overlap_ratio

    @property
    def iou_thresholds(self):
        """Gets the iou_thresholds of this FineGrainedParams.  # noqa: E501


        :return: The iou_thresholds of this FineGrainedParams.  # noqa: E501
        :rtype: list[float]
        """
        return self._iou_thresholds

    @iou_thresholds.setter
    def iou_thresholds(self, iou_thresholds):
        """Sets the iou_thresholds of this FineGrainedParams.


        :param iou_thresholds: The iou_thresholds of this FineGrainedParams.  # noqa: E501
        :type iou_thresholds: list[float]
        """
        if (self.local_vars_configuration.client_side_validation and
                iou_thresholds is not None and len(iou_thresholds) > 2):
            raise ValueError("Invalid value for `iou_thresholds`, number of items must be less than or equal to `2`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                iou_thresholds is not None and len(iou_thresholds) < 2):
            raise ValueError("Invalid value for `iou_thresholds`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._iou_thresholds = iou_thresholds

    @property
    def ensemble_score_reduction_factor(self):
        """Gets the ensemble_score_reduction_factor of this FineGrainedParams.  # noqa: E501


        :return: The ensemble_score_reduction_factor of this FineGrainedParams.  # noqa: E501
        :rtype: float
        """
        return self._ensemble_score_reduction_factor

    @ensemble_score_reduction_factor.setter
    def ensemble_score_reduction_factor(self, ensemble_score_reduction_factor):
        """Sets the ensemble_score_reduction_factor of this FineGrainedParams.


        :param ensemble_score_reduction_factor: The ensemble_score_reduction_factor of this FineGrainedParams.  # noqa: E501
        :type ensemble_score_reduction_factor: float
        """

        self._ensemble_score_reduction_factor = ensemble_score_reduction_factor

    @property
    def border_extend_frac(self):
        """Gets the border_extend_frac of this FineGrainedParams.  # noqa: E501


        :return: The border_extend_frac of this FineGrainedParams.  # noqa: E501
        :rtype: float
        """
        return self._border_extend_frac

    @border_extend_frac.setter
    def border_extend_frac(self, border_extend_frac):
        """Sets the border_extend_frac of this FineGrainedParams.


        :param border_extend_frac: The border_extend_frac of this FineGrainedParams.  # noqa: E501
        :type border_extend_frac: float
        """
        if (self.local_vars_configuration.client_side_validation and
                border_extend_frac is not None and border_extend_frac > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `border_extend_frac`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                border_extend_frac is not None and border_extend_frac < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `border_extend_frac`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._border_extend_frac = border_extend_frac

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FineGrainedParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FineGrainedParams):
            return True

        return self.to_dict() != other.to_dict()
