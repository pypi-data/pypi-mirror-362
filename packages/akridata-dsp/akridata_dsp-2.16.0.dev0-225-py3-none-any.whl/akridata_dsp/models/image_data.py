# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ImageData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'file_id': 'int',
        'frame_idx_in_file': 'int',
        'file_path': 'str',
        'thumbnail_url': 'str',
        'high_res_url': 'str',
        'bbox': 'list[AppSchemaCommonBoundingBoxBoundingBox]',
        'gt_class': 'list[str]',
        'image_height': 'int',
        'image_width': 'int'
    }

    attribute_map = {
        'dataset_id': 'dataset_id',
        'file_id': 'file_id',
        'frame_idx_in_file': 'frame_idx_in_file',
        'file_path': 'file_path',
        'thumbnail_url': 'thumbnail_url',
        'high_res_url': 'high_res_url',
        'bbox': 'bbox',
        'gt_class': 'gt_class',
        'image_height': 'image_height',
        'image_width': 'image_width'
    }

    def __init__(self, dataset_id=None, file_id=None, frame_idx_in_file=None, file_path=None, thumbnail_url=None, high_res_url=None, bbox=None, gt_class=None, image_height=None, image_width=None, local_vars_configuration=None):  # noqa: E501
        """ImageData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._file_id = None
        self._frame_idx_in_file = None
        self._file_path = None
        self._thumbnail_url = None
        self._high_res_url = None
        self._bbox = None
        self._gt_class = None
        self._image_height = None
        self._image_width = None
        self.discriminator = None

        self.dataset_id = dataset_id
        self.file_id = file_id
        self.frame_idx_in_file = frame_idx_in_file
        self.file_path = file_path
        self.thumbnail_url = thumbnail_url
        self.high_res_url = high_res_url
        self.bbox = bbox
        self.gt_class = gt_class
        if image_height is not None:
            self.image_height = image_height
        if image_width is not None:
            self.image_width = image_width

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ImageData.  # noqa: E501


        :return: The dataset_id of this ImageData.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ImageData.


        :param dataset_id: The dataset_id of this ImageData.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def file_id(self):
        """Gets the file_id of this ImageData.  # noqa: E501


        :return: The file_id of this ImageData.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageData.


        :param file_id: The file_id of this ImageData.  # noqa: E501
        :type file_id: int
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def frame_idx_in_file(self):
        """Gets the frame_idx_in_file of this ImageData.  # noqa: E501


        :return: The frame_idx_in_file of this ImageData.  # noqa: E501
        :rtype: int
        """
        return self._frame_idx_in_file

    @frame_idx_in_file.setter
    def frame_idx_in_file(self, frame_idx_in_file):
        """Sets the frame_idx_in_file of this ImageData.


        :param frame_idx_in_file: The frame_idx_in_file of this ImageData.  # noqa: E501
        :type frame_idx_in_file: int
        """
        if self.local_vars_configuration.client_side_validation and frame_idx_in_file is None:  # noqa: E501
            raise ValueError("Invalid value for `frame_idx_in_file`, must not be `None`")  # noqa: E501

        self._frame_idx_in_file = frame_idx_in_file

    @property
    def file_path(self):
        """Gets the file_path of this ImageData.  # noqa: E501


        :return: The file_path of this ImageData.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this ImageData.


        :param file_path: The file_path of this ImageData.  # noqa: E501
        :type file_path: str
        """
        if self.local_vars_configuration.client_side_validation and file_path is None:  # noqa: E501
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this ImageData.  # noqa: E501


        :return: The thumbnail_url of this ImageData.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this ImageData.


        :param thumbnail_url: The thumbnail_url of this ImageData.  # noqa: E501
        :type thumbnail_url: str
        """
        if self.local_vars_configuration.client_side_validation and thumbnail_url is None:  # noqa: E501
            raise ValueError("Invalid value for `thumbnail_url`, must not be `None`")  # noqa: E501

        self._thumbnail_url = thumbnail_url

    @property
    def high_res_url(self):
        """Gets the high_res_url of this ImageData.  # noqa: E501


        :return: The high_res_url of this ImageData.  # noqa: E501
        :rtype: str
        """
        return self._high_res_url

    @high_res_url.setter
    def high_res_url(self, high_res_url):
        """Sets the high_res_url of this ImageData.


        :param high_res_url: The high_res_url of this ImageData.  # noqa: E501
        :type high_res_url: str
        """
        if self.local_vars_configuration.client_side_validation and high_res_url is None:  # noqa: E501
            raise ValueError("Invalid value for `high_res_url`, must not be `None`")  # noqa: E501

        self._high_res_url = high_res_url

    @property
    def bbox(self):
        """Gets the bbox of this ImageData.  # noqa: E501


        :return: The bbox of this ImageData.  # noqa: E501
        :rtype: list[AppSchemaCommonBoundingBoxBoundingBox]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this ImageData.


        :param bbox: The bbox of this ImageData.  # noqa: E501
        :type bbox: list[AppSchemaCommonBoundingBoxBoundingBox]
        """
        if self.local_vars_configuration.client_side_validation and bbox is None:  # noqa: E501
            raise ValueError("Invalid value for `bbox`, must not be `None`")  # noqa: E501

        self._bbox = bbox

    @property
    def gt_class(self):
        """Gets the gt_class of this ImageData.  # noqa: E501


        :return: The gt_class of this ImageData.  # noqa: E501
        :rtype: list[str]
        """
        return self._gt_class

    @gt_class.setter
    def gt_class(self, gt_class):
        """Sets the gt_class of this ImageData.


        :param gt_class: The gt_class of this ImageData.  # noqa: E501
        :type gt_class: list[str]
        """
        if self.local_vars_configuration.client_side_validation and gt_class is None:  # noqa: E501
            raise ValueError("Invalid value for `gt_class`, must not be `None`")  # noqa: E501

        self._gt_class = gt_class

    @property
    def image_height(self):
        """Gets the image_height of this ImageData.  # noqa: E501


        :return: The image_height of this ImageData.  # noqa: E501
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this ImageData.


        :param image_height: The image_height of this ImageData.  # noqa: E501
        :type image_height: int
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """Gets the image_width of this ImageData.  # noqa: E501


        :return: The image_width of this ImageData.  # noqa: E501
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this ImageData.


        :param image_width: The image_width of this ImageData.  # noqa: E501
        :type image_width: int
        """

        self._image_width = image_width

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageData):
            return True

        return self.to_dict() != other.to_dict()
