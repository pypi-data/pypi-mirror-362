# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateCoresetRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vcs_query_id': 'str',
        'sample_size': 'int',
        'sample_fraction': 'float',
        'dataset_id': 'str',
        'pipeline_id': 'str'
    }

    attribute_map = {
        'vcs_query_id': 'vcs_query_id',
        'sample_size': 'sample_size',
        'sample_fraction': 'sample_fraction',
        'dataset_id': 'dataset_id',
        'pipeline_id': 'pipeline_id'
    }

    def __init__(self, vcs_query_id=None, sample_size=None, sample_fraction=None, dataset_id=None, pipeline_id=None, local_vars_configuration=None):  # noqa: E501
        """CreateCoresetRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._vcs_query_id = None
        self._sample_size = None
        self._sample_fraction = None
        self._dataset_id = None
        self._pipeline_id = None
        self.discriminator = None

        self.vcs_query_id = vcs_query_id
        if sample_size is not None:
            self.sample_size = sample_size
        if sample_fraction is not None:
            self.sample_fraction = sample_fraction
        self.dataset_id = dataset_id
        self.pipeline_id = pipeline_id

    @property
    def vcs_query_id(self):
        """Gets the vcs_query_id of this CreateCoresetRequest.  # noqa: E501


        :return: The vcs_query_id of this CreateCoresetRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_query_id

    @vcs_query_id.setter
    def vcs_query_id(self, vcs_query_id):
        """Sets the vcs_query_id of this CreateCoresetRequest.


        :param vcs_query_id: The vcs_query_id of this CreateCoresetRequest.  # noqa: E501
        :type vcs_query_id: str
        """
        if self.local_vars_configuration.client_side_validation and vcs_query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vcs_query_id`, must not be `None`")  # noqa: E501

        self._vcs_query_id = vcs_query_id

    @property
    def sample_size(self):
        """Gets the sample_size of this CreateCoresetRequest.  # noqa: E501


        :return: The sample_size of this CreateCoresetRequest.  # noqa: E501
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this CreateCoresetRequest.


        :param sample_size: The sample_size of this CreateCoresetRequest.  # noqa: E501
        :type sample_size: int
        """

        self._sample_size = sample_size

    @property
    def sample_fraction(self):
        """Gets the sample_fraction of this CreateCoresetRequest.  # noqa: E501


        :return: The sample_fraction of this CreateCoresetRequest.  # noqa: E501
        :rtype: float
        """
        return self._sample_fraction

    @sample_fraction.setter
    def sample_fraction(self, sample_fraction):
        """Sets the sample_fraction of this CreateCoresetRequest.


        :param sample_fraction: The sample_fraction of this CreateCoresetRequest.  # noqa: E501
        :type sample_fraction: float
        """
        if (self.local_vars_configuration.client_side_validation and
                sample_fraction is not None and sample_fraction > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `sample_fraction`, must be a value less than or equal to `1.0`")  # noqa: E501

        self._sample_fraction = sample_fraction

    @property
    def dataset_id(self):
        """Gets the dataset_id of this CreateCoresetRequest.  # noqa: E501


        :return: The dataset_id of this CreateCoresetRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this CreateCoresetRequest.


        :param dataset_id: The dataset_id of this CreateCoresetRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CreateCoresetRequest.  # noqa: E501


        :return: The pipeline_id of this CreateCoresetRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CreateCoresetRequest.


        :param pipeline_id: The pipeline_id of this CreateCoresetRequest.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCoresetRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCoresetRequest):
            return True

        return self.to_dict() != other.to_dict()
