# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PRCurveCoordinate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'confidence_threshold': 'float',
        'precision': 'float',
        'recall': 'float',
        'f1_score': 'float'
    }

    attribute_map = {
        'confidence_threshold': 'confidence_threshold',
        'precision': 'precision',
        'recall': 'recall',
        'f1_score': 'f1_score'
    }

    def __init__(self, confidence_threshold=None, precision=None, recall=None, f1_score=None, local_vars_configuration=None):  # noqa: E501
        """PRCurveCoordinate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._confidence_threshold = None
        self._precision = None
        self._recall = None
        self._f1_score = None
        self.discriminator = None

        self.confidence_threshold = confidence_threshold
        self.precision = precision
        self.recall = recall
        if f1_score is not None:
            self.f1_score = f1_score

    @property
    def confidence_threshold(self):
        """Gets the confidence_threshold of this PRCurveCoordinate.  # noqa: E501


        :return: The confidence_threshold of this PRCurveCoordinate.  # noqa: E501
        :rtype: float
        """
        return self._confidence_threshold

    @confidence_threshold.setter
    def confidence_threshold(self, confidence_threshold):
        """Sets the confidence_threshold of this PRCurveCoordinate.


        :param confidence_threshold: The confidence_threshold of this PRCurveCoordinate.  # noqa: E501
        :type confidence_threshold: float
        """
        if self.local_vars_configuration.client_side_validation and confidence_threshold is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence_threshold`, must not be `None`")  # noqa: E501

        self._confidence_threshold = confidence_threshold

    @property
    def precision(self):
        """Gets the precision of this PRCurveCoordinate.  # noqa: E501


        :return: The precision of this PRCurveCoordinate.  # noqa: E501
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this PRCurveCoordinate.


        :param precision: The precision of this PRCurveCoordinate.  # noqa: E501
        :type precision: float
        """
        if self.local_vars_configuration.client_side_validation and precision is None:  # noqa: E501
            raise ValueError("Invalid value for `precision`, must not be `None`")  # noqa: E501

        self._precision = precision

    @property
    def recall(self):
        """Gets the recall of this PRCurveCoordinate.  # noqa: E501


        :return: The recall of this PRCurveCoordinate.  # noqa: E501
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this PRCurveCoordinate.


        :param recall: The recall of this PRCurveCoordinate.  # noqa: E501
        :type recall: float
        """
        if self.local_vars_configuration.client_side_validation and recall is None:  # noqa: E501
            raise ValueError("Invalid value for `recall`, must not be `None`")  # noqa: E501

        self._recall = recall

    @property
    def f1_score(self):
        """Gets the f1_score of this PRCurveCoordinate.  # noqa: E501


        :return: The f1_score of this PRCurveCoordinate.  # noqa: E501
        :rtype: float
        """
        return self._f1_score

    @f1_score.setter
    def f1_score(self, f1_score):
        """Sets the f1_score of this PRCurveCoordinate.


        :param f1_score: The f1_score of this PRCurveCoordinate.  # noqa: E501
        :type f1_score: float
        """

        self._f1_score = f1_score

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PRCurveCoordinate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PRCurveCoordinate):
            return True

        return self.to_dict() != other.to_dict()
