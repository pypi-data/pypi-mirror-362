# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SaliencyMapConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_mispredicted_classes_per_gt': 'int',
        'num_points_per_cm_cell': 'int',
        'docker_id': 'str',
        'docker_version': 'str',
        'docker_name': 'str'
    }

    attribute_map = {
        'num_mispredicted_classes_per_gt': 'num_mispredicted_classes_per_gt',
        'num_points_per_cm_cell': 'num_points_per_cm_cell',
        'docker_id': 'docker_id',
        'docker_version': 'docker_version',
        'docker_name': 'docker_name'
    }

    def __init__(self, num_mispredicted_classes_per_gt=None, num_points_per_cm_cell=None, docker_id=None, docker_version=None, docker_name=None, local_vars_configuration=None):  # noqa: E501
        """SaliencyMapConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._num_mispredicted_classes_per_gt = None
        self._num_points_per_cm_cell = None
        self._docker_id = None
        self._docker_version = None
        self._docker_name = None
        self.discriminator = None

        self.num_mispredicted_classes_per_gt = num_mispredicted_classes_per_gt
        self.num_points_per_cm_cell = num_points_per_cm_cell
        self.docker_id = docker_id
        self.docker_version = docker_version
        if docker_name is not None:
            self.docker_name = docker_name

    @property
    def num_mispredicted_classes_per_gt(self):
        """Gets the num_mispredicted_classes_per_gt of this SaliencyMapConfig.  # noqa: E501

        How many classes per GT row on which saliency maps must be produced. The diagonal cell will always have saliency map  # noqa: E501

        :return: The num_mispredicted_classes_per_gt of this SaliencyMapConfig.  # noqa: E501
        :rtype: int
        """
        return self._num_mispredicted_classes_per_gt

    @num_mispredicted_classes_per_gt.setter
    def num_mispredicted_classes_per_gt(self, num_mispredicted_classes_per_gt):
        """Sets the num_mispredicted_classes_per_gt of this SaliencyMapConfig.

        How many classes per GT row on which saliency maps must be produced. The diagonal cell will always have saliency map  # noqa: E501

        :param num_mispredicted_classes_per_gt: The num_mispredicted_classes_per_gt of this SaliencyMapConfig.  # noqa: E501
        :type num_mispredicted_classes_per_gt: int
        """
        if self.local_vars_configuration.client_side_validation and num_mispredicted_classes_per_gt is None:  # noqa: E501
            raise ValueError("Invalid value for `num_mispredicted_classes_per_gt`, must not be `None`")  # noqa: E501

        self._num_mispredicted_classes_per_gt = num_mispredicted_classes_per_gt

    @property
    def num_points_per_cm_cell(self):
        """Gets the num_points_per_cm_cell of this SaliencyMapConfig.  # noqa: E501

        How many points per chosen confusion matrix cell will have saliency maps produced  # noqa: E501

        :return: The num_points_per_cm_cell of this SaliencyMapConfig.  # noqa: E501
        :rtype: int
        """
        return self._num_points_per_cm_cell

    @num_points_per_cm_cell.setter
    def num_points_per_cm_cell(self, num_points_per_cm_cell):
        """Sets the num_points_per_cm_cell of this SaliencyMapConfig.

        How many points per chosen confusion matrix cell will have saliency maps produced  # noqa: E501

        :param num_points_per_cm_cell: The num_points_per_cm_cell of this SaliencyMapConfig.  # noqa: E501
        :type num_points_per_cm_cell: int
        """
        if self.local_vars_configuration.client_side_validation and num_points_per_cm_cell is None:  # noqa: E501
            raise ValueError("Invalid value for `num_points_per_cm_cell`, must not be `None`")  # noqa: E501

        self._num_points_per_cm_cell = num_points_per_cm_cell

    @property
    def docker_id(self):
        """Gets the docker_id of this SaliencyMapConfig.  # noqa: E501


        :return: The docker_id of this SaliencyMapConfig.  # noqa: E501
        :rtype: str
        """
        return self._docker_id

    @docker_id.setter
    def docker_id(self, docker_id):
        """Sets the docker_id of this SaliencyMapConfig.


        :param docker_id: The docker_id of this SaliencyMapConfig.  # noqa: E501
        :type docker_id: str
        """
        if self.local_vars_configuration.client_side_validation and docker_id is None:  # noqa: E501
            raise ValueError("Invalid value for `docker_id`, must not be `None`")  # noqa: E501

        self._docker_id = docker_id

    @property
    def docker_version(self):
        """Gets the docker_version of this SaliencyMapConfig.  # noqa: E501


        :return: The docker_version of this SaliencyMapConfig.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this SaliencyMapConfig.


        :param docker_version: The docker_version of this SaliencyMapConfig.  # noqa: E501
        :type docker_version: str
        """
        if self.local_vars_configuration.client_side_validation and docker_version is None:  # noqa: E501
            raise ValueError("Invalid value for `docker_version`, must not be `None`")  # noqa: E501

        self._docker_version = docker_version

    @property
    def docker_name(self):
        """Gets the docker_name of this SaliencyMapConfig.  # noqa: E501


        :return: The docker_name of this SaliencyMapConfig.  # noqa: E501
        :rtype: str
        """
        return self._docker_name

    @docker_name.setter
    def docker_name(self, docker_name):
        """Sets the docker_name of this SaliencyMapConfig.


        :param docker_name: The docker_name of this SaliencyMapConfig.  # noqa: E501
        :type docker_name: str
        """

        self._docker_name = docker_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaliencyMapConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaliencyMapConfig):
            return True

        return self.to_dict() != other.to_dict()
