# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reqname': 'str',
        'docker_id': 'str',
        'docker_version': 'str',
        'src': 'RequestDataSourceCreate',
        'dataset': 'DatasetInfo',
        'request_source_meta': 'RequestSourceMetaJobRequestCreate',
        'submit_params': 'CreateSubmitJobRequest',
        'attributes': 'CreateJobRequestAttributes',
        'labeling_spec': 'LabelSpecVersion',
        'description': 'str'
    }

    attribute_map = {
        'reqname': 'reqname',
        'docker_id': 'docker_id',
        'docker_version': 'docker_version',
        'src': 'src',
        'dataset': 'dataset',
        'request_source_meta': 'request_source_meta',
        'submit_params': 'submit_params',
        'attributes': 'attributes',
        'labeling_spec': 'labeling_spec',
        'description': 'description'
    }

    def __init__(self, reqname=None, docker_id=None, docker_version=None, src=None, dataset=None, request_source_meta=None, submit_params=None, attributes=None, labeling_spec=None, description=None, local_vars_configuration=None):  # noqa: E501
        """CreateJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reqname = None
        self._docker_id = None
        self._docker_version = None
        self._src = None
        self._dataset = None
        self._request_source_meta = None
        self._submit_params = None
        self._attributes = None
        self._labeling_spec = None
        self._description = None
        self.discriminator = None

        self.reqname = reqname
        if docker_id is not None:
            self.docker_id = docker_id
        if docker_version is not None:
            self.docker_version = docker_version
        self.src = src
        if dataset is not None:
            self.dataset = dataset
        if request_source_meta is not None:
            self.request_source_meta = request_source_meta
        self.submit_params = submit_params
        if attributes is not None:
            self.attributes = attributes
        if labeling_spec is not None:
            self.labeling_spec = labeling_spec
        if description is not None:
            self.description = description

    @property
    def reqname(self):
        """Gets the reqname of this CreateJobRequest.  # noqa: E501


        :return: The reqname of this CreateJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._reqname

    @reqname.setter
    def reqname(self, reqname):
        """Sets the reqname of this CreateJobRequest.


        :param reqname: The reqname of this CreateJobRequest.  # noqa: E501
        :type reqname: str
        """
        if self.local_vars_configuration.client_side_validation and reqname is None:  # noqa: E501
            raise ValueError("Invalid value for `reqname`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                reqname is not None and len(reqname) < 3):
            raise ValueError("Invalid value for `reqname`, length must be greater than or equal to `3`")  # noqa: E501

        self._reqname = reqname

    @property
    def docker_id(self):
        """Gets the docker_id of this CreateJobRequest.  # noqa: E501


        :return: The docker_id of this CreateJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_id

    @docker_id.setter
    def docker_id(self, docker_id):
        """Sets the docker_id of this CreateJobRequest.


        :param docker_id: The docker_id of this CreateJobRequest.  # noqa: E501
        :type docker_id: str
        """

        self._docker_id = docker_id

    @property
    def docker_version(self):
        """Gets the docker_version of this CreateJobRequest.  # noqa: E501


        :return: The docker_version of this CreateJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this CreateJobRequest.


        :param docker_version: The docker_version of this CreateJobRequest.  # noqa: E501
        :type docker_version: str
        """

        self._docker_version = docker_version

    @property
    def src(self):
        """Gets the src of this CreateJobRequest.  # noqa: E501


        :return: The src of this CreateJobRequest.  # noqa: E501
        :rtype: RequestDataSourceCreate
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this CreateJobRequest.


        :param src: The src of this CreateJobRequest.  # noqa: E501
        :type src: RequestDataSourceCreate
        """
        if self.local_vars_configuration.client_side_validation and src is None:  # noqa: E501
            raise ValueError("Invalid value for `src`, must not be `None`")  # noqa: E501

        self._src = src

    @property
    def dataset(self):
        """Gets the dataset of this CreateJobRequest.  # noqa: E501


        :return: The dataset of this CreateJobRequest.  # noqa: E501
        :rtype: DatasetInfo
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this CreateJobRequest.


        :param dataset: The dataset of this CreateJobRequest.  # noqa: E501
        :type dataset: DatasetInfo
        """

        self._dataset = dataset

    @property
    def request_source_meta(self):
        """Gets the request_source_meta of this CreateJobRequest.  # noqa: E501


        :return: The request_source_meta of this CreateJobRequest.  # noqa: E501
        :rtype: RequestSourceMetaJobRequestCreate
        """
        return self._request_source_meta

    @request_source_meta.setter
    def request_source_meta(self, request_source_meta):
        """Sets the request_source_meta of this CreateJobRequest.


        :param request_source_meta: The request_source_meta of this CreateJobRequest.  # noqa: E501
        :type request_source_meta: RequestSourceMetaJobRequestCreate
        """

        self._request_source_meta = request_source_meta

    @property
    def submit_params(self):
        """Gets the submit_params of this CreateJobRequest.  # noqa: E501


        :return: The submit_params of this CreateJobRequest.  # noqa: E501
        :rtype: CreateSubmitJobRequest
        """
        return self._submit_params

    @submit_params.setter
    def submit_params(self, submit_params):
        """Sets the submit_params of this CreateJobRequest.


        :param submit_params: The submit_params of this CreateJobRequest.  # noqa: E501
        :type submit_params: CreateSubmitJobRequest
        """
        if self.local_vars_configuration.client_side_validation and submit_params is None:  # noqa: E501
            raise ValueError("Invalid value for `submit_params`, must not be `None`")  # noqa: E501

        self._submit_params = submit_params

    @property
    def attributes(self):
        """Gets the attributes of this CreateJobRequest.  # noqa: E501


        :return: The attributes of this CreateJobRequest.  # noqa: E501
        :rtype: CreateJobRequestAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateJobRequest.


        :param attributes: The attributes of this CreateJobRequest.  # noqa: E501
        :type attributes: CreateJobRequestAttributes
        """

        self._attributes = attributes

    @property
    def labeling_spec(self):
        """Gets the labeling_spec of this CreateJobRequest.  # noqa: E501


        :return: The labeling_spec of this CreateJobRequest.  # noqa: E501
        :rtype: LabelSpecVersion
        """
        return self._labeling_spec

    @labeling_spec.setter
    def labeling_spec(self, labeling_spec):
        """Sets the labeling_spec of this CreateJobRequest.


        :param labeling_spec: The labeling_spec of this CreateJobRequest.  # noqa: E501
        :type labeling_spec: LabelSpecVersion
        """

        self._labeling_spec = labeling_spec

    @property
    def description(self):
        """Gets the description of this CreateJobRequest.  # noqa: E501


        :return: The description of this CreateJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateJobRequest.


        :param description: The description of this CreateJobRequest.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateJobRequest):
            return True

        return self.to_dict() != other.to_dict()
