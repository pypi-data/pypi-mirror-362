# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ManualLabelingColumns(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_name': 'str',
        'bounding_box_udf': 'str',
        'bounding_box_columns': 'BoundingBoxColumns',
        'confidence': 'str',
        'area': 'str'
    }

    attribute_map = {
        'class_name': 'class_name',
        'bounding_box_udf': 'bounding_box_udf',
        'bounding_box_columns': 'bounding_box_columns',
        'confidence': 'confidence',
        'area': 'area'
    }

    def __init__(self, class_name=None, bounding_box_udf=None, bounding_box_columns=None, confidence=None, area=None, local_vars_configuration=None):  # noqa: E501
        """ManualLabelingColumns - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._class_name = None
        self._bounding_box_udf = None
        self._bounding_box_columns = None
        self._confidence = None
        self._area = None
        self.discriminator = None

        self.class_name = class_name
        if bounding_box_udf is not None:
            self.bounding_box_udf = bounding_box_udf
        if bounding_box_columns is not None:
            self.bounding_box_columns = bounding_box_columns
        if confidence is not None:
            self.confidence = confidence
        if area is not None:
            self.area = area

    @property
    def class_name(self):
        """Gets the class_name of this ManualLabelingColumns.  # noqa: E501


        :return: The class_name of this ManualLabelingColumns.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ManualLabelingColumns.


        :param class_name: The class_name of this ManualLabelingColumns.  # noqa: E501
        :type class_name: str
        """
        if self.local_vars_configuration.client_side_validation and class_name is None:  # noqa: E501
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def bounding_box_udf(self):
        """Gets the bounding_box_udf of this ManualLabelingColumns.  # noqa: E501


        :return: The bounding_box_udf of this ManualLabelingColumns.  # noqa: E501
        :rtype: str
        """
        return self._bounding_box_udf

    @bounding_box_udf.setter
    def bounding_box_udf(self, bounding_box_udf):
        """Sets the bounding_box_udf of this ManualLabelingColumns.


        :param bounding_box_udf: The bounding_box_udf of this ManualLabelingColumns.  # noqa: E501
        :type bounding_box_udf: str
        """

        self._bounding_box_udf = bounding_box_udf

    @property
    def bounding_box_columns(self):
        """Gets the bounding_box_columns of this ManualLabelingColumns.  # noqa: E501


        :return: The bounding_box_columns of this ManualLabelingColumns.  # noqa: E501
        :rtype: BoundingBoxColumns
        """
        return self._bounding_box_columns

    @bounding_box_columns.setter
    def bounding_box_columns(self, bounding_box_columns):
        """Sets the bounding_box_columns of this ManualLabelingColumns.


        :param bounding_box_columns: The bounding_box_columns of this ManualLabelingColumns.  # noqa: E501
        :type bounding_box_columns: BoundingBoxColumns
        """

        self._bounding_box_columns = bounding_box_columns

    @property
    def confidence(self):
        """Gets the confidence of this ManualLabelingColumns.  # noqa: E501


        :return: The confidence of this ManualLabelingColumns.  # noqa: E501
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this ManualLabelingColumns.


        :param confidence: The confidence of this ManualLabelingColumns.  # noqa: E501
        :type confidence: str
        """

        self._confidence = confidence

    @property
    def area(self):
        """Gets the area of this ManualLabelingColumns.  # noqa: E501


        :return: The area of this ManualLabelingColumns.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this ManualLabelingColumns.


        :param area: The area of this ManualLabelingColumns.  # noqa: E501
        :type area: str
        """

        self._area = area

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualLabelingColumns):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManualLabelingColumns):
            return True

        return self.to_dict() != other.to_dict()
