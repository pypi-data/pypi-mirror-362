# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateScenarioRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'init_dataset_id': 'str',
        'pipeline_id': 'str',
        'is_top_level': 'bool',
        'feature_space': 'FeatureSpace',
        'search_quality': 'ScenarioSearchQuality',
        'search_configuration': 'ScenarioSearchConfig',
        'source': 'ScenarioSource',
        'advanced_config': 'ScenarioAdvancedConfig'
    }

    attribute_map = {
        'name': 'name',
        'init_dataset_id': 'init_dataset_id',
        'pipeline_id': 'pipeline_id',
        'is_top_level': 'is_top_level',
        'feature_space': 'feature_space',
        'search_quality': 'search_quality',
        'search_configuration': 'search_configuration',
        'source': 'source',
        'advanced_config': 'advanced_config'
    }

    def __init__(self, name=None, init_dataset_id=None, pipeline_id=None, is_top_level=None, feature_space=None, search_quality=None, search_configuration=None, source=None, advanced_config=None, local_vars_configuration=None):  # noqa: E501
        """CreateScenarioRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._init_dataset_id = None
        self._pipeline_id = None
        self._is_top_level = None
        self._feature_space = None
        self._search_quality = None
        self._search_configuration = None
        self._source = None
        self._advanced_config = None
        self.discriminator = None

        self.name = name
        self.init_dataset_id = init_dataset_id
        self.pipeline_id = pipeline_id
        self.is_top_level = is_top_level
        if feature_space is not None:
            self.feature_space = feature_space
        if search_quality is not None:
            self.search_quality = search_quality
        self.search_configuration = search_configuration
        self.source = source
        if advanced_config is not None:
            self.advanced_config = advanced_config

    @property
    def name(self):
        """Gets the name of this CreateScenarioRequest.  # noqa: E501


        :return: The name of this CreateScenarioRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateScenarioRequest.


        :param name: The name of this CreateScenarioRequest.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def init_dataset_id(self):
        """Gets the init_dataset_id of this CreateScenarioRequest.  # noqa: E501


        :return: The init_dataset_id of this CreateScenarioRequest.  # noqa: E501
        :rtype: str
        """
        return self._init_dataset_id

    @init_dataset_id.setter
    def init_dataset_id(self, init_dataset_id):
        """Sets the init_dataset_id of this CreateScenarioRequest.


        :param init_dataset_id: The init_dataset_id of this CreateScenarioRequest.  # noqa: E501
        :type init_dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and init_dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `init_dataset_id`, must not be `None`")  # noqa: E501

        self._init_dataset_id = init_dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this CreateScenarioRequest.  # noqa: E501


        :return: The pipeline_id of this CreateScenarioRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this CreateScenarioRequest.


        :param pipeline_id: The pipeline_id of this CreateScenarioRequest.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def is_top_level(self):
        """Gets the is_top_level of this CreateScenarioRequest.  # noqa: E501


        :return: The is_top_level of this CreateScenarioRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this CreateScenarioRequest.


        :param is_top_level: The is_top_level of this CreateScenarioRequest.  # noqa: E501
        :type is_top_level: bool
        """
        if self.local_vars_configuration.client_side_validation and is_top_level is None:  # noqa: E501
            raise ValueError("Invalid value for `is_top_level`, must not be `None`")  # noqa: E501

        self._is_top_level = is_top_level

    @property
    def feature_space(self):
        """Gets the feature_space of this CreateScenarioRequest.  # noqa: E501


        :return: The feature_space of this CreateScenarioRequest.  # noqa: E501
        :rtype: FeatureSpace
        """
        return self._feature_space

    @feature_space.setter
    def feature_space(self, feature_space):
        """Sets the feature_space of this CreateScenarioRequest.


        :param feature_space: The feature_space of this CreateScenarioRequest.  # noqa: E501
        :type feature_space: FeatureSpace
        """

        self._feature_space = feature_space

    @property
    def search_quality(self):
        """Gets the search_quality of this CreateScenarioRequest.  # noqa: E501


        :return: The search_quality of this CreateScenarioRequest.  # noqa: E501
        :rtype: ScenarioSearchQuality
        """
        return self._search_quality

    @search_quality.setter
    def search_quality(self, search_quality):
        """Sets the search_quality of this CreateScenarioRequest.


        :param search_quality: The search_quality of this CreateScenarioRequest.  # noqa: E501
        :type search_quality: ScenarioSearchQuality
        """

        self._search_quality = search_quality

    @property
    def search_configuration(self):
        """Gets the search_configuration of this CreateScenarioRequest.  # noqa: E501


        :return: The search_configuration of this CreateScenarioRequest.  # noqa: E501
        :rtype: ScenarioSearchConfig
        """
        return self._search_configuration

    @search_configuration.setter
    def search_configuration(self, search_configuration):
        """Sets the search_configuration of this CreateScenarioRequest.


        :param search_configuration: The search_configuration of this CreateScenarioRequest.  # noqa: E501
        :type search_configuration: ScenarioSearchConfig
        """
        if self.local_vars_configuration.client_side_validation and search_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `search_configuration`, must not be `None`")  # noqa: E501

        self._search_configuration = search_configuration

    @property
    def source(self):
        """Gets the source of this CreateScenarioRequest.  # noqa: E501


        :return: The source of this CreateScenarioRequest.  # noqa: E501
        :rtype: ScenarioSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateScenarioRequest.


        :param source: The source of this CreateScenarioRequest.  # noqa: E501
        :type source: ScenarioSource
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def advanced_config(self):
        """Gets the advanced_config of this CreateScenarioRequest.  # noqa: E501


        :return: The advanced_config of this CreateScenarioRequest.  # noqa: E501
        :rtype: ScenarioAdvancedConfig
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this CreateScenarioRequest.


        :param advanced_config: The advanced_config of this CreateScenarioRequest.  # noqa: E501
        :type advanced_config: ScenarioAdvancedConfig
        """

        self._advanced_config = advanced_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScenarioRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateScenarioRequest):
            return True

        return self.to_dict() != other.to_dict()
