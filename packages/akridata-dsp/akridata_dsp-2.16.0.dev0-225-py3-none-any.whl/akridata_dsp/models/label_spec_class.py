# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LabelSpecClass(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'alias': 'str',
        'description': 'str',
        'superclass': 'str',
        'is_approved': 'bool',
        'resolved_prompt': 'LabelPrompt',
        'ignore_text_analysis': 'bool',
        'text_analysis_output': 'TextAnalysisOutput',
        'image_prompts': 'LabelImagePrompts',
        'is_skipped': 'bool',
        'params': 'ClassParamsSpec'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'alias': 'alias',
        'description': 'description',
        'superclass': 'superclass',
        'is_approved': 'is_approved',
        'resolved_prompt': 'resolved_prompt',
        'ignore_text_analysis': 'ignore_text_analysis',
        'text_analysis_output': 'text_analysis_output',
        'image_prompts': 'image_prompts',
        'is_skipped': 'is_skipped',
        'params': 'params'
    }

    def __init__(self, id=None, name=None, alias=None, description=None, superclass=None, is_approved=False, resolved_prompt=None, ignore_text_analysis=False, text_analysis_output=None, image_prompts=None, is_skipped=False, params=None, local_vars_configuration=None):  # noqa: E501
        """LabelSpecClass - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._alias = None
        self._description = None
        self._superclass = None
        self._is_approved = None
        self._resolved_prompt = None
        self._ignore_text_analysis = None
        self._text_analysis_output = None
        self._image_prompts = None
        self._is_skipped = None
        self._params = None
        self.discriminator = None

        self.id = id
        self.name = name
        if alias is not None:
            self.alias = alias
        if description is not None:
            self.description = description
        if superclass is not None:
            self.superclass = superclass
        if is_approved is not None:
            self.is_approved = is_approved
        if resolved_prompt is not None:
            self.resolved_prompt = resolved_prompt
        if ignore_text_analysis is not None:
            self.ignore_text_analysis = ignore_text_analysis
        if text_analysis_output is not None:
            self.text_analysis_output = text_analysis_output
        if image_prompts is not None:
            self.image_prompts = image_prompts
        if is_skipped is not None:
            self.is_skipped = is_skipped
        if params is not None:
            self.params = params

    @property
    def id(self):
        """Gets the id of this LabelSpecClass.  # noqa: E501


        :return: The id of this LabelSpecClass.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabelSpecClass.


        :param id: The id of this LabelSpecClass.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this LabelSpecClass.  # noqa: E501


        :return: The name of this LabelSpecClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabelSpecClass.


        :param name: The name of this LabelSpecClass.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def alias(self):
        """Gets the alias of this LabelSpecClass.  # noqa: E501


        :return: The alias of this LabelSpecClass.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this LabelSpecClass.


        :param alias: The alias of this LabelSpecClass.  # noqa: E501
        :type alias: str
        """

        self._alias = alias

    @property
    def description(self):
        """Gets the description of this LabelSpecClass.  # noqa: E501


        :return: The description of this LabelSpecClass.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabelSpecClass.


        :param description: The description of this LabelSpecClass.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def superclass(self):
        """Gets the superclass of this LabelSpecClass.  # noqa: E501


        :return: The superclass of this LabelSpecClass.  # noqa: E501
        :rtype: str
        """
        return self._superclass

    @superclass.setter
    def superclass(self, superclass):
        """Sets the superclass of this LabelSpecClass.


        :param superclass: The superclass of this LabelSpecClass.  # noqa: E501
        :type superclass: str
        """

        self._superclass = superclass

    @property
    def is_approved(self):
        """Gets the is_approved of this LabelSpecClass.  # noqa: E501


        :return: The is_approved of this LabelSpecClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_approved

    @is_approved.setter
    def is_approved(self, is_approved):
        """Sets the is_approved of this LabelSpecClass.


        :param is_approved: The is_approved of this LabelSpecClass.  # noqa: E501
        :type is_approved: bool
        """

        self._is_approved = is_approved

    @property
    def resolved_prompt(self):
        """Gets the resolved_prompt of this LabelSpecClass.  # noqa: E501


        :return: The resolved_prompt of this LabelSpecClass.  # noqa: E501
        :rtype: LabelPrompt
        """
        return self._resolved_prompt

    @resolved_prompt.setter
    def resolved_prompt(self, resolved_prompt):
        """Sets the resolved_prompt of this LabelSpecClass.


        :param resolved_prompt: The resolved_prompt of this LabelSpecClass.  # noqa: E501
        :type resolved_prompt: LabelPrompt
        """

        self._resolved_prompt = resolved_prompt

    @property
    def ignore_text_analysis(self):
        """Gets the ignore_text_analysis of this LabelSpecClass.  # noqa: E501


        :return: The ignore_text_analysis of this LabelSpecClass.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_text_analysis

    @ignore_text_analysis.setter
    def ignore_text_analysis(self, ignore_text_analysis):
        """Sets the ignore_text_analysis of this LabelSpecClass.


        :param ignore_text_analysis: The ignore_text_analysis of this LabelSpecClass.  # noqa: E501
        :type ignore_text_analysis: bool
        """

        self._ignore_text_analysis = ignore_text_analysis

    @property
    def text_analysis_output(self):
        """Gets the text_analysis_output of this LabelSpecClass.  # noqa: E501


        :return: The text_analysis_output of this LabelSpecClass.  # noqa: E501
        :rtype: TextAnalysisOutput
        """
        return self._text_analysis_output

    @text_analysis_output.setter
    def text_analysis_output(self, text_analysis_output):
        """Sets the text_analysis_output of this LabelSpecClass.


        :param text_analysis_output: The text_analysis_output of this LabelSpecClass.  # noqa: E501
        :type text_analysis_output: TextAnalysisOutput
        """

        self._text_analysis_output = text_analysis_output

    @property
    def image_prompts(self):
        """Gets the image_prompts of this LabelSpecClass.  # noqa: E501


        :return: The image_prompts of this LabelSpecClass.  # noqa: E501
        :rtype: LabelImagePrompts
        """
        return self._image_prompts

    @image_prompts.setter
    def image_prompts(self, image_prompts):
        """Sets the image_prompts of this LabelSpecClass.


        :param image_prompts: The image_prompts of this LabelSpecClass.  # noqa: E501
        :type image_prompts: LabelImagePrompts
        """

        self._image_prompts = image_prompts

    @property
    def is_skipped(self):
        """Gets the is_skipped of this LabelSpecClass.  # noqa: E501


        :return: The is_skipped of this LabelSpecClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_skipped

    @is_skipped.setter
    def is_skipped(self, is_skipped):
        """Sets the is_skipped of this LabelSpecClass.


        :param is_skipped: The is_skipped of this LabelSpecClass.  # noqa: E501
        :type is_skipped: bool
        """

        self._is_skipped = is_skipped

    @property
    def params(self):
        """Gets the params of this LabelSpecClass.  # noqa: E501


        :return: The params of this LabelSpecClass.  # noqa: E501
        :rtype: ClassParamsSpec
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this LabelSpecClass.


        :param params: The params of this LabelSpecClass.  # noqa: E501
        :type params: ClassParamsSpec
        """

        self._params = params

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelSpecClass):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelSpecClass):
            return True

        return self.to_dict() != other.to_dict()
