# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ScenarioDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'int',
        'name': 'str',
        'created_at': 'str',
        'is_top_level': 'bool',
        'vseq': 'VseqConfigResponse',
        'search_quality': 'ScenarioSearchQuality',
        'source': 'QueryPoints',
        'distance_metric': 'SimSearchDistanceMetric',
        'supported_pipelines': 'list[SupportedPipelineDetailed]',
        'archived': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'name': 'name',
        'created_at': 'created_at',
        'is_top_level': 'is_top_level',
        'vseq': 'vseq',
        'search_quality': 'search_quality',
        'source': 'source',
        'distance_metric': 'distance_metric',
        'supported_pipelines': 'supported_pipelines',
        'archived': 'archived'
    }

    def __init__(self, version=None, name=None, created_at=None, is_top_level=None, vseq=None, search_quality=None, source=None, distance_metric=None, supported_pipelines=None, archived=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._name = None
        self._created_at = None
        self._is_top_level = None
        self._vseq = None
        self._search_quality = None
        self._source = None
        self._distance_metric = None
        self._supported_pipelines = None
        self._archived = None
        self.discriminator = None

        self.version = version
        self.name = name
        self.created_at = created_at
        self.is_top_level = is_top_level
        if vseq is not None:
            self.vseq = vseq
        self.search_quality = search_quality
        self.source = source
        self.distance_metric = distance_metric
        self.supported_pipelines = supported_pipelines
        self.archived = archived

    @property
    def version(self):
        """Gets the version of this ScenarioDetailResponse.  # noqa: E501


        :return: The version of this ScenarioDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ScenarioDetailResponse.


        :param version: The version of this ScenarioDetailResponse.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def name(self):
        """Gets the name of this ScenarioDetailResponse.  # noqa: E501


        :return: The name of this ScenarioDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScenarioDetailResponse.


        :param name: The name of this ScenarioDetailResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this ScenarioDetailResponse.  # noqa: E501


        :return: The created_at of this ScenarioDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ScenarioDetailResponse.


        :param created_at: The created_at of this ScenarioDetailResponse.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def is_top_level(self):
        """Gets the is_top_level of this ScenarioDetailResponse.  # noqa: E501


        :return: The is_top_level of this ScenarioDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this ScenarioDetailResponse.


        :param is_top_level: The is_top_level of this ScenarioDetailResponse.  # noqa: E501
        :type is_top_level: bool
        """
        if self.local_vars_configuration.client_side_validation and is_top_level is None:  # noqa: E501
            raise ValueError("Invalid value for `is_top_level`, must not be `None`")  # noqa: E501

        self._is_top_level = is_top_level

    @property
    def vseq(self):
        """Gets the vseq of this ScenarioDetailResponse.  # noqa: E501


        :return: The vseq of this ScenarioDetailResponse.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this ScenarioDetailResponse.


        :param vseq: The vseq of this ScenarioDetailResponse.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    @property
    def search_quality(self):
        """Gets the search_quality of this ScenarioDetailResponse.  # noqa: E501


        :return: The search_quality of this ScenarioDetailResponse.  # noqa: E501
        :rtype: ScenarioSearchQuality
        """
        return self._search_quality

    @search_quality.setter
    def search_quality(self, search_quality):
        """Sets the search_quality of this ScenarioDetailResponse.


        :param search_quality: The search_quality of this ScenarioDetailResponse.  # noqa: E501
        :type search_quality: ScenarioSearchQuality
        """
        if self.local_vars_configuration.client_side_validation and search_quality is None:  # noqa: E501
            raise ValueError("Invalid value for `search_quality`, must not be `None`")  # noqa: E501

        self._search_quality = search_quality

    @property
    def source(self):
        """Gets the source of this ScenarioDetailResponse.  # noqa: E501


        :return: The source of this ScenarioDetailResponse.  # noqa: E501
        :rtype: QueryPoints
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ScenarioDetailResponse.


        :param source: The source of this ScenarioDetailResponse.  # noqa: E501
        :type source: QueryPoints
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def distance_metric(self):
        """Gets the distance_metric of this ScenarioDetailResponse.  # noqa: E501


        :return: The distance_metric of this ScenarioDetailResponse.  # noqa: E501
        :rtype: SimSearchDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this ScenarioDetailResponse.


        :param distance_metric: The distance_metric of this ScenarioDetailResponse.  # noqa: E501
        :type distance_metric: SimSearchDistanceMetric
        """
        if self.local_vars_configuration.client_side_validation and distance_metric is None:  # noqa: E501
            raise ValueError("Invalid value for `distance_metric`, must not be `None`")  # noqa: E501

        self._distance_metric = distance_metric

    @property
    def supported_pipelines(self):
        """Gets the supported_pipelines of this ScenarioDetailResponse.  # noqa: E501


        :return: The supported_pipelines of this ScenarioDetailResponse.  # noqa: E501
        :rtype: list[SupportedPipelineDetailed]
        """
        return self._supported_pipelines

    @supported_pipelines.setter
    def supported_pipelines(self, supported_pipelines):
        """Sets the supported_pipelines of this ScenarioDetailResponse.


        :param supported_pipelines: The supported_pipelines of this ScenarioDetailResponse.  # noqa: E501
        :type supported_pipelines: list[SupportedPipelineDetailed]
        """
        if self.local_vars_configuration.client_side_validation and supported_pipelines is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_pipelines`, must not be `None`")  # noqa: E501

        self._supported_pipelines = supported_pipelines

    @property
    def archived(self):
        """Gets the archived of this ScenarioDetailResponse.  # noqa: E501


        :return: The archived of this ScenarioDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ScenarioDetailResponse.


        :param archived: The archived of this ScenarioDetailResponse.  # noqa: E501
        :type archived: bool
        """
        if self.local_vars_configuration.client_side_validation and archived is None:  # noqa: E501
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
