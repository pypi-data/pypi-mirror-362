# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateScenarioExecution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scenario_id': 'str',
        'scenario_execution_title': 'str',
        'source': 'ScenarioExecutionSource',
        'search_target': 'SearchTarget',
        'min_points_req_fraction': 'float',
        'search_configuration': 'ScenarioExecutionSearchConfig',
        'search_quality': 'ScenarioSearchQuality',
        'sampling_percentage': 'float',
        'euclidean_sampling_fraction': 'float',
        'advanced_config': 'ScenarioAdvancedConfig'
    }

    attribute_map = {
        'scenario_id': 'scenario_id',
        'scenario_execution_title': 'scenario_execution_title',
        'source': 'source',
        'search_target': 'search_target',
        'min_points_req_fraction': 'min_points_req_fraction',
        'search_configuration': 'search_configuration',
        'search_quality': 'search_quality',
        'sampling_percentage': 'sampling_percentage',
        'euclidean_sampling_fraction': 'euclidean_sampling_fraction',
        'advanced_config': 'advanced_config'
    }

    def __init__(self, scenario_id=None, scenario_execution_title=None, source=None, search_target=None, min_points_req_fraction=1.0, search_configuration=None, search_quality=None, sampling_percentage=None, euclidean_sampling_fraction=0, advanced_config=None, local_vars_configuration=None):  # noqa: E501
        """CreateScenarioExecution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._scenario_id = None
        self._scenario_execution_title = None
        self._source = None
        self._search_target = None
        self._min_points_req_fraction = None
        self._search_configuration = None
        self._search_quality = None
        self._sampling_percentage = None
        self._euclidean_sampling_fraction = None
        self._advanced_config = None
        self.discriminator = None

        if scenario_id is not None:
            self.scenario_id = scenario_id
        if scenario_execution_title is not None:
            self.scenario_execution_title = scenario_execution_title
        if source is not None:
            self.source = source
        self.search_target = search_target
        if min_points_req_fraction is not None:
            self.min_points_req_fraction = min_points_req_fraction
        self.search_configuration = search_configuration
        if search_quality is not None:
            self.search_quality = search_quality
        if sampling_percentage is not None:
            self.sampling_percentage = sampling_percentage
        if euclidean_sampling_fraction is not None:
            self.euclidean_sampling_fraction = euclidean_sampling_fraction
        if advanced_config is not None:
            self.advanced_config = advanced_config

    @property
    def scenario_id(self):
        """Gets the scenario_id of this CreateScenarioExecution.  # noqa: E501


        :return: The scenario_id of this CreateScenarioExecution.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this CreateScenarioExecution.


        :param scenario_id: The scenario_id of this CreateScenarioExecution.  # noqa: E501
        :type scenario_id: str
        """

        self._scenario_id = scenario_id

    @property
    def scenario_execution_title(self):
        """Gets the scenario_execution_title of this CreateScenarioExecution.  # noqa: E501


        :return: The scenario_execution_title of this CreateScenarioExecution.  # noqa: E501
        :rtype: str
        """
        return self._scenario_execution_title

    @scenario_execution_title.setter
    def scenario_execution_title(self, scenario_execution_title):
        """Sets the scenario_execution_title of this CreateScenarioExecution.


        :param scenario_execution_title: The scenario_execution_title of this CreateScenarioExecution.  # noqa: E501
        :type scenario_execution_title: str
        """
        if (self.local_vars_configuration.client_side_validation and
                scenario_execution_title is not None and len(scenario_execution_title) < 1):
            raise ValueError("Invalid value for `scenario_execution_title`, length must be greater than or equal to `1`")  # noqa: E501

        self._scenario_execution_title = scenario_execution_title

    @property
    def source(self):
        """Gets the source of this CreateScenarioExecution.  # noqa: E501


        :return: The source of this CreateScenarioExecution.  # noqa: E501
        :rtype: ScenarioExecutionSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateScenarioExecution.


        :param source: The source of this CreateScenarioExecution.  # noqa: E501
        :type source: ScenarioExecutionSource
        """

        self._source = source

    @property
    def search_target(self):
        """Gets the search_target of this CreateScenarioExecution.  # noqa: E501


        :return: The search_target of this CreateScenarioExecution.  # noqa: E501
        :rtype: SearchTarget
        """
        return self._search_target

    @search_target.setter
    def search_target(self, search_target):
        """Sets the search_target of this CreateScenarioExecution.


        :param search_target: The search_target of this CreateScenarioExecution.  # noqa: E501
        :type search_target: SearchTarget
        """
        if self.local_vars_configuration.client_side_validation and search_target is None:  # noqa: E501
            raise ValueError("Invalid value for `search_target`, must not be `None`")  # noqa: E501

        self._search_target = search_target

    @property
    def min_points_req_fraction(self):
        """Gets the min_points_req_fraction of this CreateScenarioExecution.  # noqa: E501


        :return: The min_points_req_fraction of this CreateScenarioExecution.  # noqa: E501
        :rtype: float
        """
        return self._min_points_req_fraction

    @min_points_req_fraction.setter
    def min_points_req_fraction(self, min_points_req_fraction):
        """Sets the min_points_req_fraction of this CreateScenarioExecution.


        :param min_points_req_fraction: The min_points_req_fraction of this CreateScenarioExecution.  # noqa: E501
        :type min_points_req_fraction: float
        """

        self._min_points_req_fraction = min_points_req_fraction

    @property
    def search_configuration(self):
        """Gets the search_configuration of this CreateScenarioExecution.  # noqa: E501


        :return: The search_configuration of this CreateScenarioExecution.  # noqa: E501
        :rtype: ScenarioExecutionSearchConfig
        """
        return self._search_configuration

    @search_configuration.setter
    def search_configuration(self, search_configuration):
        """Sets the search_configuration of this CreateScenarioExecution.


        :param search_configuration: The search_configuration of this CreateScenarioExecution.  # noqa: E501
        :type search_configuration: ScenarioExecutionSearchConfig
        """
        if self.local_vars_configuration.client_side_validation and search_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `search_configuration`, must not be `None`")  # noqa: E501

        self._search_configuration = search_configuration

    @property
    def search_quality(self):
        """Gets the search_quality of this CreateScenarioExecution.  # noqa: E501


        :return: The search_quality of this CreateScenarioExecution.  # noqa: E501
        :rtype: ScenarioSearchQuality
        """
        return self._search_quality

    @search_quality.setter
    def search_quality(self, search_quality):
        """Sets the search_quality of this CreateScenarioExecution.


        :param search_quality: The search_quality of this CreateScenarioExecution.  # noqa: E501
        :type search_quality: ScenarioSearchQuality
        """

        self._search_quality = search_quality

    @property
    def sampling_percentage(self):
        """Gets the sampling_percentage of this CreateScenarioExecution.  # noqa: E501


        :return: The sampling_percentage of this CreateScenarioExecution.  # noqa: E501
        :rtype: float
        """
        return self._sampling_percentage

    @sampling_percentage.setter
    def sampling_percentage(self, sampling_percentage):
        """Sets the sampling_percentage of this CreateScenarioExecution.


        :param sampling_percentage: The sampling_percentage of this CreateScenarioExecution.  # noqa: E501
        :type sampling_percentage: float
        """

        self._sampling_percentage = sampling_percentage

    @property
    def euclidean_sampling_fraction(self):
        """Gets the euclidean_sampling_fraction of this CreateScenarioExecution.  # noqa: E501


        :return: The euclidean_sampling_fraction of this CreateScenarioExecution.  # noqa: E501
        :rtype: float
        """
        return self._euclidean_sampling_fraction

    @euclidean_sampling_fraction.setter
    def euclidean_sampling_fraction(self, euclidean_sampling_fraction):
        """Sets the euclidean_sampling_fraction of this CreateScenarioExecution.


        :param euclidean_sampling_fraction: The euclidean_sampling_fraction of this CreateScenarioExecution.  # noqa: E501
        :type euclidean_sampling_fraction: float
        """
        if (self.local_vars_configuration.client_side_validation and
                euclidean_sampling_fraction is not None and euclidean_sampling_fraction > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `euclidean_sampling_fraction`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                euclidean_sampling_fraction is not None and euclidean_sampling_fraction < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `euclidean_sampling_fraction`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._euclidean_sampling_fraction = euclidean_sampling_fraction

    @property
    def advanced_config(self):
        """Gets the advanced_config of this CreateScenarioExecution.  # noqa: E501


        :return: The advanced_config of this CreateScenarioExecution.  # noqa: E501
        :rtype: ScenarioAdvancedConfig
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this CreateScenarioExecution.


        :param advanced_config: The advanced_config of this CreateScenarioExecution.  # noqa: E501
        :type advanced_config: ScenarioAdvancedConfig
        """

        self._advanced_config = advanced_config

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateScenarioExecution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateScenarioExecution):
            return True

        return self.to_dict() != other.to_dict()
