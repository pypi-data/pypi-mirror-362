# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LabelingConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conf_threshold': 'float',
        'top_k': 'int',
        'remove_same_cls_nested_boxes': 'bool',
        'nestedness_threshold': 'float',
        'sample_fraction': 'float',
        'sample_size': 'int',
        'fine_grained_models': 'list[str]',
        'fine_grained_params': 'FineGrainedParams',
        'advanced_config': 'AutoLabelAdvancedConfig',
        'run_segmentation': 'bool'
    }

    attribute_map = {
        'conf_threshold': 'conf_threshold',
        'top_k': 'top_k',
        'remove_same_cls_nested_boxes': 'remove_same_cls_nested_boxes',
        'nestedness_threshold': 'nestedness_threshold',
        'sample_fraction': 'sample_fraction',
        'sample_size': 'sample_size',
        'fine_grained_models': 'fine_grained_models',
        'fine_grained_params': 'fine_grained_params',
        'advanced_config': 'advanced_config',
        'run_segmentation': 'run_segmentation'
    }

    def __init__(self, conf_threshold=None, top_k=None, remove_same_cls_nested_boxes=None, nestedness_threshold=None, sample_fraction=None, sample_size=None, fine_grained_models=None, fine_grained_params=None, advanced_config=None, run_segmentation=False, local_vars_configuration=None):  # noqa: E501
        """LabelingConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._conf_threshold = None
        self._top_k = None
        self._remove_same_cls_nested_boxes = None
        self._nestedness_threshold = None
        self._sample_fraction = None
        self._sample_size = None
        self._fine_grained_models = None
        self._fine_grained_params = None
        self._advanced_config = None
        self._run_segmentation = None
        self.discriminator = None

        if conf_threshold is not None:
            self.conf_threshold = conf_threshold
        if top_k is not None:
            self.top_k = top_k
        if remove_same_cls_nested_boxes is not None:
            self.remove_same_cls_nested_boxes = remove_same_cls_nested_boxes
        if nestedness_threshold is not None:
            self.nestedness_threshold = nestedness_threshold
        if sample_fraction is not None:
            self.sample_fraction = sample_fraction
        if sample_size is not None:
            self.sample_size = sample_size
        if fine_grained_models is not None:
            self.fine_grained_models = fine_grained_models
        if fine_grained_params is not None:
            self.fine_grained_params = fine_grained_params
        if advanced_config is not None:
            self.advanced_config = advanced_config
        if run_segmentation is not None:
            self.run_segmentation = run_segmentation

    @property
    def conf_threshold(self):
        """Gets the conf_threshold of this LabelingConfig.  # noqa: E501


        :return: The conf_threshold of this LabelingConfig.  # noqa: E501
        :rtype: float
        """
        return self._conf_threshold

    @conf_threshold.setter
    def conf_threshold(self, conf_threshold):
        """Sets the conf_threshold of this LabelingConfig.


        :param conf_threshold: The conf_threshold of this LabelingConfig.  # noqa: E501
        :type conf_threshold: float
        """

        self._conf_threshold = conf_threshold

    @property
    def top_k(self):
        """Gets the top_k of this LabelingConfig.  # noqa: E501


        :return: The top_k of this LabelingConfig.  # noqa: E501
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this LabelingConfig.


        :param top_k: The top_k of this LabelingConfig.  # noqa: E501
        :type top_k: int
        """

        self._top_k = top_k

    @property
    def remove_same_cls_nested_boxes(self):
        """Gets the remove_same_cls_nested_boxes of this LabelingConfig.  # noqa: E501


        :return: The remove_same_cls_nested_boxes of this LabelingConfig.  # noqa: E501
        :rtype: bool
        """
        return self._remove_same_cls_nested_boxes

    @remove_same_cls_nested_boxes.setter
    def remove_same_cls_nested_boxes(self, remove_same_cls_nested_boxes):
        """Sets the remove_same_cls_nested_boxes of this LabelingConfig.


        :param remove_same_cls_nested_boxes: The remove_same_cls_nested_boxes of this LabelingConfig.  # noqa: E501
        :type remove_same_cls_nested_boxes: bool
        """

        self._remove_same_cls_nested_boxes = remove_same_cls_nested_boxes

    @property
    def nestedness_threshold(self):
        """Gets the nestedness_threshold of this LabelingConfig.  # noqa: E501


        :return: The nestedness_threshold of this LabelingConfig.  # noqa: E501
        :rtype: float
        """
        return self._nestedness_threshold

    @nestedness_threshold.setter
    def nestedness_threshold(self, nestedness_threshold):
        """Sets the nestedness_threshold of this LabelingConfig.


        :param nestedness_threshold: The nestedness_threshold of this LabelingConfig.  # noqa: E501
        :type nestedness_threshold: float
        """
        if (self.local_vars_configuration.client_side_validation and
                nestedness_threshold is not None and nestedness_threshold > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `nestedness_threshold`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                nestedness_threshold is not None and nestedness_threshold < 0.8):  # noqa: E501
            raise ValueError("Invalid value for `nestedness_threshold`, must be a value greater than or equal to `0.8`")  # noqa: E501

        self._nestedness_threshold = nestedness_threshold

    @property
    def sample_fraction(self):
        """Gets the sample_fraction of this LabelingConfig.  # noqa: E501


        :return: The sample_fraction of this LabelingConfig.  # noqa: E501
        :rtype: float
        """
        return self._sample_fraction

    @sample_fraction.setter
    def sample_fraction(self, sample_fraction):
        """Sets the sample_fraction of this LabelingConfig.


        :param sample_fraction: The sample_fraction of this LabelingConfig.  # noqa: E501
        :type sample_fraction: float
        """
        if (self.local_vars_configuration.client_side_validation and
                sample_fraction is not None and sample_fraction > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `sample_fraction`, must be a value less than or equal to `1.0`")  # noqa: E501

        self._sample_fraction = sample_fraction

    @property
    def sample_size(self):
        """Gets the sample_size of this LabelingConfig.  # noqa: E501


        :return: The sample_size of this LabelingConfig.  # noqa: E501
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this LabelingConfig.


        :param sample_size: The sample_size of this LabelingConfig.  # noqa: E501
        :type sample_size: int
        """

        self._sample_size = sample_size

    @property
    def fine_grained_models(self):
        """Gets the fine_grained_models of this LabelingConfig.  # noqa: E501


        :return: The fine_grained_models of this LabelingConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._fine_grained_models

    @fine_grained_models.setter
    def fine_grained_models(self, fine_grained_models):
        """Sets the fine_grained_models of this LabelingConfig.


        :param fine_grained_models: The fine_grained_models of this LabelingConfig.  # noqa: E501
        :type fine_grained_models: list[str]
        """

        self._fine_grained_models = fine_grained_models

    @property
    def fine_grained_params(self):
        """Gets the fine_grained_params of this LabelingConfig.  # noqa: E501


        :return: The fine_grained_params of this LabelingConfig.  # noqa: E501
        :rtype: FineGrainedParams
        """
        return self._fine_grained_params

    @fine_grained_params.setter
    def fine_grained_params(self, fine_grained_params):
        """Sets the fine_grained_params of this LabelingConfig.


        :param fine_grained_params: The fine_grained_params of this LabelingConfig.  # noqa: E501
        :type fine_grained_params: FineGrainedParams
        """

        self._fine_grained_params = fine_grained_params

    @property
    def advanced_config(self):
        """Gets the advanced_config of this LabelingConfig.  # noqa: E501


        :return: The advanced_config of this LabelingConfig.  # noqa: E501
        :rtype: AutoLabelAdvancedConfig
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this LabelingConfig.


        :param advanced_config: The advanced_config of this LabelingConfig.  # noqa: E501
        :type advanced_config: AutoLabelAdvancedConfig
        """

        self._advanced_config = advanced_config

    @property
    def run_segmentation(self):
        """Gets the run_segmentation of this LabelingConfig.  # noqa: E501


        :return: The run_segmentation of this LabelingConfig.  # noqa: E501
        :rtype: bool
        """
        return self._run_segmentation

    @run_segmentation.setter
    def run_segmentation(self, run_segmentation):
        """Sets the run_segmentation of this LabelingConfig.


        :param run_segmentation: The run_segmentation of this LabelingConfig.  # noqa: E501
        :type run_segmentation: bool
        """

        self._run_segmentation = run_segmentation

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelingConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelingConfig):
            return True

        return self.to_dict() != other.to_dict()
