# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SrcCatalogFilterItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'table_name': 'str',
        'table_type': 'str',
        'filter_string': 'str',
        'abs_table_name': 'str',
        'table_source': 'CatalogTableSource'
    }

    attribute_map = {
        'table_name': 'table_name',
        'table_type': 'table_type',
        'filter_string': 'filter_string',
        'abs_table_name': 'abs_table_name',
        'table_source': 'table_source'
    }

    def __init__(self, table_name=None, table_type=None, filter_string=None, abs_table_name=None, table_source=None, local_vars_configuration=None):  # noqa: E501
        """SrcCatalogFilterItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._table_name = None
        self._table_type = None
        self._filter_string = None
        self._abs_table_name = None
        self._table_source = None
        self.discriminator = None

        self.table_name = table_name
        self.table_type = table_type
        if filter_string is not None:
            self.filter_string = filter_string
        if abs_table_name is not None:
            self.abs_table_name = abs_table_name
        if table_source is not None:
            self.table_source = table_source

    @property
    def table_name(self):
        """Gets the table_name of this SrcCatalogFilterItem.  # noqa: E501


        :return: The table_name of this SrcCatalogFilterItem.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SrcCatalogFilterItem.


        :param table_name: The table_name of this SrcCatalogFilterItem.  # noqa: E501
        :type table_name: str
        """
        if self.local_vars_configuration.client_side_validation and table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `table_name`, must not be `None`")  # noqa: E501

        self._table_name = table_name

    @property
    def table_type(self):
        """Gets the table_type of this SrcCatalogFilterItem.  # noqa: E501


        :return: The table_type of this SrcCatalogFilterItem.  # noqa: E501
        :rtype: str
        """
        return self._table_type

    @table_type.setter
    def table_type(self, table_type):
        """Sets the table_type of this SrcCatalogFilterItem.


        :param table_type: The table_type of this SrcCatalogFilterItem.  # noqa: E501
        :type table_type: str
        """
        if self.local_vars_configuration.client_side_validation and table_type is None:  # noqa: E501
            raise ValueError("Invalid value for `table_type`, must not be `None`")  # noqa: E501

        self._table_type = table_type

    @property
    def filter_string(self):
        """Gets the filter_string of this SrcCatalogFilterItem.  # noqa: E501


        :return: The filter_string of this SrcCatalogFilterItem.  # noqa: E501
        :rtype: str
        """
        return self._filter_string

    @filter_string.setter
    def filter_string(self, filter_string):
        """Sets the filter_string of this SrcCatalogFilterItem.


        :param filter_string: The filter_string of this SrcCatalogFilterItem.  # noqa: E501
        :type filter_string: str
        """

        self._filter_string = filter_string

    @property
    def abs_table_name(self):
        """Gets the abs_table_name of this SrcCatalogFilterItem.  # noqa: E501


        :return: The abs_table_name of this SrcCatalogFilterItem.  # noqa: E501
        :rtype: str
        """
        return self._abs_table_name

    @abs_table_name.setter
    def abs_table_name(self, abs_table_name):
        """Sets the abs_table_name of this SrcCatalogFilterItem.


        :param abs_table_name: The abs_table_name of this SrcCatalogFilterItem.  # noqa: E501
        :type abs_table_name: str
        """

        self._abs_table_name = abs_table_name

    @property
    def table_source(self):
        """Gets the table_source of this SrcCatalogFilterItem.  # noqa: E501


        :return: The table_source of this SrcCatalogFilterItem.  # noqa: E501
        :rtype: CatalogTableSource
        """
        return self._table_source

    @table_source.setter
    def table_source(self, table_source):
        """Sets the table_source of this SrcCatalogFilterItem.


        :param table_source: The table_source of this SrcCatalogFilterItem.  # noqa: E501
        :type table_source: CatalogTableSource
        """

        self._table_source = table_source

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SrcCatalogFilterItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SrcCatalogFilterItem):
            return True

        return self.to_dict() != other.to_dict()
