# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class VseqConfigResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sequence_length': 'float',
        'sequence_start_offset': 'float',
        'sequence_stride': 'float',
        'version': 'str',
        'capabilities': 'Capabilities'
    }

    attribute_map = {
        'sequence_length': 'sequence_length',
        'sequence_start_offset': 'sequence_start_offset',
        'sequence_stride': 'sequence_stride',
        'version': 'version',
        'capabilities': 'capabilities'
    }

    def __init__(self, sequence_length=None, sequence_start_offset=None, sequence_stride=None, version='1.0', capabilities=None, local_vars_configuration=None):  # noqa: E501
        """VseqConfigResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._sequence_length = None
        self._sequence_start_offset = None
        self._sequence_stride = None
        self._version = None
        self._capabilities = None
        self.discriminator = None

        self.sequence_length = sequence_length
        self.sequence_start_offset = sequence_start_offset
        self.sequence_stride = sequence_stride
        if version is not None:
            self.version = version
        self.capabilities = capabilities

    @property
    def sequence_length(self):
        """Gets the sequence_length of this VseqConfigResponse.  # noqa: E501


        :return: The sequence_length of this VseqConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._sequence_length

    @sequence_length.setter
    def sequence_length(self, sequence_length):
        """Sets the sequence_length of this VseqConfigResponse.


        :param sequence_length: The sequence_length of this VseqConfigResponse.  # noqa: E501
        :type sequence_length: float
        """
        if self.local_vars_configuration.client_side_validation and sequence_length is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence_length`, must not be `None`")  # noqa: E501

        self._sequence_length = sequence_length

    @property
    def sequence_start_offset(self):
        """Gets the sequence_start_offset of this VseqConfigResponse.  # noqa: E501


        :return: The sequence_start_offset of this VseqConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._sequence_start_offset

    @sequence_start_offset.setter
    def sequence_start_offset(self, sequence_start_offset):
        """Sets the sequence_start_offset of this VseqConfigResponse.


        :param sequence_start_offset: The sequence_start_offset of this VseqConfigResponse.  # noqa: E501
        :type sequence_start_offset: float
        """
        if self.local_vars_configuration.client_side_validation and sequence_start_offset is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence_start_offset`, must not be `None`")  # noqa: E501

        self._sequence_start_offset = sequence_start_offset

    @property
    def sequence_stride(self):
        """Gets the sequence_stride of this VseqConfigResponse.  # noqa: E501


        :return: The sequence_stride of this VseqConfigResponse.  # noqa: E501
        :rtype: float
        """
        return self._sequence_stride

    @sequence_stride.setter
    def sequence_stride(self, sequence_stride):
        """Sets the sequence_stride of this VseqConfigResponse.


        :param sequence_stride: The sequence_stride of this VseqConfigResponse.  # noqa: E501
        :type sequence_stride: float
        """
        if self.local_vars_configuration.client_side_validation and sequence_stride is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence_stride`, must not be `None`")  # noqa: E501

        self._sequence_stride = sequence_stride

    @property
    def version(self):
        """Gets the version of this VseqConfigResponse.  # noqa: E501


        :return: The version of this VseqConfigResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VseqConfigResponse.


        :param version: The version of this VseqConfigResponse.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def capabilities(self):
        """Gets the capabilities of this VseqConfigResponse.  # noqa: E501


        :return: The capabilities of this VseqConfigResponse.  # noqa: E501
        :rtype: Capabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this VseqConfigResponse.


        :param capabilities: The capabilities of this VseqConfigResponse.  # noqa: E501
        :type capabilities: Capabilities
        """
        if self.local_vars_configuration.client_side_validation and capabilities is None:  # noqa: E501
            raise ValueError("Invalid value for `capabilities`, must not be `None`")  # noqa: E501

        self._capabilities = capabilities

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VseqConfigResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VseqConfigResponse):
            return True

        return self.to_dict() != other.to_dict()
