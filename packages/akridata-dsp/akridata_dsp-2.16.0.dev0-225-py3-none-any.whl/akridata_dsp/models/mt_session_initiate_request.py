# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtSessionInitiateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'data_version': 'str',
        'action': 'TrainingJobAction',
        'model_params': 'ModelParams',
        'refine_config': 'TrainingRefinementConfig',
        'training_params': 'TrainingJobParams',
        'evaluation_params': 'EvaluationJobParams'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'data_version': 'data_version',
        'action': 'action',
        'model_params': 'model_params',
        'refine_config': 'refine_config',
        'training_params': 'training_params',
        'evaluation_params': 'evaluation_params'
    }

    def __init__(self, name=None, description=None, data_version=None, action=None, model_params=None, refine_config=None, training_params=None, evaluation_params=None, local_vars_configuration=None):  # noqa: E501
        """MtSessionInitiateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._data_version = None
        self._action = None
        self._model_params = None
        self._refine_config = None
        self._training_params = None
        self._evaluation_params = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.data_version = data_version
        self.action = action
        if model_params is not None:
            self.model_params = model_params
        if refine_config is not None:
            self.refine_config = refine_config
        self.training_params = training_params
        self.evaluation_params = evaluation_params

    @property
    def name(self):
        """Gets the name of this MtSessionInitiateRequest.  # noqa: E501


        :return: The name of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MtSessionInitiateRequest.


        :param name: The name of this MtSessionInitiateRequest.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MtSessionInitiateRequest.  # noqa: E501


        :return: The description of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MtSessionInitiateRequest.


        :param description: The description of this MtSessionInitiateRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def data_version(self):
        """Gets the data_version of this MtSessionInitiateRequest.  # noqa: E501


        :return: The data_version of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this MtSessionInitiateRequest.


        :param data_version: The data_version of this MtSessionInitiateRequest.  # noqa: E501
        :type data_version: str
        """
        if self.local_vars_configuration.client_side_validation and data_version is None:  # noqa: E501
            raise ValueError("Invalid value for `data_version`, must not be `None`")  # noqa: E501

        self._data_version = data_version

    @property
    def action(self):
        """Gets the action of this MtSessionInitiateRequest.  # noqa: E501


        :return: The action of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: TrainingJobAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MtSessionInitiateRequest.


        :param action: The action of this MtSessionInitiateRequest.  # noqa: E501
        :type action: TrainingJobAction
        """
        if self.local_vars_configuration.client_side_validation and action is None:  # noqa: E501
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def model_params(self):
        """Gets the model_params of this MtSessionInitiateRequest.  # noqa: E501


        :return: The model_params of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: ModelParams
        """
        return self._model_params

    @model_params.setter
    def model_params(self, model_params):
        """Sets the model_params of this MtSessionInitiateRequest.


        :param model_params: The model_params of this MtSessionInitiateRequest.  # noqa: E501
        :type model_params: ModelParams
        """

        self._model_params = model_params

    @property
    def refine_config(self):
        """Gets the refine_config of this MtSessionInitiateRequest.  # noqa: E501


        :return: The refine_config of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: TrainingRefinementConfig
        """
        return self._refine_config

    @refine_config.setter
    def refine_config(self, refine_config):
        """Sets the refine_config of this MtSessionInitiateRequest.


        :param refine_config: The refine_config of this MtSessionInitiateRequest.  # noqa: E501
        :type refine_config: TrainingRefinementConfig
        """

        self._refine_config = refine_config

    @property
    def training_params(self):
        """Gets the training_params of this MtSessionInitiateRequest.  # noqa: E501


        :return: The training_params of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: TrainingJobParams
        """
        return self._training_params

    @training_params.setter
    def training_params(self, training_params):
        """Sets the training_params of this MtSessionInitiateRequest.


        :param training_params: The training_params of this MtSessionInitiateRequest.  # noqa: E501
        :type training_params: TrainingJobParams
        """
        if self.local_vars_configuration.client_side_validation and training_params is None:  # noqa: E501
            raise ValueError("Invalid value for `training_params`, must not be `None`")  # noqa: E501

        self._training_params = training_params

    @property
    def evaluation_params(self):
        """Gets the evaluation_params of this MtSessionInitiateRequest.  # noqa: E501


        :return: The evaluation_params of this MtSessionInitiateRequest.  # noqa: E501
        :rtype: EvaluationJobParams
        """
        return self._evaluation_params

    @evaluation_params.setter
    def evaluation_params(self, evaluation_params):
        """Sets the evaluation_params of this MtSessionInitiateRequest.


        :param evaluation_params: The evaluation_params of this MtSessionInitiateRequest.  # noqa: E501
        :type evaluation_params: EvaluationJobParams
        """
        if self.local_vars_configuration.client_side_validation and evaluation_params is None:  # noqa: E501
            raise ValueError("Invalid value for `evaluation_params`, must not be `None`")  # noqa: E501

        self._evaluation_params = evaluation_params

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtSessionInitiateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtSessionInitiateRequest):
            return True

        return self.to_dict() != other.to_dict()
