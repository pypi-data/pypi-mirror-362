# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LabelSpecDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'spec_id': 'str',
        'type': 'str',
        'name': 'str',
        'description': 'str',
        'latest_version': 'int',
        'total_requests': 'int',
        'classes': 'list[str]',
        'status': 'LabelSpecStatus',
        'created_at': 'str',
        'created_by': 'str',
        'last_updated_at': 'str',
        'last_updated_by': 'str',
        'is_archived': 'bool'
    }

    attribute_map = {
        'spec_id': 'spec_id',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'latest_version': 'latest_version',
        'total_requests': 'total_requests',
        'classes': 'classes',
        'status': 'status',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'last_updated_at': 'last_updated_at',
        'last_updated_by': 'last_updated_by',
        'is_archived': 'is_archived'
    }

    def __init__(self, spec_id=None, type=None, name=None, description=None, latest_version=None, total_requests=None, classes=None, status=None, created_at=None, created_by=None, last_updated_at=None, last_updated_by=None, is_archived=None, local_vars_configuration=None):  # noqa: E501
        """LabelSpecDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._spec_id = None
        self._type = None
        self._name = None
        self._description = None
        self._latest_version = None
        self._total_requests = None
        self._classes = None
        self._status = None
        self._created_at = None
        self._created_by = None
        self._last_updated_at = None
        self._last_updated_by = None
        self._is_archived = None
        self.discriminator = None

        self.spec_id = spec_id
        self.type = type
        self.name = name
        self.description = description
        self.latest_version = latest_version
        self.total_requests = total_requests
        self.classes = classes
        self.status = status
        self.created_at = created_at
        self.created_by = created_by
        self.last_updated_at = last_updated_at
        self.last_updated_by = last_updated_by
        self.is_archived = is_archived

    @property
    def spec_id(self):
        """Gets the spec_id of this LabelSpecDetails.  # noqa: E501


        :return: The spec_id of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._spec_id

    @spec_id.setter
    def spec_id(self, spec_id):
        """Sets the spec_id of this LabelSpecDetails.


        :param spec_id: The spec_id of this LabelSpecDetails.  # noqa: E501
        :type spec_id: str
        """
        if self.local_vars_configuration.client_side_validation and spec_id is None:  # noqa: E501
            raise ValueError("Invalid value for `spec_id`, must not be `None`")  # noqa: E501

        self._spec_id = spec_id

    @property
    def type(self):
        """Gets the type of this LabelSpecDetails.  # noqa: E501


        :return: The type of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LabelSpecDetails.


        :param type: The type of this LabelSpecDetails.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this LabelSpecDetails.  # noqa: E501


        :return: The name of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LabelSpecDetails.


        :param name: The name of this LabelSpecDetails.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this LabelSpecDetails.  # noqa: E501


        :return: The description of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LabelSpecDetails.


        :param description: The description of this LabelSpecDetails.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def latest_version(self):
        """Gets the latest_version of this LabelSpecDetails.  # noqa: E501


        :return: The latest_version of this LabelSpecDetails.  # noqa: E501
        :rtype: int
        """
        return self._latest_version

    @latest_version.setter
    def latest_version(self, latest_version):
        """Sets the latest_version of this LabelSpecDetails.


        :param latest_version: The latest_version of this LabelSpecDetails.  # noqa: E501
        :type latest_version: int
        """
        if self.local_vars_configuration.client_side_validation and latest_version is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_version`, must not be `None`")  # noqa: E501

        self._latest_version = latest_version

    @property
    def total_requests(self):
        """Gets the total_requests of this LabelSpecDetails.  # noqa: E501


        :return: The total_requests of this LabelSpecDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_requests

    @total_requests.setter
    def total_requests(self, total_requests):
        """Sets the total_requests of this LabelSpecDetails.


        :param total_requests: The total_requests of this LabelSpecDetails.  # noqa: E501
        :type total_requests: int
        """
        if self.local_vars_configuration.client_side_validation and total_requests is None:  # noqa: E501
            raise ValueError("Invalid value for `total_requests`, must not be `None`")  # noqa: E501

        self._total_requests = total_requests

    @property
    def classes(self):
        """Gets the classes of this LabelSpecDetails.  # noqa: E501


        :return: The classes of this LabelSpecDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this LabelSpecDetails.


        :param classes: The classes of this LabelSpecDetails.  # noqa: E501
        :type classes: list[str]
        """
        if self.local_vars_configuration.client_side_validation and classes is None:  # noqa: E501
            raise ValueError("Invalid value for `classes`, must not be `None`")  # noqa: E501

        self._classes = classes

    @property
    def status(self):
        """Gets the status of this LabelSpecDetails.  # noqa: E501


        :return: The status of this LabelSpecDetails.  # noqa: E501
        :rtype: LabelSpecStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LabelSpecDetails.


        :param status: The status of this LabelSpecDetails.  # noqa: E501
        :type status: LabelSpecStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this LabelSpecDetails.  # noqa: E501


        :return: The created_at of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LabelSpecDetails.


        :param created_at: The created_at of this LabelSpecDetails.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this LabelSpecDetails.  # noqa: E501


        :return: The created_by of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this LabelSpecDetails.


        :param created_by: The created_by of this LabelSpecDetails.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this LabelSpecDetails.  # noqa: E501


        :return: The last_updated_at of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this LabelSpecDetails.


        :param last_updated_at: The last_updated_at of this LabelSpecDetails.  # noqa: E501
        :type last_updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and last_updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")  # noqa: E501

        self._last_updated_at = last_updated_at

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this LabelSpecDetails.  # noqa: E501


        :return: The last_updated_by of this LabelSpecDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this LabelSpecDetails.


        :param last_updated_by: The last_updated_by of this LabelSpecDetails.  # noqa: E501
        :type last_updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and last_updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_by`, must not be `None`")  # noqa: E501

        self._last_updated_by = last_updated_by

    @property
    def is_archived(self):
        """Gets the is_archived of this LabelSpecDetails.  # noqa: E501


        :return: The is_archived of this LabelSpecDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this LabelSpecDetails.


        :param is_archived: The is_archived of this LabelSpecDetails.  # noqa: E501
        :type is_archived: bool
        """
        if self.local_vars_configuration.client_side_validation and is_archived is None:  # noqa: E501
            raise ValueError("Invalid value for `is_archived`, must not be `None`")  # noqa: E501

        self._is_archived = is_archived

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelSpecDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelSpecDetails):
            return True

        return self.to_dict() != other.to_dict()
