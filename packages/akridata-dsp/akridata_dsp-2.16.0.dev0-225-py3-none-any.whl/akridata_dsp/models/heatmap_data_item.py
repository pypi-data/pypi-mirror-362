# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class HeatmapDataItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'iou_low': 'float',
        'iou_high': 'float',
        'confidence_low': 'float',
        'confidence_high': 'float',
        'num_samples': 'int',
        'num_members': 'int'
    }

    attribute_map = {
        'iou_low': 'iou_low',
        'iou_high': 'iou_high',
        'confidence_low': 'confidence_low',
        'confidence_high': 'confidence_high',
        'num_samples': 'num_samples',
        'num_members': 'num_members'
    }

    def __init__(self, iou_low=None, iou_high=None, confidence_low=None, confidence_high=None, num_samples=None, num_members=None, local_vars_configuration=None):  # noqa: E501
        """HeatmapDataItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._iou_low = None
        self._iou_high = None
        self._confidence_low = None
        self._confidence_high = None
        self._num_samples = None
        self._num_members = None
        self.discriminator = None

        self.iou_low = iou_low
        self.iou_high = iou_high
        self.confidence_low = confidence_low
        self.confidence_high = confidence_high
        self.num_samples = num_samples
        if num_members is not None:
            self.num_members = num_members

    @property
    def iou_low(self):
        """Gets the iou_low of this HeatmapDataItem.  # noqa: E501


        :return: The iou_low of this HeatmapDataItem.  # noqa: E501
        :rtype: float
        """
        return self._iou_low

    @iou_low.setter
    def iou_low(self, iou_low):
        """Sets the iou_low of this HeatmapDataItem.


        :param iou_low: The iou_low of this HeatmapDataItem.  # noqa: E501
        :type iou_low: float
        """
        if self.local_vars_configuration.client_side_validation and iou_low is None:  # noqa: E501
            raise ValueError("Invalid value for `iou_low`, must not be `None`")  # noqa: E501

        self._iou_low = iou_low

    @property
    def iou_high(self):
        """Gets the iou_high of this HeatmapDataItem.  # noqa: E501


        :return: The iou_high of this HeatmapDataItem.  # noqa: E501
        :rtype: float
        """
        return self._iou_high

    @iou_high.setter
    def iou_high(self, iou_high):
        """Sets the iou_high of this HeatmapDataItem.


        :param iou_high: The iou_high of this HeatmapDataItem.  # noqa: E501
        :type iou_high: float
        """
        if self.local_vars_configuration.client_side_validation and iou_high is None:  # noqa: E501
            raise ValueError("Invalid value for `iou_high`, must not be `None`")  # noqa: E501

        self._iou_high = iou_high

    @property
    def confidence_low(self):
        """Gets the confidence_low of this HeatmapDataItem.  # noqa: E501


        :return: The confidence_low of this HeatmapDataItem.  # noqa: E501
        :rtype: float
        """
        return self._confidence_low

    @confidence_low.setter
    def confidence_low(self, confidence_low):
        """Sets the confidence_low of this HeatmapDataItem.


        :param confidence_low: The confidence_low of this HeatmapDataItem.  # noqa: E501
        :type confidence_low: float
        """
        if self.local_vars_configuration.client_side_validation and confidence_low is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence_low`, must not be `None`")  # noqa: E501

        self._confidence_low = confidence_low

    @property
    def confidence_high(self):
        """Gets the confidence_high of this HeatmapDataItem.  # noqa: E501


        :return: The confidence_high of this HeatmapDataItem.  # noqa: E501
        :rtype: float
        """
        return self._confidence_high

    @confidence_high.setter
    def confidence_high(self, confidence_high):
        """Sets the confidence_high of this HeatmapDataItem.


        :param confidence_high: The confidence_high of this HeatmapDataItem.  # noqa: E501
        :type confidence_high: float
        """
        if self.local_vars_configuration.client_side_validation and confidence_high is None:  # noqa: E501
            raise ValueError("Invalid value for `confidence_high`, must not be `None`")  # noqa: E501

        self._confidence_high = confidence_high

    @property
    def num_samples(self):
        """Gets the num_samples of this HeatmapDataItem.  # noqa: E501


        :return: The num_samples of this HeatmapDataItem.  # noqa: E501
        :rtype: int
        """
        return self._num_samples

    @num_samples.setter
    def num_samples(self, num_samples):
        """Sets the num_samples of this HeatmapDataItem.


        :param num_samples: The num_samples of this HeatmapDataItem.  # noqa: E501
        :type num_samples: int
        """
        if self.local_vars_configuration.client_side_validation and num_samples is None:  # noqa: E501
            raise ValueError("Invalid value for `num_samples`, must not be `None`")  # noqa: E501

        self._num_samples = num_samples

    @property
    def num_members(self):
        """Gets the num_members of this HeatmapDataItem.  # noqa: E501


        :return: The num_members of this HeatmapDataItem.  # noqa: E501
        :rtype: int
        """
        return self._num_members

    @num_members.setter
    def num_members(self, num_members):
        """Sets the num_members of this HeatmapDataItem.


        :param num_members: The num_members of this HeatmapDataItem.  # noqa: E501
        :type num_members: int
        """

        self._num_members = num_members

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HeatmapDataItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HeatmapDataItem):
            return True

        return self.to_dict() != other.to_dict()
