# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RequestSourceMetaJobResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catalog_filters': 'list[SrcCatalogFilterItem]',
        'compare': 'CompareSourceMeta',
        'vcs_query_info': 'RequestVCSQueryInfoSchema',
        'column_type_map': 'list[dict[str, str]]'
    }

    attribute_map = {
        'catalog_filters': 'catalog_filters',
        'compare': 'compare',
        'vcs_query_info': 'vcs_query_info',
        'column_type_map': 'column_type_map'
    }

    def __init__(self, catalog_filters=None, compare=None, vcs_query_info=None, column_type_map=None, local_vars_configuration=None):  # noqa: E501
        """RequestSourceMetaJobResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._catalog_filters = None
        self._compare = None
        self._vcs_query_info = None
        self._column_type_map = None
        self.discriminator = None

        if catalog_filters is not None:
            self.catalog_filters = catalog_filters
        if compare is not None:
            self.compare = compare
        if vcs_query_info is not None:
            self.vcs_query_info = vcs_query_info
        if column_type_map is not None:
            self.column_type_map = column_type_map

    @property
    def catalog_filters(self):
        """Gets the catalog_filters of this RequestSourceMetaJobResponse.  # noqa: E501


        :return: The catalog_filters of this RequestSourceMetaJobResponse.  # noqa: E501
        :rtype: list[SrcCatalogFilterItem]
        """
        return self._catalog_filters

    @catalog_filters.setter
    def catalog_filters(self, catalog_filters):
        """Sets the catalog_filters of this RequestSourceMetaJobResponse.


        :param catalog_filters: The catalog_filters of this RequestSourceMetaJobResponse.  # noqa: E501
        :type catalog_filters: list[SrcCatalogFilterItem]
        """
        if (self.local_vars_configuration.client_side_validation and
                catalog_filters is not None and len(catalog_filters) > 1):
            raise ValueError("Invalid value for `catalog_filters`, number of items must be less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                catalog_filters is not None and len(catalog_filters) < 1):
            raise ValueError("Invalid value for `catalog_filters`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._catalog_filters = catalog_filters

    @property
    def compare(self):
        """Gets the compare of this RequestSourceMetaJobResponse.  # noqa: E501


        :return: The compare of this RequestSourceMetaJobResponse.  # noqa: E501
        :rtype: CompareSourceMeta
        """
        return self._compare

    @compare.setter
    def compare(self, compare):
        """Sets the compare of this RequestSourceMetaJobResponse.


        :param compare: The compare of this RequestSourceMetaJobResponse.  # noqa: E501
        :type compare: CompareSourceMeta
        """

        self._compare = compare

    @property
    def vcs_query_info(self):
        """Gets the vcs_query_info of this RequestSourceMetaJobResponse.  # noqa: E501


        :return: The vcs_query_info of this RequestSourceMetaJobResponse.  # noqa: E501
        :rtype: RequestVCSQueryInfoSchema
        """
        return self._vcs_query_info

    @vcs_query_info.setter
    def vcs_query_info(self, vcs_query_info):
        """Sets the vcs_query_info of this RequestSourceMetaJobResponse.


        :param vcs_query_info: The vcs_query_info of this RequestSourceMetaJobResponse.  # noqa: E501
        :type vcs_query_info: RequestVCSQueryInfoSchema
        """

        self._vcs_query_info = vcs_query_info

    @property
    def column_type_map(self):
        """Gets the column_type_map of this RequestSourceMetaJobResponse.  # noqa: E501


        :return: The column_type_map of this RequestSourceMetaJobResponse.  # noqa: E501
        :rtype: list[dict[str, str]]
        """
        return self._column_type_map

    @column_type_map.setter
    def column_type_map(self, column_type_map):
        """Sets the column_type_map of this RequestSourceMetaJobResponse.


        :param column_type_map: The column_type_map of this RequestSourceMetaJobResponse.  # noqa: E501
        :type column_type_map: list[dict[str, str]]
        """

        self._column_type_map = column_type_map

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestSourceMetaJobResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestSourceMetaJobResponse):
            return True

        return self.to_dict() != other.to_dict()
