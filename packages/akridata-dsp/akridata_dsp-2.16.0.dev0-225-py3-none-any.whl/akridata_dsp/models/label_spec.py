# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class LabelSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'schema_version': 'str',
        'lta_version': 'str',
        'type': 'LTASpecMode',
        'superclasses': 'list[LabelSuperClass]',
        'classes': 'list[LabelSpecClass]',
        'source': 'LabelSource',
        'params': 'LabelParams'
    }

    attribute_map = {
        'schema_version': 'schema_version',
        'lta_version': 'lta_version',
        'type': 'type',
        'superclasses': 'superclasses',
        'classes': 'classes',
        'source': 'source',
        'params': 'params'
    }

    def __init__(self, schema_version=None, lta_version=None, type=None, superclasses=None, classes=None, source=None, params=None, local_vars_configuration=None):  # noqa: E501
        """LabelSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._schema_version = None
        self._lta_version = None
        self._type = None
        self._superclasses = None
        self._classes = None
        self._source = None
        self._params = None
        self.discriminator = None

        self.schema_version = schema_version
        if lta_version is not None:
            self.lta_version = lta_version
        if type is not None:
            self.type = type
        if superclasses is not None:
            self.superclasses = superclasses
        self.classes = classes
        if source is not None:
            self.source = source
        if params is not None:
            self.params = params

    @property
    def schema_version(self):
        """Gets the schema_version of this LabelSpec.  # noqa: E501


        :return: The schema_version of this LabelSpec.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this LabelSpec.


        :param schema_version: The schema_version of this LabelSpec.  # noqa: E501
        :type schema_version: str
        """
        if self.local_vars_configuration.client_side_validation and schema_version is None:  # noqa: E501
            raise ValueError("Invalid value for `schema_version`, must not be `None`")  # noqa: E501

        self._schema_version = schema_version

    @property
    def lta_version(self):
        """Gets the lta_version of this LabelSpec.  # noqa: E501


        :return: The lta_version of this LabelSpec.  # noqa: E501
        :rtype: str
        """
        return self._lta_version

    @lta_version.setter
    def lta_version(self, lta_version):
        """Sets the lta_version of this LabelSpec.


        :param lta_version: The lta_version of this LabelSpec.  # noqa: E501
        :type lta_version: str
        """

        self._lta_version = lta_version

    @property
    def type(self):
        """Gets the type of this LabelSpec.  # noqa: E501


        :return: The type of this LabelSpec.  # noqa: E501
        :rtype: LTASpecMode
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LabelSpec.


        :param type: The type of this LabelSpec.  # noqa: E501
        :type type: LTASpecMode
        """

        self._type = type

    @property
    def superclasses(self):
        """Gets the superclasses of this LabelSpec.  # noqa: E501


        :return: The superclasses of this LabelSpec.  # noqa: E501
        :rtype: list[LabelSuperClass]
        """
        return self._superclasses

    @superclasses.setter
    def superclasses(self, superclasses):
        """Sets the superclasses of this LabelSpec.


        :param superclasses: The superclasses of this LabelSpec.  # noqa: E501
        :type superclasses: list[LabelSuperClass]
        """

        self._superclasses = superclasses

    @property
    def classes(self):
        """Gets the classes of this LabelSpec.  # noqa: E501


        :return: The classes of this LabelSpec.  # noqa: E501
        :rtype: list[LabelSpecClass]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this LabelSpec.


        :param classes: The classes of this LabelSpec.  # noqa: E501
        :type classes: list[LabelSpecClass]
        """
        if self.local_vars_configuration.client_side_validation and classes is None:  # noqa: E501
            raise ValueError("Invalid value for `classes`, must not be `None`")  # noqa: E501

        self._classes = classes

    @property
    def source(self):
        """Gets the source of this LabelSpec.  # noqa: E501


        :return: The source of this LabelSpec.  # noqa: E501
        :rtype: LabelSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LabelSpec.


        :param source: The source of this LabelSpec.  # noqa: E501
        :type source: LabelSource
        """

        self._source = source

    @property
    def params(self):
        """Gets the params of this LabelSpec.  # noqa: E501


        :return: The params of this LabelSpec.  # noqa: E501
        :rtype: LabelParams
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this LabelSpec.


        :param params: The params of this LabelSpec.  # noqa: E501
        :type params: LabelParams
        """

        self._params = params

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LabelSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LabelSpec):
            return True

        return self.to_dict() != other.to_dict()
