# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CompatibleRefJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reqid': 'str',
        'reqname': 'str',
        'ownername': 'str',
        'date': 'str',
        'attributes': 'Attributes'
    }

    attribute_map = {
        'reqid': 'reqid',
        'reqname': 'reqname',
        'ownername': 'ownername',
        'date': 'date',
        'attributes': 'attributes'
    }

    def __init__(self, reqid=None, reqname=None, ownername=None, date=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """CompatibleRefJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reqid = None
        self._reqname = None
        self._ownername = None
        self._date = None
        self._attributes = None
        self.discriminator = None

        self.reqid = reqid
        self.reqname = reqname
        self.ownername = ownername
        self.date = date
        self.attributes = attributes

    @property
    def reqid(self):
        """Gets the reqid of this CompatibleRefJob.  # noqa: E501


        :return: The reqid of this CompatibleRefJob.  # noqa: E501
        :rtype: str
        """
        return self._reqid

    @reqid.setter
    def reqid(self, reqid):
        """Sets the reqid of this CompatibleRefJob.


        :param reqid: The reqid of this CompatibleRefJob.  # noqa: E501
        :type reqid: str
        """
        if self.local_vars_configuration.client_side_validation and reqid is None:  # noqa: E501
            raise ValueError("Invalid value for `reqid`, must not be `None`")  # noqa: E501

        self._reqid = reqid

    @property
    def reqname(self):
        """Gets the reqname of this CompatibleRefJob.  # noqa: E501


        :return: The reqname of this CompatibleRefJob.  # noqa: E501
        :rtype: str
        """
        return self._reqname

    @reqname.setter
    def reqname(self, reqname):
        """Sets the reqname of this CompatibleRefJob.


        :param reqname: The reqname of this CompatibleRefJob.  # noqa: E501
        :type reqname: str
        """
        if self.local_vars_configuration.client_side_validation and reqname is None:  # noqa: E501
            raise ValueError("Invalid value for `reqname`, must not be `None`")  # noqa: E501

        self._reqname = reqname

    @property
    def ownername(self):
        """Gets the ownername of this CompatibleRefJob.  # noqa: E501


        :return: The ownername of this CompatibleRefJob.  # noqa: E501
        :rtype: str
        """
        return self._ownername

    @ownername.setter
    def ownername(self, ownername):
        """Sets the ownername of this CompatibleRefJob.


        :param ownername: The ownername of this CompatibleRefJob.  # noqa: E501
        :type ownername: str
        """
        if self.local_vars_configuration.client_side_validation and ownername is None:  # noqa: E501
            raise ValueError("Invalid value for `ownername`, must not be `None`")  # noqa: E501

        self._ownername = ownername

    @property
    def date(self):
        """Gets the date of this CompatibleRefJob.  # noqa: E501


        :return: The date of this CompatibleRefJob.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this CompatibleRefJob.


        :param date: The date of this CompatibleRefJob.  # noqa: E501
        :type date: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def attributes(self):
        """Gets the attributes of this CompatibleRefJob.  # noqa: E501


        :return: The attributes of this CompatibleRefJob.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CompatibleRefJob.


        :param attributes: The attributes of this CompatibleRefJob.  # noqa: E501
        :type attributes: Attributes
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompatibleRefJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompatibleRefJob):
            return True

        return self.to_dict() != other.to_dict()
