# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CreateSplitsRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resultset_base_name': 'str',
        'split_fraction': 'SplitFraction',
        'tunables': 'PlotRequestTunables',
        'cluster_map': 'object',
        'cluster_snapshot_id': 'str',
        'catalog_refine_id': 'str',
        'filters': 'PlotFilters'
    }

    attribute_map = {
        'resultset_base_name': 'resultset_base_name',
        'split_fraction': 'split_fraction',
        'tunables': 'tunables',
        'cluster_map': 'cluster_map',
        'cluster_snapshot_id': 'cluster_snapshot_id',
        'catalog_refine_id': 'catalog_refine_id',
        'filters': 'filters'
    }

    def __init__(self, resultset_base_name=None, split_fraction=None, tunables=None, cluster_map=None, cluster_snapshot_id=None, catalog_refine_id=None, filters=None, local_vars_configuration=None):  # noqa: E501
        """CreateSplitsRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._resultset_base_name = None
        self._split_fraction = None
        self._tunables = None
        self._cluster_map = None
        self._cluster_snapshot_id = None
        self._catalog_refine_id = None
        self._filters = None
        self.discriminator = None

        self.resultset_base_name = resultset_base_name
        self.split_fraction = split_fraction
        self.tunables = tunables
        if cluster_map is not None:
            self.cluster_map = cluster_map
        if cluster_snapshot_id is not None:
            self.cluster_snapshot_id = cluster_snapshot_id
        if catalog_refine_id is not None:
            self.catalog_refine_id = catalog_refine_id
        if filters is not None:
            self.filters = filters

    @property
    def resultset_base_name(self):
        """Gets the resultset_base_name of this CreateSplitsRequest.  # noqa: E501


        :return: The resultset_base_name of this CreateSplitsRequest.  # noqa: E501
        :rtype: str
        """
        return self._resultset_base_name

    @resultset_base_name.setter
    def resultset_base_name(self, resultset_base_name):
        """Sets the resultset_base_name of this CreateSplitsRequest.


        :param resultset_base_name: The resultset_base_name of this CreateSplitsRequest.  # noqa: E501
        :type resultset_base_name: str
        """
        if self.local_vars_configuration.client_side_validation and resultset_base_name is None:  # noqa: E501
            raise ValueError("Invalid value for `resultset_base_name`, must not be `None`")  # noqa: E501

        self._resultset_base_name = resultset_base_name

    @property
    def split_fraction(self):
        """Gets the split_fraction of this CreateSplitsRequest.  # noqa: E501


        :return: The split_fraction of this CreateSplitsRequest.  # noqa: E501
        :rtype: SplitFraction
        """
        return self._split_fraction

    @split_fraction.setter
    def split_fraction(self, split_fraction):
        """Sets the split_fraction of this CreateSplitsRequest.


        :param split_fraction: The split_fraction of this CreateSplitsRequest.  # noqa: E501
        :type split_fraction: SplitFraction
        """
        if self.local_vars_configuration.client_side_validation and split_fraction is None:  # noqa: E501
            raise ValueError("Invalid value for `split_fraction`, must not be `None`")  # noqa: E501

        self._split_fraction = split_fraction

    @property
    def tunables(self):
        """Gets the tunables of this CreateSplitsRequest.  # noqa: E501


        :return: The tunables of this CreateSplitsRequest.  # noqa: E501
        :rtype: PlotRequestTunables
        """
        return self._tunables

    @tunables.setter
    def tunables(self, tunables):
        """Sets the tunables of this CreateSplitsRequest.


        :param tunables: The tunables of this CreateSplitsRequest.  # noqa: E501
        :type tunables: PlotRequestTunables
        """
        if self.local_vars_configuration.client_side_validation and tunables is None:  # noqa: E501
            raise ValueError("Invalid value for `tunables`, must not be `None`")  # noqa: E501

        self._tunables = tunables

    @property
    def cluster_map(self):
        """Gets the cluster_map of this CreateSplitsRequest.  # noqa: E501


        :return: The cluster_map of this CreateSplitsRequest.  # noqa: E501
        :rtype: object
        """
        return self._cluster_map

    @cluster_map.setter
    def cluster_map(self, cluster_map):
        """Sets the cluster_map of this CreateSplitsRequest.


        :param cluster_map: The cluster_map of this CreateSplitsRequest.  # noqa: E501
        :type cluster_map: object
        """

        self._cluster_map = cluster_map

    @property
    def cluster_snapshot_id(self):
        """Gets the cluster_snapshot_id of this CreateSplitsRequest.  # noqa: E501


        :return: The cluster_snapshot_id of this CreateSplitsRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_snapshot_id

    @cluster_snapshot_id.setter
    def cluster_snapshot_id(self, cluster_snapshot_id):
        """Sets the cluster_snapshot_id of this CreateSplitsRequest.


        :param cluster_snapshot_id: The cluster_snapshot_id of this CreateSplitsRequest.  # noqa: E501
        :type cluster_snapshot_id: str
        """

        self._cluster_snapshot_id = cluster_snapshot_id

    @property
    def catalog_refine_id(self):
        """Gets the catalog_refine_id of this CreateSplitsRequest.  # noqa: E501


        :return: The catalog_refine_id of this CreateSplitsRequest.  # noqa: E501
        :rtype: str
        """
        return self._catalog_refine_id

    @catalog_refine_id.setter
    def catalog_refine_id(self, catalog_refine_id):
        """Sets the catalog_refine_id of this CreateSplitsRequest.


        :param catalog_refine_id: The catalog_refine_id of this CreateSplitsRequest.  # noqa: E501
        :type catalog_refine_id: str
        """

        self._catalog_refine_id = catalog_refine_id

    @property
    def filters(self):
        """Gets the filters of this CreateSplitsRequest.  # noqa: E501


        :return: The filters of this CreateSplitsRequest.  # noqa: E501
        :rtype: PlotFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CreateSplitsRequest.


        :param filters: The filters of this CreateSplitsRequest.  # noqa: E501
        :type filters: PlotFilters
        """

        self._filters = filters

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSplitsRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateSplitsRequest):
            return True

        return self.to_dict() != other.to_dict()
