# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtSourceCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mt_project_id': 'str',
        'mt_data_version': 'str',
        'mt_session_id': 'str',
        'mt_epoch': 'int',
        'mt_pred_csv': 'str'
    }

    attribute_map = {
        'mt_project_id': 'mt_project_id',
        'mt_data_version': 'mt_data_version',
        'mt_session_id': 'mt_session_id',
        'mt_epoch': 'mt_epoch',
        'mt_pred_csv': 'mt_pred_csv'
    }

    def __init__(self, mt_project_id=None, mt_data_version=None, mt_session_id=None, mt_epoch=None, mt_pred_csv=None, local_vars_configuration=None):  # noqa: E501
        """MtSourceCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._mt_project_id = None
        self._mt_data_version = None
        self._mt_session_id = None
        self._mt_epoch = None
        self._mt_pred_csv = None
        self.discriminator = None

        self.mt_project_id = mt_project_id
        self.mt_data_version = mt_data_version
        self.mt_session_id = mt_session_id
        self.mt_epoch = mt_epoch
        self.mt_pred_csv = mt_pred_csv

    @property
    def mt_project_id(self):
        """Gets the mt_project_id of this MtSourceCreate.  # noqa: E501


        :return: The mt_project_id of this MtSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._mt_project_id

    @mt_project_id.setter
    def mt_project_id(self, mt_project_id):
        """Sets the mt_project_id of this MtSourceCreate.


        :param mt_project_id: The mt_project_id of this MtSourceCreate.  # noqa: E501
        :type mt_project_id: str
        """
        if self.local_vars_configuration.client_side_validation and mt_project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `mt_project_id`, must not be `None`")  # noqa: E501

        self._mt_project_id = mt_project_id

    @property
    def mt_data_version(self):
        """Gets the mt_data_version of this MtSourceCreate.  # noqa: E501


        :return: The mt_data_version of this MtSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._mt_data_version

    @mt_data_version.setter
    def mt_data_version(self, mt_data_version):
        """Sets the mt_data_version of this MtSourceCreate.


        :param mt_data_version: The mt_data_version of this MtSourceCreate.  # noqa: E501
        :type mt_data_version: str
        """
        if self.local_vars_configuration.client_side_validation and mt_data_version is None:  # noqa: E501
            raise ValueError("Invalid value for `mt_data_version`, must not be `None`")  # noqa: E501

        self._mt_data_version = mt_data_version

    @property
    def mt_session_id(self):
        """Gets the mt_session_id of this MtSourceCreate.  # noqa: E501


        :return: The mt_session_id of this MtSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._mt_session_id

    @mt_session_id.setter
    def mt_session_id(self, mt_session_id):
        """Sets the mt_session_id of this MtSourceCreate.


        :param mt_session_id: The mt_session_id of this MtSourceCreate.  # noqa: E501
        :type mt_session_id: str
        """
        if self.local_vars_configuration.client_side_validation and mt_session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `mt_session_id`, must not be `None`")  # noqa: E501

        self._mt_session_id = mt_session_id

    @property
    def mt_epoch(self):
        """Gets the mt_epoch of this MtSourceCreate.  # noqa: E501


        :return: The mt_epoch of this MtSourceCreate.  # noqa: E501
        :rtype: int
        """
        return self._mt_epoch

    @mt_epoch.setter
    def mt_epoch(self, mt_epoch):
        """Sets the mt_epoch of this MtSourceCreate.


        :param mt_epoch: The mt_epoch of this MtSourceCreate.  # noqa: E501
        :type mt_epoch: int
        """
        if self.local_vars_configuration.client_side_validation and mt_epoch is None:  # noqa: E501
            raise ValueError("Invalid value for `mt_epoch`, must not be `None`")  # noqa: E501

        self._mt_epoch = mt_epoch

    @property
    def mt_pred_csv(self):
        """Gets the mt_pred_csv of this MtSourceCreate.  # noqa: E501


        :return: The mt_pred_csv of this MtSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._mt_pred_csv

    @mt_pred_csv.setter
    def mt_pred_csv(self, mt_pred_csv):
        """Sets the mt_pred_csv of this MtSourceCreate.


        :param mt_pred_csv: The mt_pred_csv of this MtSourceCreate.  # noqa: E501
        :type mt_pred_csv: str
        """
        if self.local_vars_configuration.client_side_validation and mt_pred_csv is None:  # noqa: E501
            raise ValueError("Invalid value for `mt_pred_csv`, must not be `None`")  # noqa: E501

        self._mt_pred_csv = mt_pred_csv

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtSourceCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtSourceCreate):
            return True

        return self.to_dict() != other.to_dict()
