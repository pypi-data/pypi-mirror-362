# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RegisterImageServerResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rq_host': 'str',
        'rq_port': 'int',
        'rpc_queue': 'str'
    }

    attribute_map = {
        'rq_host': 'rq_host',
        'rq_port': 'rq_port',
        'rpc_queue': 'rpc_queue'
    }

    def __init__(self, rq_host=None, rq_port=None, rpc_queue=None, local_vars_configuration=None):  # noqa: E501
        """RegisterImageServerResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._rq_host = None
        self._rq_port = None
        self._rpc_queue = None
        self.discriminator = None

        self.rq_host = rq_host
        self.rq_port = rq_port
        self.rpc_queue = rpc_queue

    @property
    def rq_host(self):
        """Gets the rq_host of this RegisterImageServerResponse.  # noqa: E501

        Hostname of the RabbitMQ server.  # noqa: E501

        :return: The rq_host of this RegisterImageServerResponse.  # noqa: E501
        :rtype: str
        """
        return self._rq_host

    @rq_host.setter
    def rq_host(self, rq_host):
        """Sets the rq_host of this RegisterImageServerResponse.

        Hostname of the RabbitMQ server.  # noqa: E501

        :param rq_host: The rq_host of this RegisterImageServerResponse.  # noqa: E501
        :type rq_host: str
        """
        if self.local_vars_configuration.client_side_validation and rq_host is None:  # noqa: E501
            raise ValueError("Invalid value for `rq_host`, must not be `None`")  # noqa: E501

        self._rq_host = rq_host

    @property
    def rq_port(self):
        """Gets the rq_port of this RegisterImageServerResponse.  # noqa: E501

        Port number of the RabbitMQ server.  # noqa: E501

        :return: The rq_port of this RegisterImageServerResponse.  # noqa: E501
        :rtype: int
        """
        return self._rq_port

    @rq_port.setter
    def rq_port(self, rq_port):
        """Sets the rq_port of this RegisterImageServerResponse.

        Port number of the RabbitMQ server.  # noqa: E501

        :param rq_port: The rq_port of this RegisterImageServerResponse.  # noqa: E501
        :type rq_port: int
        """
        if self.local_vars_configuration.client_side_validation and rq_port is None:  # noqa: E501
            raise ValueError("Invalid value for `rq_port`, must not be `None`")  # noqa: E501

        self._rq_port = rq_port

    @property
    def rpc_queue(self):
        """Gets the rpc_queue of this RegisterImageServerResponse.  # noqa: E501

        The name of the RPC queue for communication between the image server and DSP server regarding image fetching.  # noqa: E501

        :return: The rpc_queue of this RegisterImageServerResponse.  # noqa: E501
        :rtype: str
        """
        return self._rpc_queue

    @rpc_queue.setter
    def rpc_queue(self, rpc_queue):
        """Sets the rpc_queue of this RegisterImageServerResponse.

        The name of the RPC queue for communication between the image server and DSP server regarding image fetching.  # noqa: E501

        :param rpc_queue: The rpc_queue of this RegisterImageServerResponse.  # noqa: E501
        :type rpc_queue: str
        """
        if self.local_vars_configuration.client_side_validation and rpc_queue is None:  # noqa: E501
            raise ValueError("Invalid value for `rpc_queue`, must not be `None`")  # noqa: E501

        self._rpc_queue = rpc_queue

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterImageServerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterImageServerResponse):
            return True

        return self.to_dict() != other.to_dict()
