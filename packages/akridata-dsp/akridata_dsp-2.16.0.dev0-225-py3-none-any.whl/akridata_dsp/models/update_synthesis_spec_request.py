# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class UpdateSynthesisSpecRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'concept_of_interest': 'list[ImageWithBbox]',
        'generation_canvas': 'list[ImageWithPolygon]',
        'background_images': 'list[Image]',
        'session_feedback': 'list[ImageWithFeedback]',
        'spec_state': 'SynthesisSpecState'
    }

    attribute_map = {
        'description': 'description',
        'concept_of_interest': 'concept_of_interest',
        'generation_canvas': 'generation_canvas',
        'background_images': 'background_images',
        'session_feedback': 'session_feedback',
        'spec_state': 'spec_state'
    }

    def __init__(self, description=None, concept_of_interest=None, generation_canvas=None, background_images=None, session_feedback=None, spec_state=None, local_vars_configuration=None):  # noqa: E501
        """UpdateSynthesisSpecRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._concept_of_interest = None
        self._generation_canvas = None
        self._background_images = None
        self._session_feedback = None
        self._spec_state = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if concept_of_interest is not None:
            self.concept_of_interest = concept_of_interest
        if generation_canvas is not None:
            self.generation_canvas = generation_canvas
        if background_images is not None:
            self.background_images = background_images
        if session_feedback is not None:
            self.session_feedback = session_feedback
        if spec_state is not None:
            self.spec_state = spec_state

    @property
    def description(self):
        """Gets the description of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The description of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSynthesisSpecRequest.


        :param description: The description of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 200):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `200`")  # noqa: E501

        self._description = description

    @property
    def concept_of_interest(self):
        """Gets the concept_of_interest of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The concept_of_interest of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: list[ImageWithBbox]
        """
        return self._concept_of_interest

    @concept_of_interest.setter
    def concept_of_interest(self, concept_of_interest):
        """Sets the concept_of_interest of this UpdateSynthesisSpecRequest.


        :param concept_of_interest: The concept_of_interest of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type concept_of_interest: list[ImageWithBbox]
        """

        self._concept_of_interest = concept_of_interest

    @property
    def generation_canvas(self):
        """Gets the generation_canvas of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The generation_canvas of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: list[ImageWithPolygon]
        """
        return self._generation_canvas

    @generation_canvas.setter
    def generation_canvas(self, generation_canvas):
        """Sets the generation_canvas of this UpdateSynthesisSpecRequest.


        :param generation_canvas: The generation_canvas of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type generation_canvas: list[ImageWithPolygon]
        """

        self._generation_canvas = generation_canvas

    @property
    def background_images(self):
        """Gets the background_images of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The background_images of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: list[Image]
        """
        return self._background_images

    @background_images.setter
    def background_images(self, background_images):
        """Sets the background_images of this UpdateSynthesisSpecRequest.


        :param background_images: The background_images of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type background_images: list[Image]
        """

        self._background_images = background_images

    @property
    def session_feedback(self):
        """Gets the session_feedback of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The session_feedback of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: list[ImageWithFeedback]
        """
        return self._session_feedback

    @session_feedback.setter
    def session_feedback(self, session_feedback):
        """Sets the session_feedback of this UpdateSynthesisSpecRequest.


        :param session_feedback: The session_feedback of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type session_feedback: list[ImageWithFeedback]
        """

        self._session_feedback = session_feedback

    @property
    def spec_state(self):
        """Gets the spec_state of this UpdateSynthesisSpecRequest.  # noqa: E501


        :return: The spec_state of this UpdateSynthesisSpecRequest.  # noqa: E501
        :rtype: SynthesisSpecState
        """
        return self._spec_state

    @spec_state.setter
    def spec_state(self, spec_state):
        """Sets the spec_state of this UpdateSynthesisSpecRequest.


        :param spec_state: The spec_state of this UpdateSynthesisSpecRequest.  # noqa: E501
        :type spec_state: SynthesisSpecState
        """

        self._spec_state = spec_state

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSynthesisSpecRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateSynthesisSpecRequest):
            return True

        return self.to_dict() != other.to_dict()
