# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CatalogSyncSession(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'CatalogSyncSessionStatus',
        'error': 'ErrorResponse',
        'started_at': 'str',
        'completed_at': 'str',
        'target_catalog_table_name': 'str',
        'description': 'str',
        'attributes': 'list[Attribute]'
    }

    attribute_map = {
        'status': 'status',
        'error': 'error',
        'started_at': 'started_at',
        'completed_at': 'completed_at',
        'target_catalog_table_name': 'target_catalog_table_name',
        'description': 'description',
        'attributes': 'attributes'
    }

    def __init__(self, status=None, error=None, started_at=None, completed_at=None, target_catalog_table_name=None, description=None, attributes=None, local_vars_configuration=None):  # noqa: E501
        """CatalogSyncSession - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._error = None
        self._started_at = None
        self._completed_at = None
        self._target_catalog_table_name = None
        self._description = None
        self._attributes = None
        self.discriminator = None

        self.status = status
        if error is not None:
            self.error = error
        self.started_at = started_at
        if completed_at is not None:
            self.completed_at = completed_at
        self.target_catalog_table_name = target_catalog_table_name
        if description is not None:
            self.description = description
        self.attributes = attributes

    @property
    def status(self):
        """Gets the status of this CatalogSyncSession.  # noqa: E501


        :return: The status of this CatalogSyncSession.  # noqa: E501
        :rtype: CatalogSyncSessionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CatalogSyncSession.


        :param status: The status of this CatalogSyncSession.  # noqa: E501
        :type status: CatalogSyncSessionStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def error(self):
        """Gets the error of this CatalogSyncSession.  # noqa: E501


        :return: The error of this CatalogSyncSession.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CatalogSyncSession.


        :param error: The error of this CatalogSyncSession.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def started_at(self):
        """Gets the started_at of this CatalogSyncSession.  # noqa: E501


        :return: The started_at of this CatalogSyncSession.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CatalogSyncSession.


        :param started_at: The started_at of this CatalogSyncSession.  # noqa: E501
        :type started_at: str
        """
        if self.local_vars_configuration.client_side_validation and started_at is None:  # noqa: E501
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def completed_at(self):
        """Gets the completed_at of this CatalogSyncSession.  # noqa: E501


        :return: The completed_at of this CatalogSyncSession.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CatalogSyncSession.


        :param completed_at: The completed_at of this CatalogSyncSession.  # noqa: E501
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def target_catalog_table_name(self):
        """Gets the target_catalog_table_name of this CatalogSyncSession.  # noqa: E501


        :return: The target_catalog_table_name of this CatalogSyncSession.  # noqa: E501
        :rtype: str
        """
        return self._target_catalog_table_name

    @target_catalog_table_name.setter
    def target_catalog_table_name(self, target_catalog_table_name):
        """Sets the target_catalog_table_name of this CatalogSyncSession.


        :param target_catalog_table_name: The target_catalog_table_name of this CatalogSyncSession.  # noqa: E501
        :type target_catalog_table_name: str
        """
        if self.local_vars_configuration.client_side_validation and target_catalog_table_name is None:  # noqa: E501
            raise ValueError("Invalid value for `target_catalog_table_name`, must not be `None`")  # noqa: E501

        self._target_catalog_table_name = target_catalog_table_name

    @property
    def description(self):
        """Gets the description of this CatalogSyncSession.  # noqa: E501


        :return: The description of this CatalogSyncSession.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CatalogSyncSession.


        :param description: The description of this CatalogSyncSession.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def attributes(self):
        """Gets the attributes of this CatalogSyncSession.  # noqa: E501


        :return: The attributes of this CatalogSyncSession.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CatalogSyncSession.


        :param attributes: The attributes of this CatalogSyncSession.  # noqa: E501
        :type attributes: list[Attribute]
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogSyncSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogSyncSession):
            return True

        return self.to_dict() != other.to_dict()
