# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class CatalogData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_id': 'str',
        'partition_start': 'int',
        'partition_end': 'int',
        'blob_idx_in_partition': 'int',
        'frame_idx_in_blob': 'int'
    }

    attribute_map = {
        'session_id': 'session_id',
        'partition_start': 'partition_start',
        'partition_end': 'partition_end',
        'blob_idx_in_partition': 'blob_idx_in_partition',
        'frame_idx_in_blob': 'frame_idx_in_blob'
    }

    def __init__(self, session_id=None, partition_start=None, partition_end=None, blob_idx_in_partition=None, frame_idx_in_blob=None, local_vars_configuration=None):  # noqa: E501
        """CatalogData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._session_id = None
        self._partition_start = None
        self._partition_end = None
        self._blob_idx_in_partition = None
        self._frame_idx_in_blob = None
        self.discriminator = None

        self.session_id = session_id
        self.partition_start = partition_start
        self.partition_end = partition_end
        self.blob_idx_in_partition = blob_idx_in_partition
        self.frame_idx_in_blob = frame_idx_in_blob

    @property
    def session_id(self):
        """Gets the session_id of this CatalogData.  # noqa: E501


        :return: The session_id of this CatalogData.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CatalogData.


        :param session_id: The session_id of this CatalogData.  # noqa: E501
        :type session_id: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def partition_start(self):
        """Gets the partition_start of this CatalogData.  # noqa: E501


        :return: The partition_start of this CatalogData.  # noqa: E501
        :rtype: int
        """
        return self._partition_start

    @partition_start.setter
    def partition_start(self, partition_start):
        """Sets the partition_start of this CatalogData.


        :param partition_start: The partition_start of this CatalogData.  # noqa: E501
        :type partition_start: int
        """
        if self.local_vars_configuration.client_side_validation and partition_start is None:  # noqa: E501
            raise ValueError("Invalid value for `partition_start`, must not be `None`")  # noqa: E501

        self._partition_start = partition_start

    @property
    def partition_end(self):
        """Gets the partition_end of this CatalogData.  # noqa: E501


        :return: The partition_end of this CatalogData.  # noqa: E501
        :rtype: int
        """
        return self._partition_end

    @partition_end.setter
    def partition_end(self, partition_end):
        """Sets the partition_end of this CatalogData.


        :param partition_end: The partition_end of this CatalogData.  # noqa: E501
        :type partition_end: int
        """
        if self.local_vars_configuration.client_side_validation and partition_end is None:  # noqa: E501
            raise ValueError("Invalid value for `partition_end`, must not be `None`")  # noqa: E501

        self._partition_end = partition_end

    @property
    def blob_idx_in_partition(self):
        """Gets the blob_idx_in_partition of this CatalogData.  # noqa: E501


        :return: The blob_idx_in_partition of this CatalogData.  # noqa: E501
        :rtype: int
        """
        return self._blob_idx_in_partition

    @blob_idx_in_partition.setter
    def blob_idx_in_partition(self, blob_idx_in_partition):
        """Sets the blob_idx_in_partition of this CatalogData.


        :param blob_idx_in_partition: The blob_idx_in_partition of this CatalogData.  # noqa: E501
        :type blob_idx_in_partition: int
        """
        if self.local_vars_configuration.client_side_validation and blob_idx_in_partition is None:  # noqa: E501
            raise ValueError("Invalid value for `blob_idx_in_partition`, must not be `None`")  # noqa: E501

        self._blob_idx_in_partition = blob_idx_in_partition

    @property
    def frame_idx_in_blob(self):
        """Gets the frame_idx_in_blob of this CatalogData.  # noqa: E501


        :return: The frame_idx_in_blob of this CatalogData.  # noqa: E501
        :rtype: int
        """
        return self._frame_idx_in_blob

    @frame_idx_in_blob.setter
    def frame_idx_in_blob(self, frame_idx_in_blob):
        """Sets the frame_idx_in_blob of this CatalogData.


        :param frame_idx_in_blob: The frame_idx_in_blob of this CatalogData.  # noqa: E501
        :type frame_idx_in_blob: int
        """
        if self.local_vars_configuration.client_side_validation and frame_idx_in_blob is None:  # noqa: E501
            raise ValueError("Invalid value for `frame_idx_in_blob`, must not be `None`")  # noqa: E501

        self._frame_idx_in_blob = frame_idx_in_blob

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CatalogData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CatalogData):
            return True

        return self.to_dict() != other.to_dict()
