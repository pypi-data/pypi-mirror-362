# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GetClusterSnapshotResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_names': 'dict[str, str]',
        'cluster_map': 'dict[str, int]',
        'nclusters': 'int',
        'snapshot_name': 'str',
        'snapshot_id': 'str',
        'version': 'int',
        'create_timestamp': 'str',
        'update_timestamp': 'str',
        'user_name': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'cluster_names': 'cluster_names',
        'cluster_map': 'cluster_map',
        'nclusters': 'nclusters',
        'snapshot_name': 'snapshot_name',
        'snapshot_id': 'snapshot_id',
        'version': 'version',
        'create_timestamp': 'create_timestamp',
        'update_timestamp': 'update_timestamp',
        'user_name': 'user_name',
        'updated_by': 'updated_by'
    }

    def __init__(self, cluster_names=None, cluster_map=None, nclusters=None, snapshot_name=None, snapshot_id=None, version=None, create_timestamp=None, update_timestamp=None, user_name=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """GetClusterSnapshotResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_names = None
        self._cluster_map = None
        self._nclusters = None
        self._snapshot_name = None
        self._snapshot_id = None
        self._version = None
        self._create_timestamp = None
        self._update_timestamp = None
        self._user_name = None
        self._updated_by = None
        self.discriminator = None

        if cluster_names is not None:
            self.cluster_names = cluster_names
        if cluster_map is not None:
            self.cluster_map = cluster_map
        if nclusters is not None:
            self.nclusters = nclusters
        self.snapshot_name = snapshot_name
        self.snapshot_id = snapshot_id
        self.version = version
        self.create_timestamp = create_timestamp
        self.update_timestamp = update_timestamp
        self.user_name = user_name
        self.updated_by = updated_by

    @property
    def cluster_names(self):
        """Gets the cluster_names of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The cluster_names of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._cluster_names

    @cluster_names.setter
    def cluster_names(self, cluster_names):
        """Sets the cluster_names of this GetClusterSnapshotResponse.


        :param cluster_names: The cluster_names of this GetClusterSnapshotResponse.  # noqa: E501
        :type cluster_names: dict[str, str]
        """

        self._cluster_names = cluster_names

    @property
    def cluster_map(self):
        """Gets the cluster_map of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The cluster_map of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: dict[str, int]
        """
        return self._cluster_map

    @cluster_map.setter
    def cluster_map(self, cluster_map):
        """Sets the cluster_map of this GetClusterSnapshotResponse.


        :param cluster_map: The cluster_map of this GetClusterSnapshotResponse.  # noqa: E501
        :type cluster_map: dict[str, int]
        """

        self._cluster_map = cluster_map

    @property
    def nclusters(self):
        """Gets the nclusters of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The nclusters of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._nclusters

    @nclusters.setter
    def nclusters(self, nclusters):
        """Sets the nclusters of this GetClusterSnapshotResponse.


        :param nclusters: The nclusters of this GetClusterSnapshotResponse.  # noqa: E501
        :type nclusters: int
        """

        self._nclusters = nclusters

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The snapshot_name of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this GetClusterSnapshotResponse.


        :param snapshot_name: The snapshot_name of this GetClusterSnapshotResponse.  # noqa: E501
        :type snapshot_name: str
        """
        if self.local_vars_configuration.client_side_validation and snapshot_name is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_name`, must not be `None`")  # noqa: E501

        self._snapshot_name = snapshot_name

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The snapshot_id of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this GetClusterSnapshotResponse.


        :param snapshot_id: The snapshot_id of this GetClusterSnapshotResponse.  # noqa: E501
        :type snapshot_id: str
        """
        if self.local_vars_configuration.client_side_validation and snapshot_id is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")  # noqa: E501

        self._snapshot_id = snapshot_id

    @property
    def version(self):
        """Gets the version of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The version of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetClusterSnapshotResponse.


        :param version: The version of this GetClusterSnapshotResponse.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The create_timestamp of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this GetClusterSnapshotResponse.


        :param create_timestamp: The create_timestamp of this GetClusterSnapshotResponse.  # noqa: E501
        :type create_timestamp: str
        """
        if self.local_vars_configuration.client_side_validation and create_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `create_timestamp`, must not be `None`")  # noqa: E501

        self._create_timestamp = create_timestamp

    @property
    def update_timestamp(self):
        """Gets the update_timestamp of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The update_timestamp of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._update_timestamp

    @update_timestamp.setter
    def update_timestamp(self, update_timestamp):
        """Sets the update_timestamp of this GetClusterSnapshotResponse.


        :param update_timestamp: The update_timestamp of this GetClusterSnapshotResponse.  # noqa: E501
        :type update_timestamp: str
        """
        if self.local_vars_configuration.client_side_validation and update_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `update_timestamp`, must not be `None`")  # noqa: E501

        self._update_timestamp = update_timestamp

    @property
    def user_name(self):
        """Gets the user_name of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The user_name of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GetClusterSnapshotResponse.


        :param user_name: The user_name of this GetClusterSnapshotResponse.  # noqa: E501
        :type user_name: str
        """
        if self.local_vars_configuration.client_side_validation and user_name is None:  # noqa: E501
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def updated_by(self):
        """Gets the updated_by of this GetClusterSnapshotResponse.  # noqa: E501


        :return: The updated_by of this GetClusterSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GetClusterSnapshotResponse.


        :param updated_by: The updated_by of this GetClusterSnapshotResponse.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetClusterSnapshotResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetClusterSnapshotResponse):
            return True

        return self.to_dict() != other.to_dict()
