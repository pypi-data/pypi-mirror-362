# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtEvaluationMetricsCommon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'epoch': 'int',
        'status': 'ModelEvaluationStatus',
        'created_at': 'str',
        'updated_at': 'str',
        'status_message': 'str',
        'model_metrics': 'EvaluationModelMetrics',
        'analyze_job_id': 'str',
        'validation_accuracy': 'float'
    }

    attribute_map = {
        'epoch': 'epoch',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'status_message': 'status_message',
        'model_metrics': 'model_metrics',
        'analyze_job_id': 'analyze_job_id',
        'validation_accuracy': 'validation_accuracy'
    }

    def __init__(self, epoch=None, status=None, created_at=None, updated_at=None, status_message='', model_metrics=None, analyze_job_id='', validation_accuracy=None, local_vars_configuration=None):  # noqa: E501
        """MtEvaluationMetricsCommon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._epoch = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._status_message = None
        self._model_metrics = None
        self._analyze_job_id = None
        self._validation_accuracy = None
        self.discriminator = None

        self.epoch = epoch
        self.status = status
        if created_at is not None:
            self.created_at = created_at
        self.updated_at = updated_at
        if status_message is not None:
            self.status_message = status_message
        if model_metrics is not None:
            self.model_metrics = model_metrics
        if analyze_job_id is not None:
            self.analyze_job_id = analyze_job_id
        if validation_accuracy is not None:
            self.validation_accuracy = validation_accuracy

    @property
    def epoch(self):
        """Gets the epoch of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The epoch of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this MtEvaluationMetricsCommon.


        :param epoch: The epoch of this MtEvaluationMetricsCommon.  # noqa: E501
        :type epoch: int
        """
        if self.local_vars_configuration.client_side_validation and epoch is None:  # noqa: E501
            raise ValueError("Invalid value for `epoch`, must not be `None`")  # noqa: E501

        self._epoch = epoch

    @property
    def status(self):
        """Gets the status of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The status of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: ModelEvaluationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MtEvaluationMetricsCommon.


        :param status: The status of this MtEvaluationMetricsCommon.  # noqa: E501
        :type status: ModelEvaluationStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The created_at of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MtEvaluationMetricsCommon.


        :param created_at: The created_at of this MtEvaluationMetricsCommon.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The updated_at of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MtEvaluationMetricsCommon.


        :param updated_at: The updated_at of this MtEvaluationMetricsCommon.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def status_message(self):
        """Gets the status_message of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The status_message of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this MtEvaluationMetricsCommon.


        :param status_message: The status_message of this MtEvaluationMetricsCommon.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def model_metrics(self):
        """Gets the model_metrics of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The model_metrics of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: EvaluationModelMetrics
        """
        return self._model_metrics

    @model_metrics.setter
    def model_metrics(self, model_metrics):
        """Sets the model_metrics of this MtEvaluationMetricsCommon.


        :param model_metrics: The model_metrics of this MtEvaluationMetricsCommon.  # noqa: E501
        :type model_metrics: EvaluationModelMetrics
        """

        self._model_metrics = model_metrics

    @property
    def analyze_job_id(self):
        """Gets the analyze_job_id of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The analyze_job_id of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: str
        """
        return self._analyze_job_id

    @analyze_job_id.setter
    def analyze_job_id(self, analyze_job_id):
        """Sets the analyze_job_id of this MtEvaluationMetricsCommon.


        :param analyze_job_id: The analyze_job_id of this MtEvaluationMetricsCommon.  # noqa: E501
        :type analyze_job_id: str
        """

        self._analyze_job_id = analyze_job_id

    @property
    def validation_accuracy(self):
        """Gets the validation_accuracy of this MtEvaluationMetricsCommon.  # noqa: E501


        :return: The validation_accuracy of this MtEvaluationMetricsCommon.  # noqa: E501
        :rtype: float
        """
        return self._validation_accuracy

    @validation_accuracy.setter
    def validation_accuracy(self, validation_accuracy):
        """Sets the validation_accuracy of this MtEvaluationMetricsCommon.


        :param validation_accuracy: The validation_accuracy of this MtEvaluationMetricsCommon.  # noqa: E501
        :type validation_accuracy: float
        """

        self._validation_accuracy = validation_accuracy

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtEvaluationMetricsCommon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtEvaluationMetricsCommon):
            return True

        return self.to_dict() != other.to_dict()
