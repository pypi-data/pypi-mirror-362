# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SynthesisSpecResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'version': 'int',
        'state': 'SynthesisSpecState',
        'gen_session_count': 'int',
        'parent_version': 'int',
        'created_at': 'str',
        'created_by': 'str',
        'updated_at': 'str',
        'updated_by': 'str',
        'description': 'str',
        'concept_of_interest': 'list[ImageWithBboxResponse]',
        'generation_canvas': 'list[ImageWithPolygonResponse]',
        'background_images': 'list[ImageWithMetadata]',
        'submitted_at': 'str',
        'submitted_by': 'str',
        'completed_at': 'str',
        'error': 'ErrorResponse',
        'session_feedback': 'list[ImageWithFeedback]'
    }

    attribute_map = {
        'version': 'version',
        'state': 'state',
        'gen_session_count': 'gen_session_count',
        'parent_version': 'parent_version',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'updated_at': 'updated_at',
        'updated_by': 'updated_by',
        'description': 'description',
        'concept_of_interest': 'concept_of_interest',
        'generation_canvas': 'generation_canvas',
        'background_images': 'background_images',
        'submitted_at': 'submitted_at',
        'submitted_by': 'submitted_by',
        'completed_at': 'completed_at',
        'error': 'error',
        'session_feedback': 'session_feedback'
    }

    def __init__(self, version=None, state=None, gen_session_count=None, parent_version=None, created_at=None, created_by=None, updated_at=None, updated_by=None, description=None, concept_of_interest=None, generation_canvas=None, background_images=None, submitted_at=None, submitted_by=None, completed_at=None, error=None, session_feedback=None, local_vars_configuration=None):  # noqa: E501
        """SynthesisSpecResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._state = None
        self._gen_session_count = None
        self._parent_version = None
        self._created_at = None
        self._created_by = None
        self._updated_at = None
        self._updated_by = None
        self._description = None
        self._concept_of_interest = None
        self._generation_canvas = None
        self._background_images = None
        self._submitted_at = None
        self._submitted_by = None
        self._completed_at = None
        self._error = None
        self._session_feedback = None
        self.discriminator = None

        self.version = version
        self.state = state
        self.gen_session_count = gen_session_count
        if parent_version is not None:
            self.parent_version = parent_version
        self.created_at = created_at
        self.created_by = created_by
        self.updated_at = updated_at
        self.updated_by = updated_by
        if description is not None:
            self.description = description
        if concept_of_interest is not None:
            self.concept_of_interest = concept_of_interest
        if generation_canvas is not None:
            self.generation_canvas = generation_canvas
        if background_images is not None:
            self.background_images = background_images
        if submitted_at is not None:
            self.submitted_at = submitted_at
        if submitted_by is not None:
            self.submitted_by = submitted_by
        if completed_at is not None:
            self.completed_at = completed_at
        if error is not None:
            self.error = error
        if session_feedback is not None:
            self.session_feedback = session_feedback

    @property
    def version(self):
        """Gets the version of this SynthesisSpecResponse.  # noqa: E501


        :return: The version of this SynthesisSpecResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SynthesisSpecResponse.


        :param version: The version of this SynthesisSpecResponse.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def state(self):
        """Gets the state of this SynthesisSpecResponse.  # noqa: E501


        :return: The state of this SynthesisSpecResponse.  # noqa: E501
        :rtype: SynthesisSpecState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SynthesisSpecResponse.


        :param state: The state of this SynthesisSpecResponse.  # noqa: E501
        :type state: SynthesisSpecState
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def gen_session_count(self):
        """Gets the gen_session_count of this SynthesisSpecResponse.  # noqa: E501


        :return: The gen_session_count of this SynthesisSpecResponse.  # noqa: E501
        :rtype: int
        """
        return self._gen_session_count

    @gen_session_count.setter
    def gen_session_count(self, gen_session_count):
        """Sets the gen_session_count of this SynthesisSpecResponse.


        :param gen_session_count: The gen_session_count of this SynthesisSpecResponse.  # noqa: E501
        :type gen_session_count: int
        """
        if self.local_vars_configuration.client_side_validation and gen_session_count is None:  # noqa: E501
            raise ValueError("Invalid value for `gen_session_count`, must not be `None`")  # noqa: E501

        self._gen_session_count = gen_session_count

    @property
    def parent_version(self):
        """Gets the parent_version of this SynthesisSpecResponse.  # noqa: E501


        :return: The parent_version of this SynthesisSpecResponse.  # noqa: E501
        :rtype: int
        """
        return self._parent_version

    @parent_version.setter
    def parent_version(self, parent_version):
        """Sets the parent_version of this SynthesisSpecResponse.


        :param parent_version: The parent_version of this SynthesisSpecResponse.  # noqa: E501
        :type parent_version: int
        """

        self._parent_version = parent_version

    @property
    def created_at(self):
        """Gets the created_at of this SynthesisSpecResponse.  # noqa: E501


        :return: The created_at of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SynthesisSpecResponse.


        :param created_at: The created_at of this SynthesisSpecResponse.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this SynthesisSpecResponse.  # noqa: E501


        :return: The created_by of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SynthesisSpecResponse.


        :param created_by: The created_by of this SynthesisSpecResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_at(self):
        """Gets the updated_at of this SynthesisSpecResponse.  # noqa: E501


        :return: The updated_at of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SynthesisSpecResponse.


        :param updated_at: The updated_at of this SynthesisSpecResponse.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this SynthesisSpecResponse.  # noqa: E501


        :return: The updated_by of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SynthesisSpecResponse.


        :param updated_by: The updated_by of this SynthesisSpecResponse.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def description(self):
        """Gets the description of this SynthesisSpecResponse.  # noqa: E501


        :return: The description of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SynthesisSpecResponse.


        :param description: The description of this SynthesisSpecResponse.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def concept_of_interest(self):
        """Gets the concept_of_interest of this SynthesisSpecResponse.  # noqa: E501


        :return: The concept_of_interest of this SynthesisSpecResponse.  # noqa: E501
        :rtype: list[ImageWithBboxResponse]
        """
        return self._concept_of_interest

    @concept_of_interest.setter
    def concept_of_interest(self, concept_of_interest):
        """Sets the concept_of_interest of this SynthesisSpecResponse.


        :param concept_of_interest: The concept_of_interest of this SynthesisSpecResponse.  # noqa: E501
        :type concept_of_interest: list[ImageWithBboxResponse]
        """

        self._concept_of_interest = concept_of_interest

    @property
    def generation_canvas(self):
        """Gets the generation_canvas of this SynthesisSpecResponse.  # noqa: E501


        :return: The generation_canvas of this SynthesisSpecResponse.  # noqa: E501
        :rtype: list[ImageWithPolygonResponse]
        """
        return self._generation_canvas

    @generation_canvas.setter
    def generation_canvas(self, generation_canvas):
        """Sets the generation_canvas of this SynthesisSpecResponse.


        :param generation_canvas: The generation_canvas of this SynthesisSpecResponse.  # noqa: E501
        :type generation_canvas: list[ImageWithPolygonResponse]
        """

        self._generation_canvas = generation_canvas

    @property
    def background_images(self):
        """Gets the background_images of this SynthesisSpecResponse.  # noqa: E501


        :return: The background_images of this SynthesisSpecResponse.  # noqa: E501
        :rtype: list[ImageWithMetadata]
        """
        return self._background_images

    @background_images.setter
    def background_images(self, background_images):
        """Sets the background_images of this SynthesisSpecResponse.


        :param background_images: The background_images of this SynthesisSpecResponse.  # noqa: E501
        :type background_images: list[ImageWithMetadata]
        """

        self._background_images = background_images

    @property
    def submitted_at(self):
        """Gets the submitted_at of this SynthesisSpecResponse.  # noqa: E501


        :return: The submitted_at of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._submitted_at

    @submitted_at.setter
    def submitted_at(self, submitted_at):
        """Sets the submitted_at of this SynthesisSpecResponse.


        :param submitted_at: The submitted_at of this SynthesisSpecResponse.  # noqa: E501
        :type submitted_at: str
        """

        self._submitted_at = submitted_at

    @property
    def submitted_by(self):
        """Gets the submitted_by of this SynthesisSpecResponse.  # noqa: E501


        :return: The submitted_by of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this SynthesisSpecResponse.


        :param submitted_by: The submitted_by of this SynthesisSpecResponse.  # noqa: E501
        :type submitted_by: str
        """

        self._submitted_by = submitted_by

    @property
    def completed_at(self):
        """Gets the completed_at of this SynthesisSpecResponse.  # noqa: E501


        :return: The completed_at of this SynthesisSpecResponse.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this SynthesisSpecResponse.


        :param completed_at: The completed_at of this SynthesisSpecResponse.  # noqa: E501
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def error(self):
        """Gets the error of this SynthesisSpecResponse.  # noqa: E501


        :return: The error of this SynthesisSpecResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SynthesisSpecResponse.


        :param error: The error of this SynthesisSpecResponse.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def session_feedback(self):
        """Gets the session_feedback of this SynthesisSpecResponse.  # noqa: E501


        :return: The session_feedback of this SynthesisSpecResponse.  # noqa: E501
        :rtype: list[ImageWithFeedback]
        """
        return self._session_feedback

    @session_feedback.setter
    def session_feedback(self, session_feedback):
        """Sets the session_feedback of this SynthesisSpecResponse.


        :param session_feedback: The session_feedback of this SynthesisSpecResponse.  # noqa: E501
        :type session_feedback: list[ImageWithFeedback]
        """

        self._session_feedback = session_feedback

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynthesisSpecResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SynthesisSpecResponse):
            return True

        return self.to_dict() != other.to_dict()
