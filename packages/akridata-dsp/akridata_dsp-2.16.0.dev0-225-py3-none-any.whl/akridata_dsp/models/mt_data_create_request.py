# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtDataCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vcs_query_id': 'str',
        'columns': 'Columns',
        'discard_duplicates': 'bool',
        'replace_existing': 'bool',
        'base_data_version': 'str',
        'training_splits': 'TrainingSplits',
        'rebalance_splits': 'bool',
        'training_split_mode': 'TrainingSplitMode'
    }

    attribute_map = {
        'vcs_query_id': 'vcs_query_id',
        'columns': 'columns',
        'discard_duplicates': 'discard_duplicates',
        'replace_existing': 'replace_existing',
        'base_data_version': 'base_data_version',
        'training_splits': 'training_splits',
        'rebalance_splits': 'rebalance_splits',
        'training_split_mode': 'training_split_mode'
    }

    def __init__(self, vcs_query_id=None, columns=None, discard_duplicates=True, replace_existing=False, base_data_version=None, training_splits=None, rebalance_splits=False, training_split_mode=None, local_vars_configuration=None):  # noqa: E501
        """MtDataCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._vcs_query_id = None
        self._columns = None
        self._discard_duplicates = None
        self._replace_existing = None
        self._base_data_version = None
        self._training_splits = None
        self._rebalance_splits = None
        self._training_split_mode = None
        self.discriminator = None

        self.vcs_query_id = vcs_query_id
        self.columns = columns
        if discard_duplicates is not None:
            self.discard_duplicates = discard_duplicates
        if replace_existing is not None:
            self.replace_existing = replace_existing
        if base_data_version is not None:
            self.base_data_version = base_data_version
        self.training_splits = training_splits
        if rebalance_splits is not None:
            self.rebalance_splits = rebalance_splits
        if training_split_mode is not None:
            self.training_split_mode = training_split_mode

    @property
    def vcs_query_id(self):
        """Gets the vcs_query_id of this MtDataCreateRequest.  # noqa: E501


        :return: The vcs_query_id of this MtDataCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._vcs_query_id

    @vcs_query_id.setter
    def vcs_query_id(self, vcs_query_id):
        """Sets the vcs_query_id of this MtDataCreateRequest.


        :param vcs_query_id: The vcs_query_id of this MtDataCreateRequest.  # noqa: E501
        :type vcs_query_id: str
        """
        if self.local_vars_configuration.client_side_validation and vcs_query_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vcs_query_id`, must not be `None`")  # noqa: E501

        self._vcs_query_id = vcs_query_id

    @property
    def columns(self):
        """Gets the columns of this MtDataCreateRequest.  # noqa: E501


        :return: The columns of this MtDataCreateRequest.  # noqa: E501
        :rtype: Columns
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this MtDataCreateRequest.


        :param columns: The columns of this MtDataCreateRequest.  # noqa: E501
        :type columns: Columns
        """
        if self.local_vars_configuration.client_side_validation and columns is None:  # noqa: E501
            raise ValueError("Invalid value for `columns`, must not be `None`")  # noqa: E501

        self._columns = columns

    @property
    def discard_duplicates(self):
        """Gets the discard_duplicates of this MtDataCreateRequest.  # noqa: E501


        :return: The discard_duplicates of this MtDataCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._discard_duplicates

    @discard_duplicates.setter
    def discard_duplicates(self, discard_duplicates):
        """Sets the discard_duplicates of this MtDataCreateRequest.


        :param discard_duplicates: The discard_duplicates of this MtDataCreateRequest.  # noqa: E501
        :type discard_duplicates: bool
        """

        self._discard_duplicates = discard_duplicates

    @property
    def replace_existing(self):
        """Gets the replace_existing of this MtDataCreateRequest.  # noqa: E501


        :return: The replace_existing of this MtDataCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing

    @replace_existing.setter
    def replace_existing(self, replace_existing):
        """Sets the replace_existing of this MtDataCreateRequest.


        :param replace_existing: The replace_existing of this MtDataCreateRequest.  # noqa: E501
        :type replace_existing: bool
        """

        self._replace_existing = replace_existing

    @property
    def base_data_version(self):
        """Gets the base_data_version of this MtDataCreateRequest.  # noqa: E501


        :return: The base_data_version of this MtDataCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._base_data_version

    @base_data_version.setter
    def base_data_version(self, base_data_version):
        """Sets the base_data_version of this MtDataCreateRequest.


        :param base_data_version: The base_data_version of this MtDataCreateRequest.  # noqa: E501
        :type base_data_version: str
        """

        self._base_data_version = base_data_version

    @property
    def training_splits(self):
        """Gets the training_splits of this MtDataCreateRequest.  # noqa: E501


        :return: The training_splits of this MtDataCreateRequest.  # noqa: E501
        :rtype: TrainingSplits
        """
        return self._training_splits

    @training_splits.setter
    def training_splits(self, training_splits):
        """Sets the training_splits of this MtDataCreateRequest.


        :param training_splits: The training_splits of this MtDataCreateRequest.  # noqa: E501
        :type training_splits: TrainingSplits
        """
        if self.local_vars_configuration.client_side_validation and training_splits is None:  # noqa: E501
            raise ValueError("Invalid value for `training_splits`, must not be `None`")  # noqa: E501

        self._training_splits = training_splits

    @property
    def rebalance_splits(self):
        """Gets the rebalance_splits of this MtDataCreateRequest.  # noqa: E501


        :return: The rebalance_splits of this MtDataCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._rebalance_splits

    @rebalance_splits.setter
    def rebalance_splits(self, rebalance_splits):
        """Sets the rebalance_splits of this MtDataCreateRequest.


        :param rebalance_splits: The rebalance_splits of this MtDataCreateRequest.  # noqa: E501
        :type rebalance_splits: bool
        """

        self._rebalance_splits = rebalance_splits

    @property
    def training_split_mode(self):
        """Gets the training_split_mode of this MtDataCreateRequest.  # noqa: E501


        :return: The training_split_mode of this MtDataCreateRequest.  # noqa: E501
        :rtype: TrainingSplitMode
        """
        return self._training_split_mode

    @training_split_mode.setter
    def training_split_mode(self, training_split_mode):
        """Sets the training_split_mode of this MtDataCreateRequest.


        :param training_split_mode: The training_split_mode of this MtDataCreateRequest.  # noqa: E501
        :type training_split_mode: TrainingSplitMode
        """

        self._training_split_mode = training_split_mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtDataCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtDataCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
