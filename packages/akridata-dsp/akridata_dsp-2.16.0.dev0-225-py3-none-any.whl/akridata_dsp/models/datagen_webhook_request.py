# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class DatagenWebhookRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataspan_org_id': 'str',
        'akridata_org_id': 'str',
        'akridata_session_id': 'str',
        'generation_id': 'str',
        'localization_layer_id': 'str',
        'dataset_id': 'str',
        'concept_id': 'str',
        'status': 'DatagenTaskStatus',
        'created_at': 'str',
        'updated_at': 'str',
        'completed_at': 'str',
        'progress': 'int',
        'metadata': 'object'
    }

    attribute_map = {
        'dataspan_org_id': 'dataspan_org_id',
        'akridata_org_id': 'akridata_org_id',
        'akridata_session_id': 'akridata_session_id',
        'generation_id': 'generation_id',
        'localization_layer_id': 'localization_layer_id',
        'dataset_id': 'dataset_id',
        'concept_id': 'concept_id',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'completed_at': 'completed_at',
        'progress': 'progress',
        'metadata': 'metadata'
    }

    def __init__(self, dataspan_org_id=None, akridata_org_id=None, akridata_session_id=None, generation_id=None, localization_layer_id=None, dataset_id=None, concept_id=None, status=None, created_at=None, updated_at=None, completed_at=None, progress=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """DatagenWebhookRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataspan_org_id = None
        self._akridata_org_id = None
        self._akridata_session_id = None
        self._generation_id = None
        self._localization_layer_id = None
        self._dataset_id = None
        self._concept_id = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._completed_at = None
        self._progress = None
        self._metadata = None
        self.discriminator = None

        self.dataspan_org_id = dataspan_org_id
        self.akridata_org_id = akridata_org_id
        self.akridata_session_id = akridata_session_id
        self.generation_id = generation_id
        self.localization_layer_id = localization_layer_id
        self.dataset_id = dataset_id
        self.concept_id = concept_id
        self.status = status
        self.created_at = created_at
        self.updated_at = updated_at
        self.completed_at = completed_at
        self.progress = progress
        if metadata is not None:
            self.metadata = metadata

    @property
    def dataspan_org_id(self):
        """Gets the dataspan_org_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The dataspan_org_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataspan_org_id

    @dataspan_org_id.setter
    def dataspan_org_id(self, dataspan_org_id):
        """Sets the dataspan_org_id of this DatagenWebhookRequest.


        :param dataspan_org_id: The dataspan_org_id of this DatagenWebhookRequest.  # noqa: E501
        :type dataspan_org_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataspan_org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataspan_org_id`, must not be `None`")  # noqa: E501

        self._dataspan_org_id = dataspan_org_id

    @property
    def akridata_org_id(self):
        """Gets the akridata_org_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The akridata_org_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._akridata_org_id

    @akridata_org_id.setter
    def akridata_org_id(self, akridata_org_id):
        """Sets the akridata_org_id of this DatagenWebhookRequest.


        :param akridata_org_id: The akridata_org_id of this DatagenWebhookRequest.  # noqa: E501
        :type akridata_org_id: str
        """
        if self.local_vars_configuration.client_side_validation and akridata_org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `akridata_org_id`, must not be `None`")  # noqa: E501

        self._akridata_org_id = akridata_org_id

    @property
    def akridata_session_id(self):
        """Gets the akridata_session_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The akridata_session_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._akridata_session_id

    @akridata_session_id.setter
    def akridata_session_id(self, akridata_session_id):
        """Sets the akridata_session_id of this DatagenWebhookRequest.


        :param akridata_session_id: The akridata_session_id of this DatagenWebhookRequest.  # noqa: E501
        :type akridata_session_id: str
        """
        if self.local_vars_configuration.client_side_validation and akridata_session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `akridata_session_id`, must not be `None`")  # noqa: E501

        self._akridata_session_id = akridata_session_id

    @property
    def generation_id(self):
        """Gets the generation_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The generation_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._generation_id

    @generation_id.setter
    def generation_id(self, generation_id):
        """Sets the generation_id of this DatagenWebhookRequest.


        :param generation_id: The generation_id of this DatagenWebhookRequest.  # noqa: E501
        :type generation_id: str
        """
        if self.local_vars_configuration.client_side_validation and generation_id is None:  # noqa: E501
            raise ValueError("Invalid value for `generation_id`, must not be `None`")  # noqa: E501

        self._generation_id = generation_id

    @property
    def localization_layer_id(self):
        """Gets the localization_layer_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The localization_layer_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._localization_layer_id

    @localization_layer_id.setter
    def localization_layer_id(self, localization_layer_id):
        """Sets the localization_layer_id of this DatagenWebhookRequest.


        :param localization_layer_id: The localization_layer_id of this DatagenWebhookRequest.  # noqa: E501
        :type localization_layer_id: str
        """
        if self.local_vars_configuration.client_side_validation and localization_layer_id is None:  # noqa: E501
            raise ValueError("Invalid value for `localization_layer_id`, must not be `None`")  # noqa: E501

        self._localization_layer_id = localization_layer_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The dataset_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DatagenWebhookRequest.


        :param dataset_id: The dataset_id of this DatagenWebhookRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def concept_id(self):
        """Gets the concept_id of this DatagenWebhookRequest.  # noqa: E501


        :return: The concept_id of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """Sets the concept_id of this DatagenWebhookRequest.


        :param concept_id: The concept_id of this DatagenWebhookRequest.  # noqa: E501
        :type concept_id: str
        """
        if self.local_vars_configuration.client_side_validation and concept_id is None:  # noqa: E501
            raise ValueError("Invalid value for `concept_id`, must not be `None`")  # noqa: E501

        self._concept_id = concept_id

    @property
    def status(self):
        """Gets the status of this DatagenWebhookRequest.  # noqa: E501


        :return: The status of this DatagenWebhookRequest.  # noqa: E501
        :rtype: DatagenTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatagenWebhookRequest.


        :param status: The status of this DatagenWebhookRequest.  # noqa: E501
        :type status: DatagenTaskStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this DatagenWebhookRequest.  # noqa: E501


        :return: The created_at of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DatagenWebhookRequest.


        :param created_at: The created_at of this DatagenWebhookRequest.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DatagenWebhookRequest.  # noqa: E501


        :return: The updated_at of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DatagenWebhookRequest.


        :param updated_at: The updated_at of this DatagenWebhookRequest.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def completed_at(self):
        """Gets the completed_at of this DatagenWebhookRequest.  # noqa: E501


        :return: The completed_at of this DatagenWebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this DatagenWebhookRequest.


        :param completed_at: The completed_at of this DatagenWebhookRequest.  # noqa: E501
        :type completed_at: str
        """
        if self.local_vars_configuration.client_side_validation and completed_at is None:  # noqa: E501
            raise ValueError("Invalid value for `completed_at`, must not be `None`")  # noqa: E501

        self._completed_at = completed_at

    @property
    def progress(self):
        """Gets the progress of this DatagenWebhookRequest.  # noqa: E501


        :return: The progress of this DatagenWebhookRequest.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DatagenWebhookRequest.


        :param progress: The progress of this DatagenWebhookRequest.  # noqa: E501
        :type progress: int
        """
        if self.local_vars_configuration.client_side_validation and progress is None:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def metadata(self):
        """Gets the metadata of this DatagenWebhookRequest.  # noqa: E501


        :return: The metadata of this DatagenWebhookRequest.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DatagenWebhookRequest.


        :param metadata: The metadata of this DatagenWebhookRequest.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatagenWebhookRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatagenWebhookRequest):
            return True

        return self.to_dict() != other.to_dict()
