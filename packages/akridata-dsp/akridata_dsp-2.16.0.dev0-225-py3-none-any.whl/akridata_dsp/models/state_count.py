# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class StateCount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pending': 'int',
        'accepted': 'int',
        'rejected': 'int',
        'transferred': 'int',
        'expert_review': 'int'
    }

    attribute_map = {
        'pending': 'PENDING',
        'accepted': 'ACCEPTED',
        'rejected': 'REJECTED',
        'transferred': 'TRANSFERRED',
        'expert_review': 'EXPERT_REVIEW'
    }

    def __init__(self, pending=0, accepted=0, rejected=0, transferred=0, expert_review=0, local_vars_configuration=None):  # noqa: E501
        """StateCount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._pending = None
        self._accepted = None
        self._rejected = None
        self._transferred = None
        self._expert_review = None
        self.discriminator = None

        if pending is not None:
            self.pending = pending
        if accepted is not None:
            self.accepted = accepted
        if rejected is not None:
            self.rejected = rejected
        if transferred is not None:
            self.transferred = transferred
        if expert_review is not None:
            self.expert_review = expert_review

    @property
    def pending(self):
        """Gets the pending of this StateCount.  # noqa: E501


        :return: The pending of this StateCount.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this StateCount.


        :param pending: The pending of this StateCount.  # noqa: E501
        :type pending: int
        """

        self._pending = pending

    @property
    def accepted(self):
        """Gets the accepted of this StateCount.  # noqa: E501


        :return: The accepted of this StateCount.  # noqa: E501
        :rtype: int
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted):
        """Sets the accepted of this StateCount.


        :param accepted: The accepted of this StateCount.  # noqa: E501
        :type accepted: int
        """

        self._accepted = accepted

    @property
    def rejected(self):
        """Gets the rejected of this StateCount.  # noqa: E501


        :return: The rejected of this StateCount.  # noqa: E501
        :rtype: int
        """
        return self._rejected

    @rejected.setter
    def rejected(self, rejected):
        """Sets the rejected of this StateCount.


        :param rejected: The rejected of this StateCount.  # noqa: E501
        :type rejected: int
        """

        self._rejected = rejected

    @property
    def transferred(self):
        """Gets the transferred of this StateCount.  # noqa: E501


        :return: The transferred of this StateCount.  # noqa: E501
        :rtype: int
        """
        return self._transferred

    @transferred.setter
    def transferred(self, transferred):
        """Sets the transferred of this StateCount.


        :param transferred: The transferred of this StateCount.  # noqa: E501
        :type transferred: int
        """

        self._transferred = transferred

    @property
    def expert_review(self):
        """Gets the expert_review of this StateCount.  # noqa: E501


        :return: The expert_review of this StateCount.  # noqa: E501
        :rtype: int
        """
        return self._expert_review

    @expert_review.setter
    def expert_review(self, expert_review):
        """Sets the expert_review of this StateCount.


        :param expert_review: The expert_review of this StateCount.  # noqa: E501
        :type expert_review: int
        """

        self._expert_review = expert_review

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StateCount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StateCount):
            return True

        return self.to_dict() != other.to_dict()
