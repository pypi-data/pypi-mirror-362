# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetGetResponseItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_id': 'str',
        'name': 'str',
        'description': 'str',
        'version': 'int',
        'created_at': 'str',
        'last_updated_at': 'str',
        'num_frames': 'int',
        'is_top_level': 'bool',
        'vseq': 'VseqConfigResponse',
        'dataset_access_type': 'AccessType',
        'data': 'list[ResultsetResponseGetFrames]',
        'tags': 'list[str]',
        'is_frozen': 'bool',
        'error': 'ErrorResponse',
        'available_dump_attributes': 'list[Attribute]',
        'available_catalog_sync_attributes': 'list[Attribute]',
        'catalog_sync_session': 'CatalogSyncSession',
        'last_completed_catalog_sync_session': 'CatalogSyncSession',
        'label_meta': 'LabelMeta',
        'supported_export_formats': 'list[ResultsetExportFormat]',
        'request_id': 'str'
    }

    attribute_map = {
        'dataset_id': 'dataset_id',
        'name': 'name',
        'description': 'description',
        'version': 'version',
        'created_at': 'created_at',
        'last_updated_at': 'last_updated_at',
        'num_frames': 'num_frames',
        'is_top_level': 'is_top_level',
        'vseq': 'vseq',
        'dataset_access_type': 'dataset_access_type',
        'data': 'data',
        'tags': 'tags',
        'is_frozen': 'is_frozen',
        'error': 'error',
        'available_dump_attributes': 'available_dump_attributes',
        'available_catalog_sync_attributes': 'available_catalog_sync_attributes',
        'catalog_sync_session': 'catalog_sync_session',
        'last_completed_catalog_sync_session': 'last_completed_catalog_sync_session',
        'label_meta': 'label_meta',
        'supported_export_formats': 'supported_export_formats',
        'request_id': 'request_id'
    }

    def __init__(self, dataset_id=None, name=None, description=None, version=None, created_at=None, last_updated_at=None, num_frames=None, is_top_level=None, vseq=None, dataset_access_type=None, data=None, tags=None, is_frozen=None, error=None, available_dump_attributes=None, available_catalog_sync_attributes=None, catalog_sync_session=None, last_completed_catalog_sync_session=None, label_meta=None, supported_export_formats=None, request_id=None, local_vars_configuration=None):  # noqa: E501
        """ResultsetGetResponseItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_id = None
        self._name = None
        self._description = None
        self._version = None
        self._created_at = None
        self._last_updated_at = None
        self._num_frames = None
        self._is_top_level = None
        self._vseq = None
        self._dataset_access_type = None
        self._data = None
        self._tags = None
        self._is_frozen = None
        self._error = None
        self._available_dump_attributes = None
        self._available_catalog_sync_attributes = None
        self._catalog_sync_session = None
        self._last_completed_catalog_sync_session = None
        self._label_meta = None
        self._supported_export_formats = None
        self._request_id = None
        self.discriminator = None

        self.dataset_id = dataset_id
        self.name = name
        if description is not None:
            self.description = description
        self.version = version
        self.created_at = created_at
        self.last_updated_at = last_updated_at
        self.num_frames = num_frames
        self.is_top_level = is_top_level
        if vseq is not None:
            self.vseq = vseq
        self.dataset_access_type = dataset_access_type
        if data is not None:
            self.data = data
        self.tags = tags
        self.is_frozen = is_frozen
        if error is not None:
            self.error = error
        if available_dump_attributes is not None:
            self.available_dump_attributes = available_dump_attributes
        if available_catalog_sync_attributes is not None:
            self.available_catalog_sync_attributes = available_catalog_sync_attributes
        if catalog_sync_session is not None:
            self.catalog_sync_session = catalog_sync_session
        if last_completed_catalog_sync_session is not None:
            self.last_completed_catalog_sync_session = last_completed_catalog_sync_session
        if label_meta is not None:
            self.label_meta = label_meta
        self.supported_export_formats = supported_export_formats
        if request_id is not None:
            self.request_id = request_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ResultsetGetResponseItem.  # noqa: E501


        :return: The dataset_id of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ResultsetGetResponseItem.


        :param dataset_id: The dataset_id of this ResultsetGetResponseItem.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def name(self):
        """Gets the name of this ResultsetGetResponseItem.  # noqa: E501


        :return: The name of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResultsetGetResponseItem.


        :param name: The name of this ResultsetGetResponseItem.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ResultsetGetResponseItem.  # noqa: E501


        :return: The description of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResultsetGetResponseItem.


        :param description: The description of this ResultsetGetResponseItem.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def version(self):
        """Gets the version of this ResultsetGetResponseItem.  # noqa: E501


        :return: The version of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ResultsetGetResponseItem.


        :param version: The version of this ResultsetGetResponseItem.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def created_at(self):
        """Gets the created_at of this ResultsetGetResponseItem.  # noqa: E501


        :return: The created_at of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ResultsetGetResponseItem.


        :param created_at: The created_at of this ResultsetGetResponseItem.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ResultsetGetResponseItem.  # noqa: E501


        :return: The last_updated_at of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ResultsetGetResponseItem.


        :param last_updated_at: The last_updated_at of this ResultsetGetResponseItem.  # noqa: E501
        :type last_updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and last_updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `last_updated_at`, must not be `None`")  # noqa: E501

        self._last_updated_at = last_updated_at

    @property
    def num_frames(self):
        """Gets the num_frames of this ResultsetGetResponseItem.  # noqa: E501


        :return: The num_frames of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._num_frames

    @num_frames.setter
    def num_frames(self, num_frames):
        """Sets the num_frames of this ResultsetGetResponseItem.


        :param num_frames: The num_frames of this ResultsetGetResponseItem.  # noqa: E501
        :type num_frames: int
        """
        if self.local_vars_configuration.client_side_validation and num_frames is None:  # noqa: E501
            raise ValueError("Invalid value for `num_frames`, must not be `None`")  # noqa: E501

        self._num_frames = num_frames

    @property
    def is_top_level(self):
        """Gets the is_top_level of this ResultsetGetResponseItem.  # noqa: E501


        :return: The is_top_level of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """Sets the is_top_level of this ResultsetGetResponseItem.


        :param is_top_level: The is_top_level of this ResultsetGetResponseItem.  # noqa: E501
        :type is_top_level: bool
        """
        if self.local_vars_configuration.client_side_validation and is_top_level is None:  # noqa: E501
            raise ValueError("Invalid value for `is_top_level`, must not be `None`")  # noqa: E501

        self._is_top_level = is_top_level

    @property
    def vseq(self):
        """Gets the vseq of this ResultsetGetResponseItem.  # noqa: E501


        :return: The vseq of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this ResultsetGetResponseItem.


        :param vseq: The vseq of this ResultsetGetResponseItem.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    @property
    def dataset_access_type(self):
        """Gets the dataset_access_type of this ResultsetGetResponseItem.  # noqa: E501


        :return: The dataset_access_type of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: AccessType
        """
        return self._dataset_access_type

    @dataset_access_type.setter
    def dataset_access_type(self, dataset_access_type):
        """Sets the dataset_access_type of this ResultsetGetResponseItem.


        :param dataset_access_type: The dataset_access_type of this ResultsetGetResponseItem.  # noqa: E501
        :type dataset_access_type: AccessType
        """
        if self.local_vars_configuration.client_side_validation and dataset_access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_access_type`, must not be `None`")  # noqa: E501

        self._dataset_access_type = dataset_access_type

    @property
    def data(self):
        """Gets the data of this ResultsetGetResponseItem.  # noqa: E501


        :return: The data of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: list[ResultsetResponseGetFrames]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ResultsetGetResponseItem.


        :param data: The data of this ResultsetGetResponseItem.  # noqa: E501
        :type data: list[ResultsetResponseGetFrames]
        """

        self._data = data

    @property
    def tags(self):
        """Gets the tags of this ResultsetGetResponseItem.  # noqa: E501


        :return: The tags of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ResultsetGetResponseItem.


        :param tags: The tags of this ResultsetGetResponseItem.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def is_frozen(self):
        """Gets the is_frozen of this ResultsetGetResponseItem.  # noqa: E501


        :return: The is_frozen of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_frozen

    @is_frozen.setter
    def is_frozen(self, is_frozen):
        """Sets the is_frozen of this ResultsetGetResponseItem.


        :param is_frozen: The is_frozen of this ResultsetGetResponseItem.  # noqa: E501
        :type is_frozen: bool
        """
        if self.local_vars_configuration.client_side_validation and is_frozen is None:  # noqa: E501
            raise ValueError("Invalid value for `is_frozen`, must not be `None`")  # noqa: E501

        self._is_frozen = is_frozen

    @property
    def error(self):
        """Gets the error of this ResultsetGetResponseItem.  # noqa: E501


        :return: The error of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ResultsetGetResponseItem.


        :param error: The error of this ResultsetGetResponseItem.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def available_dump_attributes(self):
        """Gets the available_dump_attributes of this ResultsetGetResponseItem.  # noqa: E501


        :return: The available_dump_attributes of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._available_dump_attributes

    @available_dump_attributes.setter
    def available_dump_attributes(self, available_dump_attributes):
        """Sets the available_dump_attributes of this ResultsetGetResponseItem.


        :param available_dump_attributes: The available_dump_attributes of this ResultsetGetResponseItem.  # noqa: E501
        :type available_dump_attributes: list[Attribute]
        """

        self._available_dump_attributes = available_dump_attributes

    @property
    def available_catalog_sync_attributes(self):
        """Gets the available_catalog_sync_attributes of this ResultsetGetResponseItem.  # noqa: E501


        :return: The available_catalog_sync_attributes of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._available_catalog_sync_attributes

    @available_catalog_sync_attributes.setter
    def available_catalog_sync_attributes(self, available_catalog_sync_attributes):
        """Sets the available_catalog_sync_attributes of this ResultsetGetResponseItem.


        :param available_catalog_sync_attributes: The available_catalog_sync_attributes of this ResultsetGetResponseItem.  # noqa: E501
        :type available_catalog_sync_attributes: list[Attribute]
        """

        self._available_catalog_sync_attributes = available_catalog_sync_attributes

    @property
    def catalog_sync_session(self):
        """Gets the catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501


        :return: The catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: CatalogSyncSession
        """
        return self._catalog_sync_session

    @catalog_sync_session.setter
    def catalog_sync_session(self, catalog_sync_session):
        """Sets the catalog_sync_session of this ResultsetGetResponseItem.


        :param catalog_sync_session: The catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501
        :type catalog_sync_session: CatalogSyncSession
        """

        self._catalog_sync_session = catalog_sync_session

    @property
    def last_completed_catalog_sync_session(self):
        """Gets the last_completed_catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501


        :return: The last_completed_catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: CatalogSyncSession
        """
        return self._last_completed_catalog_sync_session

    @last_completed_catalog_sync_session.setter
    def last_completed_catalog_sync_session(self, last_completed_catalog_sync_session):
        """Sets the last_completed_catalog_sync_session of this ResultsetGetResponseItem.


        :param last_completed_catalog_sync_session: The last_completed_catalog_sync_session of this ResultsetGetResponseItem.  # noqa: E501
        :type last_completed_catalog_sync_session: CatalogSyncSession
        """

        self._last_completed_catalog_sync_session = last_completed_catalog_sync_session

    @property
    def label_meta(self):
        """Gets the label_meta of this ResultsetGetResponseItem.  # noqa: E501


        :return: The label_meta of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: LabelMeta
        """
        return self._label_meta

    @label_meta.setter
    def label_meta(self, label_meta):
        """Sets the label_meta of this ResultsetGetResponseItem.


        :param label_meta: The label_meta of this ResultsetGetResponseItem.  # noqa: E501
        :type label_meta: LabelMeta
        """

        self._label_meta = label_meta

    @property
    def supported_export_formats(self):
        """Gets the supported_export_formats of this ResultsetGetResponseItem.  # noqa: E501


        :return: The supported_export_formats of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: list[ResultsetExportFormat]
        """
        return self._supported_export_formats

    @supported_export_formats.setter
    def supported_export_formats(self, supported_export_formats):
        """Sets the supported_export_formats of this ResultsetGetResponseItem.


        :param supported_export_formats: The supported_export_formats of this ResultsetGetResponseItem.  # noqa: E501
        :type supported_export_formats: list[ResultsetExportFormat]
        """
        if self.local_vars_configuration.client_side_validation and supported_export_formats is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_export_formats`, must not be `None`")  # noqa: E501

        self._supported_export_formats = supported_export_formats

    @property
    def request_id(self):
        """Gets the request_id of this ResultsetGetResponseItem.  # noqa: E501


        :return: The request_id of this ResultsetGetResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ResultsetGetResponseItem.


        :param request_id: The request_id of this ResultsetGetResponseItem.  # noqa: E501
        :type request_id: str
        """

        self._request_id = request_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetGetResponseItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetGetResponseItem):
            return True

        return self.to_dict() != other.to_dict()
