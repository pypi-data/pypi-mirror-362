# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class TextAnalysisOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_score': 'float',
        'is_generic': 'bool',
        'is_ambiguous': 'bool',
        'is_misspelled': 'bool',
        'cleaned_prompts': 'list[LabelPrompt]'
    }

    attribute_map = {
        'common_score': 'common_score',
        'is_generic': 'is_generic',
        'is_ambiguous': 'is_ambiguous',
        'is_misspelled': 'is_misspelled',
        'cleaned_prompts': 'cleaned_prompts'
    }

    def __init__(self, common_score=None, is_generic=None, is_ambiguous=None, is_misspelled=None, cleaned_prompts=None, local_vars_configuration=None):  # noqa: E501
        """TextAnalysisOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._common_score = None
        self._is_generic = None
        self._is_ambiguous = None
        self._is_misspelled = None
        self._cleaned_prompts = None
        self.discriminator = None

        self.common_score = common_score
        self.is_generic = is_generic
        self.is_ambiguous = is_ambiguous
        self.is_misspelled = is_misspelled
        self.cleaned_prompts = cleaned_prompts

    @property
    def common_score(self):
        """Gets the common_score of this TextAnalysisOutput.  # noqa: E501


        :return: The common_score of this TextAnalysisOutput.  # noqa: E501
        :rtype: float
        """
        return self._common_score

    @common_score.setter
    def common_score(self, common_score):
        """Sets the common_score of this TextAnalysisOutput.


        :param common_score: The common_score of this TextAnalysisOutput.  # noqa: E501
        :type common_score: float
        """
        if self.local_vars_configuration.client_side_validation and common_score is None:  # noqa: E501
            raise ValueError("Invalid value for `common_score`, must not be `None`")  # noqa: E501

        self._common_score = common_score

    @property
    def is_generic(self):
        """Gets the is_generic of this TextAnalysisOutput.  # noqa: E501


        :return: The is_generic of this TextAnalysisOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic

    @is_generic.setter
    def is_generic(self, is_generic):
        """Sets the is_generic of this TextAnalysisOutput.


        :param is_generic: The is_generic of this TextAnalysisOutput.  # noqa: E501
        :type is_generic: bool
        """
        if self.local_vars_configuration.client_side_validation and is_generic is None:  # noqa: E501
            raise ValueError("Invalid value for `is_generic`, must not be `None`")  # noqa: E501

        self._is_generic = is_generic

    @property
    def is_ambiguous(self):
        """Gets the is_ambiguous of this TextAnalysisOutput.  # noqa: E501


        :return: The is_ambiguous of this TextAnalysisOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_ambiguous

    @is_ambiguous.setter
    def is_ambiguous(self, is_ambiguous):
        """Sets the is_ambiguous of this TextAnalysisOutput.


        :param is_ambiguous: The is_ambiguous of this TextAnalysisOutput.  # noqa: E501
        :type is_ambiguous: bool
        """
        if self.local_vars_configuration.client_side_validation and is_ambiguous is None:  # noqa: E501
            raise ValueError("Invalid value for `is_ambiguous`, must not be `None`")  # noqa: E501

        self._is_ambiguous = is_ambiguous

    @property
    def is_misspelled(self):
        """Gets the is_misspelled of this TextAnalysisOutput.  # noqa: E501


        :return: The is_misspelled of this TextAnalysisOutput.  # noqa: E501
        :rtype: bool
        """
        return self._is_misspelled

    @is_misspelled.setter
    def is_misspelled(self, is_misspelled):
        """Sets the is_misspelled of this TextAnalysisOutput.


        :param is_misspelled: The is_misspelled of this TextAnalysisOutput.  # noqa: E501
        :type is_misspelled: bool
        """
        if self.local_vars_configuration.client_side_validation and is_misspelled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_misspelled`, must not be `None`")  # noqa: E501

        self._is_misspelled = is_misspelled

    @property
    def cleaned_prompts(self):
        """Gets the cleaned_prompts of this TextAnalysisOutput.  # noqa: E501


        :return: The cleaned_prompts of this TextAnalysisOutput.  # noqa: E501
        :rtype: list[LabelPrompt]
        """
        return self._cleaned_prompts

    @cleaned_prompts.setter
    def cleaned_prompts(self, cleaned_prompts):
        """Sets the cleaned_prompts of this TextAnalysisOutput.


        :param cleaned_prompts: The cleaned_prompts of this TextAnalysisOutput.  # noqa: E501
        :type cleaned_prompts: list[LabelPrompt]
        """
        if self.local_vars_configuration.client_side_validation and cleaned_prompts is None:  # noqa: E501
            raise ValueError("Invalid value for `cleaned_prompts`, must not be `None`")  # noqa: E501

        self._cleaned_prompts = cleaned_prompts

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextAnalysisOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TextAnalysisOutput):
            return True

        return self.to_dict() != other.to_dict()
