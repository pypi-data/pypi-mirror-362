# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class DatasetJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset_name': 'str',
        'dataset_version': 'str',
        'dataset_id': 'str',
        'pipeline_id': 'str',
        'pipeline_name': 'str',
        'pipeline_type': 'str',
        'saliency_map_config': 'SaliencyMapConfig',
        'docker_id': 'str',
        'docker_version': 'str',
        'docker_name': 'str',
        'reqid': 'str',
        'reqname': 'str',
        'date': 'str',
        'last_access_time': 'str',
        'status': 'RequestStatus',
        'attributes': 'Attributes',
        'version': 'int',
        'namespace': 'str',
        'fail_reason': 'str',
        'tunables': 'SubmitRequestTunables',
        'tunables_default': 'TunablesDefault',
        'supported_clusterers': 'list[str]',
        'kseg_allowed_modes': 'KsegAllowedModes',
        'patch_supported': 'bool',
        'grid_size': 'list[int]',
        'distance_metric': 'EmbedDistanceMetric',
        'patches': 'list[AppSchemaCommonBoundingBoxBoundingBox]',
        'job_type': 'JobType',
        'access_type': 'AccessType',
        'request_source_meta': 'RequestSourceMetaJobResponse',
        'is_mt_job': 'bool',
        'is_compare_job': 'bool',
        'is_text_search_supported': 'bool',
        'is_import_features_job': 'bool',
        'data_type': 'DataType',
        'error': 'ErrorResponse',
        'is_resubmit_allowed': 'bool',
        'run_segmentation': 'bool',
        'is_text_search_request': 'bool',
        'advanced_config': 'object',
        'is_detail_available': 'bool',
        'vseq_config': 'VseqConfigResponse',
        'text_search_character_limit': 'int',
        'text_search_pipeline': 'TextSearchPipelineFields',
        'progress_pct': 'float',
        'description': 'str',
        'roi_specs': 'RoiSpecs',
        'request_summary': 'RequestSummary',
        'permissions': 'list[str]',
        'ownername': 'str',
        'extra_capabilities': 'ExtraCapabilities'
    }

    attribute_map = {
        'dataset_name': 'dataset_name',
        'dataset_version': 'dataset_version',
        'dataset_id': 'dataset_id',
        'pipeline_id': 'pipeline_id',
        'pipeline_name': 'pipeline_name',
        'pipeline_type': 'pipeline_type',
        'saliency_map_config': 'saliency_map_config',
        'docker_id': 'docker_id',
        'docker_version': 'docker_version',
        'docker_name': 'docker_name',
        'reqid': 'reqid',
        'reqname': 'reqname',
        'date': 'date',
        'last_access_time': 'last_access_time',
        'status': 'status',
        'attributes': 'attributes',
        'version': 'version',
        'namespace': 'namespace',
        'fail_reason': 'fail_reason',
        'tunables': 'tunables',
        'tunables_default': 'tunables_default',
        'supported_clusterers': 'supported_clusterers',
        'kseg_allowed_modes': 'kseg_allowed_modes',
        'patch_supported': 'patch_supported',
        'grid_size': 'grid_size',
        'distance_metric': 'distance_metric',
        'patches': 'patches',
        'job_type': 'job_type',
        'access_type': 'access_type',
        'request_source_meta': 'request_source_meta',
        'is_mt_job': 'is_mt_job',
        'is_compare_job': 'is_compare_job',
        'is_text_search_supported': 'is_text_search_supported',
        'is_import_features_job': 'is_import_features_job',
        'data_type': 'data_type',
        'error': 'error',
        'is_resubmit_allowed': 'is_resubmit_allowed',
        'run_segmentation': 'run_segmentation',
        'is_text_search_request': 'is_text_search_request',
        'advanced_config': 'advanced_config',
        'is_detail_available': 'is_detail_available',
        'vseq_config': 'vseq_config',
        'text_search_character_limit': 'text_search_character_limit',
        'text_search_pipeline': 'text_search_pipeline',
        'progress_pct': 'progress_pct',
        'description': 'description',
        'roi_specs': 'roi_specs',
        'request_summary': 'request_summary',
        'permissions': 'permissions',
        'ownername': 'ownername',
        'extra_capabilities': 'extra_capabilities'
    }

    def __init__(self, dataset_name=None, dataset_version=None, dataset_id=None, pipeline_id=None, pipeline_name=None, pipeline_type='default', saliency_map_config=None, docker_id=None, docker_version=None, docker_name=None, reqid=None, reqname=None, date=None, last_access_time=None, status=None, attributes=None, version=None, namespace=None, fail_reason=None, tunables=None, tunables_default=None, supported_clusterers=None, kseg_allowed_modes=None, patch_supported=None, grid_size=None, distance_metric=None, patches=None, job_type=None, access_type=None, request_source_meta=None, is_mt_job=False, is_compare_job=None, is_text_search_supported=None, is_import_features_job=None, data_type=None, error=None, is_resubmit_allowed=None, run_segmentation=None, is_text_search_request=False, advanced_config=None, is_detail_available=None, vseq_config=None, text_search_character_limit=None, text_search_pipeline=None, progress_pct=None, description=None, roi_specs=None, request_summary=None, permissions=None, ownername=None, extra_capabilities=None, local_vars_configuration=None):  # noqa: E501
        """DatasetJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset_name = None
        self._dataset_version = None
        self._dataset_id = None
        self._pipeline_id = None
        self._pipeline_name = None
        self._pipeline_type = None
        self._saliency_map_config = None
        self._docker_id = None
        self._docker_version = None
        self._docker_name = None
        self._reqid = None
        self._reqname = None
        self._date = None
        self._last_access_time = None
        self._status = None
        self._attributes = None
        self._version = None
        self._namespace = None
        self._fail_reason = None
        self._tunables = None
        self._tunables_default = None
        self._supported_clusterers = None
        self._kseg_allowed_modes = None
        self._patch_supported = None
        self._grid_size = None
        self._distance_metric = None
        self._patches = None
        self._job_type = None
        self._access_type = None
        self._request_source_meta = None
        self._is_mt_job = None
        self._is_compare_job = None
        self._is_text_search_supported = None
        self._is_import_features_job = None
        self._data_type = None
        self._error = None
        self._is_resubmit_allowed = None
        self._run_segmentation = None
        self._is_text_search_request = None
        self._advanced_config = None
        self._is_detail_available = None
        self._vseq_config = None
        self._text_search_character_limit = None
        self._text_search_pipeline = None
        self._progress_pct = None
        self._description = None
        self._roi_specs = None
        self._request_summary = None
        self._permissions = None
        self._ownername = None
        self._extra_capabilities = None
        self.discriminator = None

        self.dataset_name = dataset_name
        self.dataset_version = dataset_version
        self.dataset_id = dataset_id
        self.pipeline_id = pipeline_id
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if pipeline_type is not None:
            self.pipeline_type = pipeline_type
        if saliency_map_config is not None:
            self.saliency_map_config = saliency_map_config
        if docker_id is not None:
            self.docker_id = docker_id
        if docker_version is not None:
            self.docker_version = docker_version
        if docker_name is not None:
            self.docker_name = docker_name
        self.reqid = reqid
        self.reqname = reqname
        self.date = date
        self.last_access_time = last_access_time
        self.status = status
        self.attributes = attributes
        self.version = version
        self.namespace = namespace
        if fail_reason is not None:
            self.fail_reason = fail_reason
        if tunables is not None:
            self.tunables = tunables
        if tunables_default is not None:
            self.tunables_default = tunables_default
        self.supported_clusterers = supported_clusterers
        self.kseg_allowed_modes = kseg_allowed_modes
        if patch_supported is not None:
            self.patch_supported = patch_supported
        if grid_size is not None:
            self.grid_size = grid_size
        if distance_metric is not None:
            self.distance_metric = distance_metric
        if patches is not None:
            self.patches = patches
        self.job_type = job_type
        self.access_type = access_type
        if request_source_meta is not None:
            self.request_source_meta = request_source_meta
        if is_mt_job is not None:
            self.is_mt_job = is_mt_job
        self.is_compare_job = is_compare_job
        self.is_text_search_supported = is_text_search_supported
        self.is_import_features_job = is_import_features_job
        self.data_type = data_type
        if error is not None:
            self.error = error
        self.is_resubmit_allowed = is_resubmit_allowed
        if run_segmentation is not None:
            self.run_segmentation = run_segmentation
        if is_text_search_request is not None:
            self.is_text_search_request = is_text_search_request
        if advanced_config is not None:
            self.advanced_config = advanced_config
        self.is_detail_available = is_detail_available
        if vseq_config is not None:
            self.vseq_config = vseq_config
        if text_search_character_limit is not None:
            self.text_search_character_limit = text_search_character_limit
        if text_search_pipeline is not None:
            self.text_search_pipeline = text_search_pipeline
        if progress_pct is not None:
            self.progress_pct = progress_pct
        if description is not None:
            self.description = description
        if roi_specs is not None:
            self.roi_specs = roi_specs
        self.request_summary = request_summary
        self.permissions = permissions
        self.ownername = ownername
        self.extra_capabilities = extra_capabilities

    @property
    def dataset_name(self):
        """Gets the dataset_name of this DatasetJobRequest.  # noqa: E501


        :return: The dataset_name of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this DatasetJobRequest.


        :param dataset_name: The dataset_name of this DatasetJobRequest.  # noqa: E501
        :type dataset_name: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    @property
    def dataset_version(self):
        """Gets the dataset_version of this DatasetJobRequest.  # noqa: E501


        :return: The dataset_version of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_version

    @dataset_version.setter
    def dataset_version(self, dataset_version):
        """Sets the dataset_version of this DatasetJobRequest.


        :param dataset_version: The dataset_version of this DatasetJobRequest.  # noqa: E501
        :type dataset_version: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_version is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_version`, must not be `None`")  # noqa: E501

        self._dataset_version = dataset_version

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DatasetJobRequest.  # noqa: E501


        :return: The dataset_id of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DatasetJobRequest.


        :param dataset_id: The dataset_id of this DatasetJobRequest.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DatasetJobRequest.  # noqa: E501


        :return: The pipeline_id of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DatasetJobRequest.


        :param pipeline_id: The pipeline_id of this DatasetJobRequest.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this DatasetJobRequest.  # noqa: E501


        :return: The pipeline_name of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this DatasetJobRequest.


        :param pipeline_name: The pipeline_name of this DatasetJobRequest.  # noqa: E501
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this DatasetJobRequest.  # noqa: E501


        :return: The pipeline_type of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this DatasetJobRequest.


        :param pipeline_type: The pipeline_type of this DatasetJobRequest.  # noqa: E501
        :type pipeline_type: str
        """

        self._pipeline_type = pipeline_type

    @property
    def saliency_map_config(self):
        """Gets the saliency_map_config of this DatasetJobRequest.  # noqa: E501


        :return: The saliency_map_config of this DatasetJobRequest.  # noqa: E501
        :rtype: SaliencyMapConfig
        """
        return self._saliency_map_config

    @saliency_map_config.setter
    def saliency_map_config(self, saliency_map_config):
        """Sets the saliency_map_config of this DatasetJobRequest.


        :param saliency_map_config: The saliency_map_config of this DatasetJobRequest.  # noqa: E501
        :type saliency_map_config: SaliencyMapConfig
        """

        self._saliency_map_config = saliency_map_config

    @property
    def docker_id(self):
        """Gets the docker_id of this DatasetJobRequest.  # noqa: E501


        :return: The docker_id of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_id

    @docker_id.setter
    def docker_id(self, docker_id):
        """Sets the docker_id of this DatasetJobRequest.


        :param docker_id: The docker_id of this DatasetJobRequest.  # noqa: E501
        :type docker_id: str
        """

        self._docker_id = docker_id

    @property
    def docker_version(self):
        """Gets the docker_version of this DatasetJobRequest.  # noqa: E501


        :return: The docker_version of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this DatasetJobRequest.


        :param docker_version: The docker_version of this DatasetJobRequest.  # noqa: E501
        :type docker_version: str
        """

        self._docker_version = docker_version

    @property
    def docker_name(self):
        """Gets the docker_name of this DatasetJobRequest.  # noqa: E501


        :return: The docker_name of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._docker_name

    @docker_name.setter
    def docker_name(self, docker_name):
        """Sets the docker_name of this DatasetJobRequest.


        :param docker_name: The docker_name of this DatasetJobRequest.  # noqa: E501
        :type docker_name: str
        """

        self._docker_name = docker_name

    @property
    def reqid(self):
        """Gets the reqid of this DatasetJobRequest.  # noqa: E501


        :return: The reqid of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._reqid

    @reqid.setter
    def reqid(self, reqid):
        """Sets the reqid of this DatasetJobRequest.


        :param reqid: The reqid of this DatasetJobRequest.  # noqa: E501
        :type reqid: str
        """
        if self.local_vars_configuration.client_side_validation and reqid is None:  # noqa: E501
            raise ValueError("Invalid value for `reqid`, must not be `None`")  # noqa: E501

        self._reqid = reqid

    @property
    def reqname(self):
        """Gets the reqname of this DatasetJobRequest.  # noqa: E501


        :return: The reqname of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._reqname

    @reqname.setter
    def reqname(self, reqname):
        """Sets the reqname of this DatasetJobRequest.


        :param reqname: The reqname of this DatasetJobRequest.  # noqa: E501
        :type reqname: str
        """
        if self.local_vars_configuration.client_side_validation and reqname is None:  # noqa: E501
            raise ValueError("Invalid value for `reqname`, must not be `None`")  # noqa: E501

        self._reqname = reqname

    @property
    def date(self):
        """Gets the date of this DatasetJobRequest.  # noqa: E501


        :return: The date of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this DatasetJobRequest.


        :param date: The date of this DatasetJobRequest.  # noqa: E501
        :type date: str
        """
        if self.local_vars_configuration.client_side_validation and date is None:  # noqa: E501
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def last_access_time(self):
        """Gets the last_access_time of this DatasetJobRequest.  # noqa: E501


        :return: The last_access_time of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this DatasetJobRequest.


        :param last_access_time: The last_access_time of this DatasetJobRequest.  # noqa: E501
        :type last_access_time: str
        """
        if self.local_vars_configuration.client_side_validation and last_access_time is None:  # noqa: E501
            raise ValueError("Invalid value for `last_access_time`, must not be `None`")  # noqa: E501

        self._last_access_time = last_access_time

    @property
    def status(self):
        """Gets the status of this DatasetJobRequest.  # noqa: E501


        :return: The status of this DatasetJobRequest.  # noqa: E501
        :rtype: RequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatasetJobRequest.


        :param status: The status of this DatasetJobRequest.  # noqa: E501
        :type status: RequestStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def attributes(self):
        """Gets the attributes of this DatasetJobRequest.  # noqa: E501


        :return: The attributes of this DatasetJobRequest.  # noqa: E501
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DatasetJobRequest.


        :param attributes: The attributes of this DatasetJobRequest.  # noqa: E501
        :type attributes: Attributes
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def version(self):
        """Gets the version of this DatasetJobRequest.  # noqa: E501


        :return: The version of this DatasetJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DatasetJobRequest.


        :param version: The version of this DatasetJobRequest.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def namespace(self):
        """Gets the namespace of this DatasetJobRequest.  # noqa: E501


        :return: The namespace of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this DatasetJobRequest.


        :param namespace: The namespace of this DatasetJobRequest.  # noqa: E501
        :type namespace: str
        """
        if self.local_vars_configuration.client_side_validation and namespace is None:  # noqa: E501
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def fail_reason(self):
        """Gets the fail_reason of this DatasetJobRequest.  # noqa: E501


        :return: The fail_reason of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._fail_reason

    @fail_reason.setter
    def fail_reason(self, fail_reason):
        """Sets the fail_reason of this DatasetJobRequest.


        :param fail_reason: The fail_reason of this DatasetJobRequest.  # noqa: E501
        :type fail_reason: str
        """

        self._fail_reason = fail_reason

    @property
    def tunables(self):
        """Gets the tunables of this DatasetJobRequest.  # noqa: E501


        :return: The tunables of this DatasetJobRequest.  # noqa: E501
        :rtype: SubmitRequestTunables
        """
        return self._tunables

    @tunables.setter
    def tunables(self, tunables):
        """Sets the tunables of this DatasetJobRequest.


        :param tunables: The tunables of this DatasetJobRequest.  # noqa: E501
        :type tunables: SubmitRequestTunables
        """

        self._tunables = tunables

    @property
    def tunables_default(self):
        """Gets the tunables_default of this DatasetJobRequest.  # noqa: E501


        :return: The tunables_default of this DatasetJobRequest.  # noqa: E501
        :rtype: TunablesDefault
        """
        return self._tunables_default

    @tunables_default.setter
    def tunables_default(self, tunables_default):
        """Sets the tunables_default of this DatasetJobRequest.


        :param tunables_default: The tunables_default of this DatasetJobRequest.  # noqa: E501
        :type tunables_default: TunablesDefault
        """

        self._tunables_default = tunables_default

    @property
    def supported_clusterers(self):
        """Gets the supported_clusterers of this DatasetJobRequest.  # noqa: E501


        :return: The supported_clusterers of this DatasetJobRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_clusterers

    @supported_clusterers.setter
    def supported_clusterers(self, supported_clusterers):
        """Sets the supported_clusterers of this DatasetJobRequest.


        :param supported_clusterers: The supported_clusterers of this DatasetJobRequest.  # noqa: E501
        :type supported_clusterers: list[str]
        """
        if self.local_vars_configuration.client_side_validation and supported_clusterers is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_clusterers`, must not be `None`")  # noqa: E501

        self._supported_clusterers = supported_clusterers

    @property
    def kseg_allowed_modes(self):
        """Gets the kseg_allowed_modes of this DatasetJobRequest.  # noqa: E501


        :return: The kseg_allowed_modes of this DatasetJobRequest.  # noqa: E501
        :rtype: KsegAllowedModes
        """
        return self._kseg_allowed_modes

    @kseg_allowed_modes.setter
    def kseg_allowed_modes(self, kseg_allowed_modes):
        """Sets the kseg_allowed_modes of this DatasetJobRequest.


        :param kseg_allowed_modes: The kseg_allowed_modes of this DatasetJobRequest.  # noqa: E501
        :type kseg_allowed_modes: KsegAllowedModes
        """
        if self.local_vars_configuration.client_side_validation and kseg_allowed_modes is None:  # noqa: E501
            raise ValueError("Invalid value for `kseg_allowed_modes`, must not be `None`")  # noqa: E501

        self._kseg_allowed_modes = kseg_allowed_modes

    @property
    def patch_supported(self):
        """Gets the patch_supported of this DatasetJobRequest.  # noqa: E501


        :return: The patch_supported of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._patch_supported

    @patch_supported.setter
    def patch_supported(self, patch_supported):
        """Sets the patch_supported of this DatasetJobRequest.


        :param patch_supported: The patch_supported of this DatasetJobRequest.  # noqa: E501
        :type patch_supported: bool
        """

        self._patch_supported = patch_supported

    @property
    def grid_size(self):
        """Gets the grid_size of this DatasetJobRequest.  # noqa: E501


        :return: The grid_size of this DatasetJobRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._grid_size

    @grid_size.setter
    def grid_size(self, grid_size):
        """Sets the grid_size of this DatasetJobRequest.


        :param grid_size: The grid_size of this DatasetJobRequest.  # noqa: E501
        :type grid_size: list[int]
        """

        self._grid_size = grid_size

    @property
    def distance_metric(self):
        """Gets the distance_metric of this DatasetJobRequest.  # noqa: E501


        :return: The distance_metric of this DatasetJobRequest.  # noqa: E501
        :rtype: EmbedDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this DatasetJobRequest.


        :param distance_metric: The distance_metric of this DatasetJobRequest.  # noqa: E501
        :type distance_metric: EmbedDistanceMetric
        """

        self._distance_metric = distance_metric

    @property
    def patches(self):
        """Gets the patches of this DatasetJobRequest.  # noqa: E501


        :return: The patches of this DatasetJobRequest.  # noqa: E501
        :rtype: list[AppSchemaCommonBoundingBoxBoundingBox]
        """
        return self._patches

    @patches.setter
    def patches(self, patches):
        """Sets the patches of this DatasetJobRequest.


        :param patches: The patches of this DatasetJobRequest.  # noqa: E501
        :type patches: list[AppSchemaCommonBoundingBoxBoundingBox]
        """

        self._patches = patches

    @property
    def job_type(self):
        """Gets the job_type of this DatasetJobRequest.  # noqa: E501


        :return: The job_type of this DatasetJobRequest.  # noqa: E501
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this DatasetJobRequest.


        :param job_type: The job_type of this DatasetJobRequest.  # noqa: E501
        :type job_type: JobType
        """
        if self.local_vars_configuration.client_side_validation and job_type is None:  # noqa: E501
            raise ValueError("Invalid value for `job_type`, must not be `None`")  # noqa: E501

        self._job_type = job_type

    @property
    def access_type(self):
        """Gets the access_type of this DatasetJobRequest.  # noqa: E501


        :return: The access_type of this DatasetJobRequest.  # noqa: E501
        :rtype: AccessType
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this DatasetJobRequest.


        :param access_type: The access_type of this DatasetJobRequest.  # noqa: E501
        :type access_type: AccessType
        """
        if self.local_vars_configuration.client_side_validation and access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def request_source_meta(self):
        """Gets the request_source_meta of this DatasetJobRequest.  # noqa: E501


        :return: The request_source_meta of this DatasetJobRequest.  # noqa: E501
        :rtype: RequestSourceMetaJobResponse
        """
        return self._request_source_meta

    @request_source_meta.setter
    def request_source_meta(self, request_source_meta):
        """Sets the request_source_meta of this DatasetJobRequest.


        :param request_source_meta: The request_source_meta of this DatasetJobRequest.  # noqa: E501
        :type request_source_meta: RequestSourceMetaJobResponse
        """

        self._request_source_meta = request_source_meta

    @property
    def is_mt_job(self):
        """Gets the is_mt_job of this DatasetJobRequest.  # noqa: E501


        :return: The is_mt_job of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_mt_job

    @is_mt_job.setter
    def is_mt_job(self, is_mt_job):
        """Sets the is_mt_job of this DatasetJobRequest.


        :param is_mt_job: The is_mt_job of this DatasetJobRequest.  # noqa: E501
        :type is_mt_job: bool
        """

        self._is_mt_job = is_mt_job

    @property
    def is_compare_job(self):
        """Gets the is_compare_job of this DatasetJobRequest.  # noqa: E501


        :return: The is_compare_job of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_compare_job

    @is_compare_job.setter
    def is_compare_job(self, is_compare_job):
        """Sets the is_compare_job of this DatasetJobRequest.


        :param is_compare_job: The is_compare_job of this DatasetJobRequest.  # noqa: E501
        :type is_compare_job: bool
        """
        if self.local_vars_configuration.client_side_validation and is_compare_job is None:  # noqa: E501
            raise ValueError("Invalid value for `is_compare_job`, must not be `None`")  # noqa: E501

        self._is_compare_job = is_compare_job

    @property
    def is_text_search_supported(self):
        """Gets the is_text_search_supported of this DatasetJobRequest.  # noqa: E501


        :return: The is_text_search_supported of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_text_search_supported

    @is_text_search_supported.setter
    def is_text_search_supported(self, is_text_search_supported):
        """Sets the is_text_search_supported of this DatasetJobRequest.


        :param is_text_search_supported: The is_text_search_supported of this DatasetJobRequest.  # noqa: E501
        :type is_text_search_supported: bool
        """
        if self.local_vars_configuration.client_side_validation and is_text_search_supported is None:  # noqa: E501
            raise ValueError("Invalid value for `is_text_search_supported`, must not be `None`")  # noqa: E501

        self._is_text_search_supported = is_text_search_supported

    @property
    def is_import_features_job(self):
        """Gets the is_import_features_job of this DatasetJobRequest.  # noqa: E501


        :return: The is_import_features_job of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_import_features_job

    @is_import_features_job.setter
    def is_import_features_job(self, is_import_features_job):
        """Sets the is_import_features_job of this DatasetJobRequest.


        :param is_import_features_job: The is_import_features_job of this DatasetJobRequest.  # noqa: E501
        :type is_import_features_job: bool
        """
        if self.local_vars_configuration.client_side_validation and is_import_features_job is None:  # noqa: E501
            raise ValueError("Invalid value for `is_import_features_job`, must not be `None`")  # noqa: E501

        self._is_import_features_job = is_import_features_job

    @property
    def data_type(self):
        """Gets the data_type of this DatasetJobRequest.  # noqa: E501


        :return: The data_type of this DatasetJobRequest.  # noqa: E501
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DatasetJobRequest.


        :param data_type: The data_type of this DatasetJobRequest.  # noqa: E501
        :type data_type: DataType
        """
        if self.local_vars_configuration.client_side_validation and data_type is None:  # noqa: E501
            raise ValueError("Invalid value for `data_type`, must not be `None`")  # noqa: E501

        self._data_type = data_type

    @property
    def error(self):
        """Gets the error of this DatasetJobRequest.  # noqa: E501


        :return: The error of this DatasetJobRequest.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DatasetJobRequest.


        :param error: The error of this DatasetJobRequest.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def is_resubmit_allowed(self):
        """Gets the is_resubmit_allowed of this DatasetJobRequest.  # noqa: E501


        :return: The is_resubmit_allowed of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_resubmit_allowed

    @is_resubmit_allowed.setter
    def is_resubmit_allowed(self, is_resubmit_allowed):
        """Sets the is_resubmit_allowed of this DatasetJobRequest.


        :param is_resubmit_allowed: The is_resubmit_allowed of this DatasetJobRequest.  # noqa: E501
        :type is_resubmit_allowed: bool
        """
        if self.local_vars_configuration.client_side_validation and is_resubmit_allowed is None:  # noqa: E501
            raise ValueError("Invalid value for `is_resubmit_allowed`, must not be `None`")  # noqa: E501

        self._is_resubmit_allowed = is_resubmit_allowed

    @property
    def run_segmentation(self):
        """Gets the run_segmentation of this DatasetJobRequest.  # noqa: E501


        :return: The run_segmentation of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_segmentation

    @run_segmentation.setter
    def run_segmentation(self, run_segmentation):
        """Sets the run_segmentation of this DatasetJobRequest.


        :param run_segmentation: The run_segmentation of this DatasetJobRequest.  # noqa: E501
        :type run_segmentation: bool
        """

        self._run_segmentation = run_segmentation

    @property
    def is_text_search_request(self):
        """Gets the is_text_search_request of this DatasetJobRequest.  # noqa: E501


        :return: The is_text_search_request of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_text_search_request

    @is_text_search_request.setter
    def is_text_search_request(self, is_text_search_request):
        """Sets the is_text_search_request of this DatasetJobRequest.


        :param is_text_search_request: The is_text_search_request of this DatasetJobRequest.  # noqa: E501
        :type is_text_search_request: bool
        """

        self._is_text_search_request = is_text_search_request

    @property
    def advanced_config(self):
        """Gets the advanced_config of this DatasetJobRequest.  # noqa: E501


        :return: The advanced_config of this DatasetJobRequest.  # noqa: E501
        :rtype: object
        """
        return self._advanced_config

    @advanced_config.setter
    def advanced_config(self, advanced_config):
        """Sets the advanced_config of this DatasetJobRequest.


        :param advanced_config: The advanced_config of this DatasetJobRequest.  # noqa: E501
        :type advanced_config: object
        """

        self._advanced_config = advanced_config

    @property
    def is_detail_available(self):
        """Gets the is_detail_available of this DatasetJobRequest.  # noqa: E501


        :return: The is_detail_available of this DatasetJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_detail_available

    @is_detail_available.setter
    def is_detail_available(self, is_detail_available):
        """Sets the is_detail_available of this DatasetJobRequest.


        :param is_detail_available: The is_detail_available of this DatasetJobRequest.  # noqa: E501
        :type is_detail_available: bool
        """
        if self.local_vars_configuration.client_side_validation and is_detail_available is None:  # noqa: E501
            raise ValueError("Invalid value for `is_detail_available`, must not be `None`")  # noqa: E501

        self._is_detail_available = is_detail_available

    @property
    def vseq_config(self):
        """Gets the vseq_config of this DatasetJobRequest.  # noqa: E501


        :return: The vseq_config of this DatasetJobRequest.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq_config

    @vseq_config.setter
    def vseq_config(self, vseq_config):
        """Sets the vseq_config of this DatasetJobRequest.


        :param vseq_config: The vseq_config of this DatasetJobRequest.  # noqa: E501
        :type vseq_config: VseqConfigResponse
        """

        self._vseq_config = vseq_config

    @property
    def text_search_character_limit(self):
        """Gets the text_search_character_limit of this DatasetJobRequest.  # noqa: E501


        :return: The text_search_character_limit of this DatasetJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._text_search_character_limit

    @text_search_character_limit.setter
    def text_search_character_limit(self, text_search_character_limit):
        """Sets the text_search_character_limit of this DatasetJobRequest.


        :param text_search_character_limit: The text_search_character_limit of this DatasetJobRequest.  # noqa: E501
        :type text_search_character_limit: int
        """

        self._text_search_character_limit = text_search_character_limit

    @property
    def text_search_pipeline(self):
        """Gets the text_search_pipeline of this DatasetJobRequest.  # noqa: E501


        :return: The text_search_pipeline of this DatasetJobRequest.  # noqa: E501
        :rtype: TextSearchPipelineFields
        """
        return self._text_search_pipeline

    @text_search_pipeline.setter
    def text_search_pipeline(self, text_search_pipeline):
        """Sets the text_search_pipeline of this DatasetJobRequest.


        :param text_search_pipeline: The text_search_pipeline of this DatasetJobRequest.  # noqa: E501
        :type text_search_pipeline: TextSearchPipelineFields
        """

        self._text_search_pipeline = text_search_pipeline

    @property
    def progress_pct(self):
        """Gets the progress_pct of this DatasetJobRequest.  # noqa: E501


        :return: The progress_pct of this DatasetJobRequest.  # noqa: E501
        :rtype: float
        """
        return self._progress_pct

    @progress_pct.setter
    def progress_pct(self, progress_pct):
        """Sets the progress_pct of this DatasetJobRequest.


        :param progress_pct: The progress_pct of this DatasetJobRequest.  # noqa: E501
        :type progress_pct: float
        """

        self._progress_pct = progress_pct

    @property
    def description(self):
        """Gets the description of this DatasetJobRequest.  # noqa: E501


        :return: The description of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetJobRequest.


        :param description: The description of this DatasetJobRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def roi_specs(self):
        """Gets the roi_specs of this DatasetJobRequest.  # noqa: E501


        :return: The roi_specs of this DatasetJobRequest.  # noqa: E501
        :rtype: RoiSpecs
        """
        return self._roi_specs

    @roi_specs.setter
    def roi_specs(self, roi_specs):
        """Sets the roi_specs of this DatasetJobRequest.


        :param roi_specs: The roi_specs of this DatasetJobRequest.  # noqa: E501
        :type roi_specs: RoiSpecs
        """

        self._roi_specs = roi_specs

    @property
    def request_summary(self):
        """Gets the request_summary of this DatasetJobRequest.  # noqa: E501


        :return: The request_summary of this DatasetJobRequest.  # noqa: E501
        :rtype: RequestSummary
        """
        return self._request_summary

    @request_summary.setter
    def request_summary(self, request_summary):
        """Sets the request_summary of this DatasetJobRequest.


        :param request_summary: The request_summary of this DatasetJobRequest.  # noqa: E501
        :type request_summary: RequestSummary
        """
        if self.local_vars_configuration.client_side_validation and request_summary is None:  # noqa: E501
            raise ValueError("Invalid value for `request_summary`, must not be `None`")  # noqa: E501

        self._request_summary = request_summary

    @property
    def permissions(self):
        """Gets the permissions of this DatasetJobRequest.  # noqa: E501


        :return: The permissions of this DatasetJobRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DatasetJobRequest.


        :param permissions: The permissions of this DatasetJobRequest.  # noqa: E501
        :type permissions: list[str]
        """
        if self.local_vars_configuration.client_side_validation and permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `permissions`, must not be `None`")  # noqa: E501

        self._permissions = permissions

    @property
    def ownername(self):
        """Gets the ownername of this DatasetJobRequest.  # noqa: E501


        :return: The ownername of this DatasetJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._ownername

    @ownername.setter
    def ownername(self, ownername):
        """Sets the ownername of this DatasetJobRequest.


        :param ownername: The ownername of this DatasetJobRequest.  # noqa: E501
        :type ownername: str
        """
        if self.local_vars_configuration.client_side_validation and ownername is None:  # noqa: E501
            raise ValueError("Invalid value for `ownername`, must not be `None`")  # noqa: E501

        self._ownername = ownername

    @property
    def extra_capabilities(self):
        """Gets the extra_capabilities of this DatasetJobRequest.  # noqa: E501


        :return: The extra_capabilities of this DatasetJobRequest.  # noqa: E501
        :rtype: ExtraCapabilities
        """
        return self._extra_capabilities

    @extra_capabilities.setter
    def extra_capabilities(self, extra_capabilities):
        """Sets the extra_capabilities of this DatasetJobRequest.


        :param extra_capabilities: The extra_capabilities of this DatasetJobRequest.  # noqa: E501
        :type extra_capabilities: ExtraCapabilities
        """
        if self.local_vars_configuration.client_side_validation and extra_capabilities is None:  # noqa: E501
            raise ValueError("Invalid value for `extra_capabilities`, must not be `None`")  # noqa: E501

        self._extra_capabilities = extra_capabilities

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetJobRequest):
            return True

        return self.to_dict() != other.to_dict()
