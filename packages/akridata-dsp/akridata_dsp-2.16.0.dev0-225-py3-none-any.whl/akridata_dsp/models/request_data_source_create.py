# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class RequestDataSourceCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ds_req_id': 'str',
        'ds_req_owner': 'str',
        'catalog_filters': 'bool',
        'mt_req': 'MtSourceCreate'
    }

    attribute_map = {
        'ds_req_id': 'ds_req_id',
        'ds_req_owner': 'ds_req_owner',
        'catalog_filters': 'catalog_filters',
        'mt_req': 'mt_req'
    }

    def __init__(self, ds_req_id=None, ds_req_owner=None, catalog_filters=False, mt_req=None, local_vars_configuration=None):  # noqa: E501
        """RequestDataSourceCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._ds_req_id = None
        self._ds_req_owner = None
        self._catalog_filters = None
        self._mt_req = None
        self.discriminator = None

        if ds_req_id is not None:
            self.ds_req_id = ds_req_id
        if ds_req_owner is not None:
            self.ds_req_owner = ds_req_owner
        if catalog_filters is not None:
            self.catalog_filters = catalog_filters
        if mt_req is not None:
            self.mt_req = mt_req

    @property
    def ds_req_id(self):
        """Gets the ds_req_id of this RequestDataSourceCreate.  # noqa: E501


        :return: The ds_req_id of this RequestDataSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._ds_req_id

    @ds_req_id.setter
    def ds_req_id(self, ds_req_id):
        """Sets the ds_req_id of this RequestDataSourceCreate.


        :param ds_req_id: The ds_req_id of this RequestDataSourceCreate.  # noqa: E501
        :type ds_req_id: str
        """

        self._ds_req_id = ds_req_id

    @property
    def ds_req_owner(self):
        """Gets the ds_req_owner of this RequestDataSourceCreate.  # noqa: E501


        :return: The ds_req_owner of this RequestDataSourceCreate.  # noqa: E501
        :rtype: str
        """
        return self._ds_req_owner

    @ds_req_owner.setter
    def ds_req_owner(self, ds_req_owner):
        """Sets the ds_req_owner of this RequestDataSourceCreate.


        :param ds_req_owner: The ds_req_owner of this RequestDataSourceCreate.  # noqa: E501
        :type ds_req_owner: str
        """

        self._ds_req_owner = ds_req_owner

    @property
    def catalog_filters(self):
        """Gets the catalog_filters of this RequestDataSourceCreate.  # noqa: E501


        :return: The catalog_filters of this RequestDataSourceCreate.  # noqa: E501
        :rtype: bool
        """
        return self._catalog_filters

    @catalog_filters.setter
    def catalog_filters(self, catalog_filters):
        """Sets the catalog_filters of this RequestDataSourceCreate.


        :param catalog_filters: The catalog_filters of this RequestDataSourceCreate.  # noqa: E501
        :type catalog_filters: bool
        """

        self._catalog_filters = catalog_filters

    @property
    def mt_req(self):
        """Gets the mt_req of this RequestDataSourceCreate.  # noqa: E501


        :return: The mt_req of this RequestDataSourceCreate.  # noqa: E501
        :rtype: MtSourceCreate
        """
        return self._mt_req

    @mt_req.setter
    def mt_req(self, mt_req):
        """Sets the mt_req of this RequestDataSourceCreate.


        :param mt_req: The mt_req of this RequestDataSourceCreate.  # noqa: E501
        :type mt_req: MtSourceCreate
        """

        self._mt_req = mt_req

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestDataSourceCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RequestDataSourceCreate):
            return True

        return self.to_dict() != other.to_dict()
