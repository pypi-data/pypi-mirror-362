# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class DistributionStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'train': 'SplitStatistics',
        'val': 'SplitStatistics',
        'test': 'SplitStatistics'
    }

    attribute_map = {
        'train': 'train',
        'val': 'val',
        'test': 'test'
    }

    def __init__(self, train=None, val=None, test=None, local_vars_configuration=None):  # noqa: E501
        """DistributionStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._train = None
        self._val = None
        self._test = None
        self.discriminator = None

        self.train = train
        self.val = val
        self.test = test

    @property
    def train(self):
        """Gets the train of this DistributionStatistics.  # noqa: E501


        :return: The train of this DistributionStatistics.  # noqa: E501
        :rtype: SplitStatistics
        """
        return self._train

    @train.setter
    def train(self, train):
        """Sets the train of this DistributionStatistics.


        :param train: The train of this DistributionStatistics.  # noqa: E501
        :type train: SplitStatistics
        """
        if self.local_vars_configuration.client_side_validation and train is None:  # noqa: E501
            raise ValueError("Invalid value for `train`, must not be `None`")  # noqa: E501

        self._train = train

    @property
    def val(self):
        """Gets the val of this DistributionStatistics.  # noqa: E501


        :return: The val of this DistributionStatistics.  # noqa: E501
        :rtype: SplitStatistics
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this DistributionStatistics.


        :param val: The val of this DistributionStatistics.  # noqa: E501
        :type val: SplitStatistics
        """
        if self.local_vars_configuration.client_side_validation and val is None:  # noqa: E501
            raise ValueError("Invalid value for `val`, must not be `None`")  # noqa: E501

        self._val = val

    @property
    def test(self):
        """Gets the test of this DistributionStatistics.  # noqa: E501


        :return: The test of this DistributionStatistics.  # noqa: E501
        :rtype: SplitStatistics
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this DistributionStatistics.


        :param test: The test of this DistributionStatistics.  # noqa: E501
        :type test: SplitStatistics
        """
        if self.local_vars_configuration.client_side_validation and test is None:  # noqa: E501
            raise ValueError("Invalid value for `test`, must not be `None`")  # noqa: E501

        self._test = test

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistributionStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DistributionStatistics):
            return True

        return self.to_dict() != other.to_dict()
