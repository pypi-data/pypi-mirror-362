# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ScenarioExecutionSearchConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'n_neighbors': 'int',
        'distance_metric': 'SimSearchDistanceMetric',
        'reduction_method': 'SimSearchReductionMethod',
        'reduction_size': 'int',
        'trajectory_mode': 'bool',
        'search_space': 'SimSearchSpace'
    }

    attribute_map = {
        'n_neighbors': 'n_neighbors',
        'distance_metric': 'distance_metric',
        'reduction_method': 'reduction_method',
        'reduction_size': 'reduction_size',
        'trajectory_mode': 'trajectory_mode',
        'search_space': 'search_space'
    }

    def __init__(self, n_neighbors=None, distance_metric=None, reduction_method=None, reduction_size=None, trajectory_mode=None, search_space=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioExecutionSearchConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._n_neighbors = None
        self._distance_metric = None
        self._reduction_method = None
        self._reduction_size = None
        self._trajectory_mode = None
        self._search_space = None
        self.discriminator = None

        if n_neighbors is not None:
            self.n_neighbors = n_neighbors
        self.distance_metric = distance_metric
        if reduction_method is not None:
            self.reduction_method = reduction_method
        if reduction_size is not None:
            self.reduction_size = reduction_size
        if trajectory_mode is not None:
            self.trajectory_mode = trajectory_mode
        if search_space is not None:
            self.search_space = search_space

    @property
    def n_neighbors(self):
        """Gets the n_neighbors of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The n_neighbors of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: int
        """
        return self._n_neighbors

    @n_neighbors.setter
    def n_neighbors(self, n_neighbors):
        """Sets the n_neighbors of this ScenarioExecutionSearchConfig.


        :param n_neighbors: The n_neighbors of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type n_neighbors: int
        """

        self._n_neighbors = n_neighbors

    @property
    def distance_metric(self):
        """Gets the distance_metric of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The distance_metric of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: SimSearchDistanceMetric
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this ScenarioExecutionSearchConfig.


        :param distance_metric: The distance_metric of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type distance_metric: SimSearchDistanceMetric
        """
        if self.local_vars_configuration.client_side_validation and distance_metric is None:  # noqa: E501
            raise ValueError("Invalid value for `distance_metric`, must not be `None`")  # noqa: E501

        self._distance_metric = distance_metric

    @property
    def reduction_method(self):
        """Gets the reduction_method of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The reduction_method of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: SimSearchReductionMethod
        """
        return self._reduction_method

    @reduction_method.setter
    def reduction_method(self, reduction_method):
        """Sets the reduction_method of this ScenarioExecutionSearchConfig.


        :param reduction_method: The reduction_method of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type reduction_method: SimSearchReductionMethod
        """

        self._reduction_method = reduction_method

    @property
    def reduction_size(self):
        """Gets the reduction_size of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The reduction_size of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: int
        """
        return self._reduction_size

    @reduction_size.setter
    def reduction_size(self, reduction_size):
        """Sets the reduction_size of this ScenarioExecutionSearchConfig.


        :param reduction_size: The reduction_size of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type reduction_size: int
        """

        self._reduction_size = reduction_size

    @property
    def trajectory_mode(self):
        """Gets the trajectory_mode of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The trajectory_mode of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: bool
        """
        return self._trajectory_mode

    @trajectory_mode.setter
    def trajectory_mode(self, trajectory_mode):
        """Sets the trajectory_mode of this ScenarioExecutionSearchConfig.


        :param trajectory_mode: The trajectory_mode of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type trajectory_mode: bool
        """

        self._trajectory_mode = trajectory_mode

    @property
    def search_space(self):
        """Gets the search_space of this ScenarioExecutionSearchConfig.  # noqa: E501


        :return: The search_space of this ScenarioExecutionSearchConfig.  # noqa: E501
        :rtype: SimSearchSpace
        """
        return self._search_space

    @search_space.setter
    def search_space(self, search_space):
        """Sets the search_space of this ScenarioExecutionSearchConfig.


        :param search_space: The search_space of this ScenarioExecutionSearchConfig.  # noqa: E501
        :type search_space: SimSearchSpace
        """

        self._search_space = search_space

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioExecutionSearchConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioExecutionSearchConfig):
            return True

        return self.to_dict() != other.to_dict()
