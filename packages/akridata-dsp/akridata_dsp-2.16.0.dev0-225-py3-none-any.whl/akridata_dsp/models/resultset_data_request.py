# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ResultsetDataRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expiry_time': 'int',
        'attributes_to_be_dumped': 'list[str]',
        'export_format': 'ResultsetExportFormat',
        'cluster_snapshot_id': 'str',
        'dump_image_tags': 'bool'
    }

    attribute_map = {
        'expiry_time': 'expiry_time',
        'attributes_to_be_dumped': 'attributes_to_be_dumped',
        'export_format': 'export_format',
        'cluster_snapshot_id': 'cluster_snapshot_id',
        'dump_image_tags': 'dump_image_tags'
    }

    def __init__(self, expiry_time=604800, attributes_to_be_dumped=None, export_format=None, cluster_snapshot_id=None, dump_image_tags=False, local_vars_configuration=None):  # noqa: E501
        """ResultsetDataRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._expiry_time = None
        self._attributes_to_be_dumped = None
        self._export_format = None
        self._cluster_snapshot_id = None
        self._dump_image_tags = None
        self.discriminator = None

        if expiry_time is not None:
            self.expiry_time = expiry_time
        if attributes_to_be_dumped is not None:
            self.attributes_to_be_dumped = attributes_to_be_dumped
        if export_format is not None:
            self.export_format = export_format
        if cluster_snapshot_id is not None:
            self.cluster_snapshot_id = cluster_snapshot_id
        if dump_image_tags is not None:
            self.dump_image_tags = dump_image_tags

    @property
    def expiry_time(self):
        """Gets the expiry_time of this ResultsetDataRequest.  # noqa: E501

        absolute expiry time in which resultset json will expire in seconds  # noqa: E501

        :return: The expiry_time of this ResultsetDataRequest.  # noqa: E501
        :rtype: int
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this ResultsetDataRequest.

        absolute expiry time in which resultset json will expire in seconds  # noqa: E501

        :param expiry_time: The expiry_time of this ResultsetDataRequest.  # noqa: E501
        :type expiry_time: int
        """

        self._expiry_time = expiry_time

    @property
    def attributes_to_be_dumped(self):
        """Gets the attributes_to_be_dumped of this ResultsetDataRequest.  # noqa: E501

        If the field is provided, any attribute included in this list will be considered for dumping into the output, while any attributes not present in the list will be ignored. If the field is not provided, all available attributes will be selected for dumping into the output file.  # noqa: E501

        :return: The attributes_to_be_dumped of this ResultsetDataRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._attributes_to_be_dumped

    @attributes_to_be_dumped.setter
    def attributes_to_be_dumped(self, attributes_to_be_dumped):
        """Sets the attributes_to_be_dumped of this ResultsetDataRequest.

        If the field is provided, any attribute included in this list will be considered for dumping into the output, while any attributes not present in the list will be ignored. If the field is not provided, all available attributes will be selected for dumping into the output file.  # noqa: E501

        :param attributes_to_be_dumped: The attributes_to_be_dumped of this ResultsetDataRequest.  # noqa: E501
        :type attributes_to_be_dumped: list[str]
        """

        self._attributes_to_be_dumped = attributes_to_be_dumped

    @property
    def export_format(self):
        """Gets the export_format of this ResultsetDataRequest.  # noqa: E501


        :return: The export_format of this ResultsetDataRequest.  # noqa: E501
        :rtype: ResultsetExportFormat
        """
        return self._export_format

    @export_format.setter
    def export_format(self, export_format):
        """Sets the export_format of this ResultsetDataRequest.


        :param export_format: The export_format of this ResultsetDataRequest.  # noqa: E501
        :type export_format: ResultsetExportFormat
        """

        self._export_format = export_format

    @property
    def cluster_snapshot_id(self):
        """Gets the cluster_snapshot_id of this ResultsetDataRequest.  # noqa: E501


        :return: The cluster_snapshot_id of this ResultsetDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._cluster_snapshot_id

    @cluster_snapshot_id.setter
    def cluster_snapshot_id(self, cluster_snapshot_id):
        """Sets the cluster_snapshot_id of this ResultsetDataRequest.


        :param cluster_snapshot_id: The cluster_snapshot_id of this ResultsetDataRequest.  # noqa: E501
        :type cluster_snapshot_id: str
        """

        self._cluster_snapshot_id = cluster_snapshot_id

    @property
    def dump_image_tags(self):
        """Gets the dump_image_tags of this ResultsetDataRequest.  # noqa: E501


        :return: The dump_image_tags of this ResultsetDataRequest.  # noqa: E501
        :rtype: bool
        """
        return self._dump_image_tags

    @dump_image_tags.setter
    def dump_image_tags(self, dump_image_tags):
        """Sets the dump_image_tags of this ResultsetDataRequest.


        :param dump_image_tags: The dump_image_tags of this ResultsetDataRequest.  # noqa: E501
        :type dump_image_tags: bool
        """

        self._dump_image_tags = dump_image_tags

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultsetDataRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultsetDataRequest):
            return True

        return self.to_dict() != other.to_dict()
