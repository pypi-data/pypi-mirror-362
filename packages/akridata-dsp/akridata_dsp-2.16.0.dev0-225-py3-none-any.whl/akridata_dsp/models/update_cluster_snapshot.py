# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class UpdateClusterSnapshot(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nclusters': 'int',
        'cluster_map': 'dict[str, int]',
        'cluster_names': 'dict[str, str]',
        'snapshot_version': 'int'
    }

    attribute_map = {
        'nclusters': 'nclusters',
        'cluster_map': 'cluster_map',
        'cluster_names': 'cluster_names',
        'snapshot_version': 'snapshot_version'
    }

    def __init__(self, nclusters=None, cluster_map=None, cluster_names=None, snapshot_version=None, local_vars_configuration=None):  # noqa: E501
        """UpdateClusterSnapshot - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._nclusters = None
        self._cluster_map = None
        self._cluster_names = None
        self._snapshot_version = None
        self.discriminator = None

        if nclusters is not None:
            self.nclusters = nclusters
        self.cluster_map = cluster_map
        if cluster_names is not None:
            self.cluster_names = cluster_names
        self.snapshot_version = snapshot_version

    @property
    def nclusters(self):
        """Gets the nclusters of this UpdateClusterSnapshot.  # noqa: E501


        :return: The nclusters of this UpdateClusterSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._nclusters

    @nclusters.setter
    def nclusters(self, nclusters):
        """Sets the nclusters of this UpdateClusterSnapshot.


        :param nclusters: The nclusters of this UpdateClusterSnapshot.  # noqa: E501
        :type nclusters: int
        """

        self._nclusters = nclusters

    @property
    def cluster_map(self):
        """Gets the cluster_map of this UpdateClusterSnapshot.  # noqa: E501


        :return: The cluster_map of this UpdateClusterSnapshot.  # noqa: E501
        :rtype: dict[str, int]
        """
        return self._cluster_map

    @cluster_map.setter
    def cluster_map(self, cluster_map):
        """Sets the cluster_map of this UpdateClusterSnapshot.


        :param cluster_map: The cluster_map of this UpdateClusterSnapshot.  # noqa: E501
        :type cluster_map: dict[str, int]
        """
        if self.local_vars_configuration.client_side_validation and cluster_map is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_map`, must not be `None`")  # noqa: E501

        self._cluster_map = cluster_map

    @property
    def cluster_names(self):
        """Gets the cluster_names of this UpdateClusterSnapshot.  # noqa: E501


        :return: The cluster_names of this UpdateClusterSnapshot.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._cluster_names

    @cluster_names.setter
    def cluster_names(self, cluster_names):
        """Sets the cluster_names of this UpdateClusterSnapshot.


        :param cluster_names: The cluster_names of this UpdateClusterSnapshot.  # noqa: E501
        :type cluster_names: dict[str, str]
        """

        self._cluster_names = cluster_names

    @property
    def snapshot_version(self):
        """Gets the snapshot_version of this UpdateClusterSnapshot.  # noqa: E501


        :return: The snapshot_version of this UpdateClusterSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_version

    @snapshot_version.setter
    def snapshot_version(self, snapshot_version):
        """Sets the snapshot_version of this UpdateClusterSnapshot.


        :param snapshot_version: The snapshot_version of this UpdateClusterSnapshot.  # noqa: E501
        :type snapshot_version: int
        """
        if self.local_vars_configuration.client_side_validation and snapshot_version is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_version`, must not be `None`")  # noqa: E501

        self._snapshot_version = snapshot_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClusterSnapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateClusterSnapshot):
            return True

        return self.to_dict() != other.to_dict()
