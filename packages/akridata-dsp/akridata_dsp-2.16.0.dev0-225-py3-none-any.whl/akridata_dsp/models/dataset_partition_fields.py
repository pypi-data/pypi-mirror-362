# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class DatasetPartitionFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session': 'str',
        'p_start': 'int',
        'p_end': 'int',
        'blobs': 'list[list[object]]',
        'dataset_id': 'str',
        'pipeline_id': 'str'
    }

    attribute_map = {
        'session': 'session',
        'p_start': 'p_start',
        'p_end': 'p_end',
        'blobs': 'blobs',
        'dataset_id': 'dataset_id',
        'pipeline_id': 'pipeline_id'
    }

    def __init__(self, session=None, p_start=None, p_end=None, blobs=None, dataset_id=None, pipeline_id=None, local_vars_configuration=None):  # noqa: E501
        """DatasetPartitionFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._session = None
        self._p_start = None
        self._p_end = None
        self._blobs = None
        self._dataset_id = None
        self._pipeline_id = None
        self.discriminator = None

        self.session = session
        self.p_start = p_start
        self.p_end = p_end
        self.blobs = blobs
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id

    @property
    def session(self):
        """Gets the session of this DatasetPartitionFields.  # noqa: E501


        :return: The session of this DatasetPartitionFields.  # noqa: E501
        :rtype: str
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this DatasetPartitionFields.


        :param session: The session of this DatasetPartitionFields.  # noqa: E501
        :type session: str
        """
        if self.local_vars_configuration.client_side_validation and session is None:  # noqa: E501
            raise ValueError("Invalid value for `session`, must not be `None`")  # noqa: E501

        self._session = session

    @property
    def p_start(self):
        """Gets the p_start of this DatasetPartitionFields.  # noqa: E501


        :return: The p_start of this DatasetPartitionFields.  # noqa: E501
        :rtype: int
        """
        return self._p_start

    @p_start.setter
    def p_start(self, p_start):
        """Sets the p_start of this DatasetPartitionFields.


        :param p_start: The p_start of this DatasetPartitionFields.  # noqa: E501
        :type p_start: int
        """
        if self.local_vars_configuration.client_side_validation and p_start is None:  # noqa: E501
            raise ValueError("Invalid value for `p_start`, must not be `None`")  # noqa: E501

        self._p_start = p_start

    @property
    def p_end(self):
        """Gets the p_end of this DatasetPartitionFields.  # noqa: E501


        :return: The p_end of this DatasetPartitionFields.  # noqa: E501
        :rtype: int
        """
        return self._p_end

    @p_end.setter
    def p_end(self, p_end):
        """Sets the p_end of this DatasetPartitionFields.


        :param p_end: The p_end of this DatasetPartitionFields.  # noqa: E501
        :type p_end: int
        """
        if self.local_vars_configuration.client_side_validation and p_end is None:  # noqa: E501
            raise ValueError("Invalid value for `p_end`, must not be `None`")  # noqa: E501

        self._p_end = p_end

    @property
    def blobs(self):
        """Gets the blobs of this DatasetPartitionFields.  # noqa: E501


        :return: The blobs of this DatasetPartitionFields.  # noqa: E501
        :rtype: list[list[object]]
        """
        return self._blobs

    @blobs.setter
    def blobs(self, blobs):
        """Sets the blobs of this DatasetPartitionFields.


        :param blobs: The blobs of this DatasetPartitionFields.  # noqa: E501
        :type blobs: list[list[object]]
        """
        if self.local_vars_configuration.client_side_validation and blobs is None:  # noqa: E501
            raise ValueError("Invalid value for `blobs`, must not be `None`")  # noqa: E501

        self._blobs = blobs

    @property
    def dataset_id(self):
        """Gets the dataset_id of this DatasetPartitionFields.  # noqa: E501


        :return: The dataset_id of this DatasetPartitionFields.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this DatasetPartitionFields.


        :param dataset_id: The dataset_id of this DatasetPartitionFields.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this DatasetPartitionFields.  # noqa: E501


        :return: The pipeline_id of this DatasetPartitionFields.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this DatasetPartitionFields.


        :param pipeline_id: The pipeline_id of this DatasetPartitionFields.  # noqa: E501
        :type pipeline_id: str
        """

        self._pipeline_id = pipeline_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatasetPartitionFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DatasetPartitionFields):
            return True

        return self.to_dict() != other.to_dict()
