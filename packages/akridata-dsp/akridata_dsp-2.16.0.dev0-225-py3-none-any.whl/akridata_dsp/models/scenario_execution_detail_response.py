# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ScenarioExecutionDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'execution_id': 'str',
        'scenario_execution_title': 'str',
        'scenario_id': 'str',
        'scenario_title': 'str',
        'status': 'ScenarioExecutionStatus',
        'is_text_search_request': 'bool',
        'resultset_id': 'str',
        'created_at': 'str',
        'version': 'int',
        'dataset_id': 'str',
        'dataset_name': 'str',
        'pipeline_id': 'str',
        'pipeline_name': 'str',
        'pipeline_type': 'AkrimanagerPipelineTypes',
        'progress': 'Progress',
        'grid_size': 'list[int]',
        'attributes': 'ScenarioExecutionAttributes',
        'error': 'ErrorResponse',
        'vseq': 'VseqConfigResponse',
        'points_meta': 'dict[str, PointsMetaInfo]',
        'patch_supported': 'bool',
        'query_info': 'ScenarioExecutionVCSQuerySchema',
        'resultset_size': 'int',
        'search_kind': 'SearchKind',
        'completed_at': 'str',
        'last_updated_at': 'str'
    }

    attribute_map = {
        'execution_id': 'execution_id',
        'scenario_execution_title': 'scenario_execution_title',
        'scenario_id': 'scenario_id',
        'scenario_title': 'scenario_title',
        'status': 'status',
        'is_text_search_request': 'is_text_search_request',
        'resultset_id': 'resultset_id',
        'created_at': 'created_at',
        'version': 'version',
        'dataset_id': 'dataset_id',
        'dataset_name': 'dataset_name',
        'pipeline_id': 'pipeline_id',
        'pipeline_name': 'pipeline_name',
        'pipeline_type': 'pipeline_type',
        'progress': 'progress',
        'grid_size': 'grid_size',
        'attributes': 'attributes',
        'error': 'error',
        'vseq': 'vseq',
        'points_meta': 'points_meta',
        'patch_supported': 'patch_supported',
        'query_info': 'query_info',
        'resultset_size': 'resultset_size',
        'search_kind': 'search_kind',
        'completed_at': 'completed_at',
        'last_updated_at': 'last_updated_at'
    }

    def __init__(self, execution_id=None, scenario_execution_title=None, scenario_id=None, scenario_title=None, status=None, is_text_search_request=False, resultset_id=None, created_at=None, version=None, dataset_id=None, dataset_name=None, pipeline_id=None, pipeline_name=None, pipeline_type=None, progress=None, grid_size=None, attributes=None, error=None, vseq=None, points_meta=None, patch_supported=None, query_info=None, resultset_size=None, search_kind=None, completed_at=None, last_updated_at=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioExecutionDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._execution_id = None
        self._scenario_execution_title = None
        self._scenario_id = None
        self._scenario_title = None
        self._status = None
        self._is_text_search_request = None
        self._resultset_id = None
        self._created_at = None
        self._version = None
        self._dataset_id = None
        self._dataset_name = None
        self._pipeline_id = None
        self._pipeline_name = None
        self._pipeline_type = None
        self._progress = None
        self._grid_size = None
        self._attributes = None
        self._error = None
        self._vseq = None
        self._points_meta = None
        self._patch_supported = None
        self._query_info = None
        self._resultset_size = None
        self._search_kind = None
        self._completed_at = None
        self._last_updated_at = None
        self.discriminator = None

        self.execution_id = execution_id
        if scenario_execution_title is not None:
            self.scenario_execution_title = scenario_execution_title
        if scenario_id is not None:
            self.scenario_id = scenario_id
        if scenario_title is not None:
            self.scenario_title = scenario_title
        self.status = status
        if is_text_search_request is not None:
            self.is_text_search_request = is_text_search_request
        if resultset_id is not None:
            self.resultset_id = resultset_id
        self.created_at = created_at
        self.version = version
        self.dataset_id = dataset_id
        self.dataset_name = dataset_name
        self.pipeline_id = pipeline_id
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if pipeline_type is not None:
            self.pipeline_type = pipeline_type
        if progress is not None:
            self.progress = progress
        if grid_size is not None:
            self.grid_size = grid_size
        self.attributes = attributes
        if error is not None:
            self.error = error
        if vseq is not None:
            self.vseq = vseq
        if points_meta is not None:
            self.points_meta = points_meta
        if patch_supported is not None:
            self.patch_supported = patch_supported
        if query_info is not None:
            self.query_info = query_info
        if resultset_size is not None:
            self.resultset_size = resultset_size
        self.search_kind = search_kind
        if completed_at is not None:
            self.completed_at = completed_at
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at

    @property
    def execution_id(self):
        """Gets the execution_id of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The execution_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ScenarioExecutionDetailResponse.


        :param execution_id: The execution_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type execution_id: str
        """
        if self.local_vars_configuration.client_side_validation and execution_id is None:  # noqa: E501
            raise ValueError("Invalid value for `execution_id`, must not be `None`")  # noqa: E501

        self._execution_id = execution_id

    @property
    def scenario_execution_title(self):
        """Gets the scenario_execution_title of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The scenario_execution_title of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario_execution_title

    @scenario_execution_title.setter
    def scenario_execution_title(self, scenario_execution_title):
        """Sets the scenario_execution_title of this ScenarioExecutionDetailResponse.


        :param scenario_execution_title: The scenario_execution_title of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type scenario_execution_title: str
        """

        self._scenario_execution_title = scenario_execution_title

    @property
    def scenario_id(self):
        """Gets the scenario_id of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The scenario_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this ScenarioExecutionDetailResponse.


        :param scenario_id: The scenario_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type scenario_id: str
        """

        self._scenario_id = scenario_id

    @property
    def scenario_title(self):
        """Gets the scenario_title of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The scenario_title of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._scenario_title

    @scenario_title.setter
    def scenario_title(self, scenario_title):
        """Sets the scenario_title of this ScenarioExecutionDetailResponse.


        :param scenario_title: The scenario_title of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type scenario_title: str
        """

        self._scenario_title = scenario_title

    @property
    def status(self):
        """Gets the status of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The status of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: ScenarioExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ScenarioExecutionDetailResponse.


        :param status: The status of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type status: ScenarioExecutionStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def is_text_search_request(self):
        """Gets the is_text_search_request of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The is_text_search_request of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_text_search_request

    @is_text_search_request.setter
    def is_text_search_request(self, is_text_search_request):
        """Sets the is_text_search_request of this ScenarioExecutionDetailResponse.


        :param is_text_search_request: The is_text_search_request of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type is_text_search_request: bool
        """

        self._is_text_search_request = is_text_search_request

    @property
    def resultset_id(self):
        """Gets the resultset_id of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The resultset_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._resultset_id

    @resultset_id.setter
    def resultset_id(self, resultset_id):
        """Sets the resultset_id of this ScenarioExecutionDetailResponse.


        :param resultset_id: The resultset_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type resultset_id: str
        """

        self._resultset_id = resultset_id

    @property
    def created_at(self):
        """Gets the created_at of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The created_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ScenarioExecutionDetailResponse.


        :param created_at: The created_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def version(self):
        """Gets the version of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The version of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ScenarioExecutionDetailResponse.


        :param version: The version of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type version: int
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def dataset_id(self):
        """Gets the dataset_id of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The dataset_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this ScenarioExecutionDetailResponse.


        :param dataset_id: The dataset_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type dataset_id: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_id is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The dataset_name of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this ScenarioExecutionDetailResponse.


        :param dataset_name: The dataset_name of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type dataset_name: str
        """
        if self.local_vars_configuration.client_side_validation and dataset_name is None:  # noqa: E501
            raise ValueError("Invalid value for `dataset_name`, must not be `None`")  # noqa: E501

        self._dataset_name = dataset_name

    @property
    def pipeline_id(self):
        """Gets the pipeline_id of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The pipeline_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id):
        """Sets the pipeline_id of this ScenarioExecutionDetailResponse.


        :param pipeline_id: The pipeline_id of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type pipeline_id: str
        """
        if self.local_vars_configuration.client_side_validation and pipeline_id is None:  # noqa: E501
            raise ValueError("Invalid value for `pipeline_id`, must not be `None`")  # noqa: E501

        self._pipeline_id = pipeline_id

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The pipeline_name of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this ScenarioExecutionDetailResponse.


        :param pipeline_name: The pipeline_name of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type pipeline_name: str
        """

        self._pipeline_name = pipeline_name

    @property
    def pipeline_type(self):
        """Gets the pipeline_type of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The pipeline_type of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: AkrimanagerPipelineTypes
        """
        return self._pipeline_type

    @pipeline_type.setter
    def pipeline_type(self, pipeline_type):
        """Sets the pipeline_type of this ScenarioExecutionDetailResponse.


        :param pipeline_type: The pipeline_type of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type pipeline_type: AkrimanagerPipelineTypes
        """

        self._pipeline_type = pipeline_type

    @property
    def progress(self):
        """Gets the progress of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The progress of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ScenarioExecutionDetailResponse.


        :param progress: The progress of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type progress: Progress
        """

        self._progress = progress

    @property
    def grid_size(self):
        """Gets the grid_size of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The grid_size of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._grid_size

    @grid_size.setter
    def grid_size(self, grid_size):
        """Sets the grid_size of this ScenarioExecutionDetailResponse.


        :param grid_size: The grid_size of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type grid_size: list[int]
        """

        self._grid_size = grid_size

    @property
    def attributes(self):
        """Gets the attributes of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The attributes of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: ScenarioExecutionAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ScenarioExecutionDetailResponse.


        :param attributes: The attributes of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type attributes: ScenarioExecutionAttributes
        """
        if self.local_vars_configuration.client_side_validation and attributes is None:  # noqa: E501
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def error(self):
        """Gets the error of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The error of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ScenarioExecutionDetailResponse.


        :param error: The error of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type error: ErrorResponse
        """

        self._error = error

    @property
    def vseq(self):
        """Gets the vseq of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The vseq of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: VseqConfigResponse
        """
        return self._vseq

    @vseq.setter
    def vseq(self, vseq):
        """Sets the vseq of this ScenarioExecutionDetailResponse.


        :param vseq: The vseq of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type vseq: VseqConfigResponse
        """

        self._vseq = vseq

    @property
    def points_meta(self):
        """Gets the points_meta of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The points_meta of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: dict[str, PointsMetaInfo]
        """
        return self._points_meta

    @points_meta.setter
    def points_meta(self, points_meta):
        """Sets the points_meta of this ScenarioExecutionDetailResponse.


        :param points_meta: The points_meta of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type points_meta: dict[str, PointsMetaInfo]
        """

        self._points_meta = points_meta

    @property
    def patch_supported(self):
        """Gets the patch_supported of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The patch_supported of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._patch_supported

    @patch_supported.setter
    def patch_supported(self, patch_supported):
        """Sets the patch_supported of this ScenarioExecutionDetailResponse.


        :param patch_supported: The patch_supported of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type patch_supported: bool
        """

        self._patch_supported = patch_supported

    @property
    def query_info(self):
        """Gets the query_info of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The query_info of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: ScenarioExecutionVCSQuerySchema
        """
        return self._query_info

    @query_info.setter
    def query_info(self, query_info):
        """Sets the query_info of this ScenarioExecutionDetailResponse.


        :param query_info: The query_info of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type query_info: ScenarioExecutionVCSQuerySchema
        """

        self._query_info = query_info

    @property
    def resultset_size(self):
        """Gets the resultset_size of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The resultset_size of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._resultset_size

    @resultset_size.setter
    def resultset_size(self, resultset_size):
        """Sets the resultset_size of this ScenarioExecutionDetailResponse.


        :param resultset_size: The resultset_size of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type resultset_size: int
        """

        self._resultset_size = resultset_size

    @property
    def search_kind(self):
        """Gets the search_kind of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The search_kind of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: SearchKind
        """
        return self._search_kind

    @search_kind.setter
    def search_kind(self, search_kind):
        """Sets the search_kind of this ScenarioExecutionDetailResponse.


        :param search_kind: The search_kind of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type search_kind: SearchKind
        """
        if self.local_vars_configuration.client_side_validation and search_kind is None:  # noqa: E501
            raise ValueError("Invalid value for `search_kind`, must not be `None`")  # noqa: E501

        self._search_kind = search_kind

    @property
    def completed_at(self):
        """Gets the completed_at of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The completed_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ScenarioExecutionDetailResponse.


        :param completed_at: The completed_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this ScenarioExecutionDetailResponse.  # noqa: E501


        :return: The last_updated_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this ScenarioExecutionDetailResponse.


        :param last_updated_at: The last_updated_at of this ScenarioExecutionDetailResponse.  # noqa: E501
        :type last_updated_at: str
        """

        self._last_updated_at = last_updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioExecutionDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioExecutionDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
