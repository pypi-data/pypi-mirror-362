# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class MtGetSummaryDataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_version': 'str',
        'name': 'str',
        'description': 'str',
        'freeze': 'bool',
        'base_data_version': 'str',
        'base_version_name': 'str',
        'updated_at': 'str',
        'test_dataset_id': 'str',
        'project_id': 'str',
        'status': 'TrainingDataStatus',
        'status_message': 'str',
        'last_inc_skipped': 'int',
        'last_inc_discarded_duplicates': 'int',
        'last_inc_annotations_exceeded': 'int',
        'training_splits': 'TrainingSplits',
        'distribution_statistics': 'DistributionStatistics',
        'created_at': 'str',
        'created_by': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'data_version': 'data_version',
        'name': 'name',
        'description': 'description',
        'freeze': 'freeze',
        'base_data_version': 'base_data_version',
        'base_version_name': 'base_version_name',
        'updated_at': 'updated_at',
        'test_dataset_id': 'test_dataset_id',
        'project_id': 'project_id',
        'status': 'status',
        'status_message': 'status_message',
        'last_inc_skipped': 'last_inc_skipped',
        'last_inc_discarded_duplicates': 'last_inc_discarded_duplicates',
        'last_inc_annotations_exceeded': 'last_inc_annotations_exceeded',
        'training_splits': 'training_splits',
        'distribution_statistics': 'distribution_statistics',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'updated_by': 'updated_by'
    }

    def __init__(self, data_version=None, name=None, description=None, freeze=None, base_data_version=None, base_version_name=None, updated_at=None, test_dataset_id=None, project_id=None, status=None, status_message=None, last_inc_skipped=None, last_inc_discarded_duplicates=None, last_inc_annotations_exceeded=0, training_splits=None, distribution_statistics=None, created_at=None, created_by=None, updated_by=None, local_vars_configuration=None):  # noqa: E501
        """MtGetSummaryDataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._data_version = None
        self._name = None
        self._description = None
        self._freeze = None
        self._base_data_version = None
        self._base_version_name = None
        self._updated_at = None
        self._test_dataset_id = None
        self._project_id = None
        self._status = None
        self._status_message = None
        self._last_inc_skipped = None
        self._last_inc_discarded_duplicates = None
        self._last_inc_annotations_exceeded = None
        self._training_splits = None
        self._distribution_statistics = None
        self._created_at = None
        self._created_by = None
        self._updated_by = None
        self.discriminator = None

        self.data_version = data_version
        self.name = name
        if description is not None:
            self.description = description
        self.freeze = freeze
        if base_data_version is not None:
            self.base_data_version = base_data_version
        if base_version_name is not None:
            self.base_version_name = base_version_name
        self.updated_at = updated_at
        if test_dataset_id is not None:
            self.test_dataset_id = test_dataset_id
        self.project_id = project_id
        self.status = status
        self.status_message = status_message
        self.last_inc_skipped = last_inc_skipped
        self.last_inc_discarded_duplicates = last_inc_discarded_duplicates
        if last_inc_annotations_exceeded is not None:
            self.last_inc_annotations_exceeded = last_inc_annotations_exceeded
        self.training_splits = training_splits
        self.distribution_statistics = distribution_statistics
        self.created_at = created_at
        self.created_by = created_by
        self.updated_by = updated_by

    @property
    def data_version(self):
        """Gets the data_version of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The data_version of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this MtGetSummaryDataResponse.


        :param data_version: The data_version of this MtGetSummaryDataResponse.  # noqa: E501
        :type data_version: str
        """
        if self.local_vars_configuration.client_side_validation and data_version is None:  # noqa: E501
            raise ValueError("Invalid value for `data_version`, must not be `None`")  # noqa: E501

        self._data_version = data_version

    @property
    def name(self):
        """Gets the name of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The name of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MtGetSummaryDataResponse.


        :param name: The name of this MtGetSummaryDataResponse.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The description of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MtGetSummaryDataResponse.


        :param description: The description of this MtGetSummaryDataResponse.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def freeze(self):
        """Gets the freeze of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The freeze of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: bool
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this MtGetSummaryDataResponse.


        :param freeze: The freeze of this MtGetSummaryDataResponse.  # noqa: E501
        :type freeze: bool
        """
        if self.local_vars_configuration.client_side_validation and freeze is None:  # noqa: E501
            raise ValueError("Invalid value for `freeze`, must not be `None`")  # noqa: E501

        self._freeze = freeze

    @property
    def base_data_version(self):
        """Gets the base_data_version of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The base_data_version of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_data_version

    @base_data_version.setter
    def base_data_version(self, base_data_version):
        """Sets the base_data_version of this MtGetSummaryDataResponse.


        :param base_data_version: The base_data_version of this MtGetSummaryDataResponse.  # noqa: E501
        :type base_data_version: str
        """

        self._base_data_version = base_data_version

    @property
    def base_version_name(self):
        """Gets the base_version_name of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The base_version_name of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_version_name

    @base_version_name.setter
    def base_version_name(self, base_version_name):
        """Sets the base_version_name of this MtGetSummaryDataResponse.


        :param base_version_name: The base_version_name of this MtGetSummaryDataResponse.  # noqa: E501
        :type base_version_name: str
        """

        self._base_version_name = base_version_name

    @property
    def updated_at(self):
        """Gets the updated_at of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The updated_at of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MtGetSummaryDataResponse.


        :param updated_at: The updated_at of this MtGetSummaryDataResponse.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def test_dataset_id(self):
        """Gets the test_dataset_id of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The test_dataset_id of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._test_dataset_id

    @test_dataset_id.setter
    def test_dataset_id(self, test_dataset_id):
        """Sets the test_dataset_id of this MtGetSummaryDataResponse.


        :param test_dataset_id: The test_dataset_id of this MtGetSummaryDataResponse.  # noqa: E501
        :type test_dataset_id: str
        """

        self._test_dataset_id = test_dataset_id

    @property
    def project_id(self):
        """Gets the project_id of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The project_id of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MtGetSummaryDataResponse.


        :param project_id: The project_id of this MtGetSummaryDataResponse.  # noqa: E501
        :type project_id: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The status of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: TrainingDataStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MtGetSummaryDataResponse.


        :param status: The status of this MtGetSummaryDataResponse.  # noqa: E501
        :type status: TrainingDataStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The status_message of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this MtGetSummaryDataResponse.


        :param status_message: The status_message of this MtGetSummaryDataResponse.  # noqa: E501
        :type status_message: str
        """
        if self.local_vars_configuration.client_side_validation and status_message is None:  # noqa: E501
            raise ValueError("Invalid value for `status_message`, must not be `None`")  # noqa: E501

        self._status_message = status_message

    @property
    def last_inc_skipped(self):
        """Gets the last_inc_skipped of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The last_inc_skipped of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._last_inc_skipped

    @last_inc_skipped.setter
    def last_inc_skipped(self, last_inc_skipped):
        """Sets the last_inc_skipped of this MtGetSummaryDataResponse.


        :param last_inc_skipped: The last_inc_skipped of this MtGetSummaryDataResponse.  # noqa: E501
        :type last_inc_skipped: int
        """
        if self.local_vars_configuration.client_side_validation and last_inc_skipped is None:  # noqa: E501
            raise ValueError("Invalid value for `last_inc_skipped`, must not be `None`")  # noqa: E501

        self._last_inc_skipped = last_inc_skipped

    @property
    def last_inc_discarded_duplicates(self):
        """Gets the last_inc_discarded_duplicates of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The last_inc_discarded_duplicates of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._last_inc_discarded_duplicates

    @last_inc_discarded_duplicates.setter
    def last_inc_discarded_duplicates(self, last_inc_discarded_duplicates):
        """Sets the last_inc_discarded_duplicates of this MtGetSummaryDataResponse.


        :param last_inc_discarded_duplicates: The last_inc_discarded_duplicates of this MtGetSummaryDataResponse.  # noqa: E501
        :type last_inc_discarded_duplicates: int
        """
        if self.local_vars_configuration.client_side_validation and last_inc_discarded_duplicates is None:  # noqa: E501
            raise ValueError("Invalid value for `last_inc_discarded_duplicates`, must not be `None`")  # noqa: E501

        self._last_inc_discarded_duplicates = last_inc_discarded_duplicates

    @property
    def last_inc_annotations_exceeded(self):
        """Gets the last_inc_annotations_exceeded of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The last_inc_annotations_exceeded of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: int
        """
        return self._last_inc_annotations_exceeded

    @last_inc_annotations_exceeded.setter
    def last_inc_annotations_exceeded(self, last_inc_annotations_exceeded):
        """Sets the last_inc_annotations_exceeded of this MtGetSummaryDataResponse.


        :param last_inc_annotations_exceeded: The last_inc_annotations_exceeded of this MtGetSummaryDataResponse.  # noqa: E501
        :type last_inc_annotations_exceeded: int
        """

        self._last_inc_annotations_exceeded = last_inc_annotations_exceeded

    @property
    def training_splits(self):
        """Gets the training_splits of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The training_splits of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: TrainingSplits
        """
        return self._training_splits

    @training_splits.setter
    def training_splits(self, training_splits):
        """Sets the training_splits of this MtGetSummaryDataResponse.


        :param training_splits: The training_splits of this MtGetSummaryDataResponse.  # noqa: E501
        :type training_splits: TrainingSplits
        """
        if self.local_vars_configuration.client_side_validation and training_splits is None:  # noqa: E501
            raise ValueError("Invalid value for `training_splits`, must not be `None`")  # noqa: E501

        self._training_splits = training_splits

    @property
    def distribution_statistics(self):
        """Gets the distribution_statistics of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The distribution_statistics of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: DistributionStatistics
        """
        return self._distribution_statistics

    @distribution_statistics.setter
    def distribution_statistics(self, distribution_statistics):
        """Sets the distribution_statistics of this MtGetSummaryDataResponse.


        :param distribution_statistics: The distribution_statistics of this MtGetSummaryDataResponse.  # noqa: E501
        :type distribution_statistics: DistributionStatistics
        """
        if self.local_vars_configuration.client_side_validation and distribution_statistics is None:  # noqa: E501
            raise ValueError("Invalid value for `distribution_statistics`, must not be `None`")  # noqa: E501

        self._distribution_statistics = distribution_statistics

    @property
    def created_at(self):
        """Gets the created_at of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The created_at of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MtGetSummaryDataResponse.


        :param created_at: The created_at of this MtGetSummaryDataResponse.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The created_by of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MtGetSummaryDataResponse.


        :param created_by: The created_by of this MtGetSummaryDataResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this MtGetSummaryDataResponse.  # noqa: E501


        :return: The updated_by of this MtGetSummaryDataResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this MtGetSummaryDataResponse.


        :param updated_by: The updated_by of this MtGetSummaryDataResponse.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MtGetSummaryDataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MtGetSummaryDataResponse):
            return True

        return self.to_dict() != other.to_dict()
