# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class UploadedImageDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'thumbnail_url': 'str',
        'high_res_url': 'str',
        'width': 'int',
        'height': 'int',
        'file_name': 'str'
    }

    attribute_map = {
        'thumbnail_url': 'thumbnail_url',
        'high_res_url': 'high_res_url',
        'width': 'width',
        'height': 'height',
        'file_name': 'file_name'
    }

    def __init__(self, thumbnail_url=None, high_res_url=None, width=None, height=None, file_name=None, local_vars_configuration=None):  # noqa: E501
        """UploadedImageDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._thumbnail_url = None
        self._high_res_url = None
        self._width = None
        self._height = None
        self._file_name = None
        self.discriminator = None

        self.thumbnail_url = thumbnail_url
        self.high_res_url = high_res_url
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if file_name is not None:
            self.file_name = file_name

    @property
    def thumbnail_url(self):
        """Gets the thumbnail_url of this UploadedImageDetails.  # noqa: E501


        :return: The thumbnail_url of this UploadedImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_url

    @thumbnail_url.setter
    def thumbnail_url(self, thumbnail_url):
        """Sets the thumbnail_url of this UploadedImageDetails.


        :param thumbnail_url: The thumbnail_url of this UploadedImageDetails.  # noqa: E501
        :type thumbnail_url: str
        """
        if self.local_vars_configuration.client_side_validation and thumbnail_url is None:  # noqa: E501
            raise ValueError("Invalid value for `thumbnail_url`, must not be `None`")  # noqa: E501

        self._thumbnail_url = thumbnail_url

    @property
    def high_res_url(self):
        """Gets the high_res_url of this UploadedImageDetails.  # noqa: E501


        :return: The high_res_url of this UploadedImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._high_res_url

    @high_res_url.setter
    def high_res_url(self, high_res_url):
        """Sets the high_res_url of this UploadedImageDetails.


        :param high_res_url: The high_res_url of this UploadedImageDetails.  # noqa: E501
        :type high_res_url: str
        """
        if self.local_vars_configuration.client_side_validation and high_res_url is None:  # noqa: E501
            raise ValueError("Invalid value for `high_res_url`, must not be `None`")  # noqa: E501

        self._high_res_url = high_res_url

    @property
    def width(self):
        """Gets the width of this UploadedImageDetails.  # noqa: E501


        :return: The width of this UploadedImageDetails.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this UploadedImageDetails.


        :param width: The width of this UploadedImageDetails.  # noqa: E501
        :type width: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this UploadedImageDetails.  # noqa: E501


        :return: The height of this UploadedImageDetails.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this UploadedImageDetails.


        :param height: The height of this UploadedImageDetails.  # noqa: E501
        :type height: int
        """

        self._height = height

    @property
    def file_name(self):
        """Gets the file_name of this UploadedImageDetails.  # noqa: E501


        :return: The file_name of this UploadedImageDetails.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this UploadedImageDetails.


        :param file_name: The file_name of this UploadedImageDetails.  # noqa: E501
        :type file_name: str
        """

        self._file_name = file_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadedImageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UploadedImageDetails):
            return True

        return self.to_dict() != other.to_dict()
