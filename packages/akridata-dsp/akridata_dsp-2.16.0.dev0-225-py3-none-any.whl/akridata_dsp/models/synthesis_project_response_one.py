# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class SynthesisProjectResponseOne(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'synthesis_project_id': 'str',
        'name': 'str',
        'description': 'str',
        'notification_emails': 'list[str]',
        'gen_session_count': 'int',
        'created_at': 'str',
        'updated_at': 'str',
        'created_by': 'str',
        'updated_by': 'str',
        'active_gen_session': 'int',
        'active_train_session': 'int',
        'latest_spec_version': 'int',
        'dataset_id': 'str',
        'dataset_name': 'str',
        'archived': 'bool'
    }

    attribute_map = {
        'synthesis_project_id': 'synthesis_project_id',
        'name': 'name',
        'description': 'description',
        'notification_emails': 'notification_emails',
        'gen_session_count': 'gen_session_count',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'created_by': 'created_by',
        'updated_by': 'updated_by',
        'active_gen_session': 'active_gen_session',
        'active_train_session': 'active_train_session',
        'latest_spec_version': 'latest_spec_version',
        'dataset_id': 'dataset_id',
        'dataset_name': 'dataset_name',
        'archived': 'archived'
    }

    def __init__(self, synthesis_project_id=None, name=None, description=None, notification_emails=None, gen_session_count=None, created_at=None, updated_at=None, created_by=None, updated_by=None, active_gen_session=None, active_train_session=None, latest_spec_version=None, dataset_id=None, dataset_name=None, archived=None, local_vars_configuration=None):  # noqa: E501
        """SynthesisProjectResponseOne - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._synthesis_project_id = None
        self._name = None
        self._description = None
        self._notification_emails = None
        self._gen_session_count = None
        self._created_at = None
        self._updated_at = None
        self._created_by = None
        self._updated_by = None
        self._active_gen_session = None
        self._active_train_session = None
        self._latest_spec_version = None
        self._dataset_id = None
        self._dataset_name = None
        self._archived = None
        self.discriminator = None

        self.synthesis_project_id = synthesis_project_id
        self.name = name
        if description is not None:
            self.description = description
        if notification_emails is not None:
            self.notification_emails = notification_emails
        self.gen_session_count = gen_session_count
        self.created_at = created_at
        self.updated_at = updated_at
        self.created_by = created_by
        self.updated_by = updated_by
        self.active_gen_session = active_gen_session
        self.active_train_session = active_train_session
        self.latest_spec_version = latest_spec_version
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if archived is not None:
            self.archived = archived

    @property
    def synthesis_project_id(self):
        """Gets the synthesis_project_id of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The synthesis_project_id of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._synthesis_project_id

    @synthesis_project_id.setter
    def synthesis_project_id(self, synthesis_project_id):
        """Sets the synthesis_project_id of this SynthesisProjectResponseOne.


        :param synthesis_project_id: The synthesis_project_id of this SynthesisProjectResponseOne.  # noqa: E501
        :type synthesis_project_id: str
        """
        if self.local_vars_configuration.client_side_validation and synthesis_project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `synthesis_project_id`, must not be `None`")  # noqa: E501

        self._synthesis_project_id = synthesis_project_id

    @property
    def name(self):
        """Gets the name of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The name of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SynthesisProjectResponseOne.


        :param name: The name of this SynthesisProjectResponseOne.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The description of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SynthesisProjectResponseOne.


        :param description: The description of this SynthesisProjectResponseOne.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def notification_emails(self):
        """Gets the notification_emails of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The notification_emails of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: list[str]
        """
        return self._notification_emails

    @notification_emails.setter
    def notification_emails(self, notification_emails):
        """Sets the notification_emails of this SynthesisProjectResponseOne.


        :param notification_emails: The notification_emails of this SynthesisProjectResponseOne.  # noqa: E501
        :type notification_emails: list[str]
        """

        self._notification_emails = notification_emails

    @property
    def gen_session_count(self):
        """Gets the gen_session_count of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The gen_session_count of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: int
        """
        return self._gen_session_count

    @gen_session_count.setter
    def gen_session_count(self, gen_session_count):
        """Sets the gen_session_count of this SynthesisProjectResponseOne.


        :param gen_session_count: The gen_session_count of this SynthesisProjectResponseOne.  # noqa: E501
        :type gen_session_count: int
        """
        if self.local_vars_configuration.client_side_validation and gen_session_count is None:  # noqa: E501
            raise ValueError("Invalid value for `gen_session_count`, must not be `None`")  # noqa: E501

        self._gen_session_count = gen_session_count

    @property
    def created_at(self):
        """Gets the created_at of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The created_at of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SynthesisProjectResponseOne.


        :param created_at: The created_at of this SynthesisProjectResponseOne.  # noqa: E501
        :type created_at: str
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The updated_at of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SynthesisProjectResponseOne.


        :param updated_at: The updated_at of this SynthesisProjectResponseOne.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def created_by(self):
        """Gets the created_by of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The created_by of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SynthesisProjectResponseOne.


        :param created_by: The created_by of this SynthesisProjectResponseOne.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def updated_by(self):
        """Gets the updated_by of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The updated_by of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this SynthesisProjectResponseOne.


        :param updated_by: The updated_by of this SynthesisProjectResponseOne.  # noqa: E501
        :type updated_by: str
        """
        if self.local_vars_configuration.client_side_validation and updated_by is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_by`, must not be `None`")  # noqa: E501

        self._updated_by = updated_by

    @property
    def active_gen_session(self):
        """Gets the active_gen_session of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The active_gen_session of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: int
        """
        return self._active_gen_session

    @active_gen_session.setter
    def active_gen_session(self, active_gen_session):
        """Sets the active_gen_session of this SynthesisProjectResponseOne.


        :param active_gen_session: The active_gen_session of this SynthesisProjectResponseOne.  # noqa: E501
        :type active_gen_session: int
        """
        if self.local_vars_configuration.client_side_validation and active_gen_session is None:  # noqa: E501
            raise ValueError("Invalid value for `active_gen_session`, must not be `None`")  # noqa: E501

        self._active_gen_session = active_gen_session

    @property
    def active_train_session(self):
        """Gets the active_train_session of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The active_train_session of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: int
        """
        return self._active_train_session

    @active_train_session.setter
    def active_train_session(self, active_train_session):
        """Sets the active_train_session of this SynthesisProjectResponseOne.


        :param active_train_session: The active_train_session of this SynthesisProjectResponseOne.  # noqa: E501
        :type active_train_session: int
        """
        if self.local_vars_configuration.client_side_validation and active_train_session is None:  # noqa: E501
            raise ValueError("Invalid value for `active_train_session`, must not be `None`")  # noqa: E501

        self._active_train_session = active_train_session

    @property
    def latest_spec_version(self):
        """Gets the latest_spec_version of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The latest_spec_version of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: int
        """
        return self._latest_spec_version

    @latest_spec_version.setter
    def latest_spec_version(self, latest_spec_version):
        """Sets the latest_spec_version of this SynthesisProjectResponseOne.


        :param latest_spec_version: The latest_spec_version of this SynthesisProjectResponseOne.  # noqa: E501
        :type latest_spec_version: int
        """
        if self.local_vars_configuration.client_side_validation and latest_spec_version is None:  # noqa: E501
            raise ValueError("Invalid value for `latest_spec_version`, must not be `None`")  # noqa: E501

        self._latest_spec_version = latest_spec_version

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The dataset_id of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SynthesisProjectResponseOne.


        :param dataset_id: The dataset_id of this SynthesisProjectResponseOne.  # noqa: E501
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def dataset_name(self):
        """Gets the dataset_name of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The dataset_name of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this SynthesisProjectResponseOne.


        :param dataset_name: The dataset_name of this SynthesisProjectResponseOne.  # noqa: E501
        :type dataset_name: str
        """

        self._dataset_name = dataset_name

    @property
    def archived(self):
        """Gets the archived of this SynthesisProjectResponseOne.  # noqa: E501


        :return: The archived of this SynthesisProjectResponseOne.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this SynthesisProjectResponseOne.


        :param archived: The archived of this SynthesisProjectResponseOne.  # noqa: E501
        :type archived: bool
        """

        self._archived = archived

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SynthesisProjectResponseOne):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SynthesisProjectResponseOne):
            return True

        return self.to_dict() != other.to_dict()
