# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class PlotRequestTunables(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_algo': 'str',
        'nclusters': 'int',
        'sample_mode': 'SamplingModes',
        'sample_weight': 'float',
        'sample_frac': 'float',
        'sample_size': 'int'
    }

    attribute_map = {
        'cluster_algo': 'cluster-algo',
        'nclusters': 'nclusters',
        'sample_mode': 'sample-mode',
        'sample_weight': 'sample-weight',
        'sample_frac': 'sample-frac',
        'sample_size': 'sample-size'
    }

    def __init__(self, cluster_algo=None, nclusters=None, sample_mode=None, sample_weight=None, sample_frac=None, sample_size=None, local_vars_configuration=None):  # noqa: E501
        """PlotRequestTunables - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_algo = None
        self._nclusters = None
        self._sample_mode = None
        self._sample_weight = None
        self._sample_frac = None
        self._sample_size = None
        self.discriminator = None

        if cluster_algo is not None:
            self.cluster_algo = cluster_algo
        if nclusters is not None:
            self.nclusters = nclusters
        if sample_mode is not None:
            self.sample_mode = sample_mode
        if sample_weight is not None:
            self.sample_weight = sample_weight
        if sample_frac is not None:
            self.sample_frac = sample_frac
        if sample_size is not None:
            self.sample_size = sample_size

    @property
    def cluster_algo(self):
        """Gets the cluster_algo of this PlotRequestTunables.  # noqa: E501


        :return: The cluster_algo of this PlotRequestTunables.  # noqa: E501
        :rtype: str
        """
        return self._cluster_algo

    @cluster_algo.setter
    def cluster_algo(self, cluster_algo):
        """Sets the cluster_algo of this PlotRequestTunables.


        :param cluster_algo: The cluster_algo of this PlotRequestTunables.  # noqa: E501
        :type cluster_algo: str
        """

        self._cluster_algo = cluster_algo

    @property
    def nclusters(self):
        """Gets the nclusters of this PlotRequestTunables.  # noqa: E501


        :return: The nclusters of this PlotRequestTunables.  # noqa: E501
        :rtype: int
        """
        return self._nclusters

    @nclusters.setter
    def nclusters(self, nclusters):
        """Sets the nclusters of this PlotRequestTunables.


        :param nclusters: The nclusters of this PlotRequestTunables.  # noqa: E501
        :type nclusters: int
        """

        self._nclusters = nclusters

    @property
    def sample_mode(self):
        """Gets the sample_mode of this PlotRequestTunables.  # noqa: E501


        :return: The sample_mode of this PlotRequestTunables.  # noqa: E501
        :rtype: SamplingModes
        """
        return self._sample_mode

    @sample_mode.setter
    def sample_mode(self, sample_mode):
        """Sets the sample_mode of this PlotRequestTunables.


        :param sample_mode: The sample_mode of this PlotRequestTunables.  # noqa: E501
        :type sample_mode: SamplingModes
        """

        self._sample_mode = sample_mode

    @property
    def sample_weight(self):
        """Gets the sample_weight of this PlotRequestTunables.  # noqa: E501


        :return: The sample_weight of this PlotRequestTunables.  # noqa: E501
        :rtype: float
        """
        return self._sample_weight

    @sample_weight.setter
    def sample_weight(self, sample_weight):
        """Sets the sample_weight of this PlotRequestTunables.


        :param sample_weight: The sample_weight of this PlotRequestTunables.  # noqa: E501
        :type sample_weight: float
        """

        self._sample_weight = sample_weight

    @property
    def sample_frac(self):
        """Gets the sample_frac of this PlotRequestTunables.  # noqa: E501


        :return: The sample_frac of this PlotRequestTunables.  # noqa: E501
        :rtype: float
        """
        return self._sample_frac

    @sample_frac.setter
    def sample_frac(self, sample_frac):
        """Sets the sample_frac of this PlotRequestTunables.


        :param sample_frac: The sample_frac of this PlotRequestTunables.  # noqa: E501
        :type sample_frac: float
        """
        if (self.local_vars_configuration.client_side_validation and
                sample_frac is not None and sample_frac > 1.0):  # noqa: E501
            raise ValueError("Invalid value for `sample_frac`, must be a value less than or equal to `1.0`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                sample_frac is not None and sample_frac < 0.0):  # noqa: E501
            raise ValueError("Invalid value for `sample_frac`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._sample_frac = sample_frac

    @property
    def sample_size(self):
        """Gets the sample_size of this PlotRequestTunables.  # noqa: E501


        :return: The sample_size of this PlotRequestTunables.  # noqa: E501
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this PlotRequestTunables.


        :param sample_size: The sample_size of this PlotRequestTunables.  # noqa: E501
        :type sample_size: int
        """

        self._sample_size = sample_size

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlotRequestTunables):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlotRequestTunables):
            return True

        return self.to_dict() != other.to_dict()
