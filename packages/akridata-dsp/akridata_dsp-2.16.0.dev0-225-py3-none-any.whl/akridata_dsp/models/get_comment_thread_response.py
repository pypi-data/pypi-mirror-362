# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class GetCommentThreadResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'text': 'str',
        'entity_id': 'str',
        'entity_type': 'str',
        'thread_id': 'str',
        'created_by': 'str',
        'metadata': 'object',
        'tagged_users': 'list[str]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'is_deleted': 'bool',
        'is_edited': 'bool',
        'thread': 'list[GetCommentThreadResponse]'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'entity_id': 'entity_id',
        'entity_type': 'entity_type',
        'thread_id': 'thread_id',
        'created_by': 'created_by',
        'metadata': 'metadata',
        'tagged_users': 'tagged_users',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'is_deleted': 'is_deleted',
        'is_edited': 'is_edited',
        'thread': 'thread'
    }

    def __init__(self, id=None, text=None, entity_id=None, entity_type=None, thread_id=None, created_by=None, metadata=None, tagged_users=[], created_at=None, updated_at=None, is_deleted=None, is_edited=None, thread=[], local_vars_configuration=None):  # noqa: E501
        """GetCommentThreadResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._text = None
        self._entity_id = None
        self._entity_type = None
        self._thread_id = None
        self._created_by = None
        self._metadata = None
        self._tagged_users = None
        self._created_at = None
        self._updated_at = None
        self._is_deleted = None
        self._is_edited = None
        self._thread = None
        self.discriminator = None

        self.id = id
        self.text = text
        self.entity_id = entity_id
        self.entity_type = entity_type
        self.thread_id = thread_id
        self.created_by = created_by
        self.metadata = metadata
        if tagged_users is not None:
            self.tagged_users = tagged_users
        self.created_at = created_at
        self.updated_at = updated_at
        self.is_deleted = is_deleted
        self.is_edited = is_edited
        if thread is not None:
            self.thread = thread

    @property
    def id(self):
        """Gets the id of this GetCommentThreadResponse.  # noqa: E501


        :return: The id of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCommentThreadResponse.


        :param id: The id of this GetCommentThreadResponse.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self):
        """Gets the text of this GetCommentThreadResponse.  # noqa: E501


        :return: The text of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this GetCommentThreadResponse.


        :param text: The text of this GetCommentThreadResponse.  # noqa: E501
        :type text: str
        """
        if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def entity_id(self):
        """Gets the entity_id of this GetCommentThreadResponse.  # noqa: E501


        :return: The entity_id of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this GetCommentThreadResponse.


        :param entity_id: The entity_id of this GetCommentThreadResponse.  # noqa: E501
        :type entity_id: str
        """
        if self.local_vars_configuration.client_side_validation and entity_id is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this GetCommentThreadResponse.  # noqa: E501


        :return: The entity_type of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this GetCommentThreadResponse.


        :param entity_type: The entity_type of this GetCommentThreadResponse.  # noqa: E501
        :type entity_type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def thread_id(self):
        """Gets the thread_id of this GetCommentThreadResponse.  # noqa: E501


        :return: The thread_id of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this GetCommentThreadResponse.


        :param thread_id: The thread_id of this GetCommentThreadResponse.  # noqa: E501
        :type thread_id: str
        """
        if self.local_vars_configuration.client_side_validation and thread_id is None:  # noqa: E501
            raise ValueError("Invalid value for `thread_id`, must not be `None`")  # noqa: E501

        self._thread_id = thread_id

    @property
    def created_by(self):
        """Gets the created_by of this GetCommentThreadResponse.  # noqa: E501


        :return: The created_by of this GetCommentThreadResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetCommentThreadResponse.


        :param created_by: The created_by of this GetCommentThreadResponse.  # noqa: E501
        :type created_by: str
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def metadata(self):
        """Gets the metadata of this GetCommentThreadResponse.  # noqa: E501


        :return: The metadata of this GetCommentThreadResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetCommentThreadResponse.


        :param metadata: The metadata of this GetCommentThreadResponse.  # noqa: E501
        :type metadata: object
        """
        if self.local_vars_configuration.client_side_validation and metadata is None:  # noqa: E501
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def tagged_users(self):
        """Gets the tagged_users of this GetCommentThreadResponse.  # noqa: E501


        :return: The tagged_users of this GetCommentThreadResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagged_users

    @tagged_users.setter
    def tagged_users(self, tagged_users):
        """Sets the tagged_users of this GetCommentThreadResponse.


        :param tagged_users: The tagged_users of this GetCommentThreadResponse.  # noqa: E501
        :type tagged_users: list[str]
        """

        self._tagged_users = tagged_users

    @property
    def created_at(self):
        """Gets the created_at of this GetCommentThreadResponse.  # noqa: E501


        :return: The created_at of this GetCommentThreadResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetCommentThreadResponse.


        :param created_at: The created_at of this GetCommentThreadResponse.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this GetCommentThreadResponse.  # noqa: E501


        :return: The updated_at of this GetCommentThreadResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetCommentThreadResponse.


        :param updated_at: The updated_at of this GetCommentThreadResponse.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def is_deleted(self):
        """Gets the is_deleted of this GetCommentThreadResponse.  # noqa: E501


        :return: The is_deleted of this GetCommentThreadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this GetCommentThreadResponse.


        :param is_deleted: The is_deleted of this GetCommentThreadResponse.  # noqa: E501
        :type is_deleted: bool
        """
        if self.local_vars_configuration.client_side_validation and is_deleted is None:  # noqa: E501
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def is_edited(self):
        """Gets the is_edited of this GetCommentThreadResponse.  # noqa: E501


        :return: The is_edited of this GetCommentThreadResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_edited

    @is_edited.setter
    def is_edited(self, is_edited):
        """Sets the is_edited of this GetCommentThreadResponse.


        :param is_edited: The is_edited of this GetCommentThreadResponse.  # noqa: E501
        :type is_edited: bool
        """
        if self.local_vars_configuration.client_side_validation and is_edited is None:  # noqa: E501
            raise ValueError("Invalid value for `is_edited`, must not be `None`")  # noqa: E501

        self._is_edited = is_edited

    @property
    def thread(self):
        """Gets the thread of this GetCommentThreadResponse.  # noqa: E501


        :return: The thread of this GetCommentThreadResponse.  # noqa: E501
        :rtype: list[GetCommentThreadResponse]
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this GetCommentThreadResponse.


        :param thread: The thread of this GetCommentThreadResponse.  # noqa: E501
        :type thread: list[GetCommentThreadResponse]
        """

        self._thread = thread

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCommentThreadResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetCommentThreadResponse):
            return True

        return self.to_dict() != other.to_dict()
