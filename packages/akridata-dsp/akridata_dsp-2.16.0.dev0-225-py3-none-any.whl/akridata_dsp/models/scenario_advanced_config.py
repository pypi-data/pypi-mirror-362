# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class ScenarioAdvancedConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'field': 'str',
        'n_neighbors': 'int',
        'distance_metric': 'str',
        'metric_params': 'object',
        'search_mode': 'int',
        'search_params': 'object',
        'stencil_params': 'object',
        'bbox_params': 'object',
        'cache_dist': 'bool',
        'localisation_mode': 'str',
        'multiscale_patch_weights': 'list[float]',
        'random_state': 'int'
    }

    attribute_map = {
        'field': 'field',
        'n_neighbors': 'n_neighbors',
        'distance_metric': 'distance_metric',
        'metric_params': 'metric_params',
        'search_mode': 'search_mode',
        'search_params': 'search_params',
        'stencil_params': 'stencil_params',
        'bbox_params': 'bbox_params',
        'cache_dist': 'cache_dist',
        'localisation_mode': 'localisation_mode',
        'multiscale_patch_weights': 'multiscale_patch_weights',
        'random_state': 'random_state'
    }

    def __init__(self, field=None, n_neighbors=None, distance_metric=None, metric_params=None, search_mode=None, search_params=None, stencil_params=None, bbox_params=None, cache_dist=None, localisation_mode=None, multiscale_patch_weights=None, random_state=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioAdvancedConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._field = None
        self._n_neighbors = None
        self._distance_metric = None
        self._metric_params = None
        self._search_mode = None
        self._search_params = None
        self._stencil_params = None
        self._bbox_params = None
        self._cache_dist = None
        self._localisation_mode = None
        self._multiscale_patch_weights = None
        self._random_state = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if n_neighbors is not None:
            self.n_neighbors = n_neighbors
        if distance_metric is not None:
            self.distance_metric = distance_metric
        if metric_params is not None:
            self.metric_params = metric_params
        if search_mode is not None:
            self.search_mode = search_mode
        if search_params is not None:
            self.search_params = search_params
        if stencil_params is not None:
            self.stencil_params = stencil_params
        if bbox_params is not None:
            self.bbox_params = bbox_params
        if cache_dist is not None:
            self.cache_dist = cache_dist
        if localisation_mode is not None:
            self.localisation_mode = localisation_mode
        if multiscale_patch_weights is not None:
            self.multiscale_patch_weights = multiscale_patch_weights
        if random_state is not None:
            self.random_state = random_state

    @property
    def field(self):
        """Gets the field of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The field of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ScenarioAdvancedConfig.


        :param field: The field of this ScenarioAdvancedConfig.  # noqa: E501
        :type field: str
        """

        self._field = field

    @property
    def n_neighbors(self):
        """Gets the n_neighbors of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The n_neighbors of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: int
        """
        return self._n_neighbors

    @n_neighbors.setter
    def n_neighbors(self, n_neighbors):
        """Sets the n_neighbors of this ScenarioAdvancedConfig.


        :param n_neighbors: The n_neighbors of this ScenarioAdvancedConfig.  # noqa: E501
        :type n_neighbors: int
        """

        self._n_neighbors = n_neighbors

    @property
    def distance_metric(self):
        """Gets the distance_metric of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The distance_metric of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: str
        """
        return self._distance_metric

    @distance_metric.setter
    def distance_metric(self, distance_metric):
        """Sets the distance_metric of this ScenarioAdvancedConfig.


        :param distance_metric: The distance_metric of this ScenarioAdvancedConfig.  # noqa: E501
        :type distance_metric: str
        """

        self._distance_metric = distance_metric

    @property
    def metric_params(self):
        """Gets the metric_params of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The metric_params of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: object
        """
        return self._metric_params

    @metric_params.setter
    def metric_params(self, metric_params):
        """Sets the metric_params of this ScenarioAdvancedConfig.


        :param metric_params: The metric_params of this ScenarioAdvancedConfig.  # noqa: E501
        :type metric_params: object
        """

        self._metric_params = metric_params

    @property
    def search_mode(self):
        """Gets the search_mode of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The search_mode of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: int
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this ScenarioAdvancedConfig.


        :param search_mode: The search_mode of this ScenarioAdvancedConfig.  # noqa: E501
        :type search_mode: int
        """

        self._search_mode = search_mode

    @property
    def search_params(self):
        """Gets the search_params of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The search_params of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: object
        """
        return self._search_params

    @search_params.setter
    def search_params(self, search_params):
        """Sets the search_params of this ScenarioAdvancedConfig.


        :param search_params: The search_params of this ScenarioAdvancedConfig.  # noqa: E501
        :type search_params: object
        """

        self._search_params = search_params

    @property
    def stencil_params(self):
        """Gets the stencil_params of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The stencil_params of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: object
        """
        return self._stencil_params

    @stencil_params.setter
    def stencil_params(self, stencil_params):
        """Sets the stencil_params of this ScenarioAdvancedConfig.


        :param stencil_params: The stencil_params of this ScenarioAdvancedConfig.  # noqa: E501
        :type stencil_params: object
        """

        self._stencil_params = stencil_params

    @property
    def bbox_params(self):
        """Gets the bbox_params of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The bbox_params of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: object
        """
        return self._bbox_params

    @bbox_params.setter
    def bbox_params(self, bbox_params):
        """Sets the bbox_params of this ScenarioAdvancedConfig.


        :param bbox_params: The bbox_params of this ScenarioAdvancedConfig.  # noqa: E501
        :type bbox_params: object
        """

        self._bbox_params = bbox_params

    @property
    def cache_dist(self):
        """Gets the cache_dist of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The cache_dist of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: bool
        """
        return self._cache_dist

    @cache_dist.setter
    def cache_dist(self, cache_dist):
        """Sets the cache_dist of this ScenarioAdvancedConfig.


        :param cache_dist: The cache_dist of this ScenarioAdvancedConfig.  # noqa: E501
        :type cache_dist: bool
        """

        self._cache_dist = cache_dist

    @property
    def localisation_mode(self):
        """Gets the localisation_mode of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The localisation_mode of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: str
        """
        return self._localisation_mode

    @localisation_mode.setter
    def localisation_mode(self, localisation_mode):
        """Sets the localisation_mode of this ScenarioAdvancedConfig.


        :param localisation_mode: The localisation_mode of this ScenarioAdvancedConfig.  # noqa: E501
        :type localisation_mode: str
        """

        self._localisation_mode = localisation_mode

    @property
    def multiscale_patch_weights(self):
        """Gets the multiscale_patch_weights of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The multiscale_patch_weights of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: list[float]
        """
        return self._multiscale_patch_weights

    @multiscale_patch_weights.setter
    def multiscale_patch_weights(self, multiscale_patch_weights):
        """Sets the multiscale_patch_weights of this ScenarioAdvancedConfig.


        :param multiscale_patch_weights: The multiscale_patch_weights of this ScenarioAdvancedConfig.  # noqa: E501
        :type multiscale_patch_weights: list[float]
        """

        self._multiscale_patch_weights = multiscale_patch_weights

    @property
    def random_state(self):
        """Gets the random_state of this ScenarioAdvancedConfig.  # noqa: E501


        :return: The random_state of this ScenarioAdvancedConfig.  # noqa: E501
        :rtype: int
        """
        return self._random_state

    @random_state.setter
    def random_state(self, random_state):
        """Sets the random_state of this ScenarioAdvancedConfig.


        :param random_state: The random_state of this ScenarioAdvancedConfig.  # noqa: E501
        :type random_state: int
        """

        self._random_state = random_state

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioAdvancedConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioAdvancedConfig):
            return True

        return self.to_dict() != other.to_dict()
