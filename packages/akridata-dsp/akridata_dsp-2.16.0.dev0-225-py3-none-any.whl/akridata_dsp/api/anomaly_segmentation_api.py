# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AnomalySegmentationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_test_images(self, model_id, add_test_images_request, **kwargs):  # noqa: E501
        """Submit task to add test images to spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_test_images(model_id, add_test_images_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param add_test_images_request: (required)
        :type add_test_images_request: AddTestImagesRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetTestImagesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.add_test_images_with_http_info(model_id, add_test_images_request, **kwargs)  # noqa: E501

    def add_test_images_with_http_info(self, model_id, add_test_images_request, **kwargs):  # noqa: E501
        """Submit task to add test images to spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_test_images_with_http_info(model_id, add_test_images_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param add_test_images_request: (required)
        :type add_test_images_request: AddTestImagesRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetTestImagesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'add_test_images_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_images" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `add_test_images`")  # noqa: E501
        # verify the required parameter 'add_test_images_request' is set
        if self.api_client.client_side_validation and local_var_params.get('add_test_images_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `add_test_images_request` when calling `add_test_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'add_test_images_request' in local_var_params:
            body_params = local_var_params['add_test_images_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GetTestImagesResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec/test_images', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_anomaly_segmentation_model(self, create_anomaly_segmentation_model_request, **kwargs):  # noqa: E501
        """Create Anomaly Segmentation Model  # noqa: E501

        Create Anomaly Segmentation Model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_anomaly_segmentation_model(create_anomaly_segmentation_model_request, async_req=True)
        >>> result = thread.get()

        :param create_anomaly_segmentation_model_request: (required)
        :type create_anomaly_segmentation_model_request: CreateAnomalySegmentationModelRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegmentationModel
        """
        kwargs['_return_http_data_only'] = True
        return self.create_anomaly_segmentation_model_with_http_info(create_anomaly_segmentation_model_request, **kwargs)  # noqa: E501

    def create_anomaly_segmentation_model_with_http_info(self, create_anomaly_segmentation_model_request, **kwargs):  # noqa: E501
        """Create Anomaly Segmentation Model  # noqa: E501

        Create Anomaly Segmentation Model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_anomaly_segmentation_model_with_http_info(create_anomaly_segmentation_model_request, async_req=True)
        >>> result = thread.get()

        :param create_anomaly_segmentation_model_request: (required)
        :type create_anomaly_segmentation_model_request: CreateAnomalySegmentationModelRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegmentationModel, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'create_anomaly_segmentation_model_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_anomaly_segmentation_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_anomaly_segmentation_model_request' is set
        if self.api_client.client_side_validation and local_var_params.get('create_anomaly_segmentation_model_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_anomaly_segmentation_model_request` when calling `create_anomaly_segmentation_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_anomaly_segmentation_model_request' in local_var_params:
            body_params = local_var_params['create_anomaly_segmentation_model_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            201: "AnomalySegmentationModel",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_rule(self, model_id, create_rule_request, **kwargs):  # noqa: E501
        """submit a session to generate labels based on rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_rule(model_id, create_rule_request, async_req=True)
        >>> result = thread.get()

        :param model_id: Model ID (required)
        :type model_id: str
        :param create_rule_request: (required)
        :type create_rule_request: CreateRuleRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateRuleResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_rule_with_http_info(model_id, create_rule_request, **kwargs)  # noqa: E501

    def create_rule_with_http_info(self, model_id, create_rule_request, **kwargs):  # noqa: E501
        """submit a session to generate labels based on rule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_rule_with_http_info(model_id, create_rule_request, async_req=True)
        >>> result = thread.get()

        :param model_id: Model ID (required)
        :type model_id: str
        :param create_rule_request: (required)
        :type create_rule_request: CreateRuleRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateRuleResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'create_rule_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rule" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `create_rule`")  # noqa: E501
        # verify the required parameter 'create_rule_request' is set
        if self.api_client.client_side_validation and local_var_params.get('create_rule_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_rule_request` when calling `create_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_rule_request' in local_var_params:
            body_params = local_var_params['create_rule_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "CreateRuleResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_unsaved_rules(self, **kwargs):  # noqa: E501
        """Trigger cleanup for anomaly segmentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_unsaved_rules(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Message
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_unsaved_rules_with_http_info(**kwargs)  # noqa: E501

    def delete_unsaved_rules_with_http_info(self, **kwargs):  # noqa: E501
        """Trigger cleanup for anomaly segmentation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_unsaved_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Message, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_unsaved_rules" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "Message",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/cleanup', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def export_model(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Submit export model request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_model(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExportModelResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.export_model_with_http_info(rule_id, model_id, **kwargs)  # noqa: E501

    def export_model_with_http_info(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Submit export model request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.export_model_with_http_info(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExportModelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `export_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `export_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ExportModelResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}/export_model', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def fetch_stats(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_stats(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnoSegStats
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_stats_with_http_info(rule_id, model_id, **kwargs)  # noqa: E501

    def fetch_stats_with_http_info(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_stats_with_http_info(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnoSegStats, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_stats" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `fetch_stats`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `fetch_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnoSegStats",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def fetch_test_image_labels(self, rule_id, model_id, image_label_request, **kwargs):  # noqa: E501
        """Fetch test image labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_test_image_labels(rule_id, model_id, image_label_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param image_label_request: (required)
        :type image_label_request: ImageLabelRequest
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageLabelResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_test_image_labels_with_http_info(rule_id, model_id, image_label_request, **kwargs)  # noqa: E501

    def fetch_test_image_labels_with_http_info(self, rule_id, model_id, image_label_request, **kwargs):  # noqa: E501
        """Fetch test image labels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_test_image_labels_with_http_info(rule_id, model_id, image_label_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param image_label_request: (required)
        :type image_label_request: ImageLabelRequest
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageLabelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'image_label_request',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_test_image_labels" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `fetch_test_image_labels`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `fetch_test_image_labels`")  # noqa: E501
        # verify the required parameter 'image_label_request' is set
        if self.api_client.client_side_validation and local_var_params.get('image_label_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `image_label_request` when calling `fetch_test_image_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image_label_request' in local_var_params:
            body_params = local_var_params['image_label_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ImageLabelResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}/fetch_image_labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def fetch_test_images(self, spec_id, model_id, **kwargs):  # noqa: E501
        """Fetch test images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_test_images(spec_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param point_ids: Point IDs
        :type point_ids: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetTestImagesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_test_images_with_http_info(spec_id, model_id, **kwargs)  # noqa: E501

    def fetch_test_images_with_http_info(self, spec_id, model_id, **kwargs):  # noqa: E501
        """Fetch test images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_test_images_with_http_info(spec_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param point_ids: Point IDs
        :type point_ids: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetTestImagesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_id',
            'model_id',
            'point_ids',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_test_images" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_id' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_id` when calling `fetch_test_images`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `fetch_test_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_id' in local_var_params:
            path_params['spec_id'] = local_var_params['spec_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if local_var_params.get('point_ids') is not None:  # noqa: E501
            query_params.append(('point_ids', local_var_params['point_ids']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GetTestImagesResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec/{spec_id}/test_images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_anomaly_segmentation_spec(self, spec_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anomaly_segmentation_spec(spec_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegmentationSpecResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_anomaly_segmentation_spec_with_http_info(spec_id, model_id, **kwargs)  # noqa: E501

    def get_anomaly_segmentation_spec_with_http_info(self, spec_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_anomaly_segmentation_spec_with_http_info(spec_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegmentationSpecResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_anomaly_segmentation_spec" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_id' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_id` when calling `get_anomaly_segmentation_spec`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_anomaly_segmentation_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_id' in local_var_params:
            path_params['spec_id'] = local_var_params['spec_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnomalySegmentationSpecResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec/{spec_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_catalog_sync_session_info(self, session_id, model_id, **kwargs):  # noqa: E501
        """Fetch catalog sync session info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_catalog_sync_session_info(session_id, model_id, async_req=True)
        >>> result = thread.get()

        :param session_id: session id (required)
        :type session_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalyCatalogSyncSessionDetails
        """
        kwargs['_return_http_data_only'] = True
        return self.get_catalog_sync_session_info_with_http_info(session_id, model_id, **kwargs)  # noqa: E501

    def get_catalog_sync_session_info_with_http_info(self, session_id, model_id, **kwargs):  # noqa: E501
        """Fetch catalog sync session info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_catalog_sync_session_info_with_http_info(session_id, model_id, async_req=True)
        >>> result = thread.get()

        :param session_id: session id (required)
        :type session_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalyCatalogSyncSessionDetails, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'session_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_catalog_sync_session_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `get_catalog_sync_session_info`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_catalog_sync_session_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in local_var_params:
            path_params['session_id'] = local_var_params['session_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnomalyCatalogSyncSessionDetails",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/catalog_sync/{session_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_export_model(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Get export model info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_export_model(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExportModelResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_export_model_with_http_info(rule_id, model_id, **kwargs)  # noqa: E501

    def get_export_model_with_http_info(self, rule_id, model_id, **kwargs):  # noqa: E501
        """Get export model info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_export_model_with_http_info(rule_id, model_id, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExportModelResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_export_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `get_export_model`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_export_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ExportModelResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}/export_model', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_model_details(self, **kwargs):  # noqa: E501
        """Fetch details of available anoseg models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_details(async_req=True)
        >>> result = thread.get()

        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetModelDetailsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_model_details_with_http_info(**kwargs)  # noqa: E501

    def get_model_details_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch details of available anoseg models  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_model_details_with_http_info(async_req=True)
        >>> result = thread.get()

        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetModelDetailsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_model_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GetModelDetailsResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/list-models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_session_details(self, spec_id, session_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation session status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_session_details(spec_id, session_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anoseg spec id (required)
        :type spec_id: str
        :param session_id: session id (required)
        :type session_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSessionDetailsResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_session_details_with_http_info(spec_id, session_id, model_id, **kwargs)  # noqa: E501

    def get_session_details_with_http_info(self, spec_id, session_id, model_id, **kwargs):  # noqa: E501
        """Fetch anomaly segmentation session status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_session_details_with_http_info(spec_id, session_id, model_id, async_req=True)
        >>> result = thread.get()

        :param spec_id: anoseg spec id (required)
        :type spec_id: str
        :param session_id: session id (required)
        :type session_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSessionDetailsResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_id',
            'session_id',
            'model_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_session_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_id' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_id` when calling `get_session_details`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `session_id` when calling `get_session_details`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `get_session_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_id' in local_var_params:
            path_params['spec_id'] = local_var_params['spec_id']  # noqa: E501
        if 'session_id' in local_var_params:
            path_params['session_id'] = local_var_params['session_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GetSessionDetailsResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec/{spec_id}/session/{session_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_anomaly_segmentation_model(self, **kwargs):  # noqa: E501
        """Anomaly segmentation model list  # noqa: E501

        List Anomaly Segmentation Model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_anomaly_segmentation_model(async_req=True)
        >>> result = thread.get()

        :param search_key: Search by string
        :type search_key: str
        :param cloneable:
        :type cloneable: bool
        :param model_ids:
        :type model_ids: str
        :param unarchived_only:
        :type unarchived_only: bool
        :param status:
        :type status: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegmentationModelList
        """
        kwargs['_return_http_data_only'] = True
        return self.list_anomaly_segmentation_model_with_http_info(**kwargs)  # noqa: E501

    def list_anomaly_segmentation_model_with_http_info(self, **kwargs):  # noqa: E501
        """Anomaly segmentation model list  # noqa: E501

        List Anomaly Segmentation Model  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_anomaly_segmentation_model_with_http_info(async_req=True)
        >>> result = thread.get()

        :param search_key: Search by string
        :type search_key: str
        :param cloneable:
        :type cloneable: bool
        :param model_ids:
        :type model_ids: str
        :param unarchived_only:
        :type unarchived_only: bool
        :param status:
        :type status: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegmentationModelList, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'search_key',
            'cloneable',
            'model_ids',
            'unarchived_only',
            'status',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_anomaly_segmentation_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('cloneable') is not None:  # noqa: E501
            query_params.append(('cloneable', local_var_params['cloneable']))  # noqa: E501
        if local_var_params.get('model_ids') is not None:  # noqa: E501
            query_params.append(('model_ids', local_var_params['model_ids']))  # noqa: E501
        if local_var_params.get('unarchived_only') is not None:  # noqa: E501
            query_params.append(('unarchived_only', local_var_params['unarchived_only']))  # noqa: E501
        if local_var_params.get('status') is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnomalySegmentationModelList",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_rules(self, model_id, **kwargs):  # noqa: E501
        """Fetch list of rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_rules(model_id, async_req=True)
        >>> result = thread.get()

        :param model_id: Model ID (required)
        :type model_id: str
        :param rule_ids:
        :type rule_ids: str
        :param search_key: Search by string
        :type search_key: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListRuleResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_rules_with_http_info(model_id, **kwargs)  # noqa: E501

    def list_rules_with_http_info(self, model_id, **kwargs):  # noqa: E501
        """Fetch list of rules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_rules_with_http_info(model_id, async_req=True)
        >>> result = thread.get()

        :param model_id: Model ID (required)
        :type model_id: str
        :param rule_ids:
        :type rule_ids: str
        :param search_key: Search by string
        :type search_key: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListRuleResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'rule_ids',
            'search_key',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_rules" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `list_rules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []
        if local_var_params.get('rule_ids') is not None:  # noqa: E501
            query_params.append(('rule_ids', local_var_params['rule_ids']))  # noqa: E501
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ListRuleResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def submit_session(self, spec_id, model_id, anomaly_segmentation_session_request, **kwargs):  # noqa: E501
        """Trigger a anomaly segmentation session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.submit_session(spec_id, model_id, anomaly_segmentation_session_request, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param anomaly_segmentation_session_request: (required)
        :type anomaly_segmentation_session_request: AnomalySegmentationSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SubmitSessionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.submit_session_with_http_info(spec_id, model_id, anomaly_segmentation_session_request, **kwargs)  # noqa: E501

    def submit_session_with_http_info(self, spec_id, model_id, anomaly_segmentation_session_request, **kwargs):  # noqa: E501
        """Trigger a anomaly segmentation session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.submit_session_with_http_info(spec_id, model_id, anomaly_segmentation_session_request, async_req=True)
        >>> result = thread.get()

        :param spec_id: anomaly segmentation spec id (required)
        :type spec_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param anomaly_segmentation_session_request: (required)
        :type anomaly_segmentation_session_request: AnomalySegmentationSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SubmitSessionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_id',
            'model_id',
            'anomaly_segmentation_session_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_id' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_id` when calling `submit_session`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `submit_session`")  # noqa: E501
        # verify the required parameter 'anomaly_segmentation_session_request' is set
        if self.api_client.client_side_validation and local_var_params.get('anomaly_segmentation_session_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `anomaly_segmentation_session_request` when calling `submit_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_id' in local_var_params:
            path_params['spec_id'] = local_var_params['spec_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'anomaly_segmentation_session_request' in local_var_params:
            body_params = local_var_params['anomaly_segmentation_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SubmitSessionResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec/{spec_id}/submit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def trigger_catalog_sync_session(self, rule_id, model_id, anomaly_catalog_sync_session_request, **kwargs):  # noqa: E501
        """Submit a catalog sync session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_catalog_sync_session(rule_id, model_id, anomaly_catalog_sync_session_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param anomaly_catalog_sync_session_request: (required)
        :type anomaly_catalog_sync_session_request: AnomalyCatalogSyncSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalyCatalogSyncSessionResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.trigger_catalog_sync_session_with_http_info(rule_id, model_id, anomaly_catalog_sync_session_request, **kwargs)  # noqa: E501

    def trigger_catalog_sync_session_with_http_info(self, rule_id, model_id, anomaly_catalog_sync_session_request, **kwargs):  # noqa: E501
        """Submit a catalog sync session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_catalog_sync_session_with_http_info(rule_id, model_id, anomaly_catalog_sync_session_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: rule id (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param anomaly_catalog_sync_session_request: (required)
        :type anomaly_catalog_sync_session_request: AnomalyCatalogSyncSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalyCatalogSyncSessionResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'anomaly_catalog_sync_session_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_catalog_sync_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `trigger_catalog_sync_session`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `trigger_catalog_sync_session`")  # noqa: E501
        # verify the required parameter 'anomaly_catalog_sync_session_request' is set
        if self.api_client.client_side_validation and local_var_params.get('anomaly_catalog_sync_session_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `anomaly_catalog_sync_session_request` when calling `trigger_catalog_sync_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'anomaly_catalog_sync_session_request' in local_var_params:
            body_params = local_var_params['anomaly_catalog_sync_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnomalyCatalogSyncSessionResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}/catalog_sync', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_anomaly_segmentation_model(self, model_id, update_anomaly_segmentation_model_request, **kwargs):  # noqa: E501
        """Update Anomaly Segmentation Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_anomaly_segmentation_model(model_id, update_anomaly_segmentation_model_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param update_anomaly_segmentation_model_request: (required)
        :type update_anomaly_segmentation_model_request: UpdateAnomalySegmentationModelRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AnomalySegmentationModel
        """
        kwargs['_return_http_data_only'] = True
        return self.update_anomaly_segmentation_model_with_http_info(model_id, update_anomaly_segmentation_model_request, **kwargs)  # noqa: E501

    def update_anomaly_segmentation_model_with_http_info(self, model_id, update_anomaly_segmentation_model_request, **kwargs):  # noqa: E501
        """Update Anomaly Segmentation Model  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_anomaly_segmentation_model_with_http_info(model_id, update_anomaly_segmentation_model_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param update_anomaly_segmentation_model_request: (required)
        :type update_anomaly_segmentation_model_request: UpdateAnomalySegmentationModelRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AnomalySegmentationModel, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'update_anomaly_segmentation_model_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_anomaly_segmentation_model" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `update_anomaly_segmentation_model`")  # noqa: E501
        # verify the required parameter 'update_anomaly_segmentation_model_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_anomaly_segmentation_model_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_anomaly_segmentation_model_request` when calling `update_anomaly_segmentation_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_anomaly_segmentation_model_request' in local_var_params:
            body_params = local_var_params['update_anomaly_segmentation_model_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PATCH', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "AnomalySegmentationModel",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_anomaly_segmentation_spec(self, model_id, update_anomaly_segmentation_spec_request, **kwargs):  # noqa: E501
        """Update existing anomaly segmentation spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_anomaly_segmentation_spec(model_id, update_anomaly_segmentation_spec_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param update_anomaly_segmentation_spec_request: (required)
        :type update_anomaly_segmentation_spec_request: UpdateAnomalySegmentationSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateAnomalySegmentationSpecRequest
        """
        kwargs['_return_http_data_only'] = True
        return self.update_anomaly_segmentation_spec_with_http_info(model_id, update_anomaly_segmentation_spec_request, **kwargs)  # noqa: E501

    def update_anomaly_segmentation_spec_with_http_info(self, model_id, update_anomaly_segmentation_spec_request, **kwargs):  # noqa: E501
        """Update existing anomaly segmentation spec  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_anomaly_segmentation_spec_with_http_info(model_id, update_anomaly_segmentation_spec_request, async_req=True)
        >>> result = thread.get()

        :param model_id: anomaly segmentation model id (required)
        :type model_id: str
        :param update_anomaly_segmentation_spec_request: (required)
        :type update_anomaly_segmentation_spec_request: UpdateAnomalySegmentationSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateAnomalySegmentationSpecRequest, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'model_id',
            'update_anomaly_segmentation_spec_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_anomaly_segmentation_spec" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `update_anomaly_segmentation_spec`")  # noqa: E501
        # verify the required parameter 'update_anomaly_segmentation_spec_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_anomaly_segmentation_spec_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_anomaly_segmentation_spec_request` when calling `update_anomaly_segmentation_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_anomaly_segmentation_spec_request' in local_var_params:
            body_params = local_var_params['update_anomaly_segmentation_spec_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "UpdateAnomalySegmentationSpecRequest",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/spec', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_rule_metadata(self, rule_id, model_id, update_rule_metadata_request, **kwargs):  # noqa: E501
        """Update rule metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_rule_metadata(rule_id, model_id, update_rule_metadata_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param update_rule_metadata_request: (required)
        :type update_rule_metadata_request: UpdateRuleMetadataRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RuleInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.update_rule_metadata_with_http_info(rule_id, model_id, update_rule_metadata_request, **kwargs)  # noqa: E501

    def update_rule_metadata_with_http_info(self, rule_id, model_id, update_rule_metadata_request, **kwargs):  # noqa: E501
        """Update rule metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_rule_metadata_with_http_info(rule_id, model_id, update_rule_metadata_request, async_req=True)
        >>> result = thread.get()

        :param rule_id: Rule ID (required)
        :type rule_id: str
        :param model_id: Model ID (required)
        :type model_id: str
        :param update_rule_metadata_request: (required)
        :type update_rule_metadata_request: UpdateRuleMetadataRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RuleInfo, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'rule_id',
            'model_id',
            'update_rule_metadata_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rule_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'rule_id' is set
        if self.api_client.client_side_validation and local_var_params.get('rule_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rule_id` when calling `update_rule_metadata`")  # noqa: E501
        # verify the required parameter 'model_id' is set
        if self.api_client.client_side_validation and local_var_params.get('model_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `model_id` when calling `update_rule_metadata`")  # noqa: E501
        # verify the required parameter 'update_rule_metadata_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_rule_metadata_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_rule_metadata_request` when calling `update_rule_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in local_var_params:
            path_params['rule_id'] = local_var_params['rule_id']  # noqa: E501
        if 'model_id' in local_var_params:
            path_params['model_id'] = local_var_params['model_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_rule_metadata_request' in local_var_params:
            body_params = local_var_params['update_rule_metadata_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PATCH', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "RuleInfo",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/anomaly-segmentation/model/{model_id}/rule/{rule_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
