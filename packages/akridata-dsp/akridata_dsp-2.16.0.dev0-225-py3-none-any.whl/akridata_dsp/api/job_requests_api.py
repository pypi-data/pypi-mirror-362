# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class JobRequestsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_requests(self, **kwargs):  # noqa: E501
        """List all DS Jobs  # noqa: E501

        Get list of DSP requests based on passed filter criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_requests(async_req=True)
        >>> result = thread.get()

        :param archived: Show archived jobs only
        :type archived: bool
        :param search_key: Search job by the key
        :type search_key: str
        :param sort_by: Sort the jobs by Job name/Created at/Last accessed at
        :type sort_by: str
        :param descending: Sort the jobs by ascending/descending order
        :type descending: bool
        :param status: Filter jobs by status
        :type status: str
        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param pipeline_id: Pipeline ID
        :type pipeline_id: str
        :param data_type: Filter jobs by Data type image/video
        :type data_type: str
        :param clusterer: Filter jobs by Clusterer
        :type clusterer: str
        :param req_ids: Filter jobs by ids
        :type req_ids: str
        :param job_categories: Filter jobs by comma separated job categories
        :type job_categories: str
        :param job_type: Filter jobs by job type
        :type job_type: JobType
        :param compare_jobs_only: Show only compare jobs
        :type compare_jobs_only: bool
        :param tags: Search by tags
        :type tags: str
        :param favorite: Show only favorite jobs
        :type favorite: bool
        :param created_by: Show user's requests
        :type created_by: str
        :param vseq_jobs_only: Show only explore sequence jobs
        :type vseq_jobs_only: bool
        :param text_search_supported: Show only text search supported jobs
        :type text_search_supported: bool
        :param labeling_spec_id: Filter by labeling spec id
        :type labeling_spec_id: str
        :param labeling_spec_version: Filter by labeling spec version
        :type labeling_spec_version: int
        :param is_deleted: Filter by deleted status of the job
        :type is_deleted: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListJobRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_requests_with_http_info(**kwargs)  # noqa: E501

    def list_requests_with_http_info(self, **kwargs):  # noqa: E501
        """List all DS Jobs  # noqa: E501

        Get list of DSP requests based on passed filter criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param archived: Show archived jobs only
        :type archived: bool
        :param search_key: Search job by the key
        :type search_key: str
        :param sort_by: Sort the jobs by Job name/Created at/Last accessed at
        :type sort_by: str
        :param descending: Sort the jobs by ascending/descending order
        :type descending: bool
        :param status: Filter jobs by status
        :type status: str
        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param pipeline_id: Pipeline ID
        :type pipeline_id: str
        :param data_type: Filter jobs by Data type image/video
        :type data_type: str
        :param clusterer: Filter jobs by Clusterer
        :type clusterer: str
        :param req_ids: Filter jobs by ids
        :type req_ids: str
        :param job_categories: Filter jobs by comma separated job categories
        :type job_categories: str
        :param job_type: Filter jobs by job type
        :type job_type: JobType
        :param compare_jobs_only: Show only compare jobs
        :type compare_jobs_only: bool
        :param tags: Search by tags
        :type tags: str
        :param favorite: Show only favorite jobs
        :type favorite: bool
        :param created_by: Show user's requests
        :type created_by: str
        :param vseq_jobs_only: Show only explore sequence jobs
        :type vseq_jobs_only: bool
        :param text_search_supported: Show only text search supported jobs
        :type text_search_supported: bool
        :param labeling_spec_id: Filter by labeling spec id
        :type labeling_spec_id: str
        :param labeling_spec_version: Filter by labeling spec version
        :type labeling_spec_version: int
        :param is_deleted: Filter by deleted status of the job
        :type is_deleted: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListJobRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'archived',
            'search_key',
            'sort_by',
            'descending',
            'status',
            'dataset_id',
            'pipeline_id',
            'data_type',
            'clusterer',
            'req_ids',
            'job_categories',
            'job_type',
            'compare_jobs_only',
            'tags',
            'favorite',
            'created_by',
            'vseq_jobs_only',
            'text_search_supported',
            'labeling_spec_id',
            'labeling_spec_version',
            'is_deleted',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_requests" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('archived') is not None:  # noqa: E501
            query_params.append(('archived', local_var_params['archived']))  # noqa: E501
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('sort_by') is not None:  # noqa: E501
            query_params.append(('sortBy', local_var_params['sort_by']))  # noqa: E501
        if local_var_params.get('descending') is not None:  # noqa: E501
            query_params.append(('descending', local_var_params['descending']))  # noqa: E501
        if local_var_params.get('status') is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if local_var_params.get('dataset_id') is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if local_var_params.get('pipeline_id') is not None:  # noqa: E501
            query_params.append(('pipeline_id', local_var_params['pipeline_id']))  # noqa: E501
        if local_var_params.get('data_type') is not None:  # noqa: E501
            query_params.append(('data_type', local_var_params['data_type']))  # noqa: E501
        if local_var_params.get('clusterer') is not None:  # noqa: E501
            query_params.append(('clusterer', local_var_params['clusterer']))  # noqa: E501
        if local_var_params.get('req_ids') is not None:  # noqa: E501
            query_params.append(('req_ids', local_var_params['req_ids']))  # noqa: E501
        if local_var_params.get('job_categories') is not None:  # noqa: E501
            query_params.append(('job_categories', local_var_params['job_categories']))  # noqa: E501
        if local_var_params.get('job_type') is not None:  # noqa: E501
            query_params.append(('job_type', local_var_params['job_type']))  # noqa: E501
        if local_var_params.get('compare_jobs_only') is not None:  # noqa: E501
            query_params.append(('compare_jobs_only', local_var_params['compare_jobs_only']))  # noqa: E501
        if local_var_params.get('tags') is not None:  # noqa: E501
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
        if local_var_params.get('favorite') is not None:  # noqa: E501
            query_params.append(('favorite', local_var_params['favorite']))  # noqa: E501
        if local_var_params.get('created_by') is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if local_var_params.get('vseq_jobs_only') is not None:  # noqa: E501
            query_params.append(('vseq_jobs_only', local_var_params['vseq_jobs_only']))  # noqa: E501
        if local_var_params.get('text_search_supported') is not None:  # noqa: E501
            query_params.append(('text_search_supported', local_var_params['text_search_supported']))  # noqa: E501
        if local_var_params.get('labeling_spec_id') is not None:  # noqa: E501
            query_params.append(('labeling_spec_id', local_var_params['labeling_spec_id']))  # noqa: E501
        if local_var_params.get('labeling_spec_version') is not None:  # noqa: E501
            query_params.append(('labeling_spec_version', local_var_params['labeling_spec_version']))  # noqa: E501
        if local_var_params.get('is_deleted') is not None:  # noqa: E501
            query_params.append(('is_deleted', local_var_params['is_deleted']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ListJobRequestResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/job-requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
