# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SynthesisApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clone_synthesis_spec(self, synthesis_project_id, clone_synthesis_spec_request, **kwargs):  # noqa: E501
        """Synthesis spec clone  # noqa: E501

        Clone synthesis spec  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_synthesis_spec(synthesis_project_id, clone_synthesis_spec_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param clone_synthesis_spec_request: (required)
        :type clone_synthesis_spec_request: CloneSynthesisSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSpecResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.clone_synthesis_spec_with_http_info(synthesis_project_id, clone_synthesis_spec_request, **kwargs)  # noqa: E501

    def clone_synthesis_spec_with_http_info(self, synthesis_project_id, clone_synthesis_spec_request, **kwargs):  # noqa: E501
        """Synthesis spec clone  # noqa: E501

        Clone synthesis spec  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clone_synthesis_spec_with_http_info(synthesis_project_id, clone_synthesis_spec_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param clone_synthesis_spec_request: (required)
        :type clone_synthesis_spec_request: CloneSynthesisSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSpecResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'clone_synthesis_spec_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clone_synthesis_spec" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `clone_synthesis_spec`")  # noqa: E501
        # verify the required parameter 'clone_synthesis_spec_request' is set
        if self.api_client.client_side_validation and local_var_params.get('clone_synthesis_spec_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `clone_synthesis_spec_request` when calling `clone_synthesis_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'clone_synthesis_spec_request' in local_var_params:
            body_params = local_var_params['clone_synthesis_spec_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            201: "SynthesisSpecResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/spec', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_dataset(self, synthesis_project_id, create_synthesis_dataset_request, **kwargs):  # noqa: E501
        """Create/Attach synthesis dataset  # noqa: E501

        Create/Attach synthesis dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset(synthesis_project_id, create_synthesis_dataset_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param create_synthesis_dataset_request: (required)
        :type create_synthesis_dataset_request: CreateSynthesisDatasetRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateSynthesisDatasetResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_dataset_with_http_info(synthesis_project_id, create_synthesis_dataset_request, **kwargs)  # noqa: E501

    def create_dataset_with_http_info(self, synthesis_project_id, create_synthesis_dataset_request, **kwargs):  # noqa: E501
        """Create/Attach synthesis dataset  # noqa: E501

        Create/Attach synthesis dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dataset_with_http_info(synthesis_project_id, create_synthesis_dataset_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param create_synthesis_dataset_request: (required)
        :type create_synthesis_dataset_request: CreateSynthesisDatasetRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateSynthesisDatasetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'create_synthesis_dataset_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `create_dataset`")  # noqa: E501
        # verify the required parameter 'create_synthesis_dataset_request' is set
        if self.api_client.client_side_validation and local_var_params.get('create_synthesis_dataset_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_synthesis_dataset_request` when calling `create_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_synthesis_dataset_request' in local_var_params:
            body_params = local_var_params['create_synthesis_dataset_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "CreateSynthesisDatasetResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/dataset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_generate_session(self, spec_version, synthesis_project_id, generate_session_request, **kwargs):  # noqa: E501
        """Trigger a generate session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_generate_session(spec_version, synthesis_project_id, generate_session_request, async_req=True)
        >>> result = thread.get()

        :param spec_version: Spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param generate_session_request: (required)
        :type generate_session_request: GenerateSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_generate_session_with_http_info(spec_version, synthesis_project_id, generate_session_request, **kwargs)  # noqa: E501

    def create_generate_session_with_http_info(self, spec_version, synthesis_project_id, generate_session_request, **kwargs):  # noqa: E501
        """Trigger a generate session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_generate_session_with_http_info(spec_version, synthesis_project_id, generate_session_request, async_req=True)
        >>> result = thread.get()

        :param spec_version: Spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param generate_session_request: (required)
        :type generate_session_request: GenerateSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_version',
            'synthesis_project_id',
            'generate_session_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_generate_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_version' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_version') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_version` when calling `create_generate_session`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `create_generate_session`")  # noqa: E501
        # verify the required parameter 'generate_session_request' is set
        if self.api_client.client_side_validation and local_var_params.get('generate_session_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `generate_session_request` when calling `create_generate_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_version' in local_var_params:
            path_params['spec_version'] = local_var_params['spec_version']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'generate_session_request' in local_var_params:
            body_params = local_var_params['generate_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionSummaryResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/spec/{spec_version}/generate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_synthesis_project(self, create_synthesis_project_request, **kwargs):  # noqa: E501
        """Create synthesis project  # noqa: E501

        Create a synthesis project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_synthesis_project(create_synthesis_project_request, async_req=True)
        >>> result = thread.get()

        :param create_synthesis_project_request: (required)
        :type create_synthesis_project_request: CreateSynthesisProjectRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateSynthesisProjectResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_synthesis_project_with_http_info(create_synthesis_project_request, **kwargs)  # noqa: E501

    def create_synthesis_project_with_http_info(self, create_synthesis_project_request, **kwargs):  # noqa: E501
        """Create synthesis project  # noqa: E501

        Create a synthesis project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_synthesis_project_with_http_info(create_synthesis_project_request, async_req=True)
        >>> result = thread.get()

        :param create_synthesis_project_request: (required)
        :type create_synthesis_project_request: CreateSynthesisProjectRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateSynthesisProjectResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'create_synthesis_project_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_synthesis_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_synthesis_project_request' is set
        if self.api_client.client_side_validation and local_var_params.get('create_synthesis_project_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_synthesis_project_request` when calling `create_synthesis_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_synthesis_project_request' in local_var_params:
            body_params = local_var_params['create_synthesis_project_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            201: "CreateSynthesisProjectResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_training_session(self, spec_version, synthesis_project_id, **kwargs):  # noqa: E501
        """Trigger a training session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_training_session(spec_version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param spec_version: Spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_training_session_with_http_info(spec_version, synthesis_project_id, **kwargs)  # noqa: E501

    def create_training_session_with_http_info(self, spec_version, synthesis_project_id, **kwargs):  # noqa: E501
        """Trigger a training session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_training_session_with_http_info(spec_version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param spec_version: Spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_version',
            'synthesis_project_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_training_session" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_version' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_version') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_version` when calling `create_training_session`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `create_training_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_version' in local_var_params:
            path_params['spec_version'] = local_var_params['spec_version']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionSummaryResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/spec/{spec_version}/train', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def datagen_webhook(self, x_session_id, datagen_webhook_request, **kwargs):  # noqa: E501
        """synthesis session results webhook  # noqa: E501

        Process datagen webhook notification appropriately  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.datagen_webhook(x_session_id, datagen_webhook_request, async_req=True)
        >>> result = thread.get()

        :param x_session_id: (required)
        :type x_session_id: str
        :param datagen_webhook_request: (required)
        :type datagen_webhook_request: DatagenWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessMessage
        """
        kwargs['_return_http_data_only'] = True
        return self.datagen_webhook_with_http_info(x_session_id, datagen_webhook_request, **kwargs)  # noqa: E501

    def datagen_webhook_with_http_info(self, x_session_id, datagen_webhook_request, **kwargs):  # noqa: E501
        """synthesis session results webhook  # noqa: E501

        Process datagen webhook notification appropriately  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.datagen_webhook_with_http_info(x_session_id, datagen_webhook_request, async_req=True)
        >>> result = thread.get()

        :param x_session_id: (required)
        :type x_session_id: str
        :param datagen_webhook_request: (required)
        :type datagen_webhook_request: DatagenWebhookRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessMessage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_session_id',
            'datagen_webhook_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method datagen_webhook" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'x_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('x_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `x_session_id` when calling `datagen_webhook`")  # noqa: E501
        # verify the required parameter 'datagen_webhook_request' is set
        if self.api_client.client_side_validation and local_var_params.get('datagen_webhook_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `datagen_webhook_request` when calling `datagen_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_session_id' in local_var_params:
            header_params['X-SESSION-ID'] = local_var_params['x_session_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'datagen_webhook_request' in local_var_params:
            body_params = local_var_params['datagen_webhook_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SuccessMessage",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/webhooks/datagen/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def detach_dataset(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Detach synthesis dataset  # noqa: E501

        Detach synthesis dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detach_dataset(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.detach_dataset_with_http_info(synthesis_project_id, **kwargs)  # noqa: E501

    def detach_dataset_with_http_info(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Detach synthesis dataset  # noqa: E501

        Detach synthesis dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detach_dataset_with_http_info(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detach_dataset" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `detach_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "object",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/dataset', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def download_synthesis_sessions_results(self, synthesis_session_id, synthesis_project_id, download_session_request, **kwargs):  # noqa: E501
        """Download synthesis sessions results  # noqa: E501

        Download synthesis sessions results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_synthesis_sessions_results(synthesis_session_id, synthesis_project_id, download_session_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param download_session_request: (required)
        :type download_session_request: DownloadSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Response200DownloadSynthesisSessionsResultsDsSynthesisSynthesisProjectIdSessionSynthesisSessionIdDownloadPost
        """
        kwargs['_return_http_data_only'] = True
        return self.download_synthesis_sessions_results_with_http_info(synthesis_session_id, synthesis_project_id, download_session_request, **kwargs)  # noqa: E501

    def download_synthesis_sessions_results_with_http_info(self, synthesis_session_id, synthesis_project_id, download_session_request, **kwargs):  # noqa: E501
        """Download synthesis sessions results  # noqa: E501

        Download synthesis sessions results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_synthesis_sessions_results_with_http_info(synthesis_session_id, synthesis_project_id, download_session_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param download_session_request: (required)
        :type download_session_request: DownloadSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Response200DownloadSynthesisSessionsResultsDsSynthesisSynthesisProjectIdSessionSynthesisSessionIdDownloadPost, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_session_id',
            'synthesis_project_id',
            'download_session_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_synthesis_sessions_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_session_id` when calling `download_synthesis_sessions_results`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `download_synthesis_sessions_results`")  # noqa: E501
        # verify the required parameter 'download_session_request' is set
        if self.api_client.client_side_validation and local_var_params.get('download_session_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `download_session_request` when calling `download_synthesis_sessions_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_session_id' in local_var_params:
            path_params['synthesis_session_id'] = local_var_params['synthesis_session_id']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'download_session_request' in local_var_params:
            body_params = local_var_params['download_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "Response200DownloadSynthesisSessionsResultsDsSynthesisSynthesisProjectIdSessionSynthesisSessionIdDownloadPost",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session/{synthesis_session_id}/download', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_results_presigned_url(self, synthesis_session_id, synthesis_download_id, synthesis_project_id, **kwargs):  # noqa: E501
        """state and presigned url for ZIP Download  # noqa: E501

        Get state and presigned url for sessions results ZIP download request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_results_presigned_url(synthesis_session_id, synthesis_download_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_download_id: Synthesis download ID (required)
        :type synthesis_download_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ZipDownloadPresignedUrlResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_results_presigned_url_with_http_info(synthesis_session_id, synthesis_download_id, synthesis_project_id, **kwargs)  # noqa: E501

    def get_results_presigned_url_with_http_info(self, synthesis_session_id, synthesis_download_id, synthesis_project_id, **kwargs):  # noqa: E501
        """state and presigned url for ZIP Download  # noqa: E501

        Get state and presigned url for sessions results ZIP download request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_results_presigned_url_with_http_info(synthesis_session_id, synthesis_download_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_download_id: Synthesis download ID (required)
        :type synthesis_download_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ZipDownloadPresignedUrlResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_session_id',
            'synthesis_download_id',
            'synthesis_project_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results_presigned_url" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_session_id` when calling `get_results_presigned_url`")  # noqa: E501
        # verify the required parameter 'synthesis_download_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_download_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_download_id` when calling `get_results_presigned_url`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_results_presigned_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_session_id' in local_var_params:
            path_params['synthesis_session_id'] = local_var_params['synthesis_session_id']  # noqa: E501
        if 'synthesis_download_id' in local_var_params:
            path_params['synthesis_download_id'] = local_var_params['synthesis_download_id']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ZipDownloadPresignedUrlResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session/{synthesis_session_id}/download/{synthesis_download_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_project_list(self, **kwargs):  # noqa: E501
        """Fetch list of synthesis project  # noqa: E501

        Fetch synthesis project list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_project_list(async_req=True)
        >>> result = thread.get()

        :param unarchived_only: Filter archived projects
        :type unarchived_only: bool
        :param search_key: Search by string
        :type search_key: str
        :param dataset_id: Filter by dataset id
        :type dataset_id: str
        :param project_id: Filter by project id
        :type project_id: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisProjectResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_project_list_with_http_info(**kwargs)  # noqa: E501

    def get_synthesis_project_list_with_http_info(self, **kwargs):  # noqa: E501
        """Fetch list of synthesis project  # noqa: E501

        Fetch synthesis project list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_project_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param unarchived_only: Filter archived projects
        :type unarchived_only: bool
        :param search_key: Search by string
        :type search_key: str
        :param dataset_id: Filter by dataset id
        :type dataset_id: str
        :param project_id: Filter by project id
        :type project_id: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisProjectResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'unarchived_only',
            'search_key',
            'dataset_id',
            'project_id',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_project_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('unarchived_only') is not None:  # noqa: E501
            query_params.append(('unarchived_only', local_var_params['unarchived_only']))  # noqa: E501
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('dataset_id') is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if local_var_params.get('project_id') is not None:  # noqa: E501
            query_params.append(('project_id', local_var_params['project_id']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisProjectResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_session_info(self, synthesis_session_id, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch details of one synthesis session  # noqa: E501

        Fetch details of single synthesis session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_session_info(synthesis_session_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionResponseOne
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_session_info_with_http_info(synthesis_session_id, synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_session_info_with_http_info(self, synthesis_session_id, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch details of one synthesis session  # noqa: E501

        Fetch details of single synthesis session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_session_info_with_http_info(synthesis_session_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionResponseOne, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_session_id',
            'synthesis_project_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_session_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_session_id` when calling `get_synthesis_session_info`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_session_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_session_id' in local_var_params:
            path_params['synthesis_session_id'] = local_var_params['synthesis_session_id']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionResponseOne",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session/{synthesis_session_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_sessions_details(self, synthesis_session_id, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch synthesis sessions results  # noqa: E501

        Fetch synthesis sessions details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_sessions_details(synthesis_session_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param file_name: prefix search with file name
        :type file_name: str
        :param sort_by: Sort by field
        :type sort_by: str
        :param descending: Sort in descending order
        :type descending: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionDetailedResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_sessions_details_with_http_info(synthesis_session_id, synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_sessions_details_with_http_info(self, synthesis_session_id, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch synthesis sessions results  # noqa: E501

        Fetch synthesis sessions details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_sessions_details_with_http_info(synthesis_session_id, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param file_name: prefix search with file name
        :type file_name: str
        :param sort_by: Sort by field
        :type sort_by: str
        :param descending: Sort in descending order
        :type descending: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionDetailedResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_session_id',
            'synthesis_project_id',
            'file_name',
            'sort_by',
            'descending',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_sessions_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_session_id` when calling `get_synthesis_sessions_details`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_sessions_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_session_id' in local_var_params:
            path_params['synthesis_session_id'] = local_var_params['synthesis_session_id']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []
        if local_var_params.get('file_name') is not None:  # noqa: E501
            query_params.append(('file_name', local_var_params['file_name']))  # noqa: E501
        if local_var_params.get('sort_by') is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if local_var_params.get('descending') is not None:  # noqa: E501
            query_params.append(('descending', local_var_params['descending']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionDetailedResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session/{synthesis_session_id}/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_sessions_list(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch list of synthesis sessions  # noqa: E501

        Fetch synthesis sessions list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_sessions_list(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param search_key: Search by string
        :type search_key: str
        :param state: Session state
        :type state: SynthesisSessionState
        :param session_type: Session type
        :type session_type: SynthesisSessionType
        :param synthesis_spec_version: Filter sessions by specific spec version
        :type synthesis_spec_version: int
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionResponseAll
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_sessions_list_with_http_info(synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_sessions_list_with_http_info(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch list of synthesis sessions  # noqa: E501

        Fetch synthesis sessions list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_sessions_list_with_http_info(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param search_key: Search by string
        :type search_key: str
        :param state: Session state
        :type state: SynthesisSessionState
        :param session_type: Session type
        :type session_type: SynthesisSessionType
        :param synthesis_spec_version: Filter sessions by specific spec version
        :type synthesis_spec_version: int
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionResponseAll, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'search_key',
            'state',
            'session_type',
            'synthesis_spec_version',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_sessions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_sessions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('state') is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if local_var_params.get('session_type') is not None:  # noqa: E501
            query_params.append(('session_type', local_var_params['session_type']))  # noqa: E501
        if local_var_params.get('synthesis_spec_version') is not None:  # noqa: E501
            query_params.append(('synthesis_spec_version', local_var_params['synthesis_spec_version']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionResponseAll",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_spec(self, version, synthesis_project_id, **kwargs):  # noqa: E501
        """get synthesis spec  # noqa: E501

        Get synthesis spec details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec(version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param version: Synthesis spec version (required)
        :type version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSpecResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_spec_with_http_info(version, synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_spec_with_http_info(self, version, synthesis_project_id, **kwargs):  # noqa: E501
        """get synthesis spec  # noqa: E501

        Get synthesis spec details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec_with_http_info(version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param version: Synthesis spec version (required)
        :type version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSpecResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'version',
            'synthesis_project_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_spec" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and local_var_params.get('version') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `get_synthesis_spec`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSpecResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/spec/{version}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_spec_list(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Synthesis spec list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec_list(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param state: Spec state
        :type state: SynthesisSpecState
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSpecListResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_spec_list_with_http_info(synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_spec_list_with_http_info(self, synthesis_project_id, **kwargs):  # noqa: E501
        """Synthesis spec list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec_list_with_http_info(synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param state: Spec state
        :type state: SynthesisSpecState
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSpecListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'state',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_spec_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_spec_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []
        if local_var_params.get('state') is not None:  # noqa: E501
            query_params.append(('state', local_var_params['state']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSpecListResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/spec', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_synthesis_spec_samples(self, spec_version, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch synthesis spec samples  # noqa: E501

        Fetch synthesis training session details for a spec version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec_samples(spec_version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param spec_version: Synthesis spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param file_name: prefix search with file name
        :type file_name: str
        :param sort_by: Sort by field
        :type sort_by: str
        :param descending: Sort in descending order
        :type descending: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GeneratedSamplesResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_synthesis_spec_samples_with_http_info(spec_version, synthesis_project_id, **kwargs)  # noqa: E501

    def get_synthesis_spec_samples_with_http_info(self, spec_version, synthesis_project_id, **kwargs):  # noqa: E501
        """Fetch synthesis spec samples  # noqa: E501

        Fetch synthesis training session details for a spec version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_synthesis_spec_samples_with_http_info(spec_version, synthesis_project_id, async_req=True)
        >>> result = thread.get()

        :param spec_version: Synthesis spec version (required)
        :type spec_version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param file_name: prefix search with file name
        :type file_name: str
        :param sort_by: Sort by field
        :type sort_by: str
        :param descending: Sort in descending order
        :type descending: bool
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GeneratedSamplesResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'spec_version',
            'synthesis_project_id',
            'file_name',
            'sort_by',
            'descending',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_synthesis_spec_samples" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'spec_version' is set
        if self.api_client.client_side_validation and local_var_params.get('spec_version') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `spec_version` when calling `get_synthesis_spec_samples`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `get_synthesis_spec_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'spec_version' in local_var_params:
            path_params['spec_version'] = local_var_params['spec_version']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []
        if local_var_params.get('file_name') is not None:  # noqa: E501
            query_params.append(('file_name', local_var_params['file_name']))  # noqa: E501
        if local_var_params.get('sort_by') is not None:  # noqa: E501
            query_params.append(('sort_by', local_var_params['sort_by']))  # noqa: E501
        if local_var_params.get('descending') is not None:  # noqa: E501
            query_params.append(('descending', local_var_params['descending']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "GeneratedSamplesResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/spec/{spec_version}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def synthesis_cleanup(self, **kwargs):  # noqa: E501
        """Cleanup synthesis  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.synthesis_cleanup(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.synthesis_cleanup_with_http_info(**kwargs)  # noqa: E501

    def synthesis_cleanup_with_http_info(self, **kwargs):  # noqa: E501
        """Cleanup synthesis  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.synthesis_cleanup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method synthesis_cleanup" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {}

        return self.api_client.call_api(
            '/ds/synthesis/cleanup', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_synthesis_project(self, synthesis_project_id, update_synthesis_project_request, **kwargs):  # noqa: E501
        """Update synthesis project  # noqa: E501

        Update synthesis project details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_project(synthesis_project_id, update_synthesis_project_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_project_request: (required)
        :type update_synthesis_project_request: UpdateSynthesisProjectRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisProjectResponseOne
        """
        kwargs['_return_http_data_only'] = True
        return self.update_synthesis_project_with_http_info(synthesis_project_id, update_synthesis_project_request, **kwargs)  # noqa: E501

    def update_synthesis_project_with_http_info(self, synthesis_project_id, update_synthesis_project_request, **kwargs):  # noqa: E501
        """Update synthesis project  # noqa: E501

        Update synthesis project details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_project_with_http_info(synthesis_project_id, update_synthesis_project_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_project_request: (required)
        :type update_synthesis_project_request: UpdateSynthesisProjectRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisProjectResponseOne, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_project_id',
            'update_synthesis_project_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_synthesis_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `update_synthesis_project`")  # noqa: E501
        # verify the required parameter 'update_synthesis_project_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_synthesis_project_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_synthesis_project_request` when calling `update_synthesis_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_synthesis_project_request' in local_var_params:
            body_params = local_var_params['update_synthesis_project_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisProjectResponseOne",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_synthesis_sessions_details(self, synthesis_session_id, synthesis_project_id, update_synthesis_session_request, **kwargs):  # noqa: E501
        """Update synthesis sessions details  # noqa: E501

        Update synthesis sessions details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_sessions_details(synthesis_session_id, synthesis_project_id, update_synthesis_session_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_session_request: (required)
        :type update_synthesis_session_request: UpdateSynthesisSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSessionSummaryResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_synthesis_sessions_details_with_http_info(synthesis_session_id, synthesis_project_id, update_synthesis_session_request, **kwargs)  # noqa: E501

    def update_synthesis_sessions_details_with_http_info(self, synthesis_session_id, synthesis_project_id, update_synthesis_session_request, **kwargs):  # noqa: E501
        """Update synthesis sessions details  # noqa: E501

        Update synthesis sessions details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_sessions_details_with_http_info(synthesis_session_id, synthesis_project_id, update_synthesis_session_request, async_req=True)
        >>> result = thread.get()

        :param synthesis_session_id: Synthesis session ID (required)
        :type synthesis_session_id: str
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_session_request: (required)
        :type update_synthesis_session_request: UpdateSynthesisSessionRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSessionSummaryResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'synthesis_session_id',
            'synthesis_project_id',
            'update_synthesis_session_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_synthesis_sessions_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'synthesis_session_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_session_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_session_id` when calling `update_synthesis_sessions_details`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `update_synthesis_sessions_details`")  # noqa: E501
        # verify the required parameter 'update_synthesis_session_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_synthesis_session_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_synthesis_session_request` when calling `update_synthesis_sessions_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'synthesis_session_id' in local_var_params:
            path_params['synthesis_session_id'] = local_var_params['synthesis_session_id']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_synthesis_session_request' in local_var_params:
            body_params = local_var_params['update_synthesis_session_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSessionSummaryResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/{synthesis_project_id}/session/{synthesis_session_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_synthesis_spec(self, version, synthesis_project_id, update_synthesis_spec_request, **kwargs):  # noqa: E501
        """update synthesis spec  # noqa: E501

        Update synthesis spec details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_spec(version, synthesis_project_id, update_synthesis_spec_request, async_req=True)
        >>> result = thread.get()

        :param version: Synthesis spec version (required)
        :type version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_spec_request: (required)
        :type update_synthesis_spec_request: UpdateSynthesisSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SynthesisSpecResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.update_synthesis_spec_with_http_info(version, synthesis_project_id, update_synthesis_spec_request, **kwargs)  # noqa: E501

    def update_synthesis_spec_with_http_info(self, version, synthesis_project_id, update_synthesis_spec_request, **kwargs):  # noqa: E501
        """update synthesis spec  # noqa: E501

        Update synthesis spec details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_synthesis_spec_with_http_info(version, synthesis_project_id, update_synthesis_spec_request, async_req=True)
        >>> result = thread.get()

        :param version: Synthesis spec version (required)
        :type version: int
        :param synthesis_project_id: Synthesis project ID (required)
        :type synthesis_project_id: str
        :param update_synthesis_spec_request: (required)
        :type update_synthesis_spec_request: UpdateSynthesisSpecRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SynthesisSpecResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'version',
            'synthesis_project_id',
            'update_synthesis_spec_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_synthesis_spec" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'version' is set
        if self.api_client.client_side_validation and local_var_params.get('version') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `version` when calling `update_synthesis_spec`")  # noqa: E501
        # verify the required parameter 'synthesis_project_id' is set
        if self.api_client.client_side_validation and local_var_params.get('synthesis_project_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `synthesis_project_id` when calling `update_synthesis_spec`")  # noqa: E501
        # verify the required parameter 'update_synthesis_spec_request' is set
        if self.api_client.client_side_validation and local_var_params.get('update_synthesis_spec_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_synthesis_spec_request` when calling `update_synthesis_spec`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in local_var_params:
            path_params['version'] = local_var_params['version']  # noqa: E501
        if 'synthesis_project_id' in local_var_params:
            path_params['synthesis_project_id'] = local_var_params['synthesis_project_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_synthesis_spec_request' in local_var_params:
            body_params = local_var_params['update_synthesis_spec_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PUT', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SynthesisSpecResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/synthesis/project/{synthesis_project_id}/spec/{version}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
