# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ImageServerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def image_server_rq_get_message(self, cluster_id, rabbit_mq_get_request, **kwargs):  # noqa: E501
        """Get a message from RPC queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_rq_get_message(cluster_id, rabbit_mq_get_request, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param rabbit_mq_get_request: (required)
        :type rabbit_mq_get_request: RabbitMQGetRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RabbitMQGetResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.image_server_rq_get_message_with_http_info(cluster_id, rabbit_mq_get_request, **kwargs)  # noqa: E501

    def image_server_rq_get_message_with_http_info(self, cluster_id, rabbit_mq_get_request, **kwargs):  # noqa: E501
        """Get a message from RPC queue  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_rq_get_message_with_http_info(cluster_id, rabbit_mq_get_request, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param rabbit_mq_get_request: (required)
        :type rabbit_mq_get_request: RabbitMQGetRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RabbitMQGetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'cluster_id',
            'rabbit_mq_get_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_server_rq_get_message" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and local_var_params.get('cluster_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `cluster_id` when calling `image_server_rq_get_message`")  # noqa: E501
        # verify the required parameter 'rabbit_mq_get_request' is set
        if self.api_client.client_side_validation and local_var_params.get('rabbit_mq_get_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rabbit_mq_get_request` when calling `image_server_rq_get_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in local_var_params:
            path_params['cluster_id'] = local_var_params['cluster_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rabbit_mq_get_request' in local_var_params:
            body_params = local_var_params['rabbit_mq_get_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "RabbitMQGetResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            422: "GetErrorResponse",
            500: "GetErrorResponse",
            501: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/image-server/{cluster_id}/queue/get_message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def image_server_rq_publish_message(self, cluster_id, rabbit_mq_publish_request, **kwargs):  # noqa: E501
        """Publish a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_rq_publish_message(cluster_id, rabbit_mq_publish_request, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param rabbit_mq_publish_request: (required)
        :type rabbit_mq_publish_request: RabbitMQPublishRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessMessage
        """
        kwargs['_return_http_data_only'] = True
        return self.image_server_rq_publish_message_with_http_info(cluster_id, rabbit_mq_publish_request, **kwargs)  # noqa: E501

    def image_server_rq_publish_message_with_http_info(self, cluster_id, rabbit_mq_publish_request, **kwargs):  # noqa: E501
        """Publish a message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_rq_publish_message_with_http_info(cluster_id, rabbit_mq_publish_request, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param rabbit_mq_publish_request: (required)
        :type rabbit_mq_publish_request: RabbitMQPublishRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessMessage, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'cluster_id',
            'rabbit_mq_publish_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_server_rq_publish_message" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and local_var_params.get('cluster_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `cluster_id` when calling `image_server_rq_publish_message`")  # noqa: E501
        # verify the required parameter 'rabbit_mq_publish_request' is set
        if self.api_client.client_side_validation and local_var_params.get('rabbit_mq_publish_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `rabbit_mq_publish_request` when calling `image_server_rq_publish_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in local_var_params:
            path_params['cluster_id'] = local_var_params['cluster_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rabbit_mq_publish_request' in local_var_params:
            body_params = local_var_params['rabbit_mq_publish_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "SuccessMessage",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            422: "GetErrorResponse",
            500: "GetErrorResponse",
            501: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/image-server/{cluster_id}/queue/publish_message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def image_server_upload_image(self, cluster_id, image_key, image, **kwargs):  # noqa: E501
        """Uploaded an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_upload_image(cluster_id, image_key, image, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param image_key: (required)
        :type image_key: str
        :param image: (required)
        :type image: file
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param metadata:
        :type metadata: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ImageServerUploadResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.image_server_upload_image_with_http_info(cluster_id, image_key, image, **kwargs)  # noqa: E501

    def image_server_upload_image_with_http_info(self, cluster_id, image_key, image, **kwargs):  # noqa: E501
        """Uploaded an image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_server_upload_image_with_http_info(cluster_id, image_key, image, async_req=True)
        >>> result = thread.get()

        :param cluster_id: Image Server Cluster ID (required)
        :type cluster_id: str
        :param image_key: (required)
        :type image_key: str
        :param image: (required)
        :type image: file
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param metadata:
        :type metadata: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ImageServerUploadResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'cluster_id',
            'image_key',
            'image',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role',
            'metadata'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method image_server_upload_image" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if self.api_client.client_side_validation and local_var_params.get('cluster_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `cluster_id` when calling `image_server_upload_image`")  # noqa: E501
        # verify the required parameter 'image_key' is set
        if self.api_client.client_side_validation and local_var_params.get('image_key') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `image_key` when calling `image_server_upload_image`")  # noqa: E501
        # verify the required parameter 'image' is set
        if self.api_client.client_side_validation and local_var_params.get('image') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `image` when calling `image_server_upload_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cluster_id' in local_var_params:
            path_params['cluster_id'] = local_var_params['cluster_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'image_key' in local_var_params:
            form_params.append(('image_key', local_var_params['image_key']))  # noqa: E501
        if 'metadata' in local_var_params:
            form_params.append(('metadata', local_var_params['metadata']))  # noqa: E501
        if 'image' in local_var_params:
            local_var_files['image'] = local_var_params['image']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ImageServerUploadResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            422: "GetErrorResponse",
            500: "GetErrorResponse",
            501: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/image-server/{cluster_id}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def register_image_server(self, register_image_server_request, **kwargs):  # noqa: E501
        """Register a new Image Server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_image_server(register_image_server_request, async_req=True)
        >>> result = thread.get()

        :param register_image_server_request: (required)
        :type register_image_server_request: RegisterImageServerRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RegisterImageServerResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.register_image_server_with_http_info(register_image_server_request, **kwargs)  # noqa: E501

    def register_image_server_with_http_info(self, register_image_server_request, **kwargs):  # noqa: E501
        """Register a new Image Server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_image_server_with_http_info(register_image_server_request, async_req=True)
        >>> result = thread.get()

        :param register_image_server_request: (required)
        :type register_image_server_request: RegisterImageServerRequest
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RegisterImageServerResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'register_image_server_request',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_image_server" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'register_image_server_request' is set
        if self.api_client.client_side_validation and local_var_params.get('register_image_server_request') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `register_image_server_request` when calling `register_image_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'register_image_server_request' in local_var_params:
            body_params = local_var_params['register_image_server_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "RegisterImageServerResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            422: "GetErrorResponse",
            500: "GetErrorResponse",
            501: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/image-server', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
