# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from akridata_dsp.api_client import ApiClient
from akridata_dsp.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ScenarioExecutionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_scenario_execution(self, create_scenario_execution, **kwargs):  # noqa: E501
        """Create new scenario execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_scenario_execution(create_scenario_execution, async_req=True)
        >>> result = thread.get()

        :param create_scenario_execution: (required)
        :type create_scenario_execution: CreateScenarioExecution
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExecutionID
        """
        kwargs['_return_http_data_only'] = True
        return self.create_scenario_execution_with_http_info(create_scenario_execution, **kwargs)  # noqa: E501

    def create_scenario_execution_with_http_info(self, create_scenario_execution, **kwargs):  # noqa: E501
        """Create new scenario execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_scenario_execution_with_http_info(create_scenario_execution, async_req=True)
        >>> result = thread.get()

        :param create_scenario_execution: (required)
        :type create_scenario_execution: CreateScenarioExecution
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExecutionID, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'create_scenario_execution',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_scenario_execution" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'create_scenario_execution' is set
        if self.api_client.client_side_validation and local_var_params.get('create_scenario_execution') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_scenario_execution` when calling `create_scenario_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_scenario_execution' in local_var_params:
            body_params = local_var_params['create_scenario_execution']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'POST', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ExecutionID",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            422: "GetErrorResponse",
            500: "GetErrorResponse",
        }

        return self.api_client.call_api(
            '/ds/scenario-executions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_scenario_executions(self, execution_id, **kwargs):  # noqa: E501
        """Deletes the scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_scenario_executions(execution_id, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_scenario_executions_with_http_info(execution_id, **kwargs)  # noqa: E501

    def delete_scenario_executions_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Deletes the scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_scenario_executions_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'execution_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scenario_executions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and local_var_params.get('execution_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `delete_scenario_executions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in local_var_params:
            path_params['execution_id'] = local_var_params['execution_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "object",
            204: None,
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/scenario-executions/{execution_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_scenario_execution(self, execution_id, **kwargs):  # noqa: E501
        """Get single scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scenario_execution(execution_id, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ScenarioExecutionDetailResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_scenario_execution_with_http_info(execution_id, **kwargs)  # noqa: E501

    def get_scenario_execution_with_http_info(self, execution_id, **kwargs):  # noqa: E501
        """Get single scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scenario_execution_with_http_info(execution_id, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ScenarioExecutionDetailResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'execution_id',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scenario_execution" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and local_var_params.get('execution_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `get_scenario_execution`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in local_var_params:
            path_params['execution_id'] = local_var_params['execution_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ScenarioExecutionDetailResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/scenario-executions/{execution_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def list_scenario_executions(self, **kwargs):  # noqa: E501
        """Get scenario_execution list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_scenario_executions(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param search_key: Search string
        :type search_key: str
        :param scenario_id: Scenario ID
        :type scenario_id: str
        :param status: Status
        :type status: str
        :param order_by: Order by
        :type order_by: str
        :param order: Order
        :type order: str
        :param my_searches: My Searches
        :type my_searches: bool
        :param global_search_only: Show executions created by global search only
        :type global_search_only: bool
        :param pipeline_id: Pipeline ID
        :type pipeline_id: str
        :param unarchived_only: Show executions that are not archived
        :type unarchived_only: bool
        :param created_by: Created by
        :type created_by: str
        :param vseq_requests: Show searches with VSeq enabled/disabled
        :type vseq_requests: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ScenarioExecutionListResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.list_scenario_executions_with_http_info(**kwargs)  # noqa: E501

    def list_scenario_executions_with_http_info(self, **kwargs):  # noqa: E501
        """Get scenario_execution list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_scenario_executions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param dataset_id: Dataset ID
        :type dataset_id: str
        :param search_key: Search string
        :type search_key: str
        :param scenario_id: Scenario ID
        :type scenario_id: str
        :param status: Status
        :type status: str
        :param order_by: Order by
        :type order_by: str
        :param order: Order
        :type order: str
        :param my_searches: My Searches
        :type my_searches: bool
        :param global_search_only: Show executions created by global search only
        :type global_search_only: bool
        :param pipeline_id: Pipeline ID
        :type pipeline_id: str
        :param unarchived_only: Show executions that are not archived
        :type unarchived_only: bool
        :param created_by: Created by
        :type created_by: str
        :param vseq_requests: Show searches with VSeq enabled/disabled
        :type vseq_requests: str
        :param page_number:
        :type page_number: int
        :param page_size:
        :type page_size: int
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ScenarioExecutionListResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'dataset_id',
            'search_key',
            'scenario_id',
            'status',
            'order_by',
            'order',
            'my_searches',
            'global_search_only',
            'pipeline_id',
            'unarchived_only',
            'created_by',
            'vseq_requests',
            'page_number',
            'page_size',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_scenario_executions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if local_var_params.get('dataset_id') is not None:  # noqa: E501
            query_params.append(('dataset_id', local_var_params['dataset_id']))  # noqa: E501
        if local_var_params.get('search_key') is not None:  # noqa: E501
            query_params.append(('search_key', local_var_params['search_key']))  # noqa: E501
        if local_var_params.get('scenario_id') is not None:  # noqa: E501
            query_params.append(('scenario_id', local_var_params['scenario_id']))  # noqa: E501
        if local_var_params.get('status') is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if local_var_params.get('order_by') is not None:  # noqa: E501
            query_params.append(('order_by', local_var_params['order_by']))  # noqa: E501
        if local_var_params.get('order') is not None:  # noqa: E501
            query_params.append(('order', local_var_params['order']))  # noqa: E501
        if local_var_params.get('my_searches') is not None:  # noqa: E501
            query_params.append(('my_searches', local_var_params['my_searches']))  # noqa: E501
        if local_var_params.get('global_search_only') is not None:  # noqa: E501
            query_params.append(('global_search_only', local_var_params['global_search_only']))  # noqa: E501
        if local_var_params.get('pipeline_id') is not None:  # noqa: E501
            query_params.append(('pipeline_id', local_var_params['pipeline_id']))  # noqa: E501
        if local_var_params.get('unarchived_only') is not None:  # noqa: E501
            query_params.append(('unarchived_only', local_var_params['unarchived_only']))  # noqa: E501
        if local_var_params.get('created_by') is not None:  # noqa: E501
            query_params.append(('created_by', local_var_params['created_by']))  # noqa: E501
        if local_var_params.get('vseq_requests') is not None:  # noqa: E501
            query_params.append(('vseq_requests', local_var_params['vseq_requests']))  # noqa: E501
        if local_var_params.get('page_number') is not None:  # noqa: E501
            query_params.append(('pageNumber', local_var_params['page_number']))  # noqa: E501
        if local_var_params.get('page_size') is not None:  # noqa: E501
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "ScenarioExecutionListResponse",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/scenario-executions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_scenario_executions(self, execution_id, scenario_execution_attributes, **kwargs):  # noqa: E501
        """Updates the scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_scenario_executions(execution_id, scenario_execution_attributes, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param scenario_execution_attributes: (required)
        :type scenario_execution_attributes: ScenarioExecutionAttributes
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        return self.update_scenario_executions_with_http_info(execution_id, scenario_execution_attributes, **kwargs)  # noqa: E501

    def update_scenario_executions_with_http_info(self, execution_id, scenario_execution_attributes, **kwargs):  # noqa: E501
        """Updates the scenario_execution  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_scenario_executions_with_http_info(execution_id, scenario_execution_attributes, async_req=True)
        >>> result = thread.get()

        :param execution_id: Scenario Execution ID (required)
        :type execution_id: str
        :param scenario_execution_attributes: (required)
        :type scenario_execution_attributes: ScenarioExecutionAttributes
        :param x_akri_auth:
        :type x_akri_auth: str
        :param akri_org_name:
        :type akri_org_name: str
        :param akri_app_mode:
        :type akri_app_mode: str
        :param x_api_key:
        :type x_api_key: str
        :param x_akri_workspace:
        :type x_akri_workspace: str
        :param authorization:
        :type authorization: str
        :param x_akri_user_role:
        :type x_akri_user_role: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'execution_id',
            'scenario_execution_attributes',
            'x_akri_auth',
            'akri_org_name',
            'akri_app_mode',
            'x_api_key',
            'x_akri_workspace',
            'authorization',
            'x_akri_user_role'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scenario_executions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'execution_id' is set
        if self.api_client.client_side_validation and local_var_params.get('execution_id') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `execution_id` when calling `update_scenario_executions`")  # noqa: E501
        # verify the required parameter 'scenario_execution_attributes' is set
        if self.api_client.client_side_validation and local_var_params.get('scenario_execution_attributes') is None:  # noqa: E501
            raise ApiValueError("Missing the required parameter `scenario_execution_attributes` when calling `update_scenario_executions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'execution_id' in local_var_params:
            path_params['execution_id'] = local_var_params['execution_id']  # noqa: E501

        query_params = []

        header_params = dict(local_var_params.get('_headers', {}))
        if 'x_akri_auth' in local_var_params:
            header_params['X-AKRI-AUTH'] = local_var_params['x_akri_auth']  # noqa: E501
        if 'akri_org_name' in local_var_params:
            header_params['AKRI-ORG-NAME'] = local_var_params['akri_org_name']  # noqa: E501
        if 'akri_app_mode' in local_var_params:
            header_params['AKRI-APP-MODE'] = local_var_params['akri_app_mode']  # noqa: E501
        if 'x_api_key' in local_var_params:
            header_params['X-API-KEY'] = local_var_params['x_api_key']  # noqa: E501
        if 'x_akri_workspace' in local_var_params:
            header_params['X-AKRI-WORKSPACE'] = local_var_params['x_akri_workspace']  # noqa: E501
        if 'authorization' in local_var_params:
            header_params['authorization'] = local_var_params['authorization']  # noqa: E501
        if 'x_akri_user_role' in local_var_params:
            header_params['X-AKRI-USER-ROLE'] = local_var_params['x_akri_user_role']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scenario_execution_attributes' in local_var_params:
            body_params = local_var_params['scenario_execution_attributes']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        content_types_list = local_var_params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json'],
                'PATCH', body_params))  # noqa: E501
        if content_types_list:
                header_params['Content-Type'] = content_types_list

        # Authentication setting
        auth_settings = []  # noqa: E501

        response_types_map = {
            200: "object",
            400: "GetErrorResponse",
            401: "GetErrorResponse",
            404: "GetErrorResponse",
            500: "GetErrorResponse",
            422: "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/ds/scenario-executions/{execution_id}/attributes', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
