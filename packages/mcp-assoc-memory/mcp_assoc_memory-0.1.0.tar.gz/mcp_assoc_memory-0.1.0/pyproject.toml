[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-assoc-memory"
version = "0.1.0"
description = "Associative Memory MCP Server for LLMs - Knowledge management system with hierarchical scope organization"
authors = [
    {name = "Makoto Katsumata", email = "mako10k@mk10.org"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "llm", "memory", "associative", "vector", "embedding"]

dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "chromadb>=0.4.0",
    "openai>=1.0.0",
    "sentence-transformers>=2.2.0",
    "networkx>=3.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "SQLAlchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "python-multipart>=0.0.6",
    "pyjwt>=2.8.0",
    "bcrypt>=4.0.0",
    "python-dotenv>=1.0.0",
    "jinja2>=3.1.0",
    "graphviz>=0.20.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "radon>=6.0.0",
    "codecov>=2.1.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
]

production = [
    "psycopg2-binary>=2.9.0",
    "redis>=4.5.0",
    "prometheus-client>=0.17.0",
]

[project.urls]
Homepage = "https://github.com/mako10k/mcp-assoc-memory"
Repository = "https://github.com/mako10k/mcp-assoc-memory"
Documentation = "https://github.com/mako10k/mcp-assoc-memory/blob/main/README.md"
Issues = "https://github.com/mako10k/mcp-assoc-memory/issues"

[project.scripts]
mcp-assoc-memory = "mcp_assoc_memory.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["chromadb.*", "networkx.*", "graphviz.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
markers = [
    "asyncio: mark tests as async",
    "unit: mark tests as unit tests",
    "integration: mark tests as integration tests", 
    "e2e: mark tests as end-to-end tests",
    "slow: mark tests as slow running",
    "performance: mark tests as performance tests"
]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
