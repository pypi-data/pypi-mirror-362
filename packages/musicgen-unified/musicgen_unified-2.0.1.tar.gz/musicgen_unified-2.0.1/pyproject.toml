[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "musicgen-unified"
version = "2.0.1"
description = "Simple, clean instrumental music generation with MusicGen"
readme = "README.md"
authors = [{name = "Bright Liu", email = "brightliu@college.harvard.edu"}]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.26.0,<2.0",  # Pin to NumPy 1.26.x to avoid compatibility issues
    "scipy>=1.14.0,<2.0",  # Compatible SciPy version for NumPy 1.26.x - CRITICAL for ufunc compatibility
    "torch>=2.2.0",  # Use PyTorch 2.2+ for better NumPy compatibility
    "transformers>=4.43.0",  # Use transformers 4.43+ which supports both NumPy 1.x and 2.x
    "scikit-learn>=1.3.0",  # Ensure sklearn is compatible with NumPy/SciPy
    "soundfile>=0.12.0",
    "librosa>=0.10.0",
    "pydub>=0.25.0",
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "pandas>=2.0.0",  # Modern pandas works well with NumPy 1.26
]

[project.urls]
Homepage = "https://github.com/Bright-L01/musicgen-unified"
Documentation = "https://github.com/Bright-L01/musicgen-unified#readme"
Repository = "https://github.com/Bright-L01/musicgen-unified"
Issues = "https://github.com/Bright-L01/musicgen-unified/issues"

[project.optional-dependencies]
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "python-multipart>=0.0.6",
]
web = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "python-semantic-release>=8.0.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
]
gpu = [
    "flash-attn>=2.0.0",
    "xformers>=0.0.20",
]

[project.scripts]
musicgen = "musicgen.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "-v --cov=src/musicgen --cov-report=term-missing"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.semantic_release]
version_variables = [
    "src/musicgen/__init__.py:__version__",
    "pyproject.toml:version"
]
version_toml = [
    "pyproject.toml:project.version"
]
version_source = "tag"
commit_version_number = true
commit_subject = "chore(release): v{version}"
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"
tag_format = "v{version}"
build_command = "pip install build && python -m build"
upload_to_pypi = true
upload_to_release = true
remove_dist = false
major_on_zero = false
branch = "main"
hvcs = "github"
hvcs_domain = "github.com"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^build:",
    "^chore:",
    "^ci:",
    "^docs:",
    "^style:",
    "^test:",
    "^refactor:",
    "Merge pull request",
    "Merge branch",
    "^WIP",
    "^wip"
]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test"
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_message = "fix: patch release"

[tool.semantic_release.remote]
name = "origin"
token = { env = "GITHUB_TOKEN" }

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.commitizen]
name = "cz_conventional_commits"
version = "2.0.0"
version_files = [
    "src/musicgen/__init__.py:__version__",
    "pyproject.toml:version"
]
update_changelog_on_bump = true
tag_format = "v$version"
bump_message = "chore(release): v$new_version"