Metadata-Version: 2.4
Name: quantalyze
Version: 0.1.7
Summary: Utility functions for analyzing scientific data.
Project-URL: Homepage, https://github.com/jakeayres/Quantalyze
Project-URL: Documentation, https://quantalyze.readthedocs.io/en/latest/
Project-URL: Repository, https://github.com/jakeayres/Quantalyze.git
Project-URL: Issues, https://github.com/jakeayres/Quantalyze/issues
License-Expression: MIT
License-File: LICENSE
Requires-Python: >=3.9
Requires-Dist: matplotlib>=3.9.4
Requires-Dist: mkdocs-material>=9.6.9
Requires-Dist: mkdocstrings-python>=1.16.8
Requires-Dist: numpy>=2.0.2
Requires-Dist: pandas>=2.2.3
Requires-Dist: pytest>=8.3.5
Requires-Dist: scipy>=1.13.1
Description-Content-Type: text/markdown

<figure markdown="span">
  ![Quantalyze](docs/logo.png){ width="400" }
</figure>


<p align="center">
<a href=""><img src="https://img.shields.io/pypi/pyversions/quantalyze" alt="Python versions"></a>
<a href="https://quantalyze.readthedocs.io/en/latest/?badge=latest"><img src="https://readthedocs.org/projects/quantalyze/badge/?version=latest" alt="Documentation Status"></a>
<a href="https://pypi.org/project/quantalyze/"><img src="https://shields.io/pypi/v/quantalyze" alt="PyPI"></a>
</p>

If your analysis and visualization workflow is some combination of `pandas`, `numpy`, `scipy` and `matplotlib`, it is likely that `quantalyze` can save you a lot of time. `Quantalyze` is a set of utility functions that facilitate the analysis of scientific data in the fields of quantum matter and correlated electron systems. Most of the operations are designed to work on `pandas.DataFrame` objects and functionality is pulled from a combination of `numpy`, `scipy`.

Non-domain-specific functionality is contained within the `core` module. Domain-specific utilities are contained within their respective modules and import from the `core` module. For example, the `transport` module contains a function that calculates the magnetoresistance from resistivity data taken in magnetic fields that pulls its functionality from `core.smoothing` (binning onto equally spaced x values) and `core.symmetrization` (the symmetrization in field).