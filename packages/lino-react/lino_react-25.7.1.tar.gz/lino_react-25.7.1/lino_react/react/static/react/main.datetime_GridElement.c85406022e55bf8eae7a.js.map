{"version":3,"file":"main.datetime_GridElement.c85406022e55bf8eae7a.js","mappings":"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","sources":["webpack://lino_react/./lino_react/react/components/LinoComponentUtils.jsx","webpack://lino_react/./lino_react/react/components/datetime.jsx"],"sourcesContent":["export const name = \"LinoComponentUtils\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { RegisterImportPool, getExReady, Component, DataContextType } from \"./Base\";\n\nimport * as constants from \"./constants\";\n\n\nlet ex; const exModulePromises = ex = {\n    classNames: import(/* webpackChunkName: \"classNames_LinoComponentUtils\" */\"classnames\"),\n    prDropdown: import(/* webpackChunkName: \"prDropdown_LinoComponentUtils\" */\"primereact/dropdown\"),\n    prInputText: import(/* webpackChunkName: \"prInputText_LinoComponentUtils\" */\"primereact/inputtext\"),\n    queryString: import(/* webpackChunkName: \"queryString_LinoComponentUtils\" */\"query-string\"),\n    u: import(/* webpackChunkName: \"LinoUtils_LinoComponentUtils\" */\"./LinoUtils\"),\n};RegisterImportPool(ex);\n\n\nexport function maintainTableWidth(elem, count) {\n    let ctx;\n    if (elem !== undefined) ctx = elem\n    else ctx = this;\n    let keys = Object.keys(ctx.flexs),\n        fo_conditional = count !== undefined ? keys.length === count : keys.length > 1;\n    if (fo_conditional) {\n        keys.forEach(key => {\n            var tbl = document.getElementById(key)\n                .getElementsByClassName('p-datatable');\n            if (tbl.length === 1) {\n                tbl = tbl[0]\n                let width = tbl.getBoundingClientRect().width / document\n                    .getElementsByClassName('layout-topbar')[0]\n                    .getBoundingClientRect().width;\n                if (width > ctx.flexs[key]) {\n                    Array.from(tbl.querySelectorAll(\n                        '.p-datatable table')).forEach(el => {\n                            if (Array.from(el.classList).join(' ')\n                                .includes('p-datatable')) el.style\n                                    .setProperty('table-layout', 'auto');\n                        });\n                }\n            }\n        });\n    }\n}\n\n\nexport const Labeled = ({\n    actions = [], label, elem, children,\n    hide_label = false, isFilled = false,\n}) => {\n    const localEx = getExReady(ex, ['classNames']);\n    label = label || elem.label;\n    return !localEx.ready ? null : <React.Fragment>\n        {!hide_label && label && <React.Fragment>\n            <label\n                className={localEx.classNames.default(\n                    \"l-label\", \"l-span-clickable\",\n                    {\"l-label--unfilled\": !isFilled},\n                )}\n                title={Object.assign({}, elem.value || {}).quicktip\n                    || elem.help_text}>\n                    {label}\n                    {actions.map((action, i) => <React.Fragment key={i}>\n                        &nbsp;|&nbsp;\n                        <span\n                            className=\"l-span-clickable\"\n                            onClick={e => action.run(e)}>\n                            {action.label}</span></React.Fragment>)}:</label>\n            <br/>\n        </React.Fragment>}\n        {children}\n    </React.Fragment>\n}\n\n\nLabeled.propTypes = {\n    actions: PropTypes.array,\n    label: PropTypes.string,\n    elem: PropTypes.object.isRequired,\n    hide_label: PropTypes.bool,\n    isFilled: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n}\n\n\nexport class ABCComponent {\n    static getValueByName({name, props, context}) {\n        if (props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return context.param_values[name];\n        return props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? context.rows[props.column.rowIndex][name]\n            : props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS\n                ? context[name] : context.data[name];\n    }\n}\n\n\nexport class LeafComponentBase extends Component {\n    static requiredModules = [\"classNames\"];\n    static iPool = ex;\n    static contextType = DataContextType;\n    static propTypesFromLinoLayout = {\n        column: PropTypes.object,\n        editing_mode: PropTypes.bool,\n        hide_label: PropTypes.bool,\n        [constants.URL_PARAM_WINDOW_TYPE]: PropTypes.oneOf([\n            constants.WINDOW_TYPE_TABLE,\n            constants.WINDOW_TYPE_DETAIL,\n            constants.WINDOW_TYPE_CARDS,\n            constants.WINDOW_TYPE_GALLERIA,\n            constants.WINDOW_TYPE_INSERT,\n            constants.WINDOW_TYPE_PARAMS,\n            constants.WINDOW_TYPE_UNKNOWN,\n        ]),\n        tabIndex: PropTypes.number.isRequired,\n    }\n\n    static propTypes = {\n        ...LeafComponentBase.propTypesFromLinoLayout,\n        elem: PropTypes.object.isRequired,\n        urlParams: PropTypes.object.isRequired,\n    }\n\n    static defaultProps = {\n        editing_mode: false,\n        hide_label: false,\n        [constants.URL_PARAM_WINDOW_TYPE]: constants.WINDOW_TYPE_UNKNOWN,\n    }\n\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses = []\n        this.dataKey = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index : props.elem.name;\n        this.upController = props.urlParams.controller;\n        this.c = props.urlParams.controller;\n\n        this.filled = this.filled.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.getValueByName = this.getValueByName.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n        this.setLeafRef = this.setLeafRef.bind(this);\n    }\n\n    filled = () => (![\"\", null, undefined].includes(this.getValue()));\n\n    getValueByName(name) {\n        return ABCComponent.getValueByName({\n            name: name, props: this.props, context: this.context});\n    }\n\n    getValue() {\n        return this.getValueByName(this.dataKey);\n    }\n\n    innerHTML(dangerous, style={}) {\n        let v = this.getValue() || \"\\u00a0\";\n        if (v instanceof Object) v = JSON.stringify(v);\n        if (dangerous) {\n            return <div style={style} dangerouslySetInnerHTML={{__html: v}}/>\n        } else {\n            return <div style={style}>{v}</div>\n        }\n    }\n\n    setLeafRef({input=false, type=\"\"} = {}) {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n        ) {\n            this.upController.dataContext.setLeafRef({\n                name: type === 'slave' ? this.actorID\n                    : this.props.elem.name, ref: this, input: input, type: type});\n            const {controller} = this.props.urlParams;\n            controller.onLeafMount();\n        }\n    }\n}\n\n\nexport class LeafComponentDelayedValue extends LeafComponentBase {\n    static requiredModules = [\"queryString\"].concat(LeafComponentBase.requiredModules);\n    static propTypes = {\n        ...LeafComponentBase.propTypes,\n        hasOwnContext: PropTypes.bool.isRequired\n    }\n    static defaultProps = {\n        ...LeafComponentBase.defaultProps,\n        hasOwnContext: false\n    }\n    constructor(props, context) {\n        super(props, context);\n        const masterRelate = {}\n        if (!props.hasOwnContext) Object.assign(masterRelate,\n            this.upController.actionHandler.masterRelateForSlave());\n        this.state = {\n            ...this.state, value: null, data_url: null, ...masterRelate}\n        this.actorID = props.elem.actor_id || (props.elem.name.includes('.')\n            ? props.elem.name : `${props.urlParams.packId}.${props.elem.name}`);\n\n        this.delayed = props.elem.delayed_value;\n\n        this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);\n        this.getData = this.getData.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    onReady() {\n        let val = super.getValue();\n        if (this.delayed) {\n            if (!this.props.hasOwnContext) this.setLeafRef({type: 'slave'});\n            this.upController.globals.panels[this.actorID] = this;\n            if (val !== null) this.getData(val.delayed_value_url)\n            else this.setState({value: \"\\u00a0\", data_url: undefined});\n        } else {\n            this.setState({value: val});\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState, context) {\n        const val = super.getValue();\n        let update;\n        if (!this.delayed) update = this.state.value !== nextState.value\n        // state.value is null when fetch in progress otherwise state.value is \"\\u00a0\"\n        else update = this.state.value !== nextState.value || (this.state.value !== null &&\n            (val || {}).delayed_value_url !== this.state.data_url);\n        return update;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const val = super.getValue();\n        if (this.delayed) {\n            if (this.state.data_url !== (val || {}).delayed_value_url) {\n                this.setState({value: null});\n                if (val !== null) this.update()\n                else this.setState({value: \"\\u00a0\", data_url: undefined});\n            }\n        } else this.setState({value: val});\n    }\n\n    componentWillUnmount() {\n        delete this.upController.globals.panels[this.actorID];\n    }\n\n    getValue() {\n        return this.state.value;\n    }\n\n    getData(data_url) {\n        this.upController.actionHandler.silentFetch({\n            // path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.commonParams())}`\n            path: `${data_url}?${this.ex.queryString.default.stringify(this.upController.actionHandler.getParams())}`\n        }).then((data) => {\n            this.setState({value: data.data, buttons: data.buttons, data_url: data_url});\n        });\n    }\n\n    liveUpdate = (params) => {\n        if (params.mk === null ||\n            (params.mk === this.state.mk && params.mt === this.state.mt)\n        ) this.update();\n    }\n\n    update() {\n        this.getData(super.getValue().delayed_value_url);\n    }\n}\n\n\nexport class LeafComponentInput extends LeafComponentBase {\n    static requiredModules = [\"prInputText\", \"u\"].concat(LeafComponentBase.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            ...this.state,\n            textSelected: false\n        }\n\n        this.styleClasses = [\n            \"disabled-input\",\n            \"l-card\",\n            \"unsaved-modification\",\n        ]\n\n        this.disabled = this.disabled.bind(this);\n        this.filled = this.filled.bind(this);\n        this.focus = this.focus.bind(this);\n        this.getCellStyleClasses = this.getCellStyleClasses.bind(this);\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.onChangeUpdate = this.onChangeUpdate.bind(this);\n        this.onInputRef = this.onInputRef.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onRef = this.onRef.bind(this);\n        this.setCellStyle = this.setCellStyle.bind(this);\n        this.submit = this.submit.bind(this);\n        this.tabIndexMatch = this.tabIndexMatch.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    async prepare() {\n        this.inputState = {\n            inputComponent: this.ex.prInputText.InputText,\n            inputOnly: false,\n            inputProps: {},\n            onChangeUpdateAssert: (event) => (true),\n            postOnChange: (event) => (null),\n        }\n        this.setLeafRef({input: true});\n    }\n\n    disabled() {\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_CARDS)\n            return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_PARAMS)\n            return false;\n        if (!this.props.elem.editable) return true;\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            let row = this.context.rows[this.props.column.rowIndex],\n                last_item = row[row.length - 1];\n\n            // No meta, assume not disabled;\n            if (!last_item || !last_item.meta || last_item.phantom) return false;\n            // disable_editing set to true;\n            if (row[row.length - 2]) return true;\n            // check name in the disabled_fields meta;\n            return row[row.length - 3][this.props.elem.name] || false;\n        } else {\n            if (this.context.data.disable_editing) return true;\n            return this.context.data.disabled_fields[this.props.elem.name] || false;\n        }\n    }\n\n    /**\n     * Find HTML input element\n     */\n    findHTMLInputElement(ref) {\n        if (ref.focusInput) ref = ref.focusInput\n        else if (ref.inputRef) ref = ref.inputRef.current\n        else if (ref.hasOwnProperty('getInput')) ref = ref.getInput();\n        return ref;\n    }\n\n    select(input) {\n        const _select = (_input) => {\n            this.state.textSelected = true;\n            _input.select();\n        }\n        if (input.select) {_select(input); return}\n        if (this.container) input = this.container.getElementsByTagName('input')[0];\n        if (input && input.select) _select(input);\n    }\n\n    focus() {\n        let ref = this.findHTMLInputElement(this.inputEl), input;\n        if (ref && ref.focus) {\n            ref.focus()\n            this.select(ref);\n        }\n    }\n\n    getCellStyleClasses() {\n        let styleClasses = [];\n        if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n            if (this.context.modifiedRows[this.props.column.rowIndex].includes(\n                this.props.elem.fields_index\n            )) {\n                styleClasses.push(\"unsaved-modification\");\n            }\n        } else {\n            styleClasses.push('l-card');\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_CARDS) {\n                if (this.disabled()) styleClasses.push(\"disabled-input\")\n                else if (this.context.modified.includes(this.props.elem.name))\n                    styleClasses.push(\"unsaved-modification\");\n            }\n        }\n        return styleClasses;\n    }\n\n    getLinoInput() {\n        return <this.inputState.inputComponent\n            // autoFocus={this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE ? true : undefined}\n            onChange={(e) => {\n                if (!this.inputState.onChangeUpdateAssert(e)) return;\n                this.onChangeUpdate(e);\n                this.inputState.postOnChange(e);\n            }}\n            ref={this.onInputRef}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue() || \"\"}\n            {...this.inputState.inputProps}/>;\n    }\n\n    onChangeUpdate(e) {\n        this.update({[this.dataKey]: e.target.value});\n        this.setState({});\n    }\n\n    onInputRef(ref) {\n        this.inputEl = ref;\n        if (ref) {\n            let htmlInput = this.findHTMLInputElement(ref);\n            if (document.activeElement === htmlInput) return;\n            if (this.tabIndexMatch()) this.focus();\n        }\n    }\n\n    onKeyDown(event) {\n        if (event.code === \"Escape\" &&\n        this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL &&\n        this.props.editing_mode) {\n            this.ex.u.toggleEditingMode(this.props.urlParams);\n        }\n    }\n\n    onRef(ref) {\n        const onClick = () => {\n            this.container.onclick = (event) => {\n                if (!this.disabled()) {\n                    Object.assign(this.upController.globals, {\n                        currentInputRowIndex: Object.assign({rowIndex: 0}, this.props.column).rowIndex,\n                        currentInputTabIndex: this.props.tabIndex,\n                        currentInputWindowType: this.props[constants.URL_PARAM_WINDOW_TYPE],\n                        currentInputAHRefName: this.upController.actionHandler.refName,\n                    });\n                    if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL) {\n                        if (!this.props.editing_mode)\n                            this.upController.history.replaceState({editing_mode: true})\n                        else {\n                            if (this.state.textSelected) this.setState({textSelected: false})\n                            else this.select(this.findHTMLInputElement(this.inputEl));\n                        }\n                    }\n                }\n            }\n        }\n        if (ref) {\n            this.container = ref;\n            if (this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE) {\n                this.container = ref.closest(\"td\");\n                onClick();\n            }\n            else if (\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_DETAIL ||\n                this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_INSERT\n            ) onClick();\n        }\n        this.setCellStyle(this.container);\n    }\n\n    setCellStyle(ref) {\n        if (ref) {\n            let classes = this.getCellStyleClasses();\n            this.styleClasses.forEach(item => {ref.classList.remove(item)});\n            classes.forEach(item => {ref.classList.add(item)});\n        }\n    }\n\n    submit() {\n        this.upController.actionHandler.submit({\n            cellInfo: {rowIndex: this.props.column.rowIndex}});\n    }\n\n    tabIndexMatch() {\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE &&\n            this.props.column.rowIndex !== this.upController.globals.currentInputRowIndex\n        ) return false;\n        if (\n            this.props[constants.URL_PARAM_WINDOW_TYPE] === this.upController.globals.currentInputWindowType &&\n            this.upController.actionHandler.refName === this.upController.globals.currentInputAHRefName &&\n            this.props.tabIndex === this.upController.globals.currentInputTabIndex\n        ) return true;\n        return false;\n    }\n\n    update(values) {\n        this.upController.actionHandler.update({\n            values: values, elem: this.props.elem, col: this.props.column,\n            windowType: this.props[constants.URL_PARAM_WINDOW_TYPE]});\n    }\n\n    render(hide_label=this.props.hide_label, actions=[]) {\n        if (!this.state.ready) return null;\n        if (this.container) this.setCellStyle(this.container);\n        return <Labeled {...this.props} actions={actions}\n            hide_label={hide_label || this.props.hide_label}\n            elem={this.props.elem} isFilled={this.filled()}>\n            <div\n                className={this.ex.classNames.default(this.wrapperClasses)}\n                onKeyDown={this.onKeyDown}\n                ref={this.onRef}>\n                    {this.inputState.inputOnly ? this.getLinoInput() :\n                        this.props.editing_mode && !this.disabled() ?\n                            this.getLinoInput() : this.innerHTML()}\n            </div>\n        </Labeled>\n    }\n}\n\n\nexport class LeafComponentInputChoices extends LeafComponentInput {\n    static requiredModules = [\"prDropdown\"].concat(LeafComponentInput.requiredModules);\n    constructor(props, context) {\n        super(props, context);\n        this.wrapperClasses.push(\"l-ChoiceListFieldElement\");\n        this.state = {\n            ...this.state,\n            hidden_value: null\n        }\n\n        this.dataKeyHidden = props[constants.URL_PARAM_WINDOW_TYPE] === constants.WINDOW_TYPE_TABLE\n            ? props.elem.fields_index_hidden\n            : props.elem.name + \"Hidden\";\n\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n    }\n\n    onKeyDown = (e) => {\n        super.onKeyDown(e);\n        if (e.key === \"Enter\" && this.inputEl.getOverlay()) e.stopPropagation();\n    }\n\n    getValue() {\n        return {\n            text: super.getValue(),\n            value: this.getValueByName(this.dataKeyHidden)};\n    }\n\n    getLinoInput() {\n        return <this.ex.prDropdown.Dropdown\n            itemTemplate={(item) => {\n                return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n            }}\n            onChange={(e) => {\n                if (e.originalEvent.ctrlKey || e.originalEvent.altKey) return;\n                this.update({[this.dataKey]: e.value || null,  // have null instead of undefined\n                    [this.dataKeyHidden]: e.value || null});\n                this.setState({});\n            }}\n            optionLabel=\"text\"\n            options={this.options}\n            ref={this.onInputRef}\n            showClear={this.props.elem.field_options.allowBlank}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue().value}\n            valueTemplate={(item, options) => {\n                if (item) return <div dangerouslySetInnerHTML={{__html: item.text}}/>\n                return <div>&nbsp;</div>;\n            }}/>\n    }\n\n    innerHTML() {\n        let v = super.getValue() || \"\\u00a0\";\n        // return <div style={{whiteSpace: \"nowrap\"}}>{v}</div>\n        return <div /* style={{whiteSpace: \"nowrap\"}} */ dangerouslySetInnerHTML={{__html: v}}/>\n    }\n}\n","export const name = \"datetime\";\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as constants from './constants';\nimport { LeafComponentInput } from \"./LinoComponentUtils\";\nimport { RegisterImportPool } from \"./Base\";\n\nlet ex; const exModulePromises = ex = {\n    prCalendar: import(/* webpackChunkName: \"prCalendar_datetime\" */\"primereact/calendar\"),\n};RegisterImportPool(ex);\n\n\nclass DTFieldElement extends LeafComponentInput {\n    static requiredModules = [\"prCalendar\"].concat(LeafComponentInput.requiredModules);\n    static iPool = Object.assign(ex, LeafComponentInput.iPool.copy());\n    constructor(props) {\n        super(props);\n\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.innerHTML = this.innerHTML.bind(this);\n        this.isValid = this.isValid.bind(this);\n        this.updateValue = this.updateValue.bind(this);\n    }\n\n    getLinoInput(fieldProps={}) {\n        return <this.ex.prCalendar.Calendar\n            {...fieldProps}\n            className={\"l-DateFieldElement\"}\n            inputMode={this.props.urlParams.controller.globals.isMobile ? 'numeric' : 'none'}\n            inputStyle={{width: \"100%\"}}\n            keepInvalid={true}\n            onChange={(e) => this.updateValue(e)}\n            onClearButtonClick={(e) => {e.value = null; this.updateValue(e)}}\n            // TODO: check if https://github.com/primefaces/primereact/commit/16eafe5a171154da63bbfa9d83f84827e9d8363f#\n            // is available on a packaged version\n            // onSelect={(e) => this.updateValue(e)}\n            ref={this.onInputRef}\n            showButtonBar={true}\n            showIcon={this.props[constants.URL_PARAM_WINDOW_TYPE] !== constants.WINDOW_TYPE_TABLE}\n            showOnFocus={false}\n            style={{width: \"100%\"}}\n            tabIndex={this.props.tabIndex}\n            value={this.getValue()}/>\n    }\n\n    getValue() {\n        let v = super.getValue();\n        if (!this.props.urlParams.controller.filled(v)) return null;\n        return this.str2date(v);\n    }\n\n    innerHTML = () => (<div>{super.getValue() || \"\\u00a0\"}</div>);\n\n    isValid = (v) => (\n        v === null || v instanceof Date || this.str2date(v) instanceof Date);\n\n    updateValue(e) {\n        let value = e.value;\n        if (!this.props.urlParams.controller.filled(value)) value = null\n        else if (value instanceof Date) value = this.date2str(value);\n\n        this.container.classList.remove('dangling-modification');\n        this.container.classList.remove('unsaved-modification');\n\n        if (this.isValid(value)) {\n            this.update({[this.dataKey]: value});\n            this.setCellStyle(this.container);\n        } else this.container.classList.add('dangling-modification');\n    }\n}\n\n\nexport class DateFieldElement extends DTFieldElement {\n    constructor(props) {\n        super(props);\n        this.date2str = this.date2str.bind(this);\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.str2date = this.str2date.bind(this);\n    }\n\n    date2str(date) {\n        return (\"0\" + date.getDate()).slice(-2) + \".\" +\n            (\"0\" + (date.getMonth() + 1)).slice(-2) + \".\" +\n            date.getFullYear();\n    }\n\n    getLinoInput = () => super.getLinoInput({\n        dateFormat: \"dd.mm.yy\", yearNavigator: true, yearRange: \"1900:2900\"});\n\n    str2date(value) {\n        let parts = value.split(\".\");\n        if (parts.length === 3 && !parts.includes(\"\") && parts[2].length === 4)\n            return new Date(parts[2], parts[1] - 1, parts[0]);\n        return false;\n    }\n}\n\n\nexport class TimeFieldElement extends DTFieldElement {\n    constructor(props) {\n        super(props);\n        this.date2str = this.date2str.bind(this);\n        this.getLinoInput = this.getLinoInput.bind(this);\n        this.str2date = this.str2date.bind(this);\n    }\n\n    date2str(date) {\n        return (\"0\" + date.getHours()).slice(-2) + \":\" +\n            (\"0\" + date.getMinutes()).slice(-2);\n    }\n\n    getLinoInput = () => super.getLinoInput(\n        {hourFormat: '24', showTime: true, timeOnly: true});\n\n    str2date(timeStr) {\n        let regex = /^(\\d(?:\\d(?=[.,:; ]?\\d\\d|[.,:; ]\\d|$))?)?[.,:; ]?(\\d{0,2})$/g;\n        if (timeStr.match(regex)) {\n            let m = regex.exec(timeStr),\n                viewDate = new Date(),\n                hours = m[1],\n                min = m[2];\n            viewDate.setHours(hours || 0);\n            viewDate.setMinutes(min || 0);\n            return viewDate;\n        }\n        return false;\n    }\n}\n\n\nexport class DateFilter extends DateFieldElement {\n    static propTypes = {\n        parent: PropTypes.object.isRequired,\n    }\n\n    static defaultProps = {\n        editing_mode: true,\n        hide_label: true,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.disabled = this.disabled.bind(this);\n        this.filled = this.filled.bind(this);\n        this.getValue = this.getValue.bind(this);\n        this.update = this.update.bind(this);\n    }\n\n    filled = () => this.props.parent.context.controller.filled(this.props.value);\n    disabled = () => false;\n    getValue() {\n        if (!this.filled()) return null;\n        return this.str2date(this.props.parent.state.value);\n    }\n    update = (values) => this.props.parent.pushFilter({value: values[this.dataKey]});\n}\n"],"names":["name","ex","classNames","prDropdown","prInputText","queryString","u","maintainTableWidth","elem","count","ctx","undefined","this","keys","Object","flexs","length","forEach","key","tbl","document","getElementById","getElementsByClassName","getBoundingClientRect","width","Array","from","querySelectorAll","el","classList","join","includes","style","setProperty","RegisterImportPool","Labeled","actions","label","children","hide_label","isFilled","localEx","getExReady","ready","_jsxs","React","className","default","title","assign","value","quicktip","help_text","map","action","i","_jsx","onClick","e","run","propTypes","PropTypes","isRequired","ABCComponent","getValueByName","props","context","constants","param_values","rows","column","rowIndex","data","LeafComponentBase","Component","constructor","super","filled","getValue","wrapperClasses","dataKey","fields_index","upController","urlParams","controller","c","bind","innerHTML","setLeafRef","dangerous","v","JSON","stringify","dangerouslySetInnerHTML","__html","input","type","dataContext","actorID","ref","onLeafMount","requiredModules","iPool","contextType","DataContextType","propTypesFromLinoLayout","editing_mode","tabIndex","defaultProps","LeafComponentDelayedValue","liveUpdate","params","mk","state","mt","update","masterRelate","hasOwnContext","actionHandler","masterRelateForSlave","data_url","actor_id","packId","delayed","delayed_value","shouldComponentUpdate","getData","onReady","val","globals","panels","delayed_value_url","setState","nextProps","nextState","componentDidUpdate","prevProps","prevState","componentWillUnmount","silentFetch","path","getParams","then","buttons","concat","LeafComponentInput","textSelected","styleClasses","disabled","focus","getCellStyleClasses","getLinoInput","onChangeUpdate","onInputRef","onKeyDown","onRef","setCellStyle","submit","tabIndexMatch","prepare","inputState","inputComponent","InputText","inputOnly","inputProps","onChangeUpdateAssert","event","postOnChange","editable","row","last_item","meta","phantom","disable_editing","disabled_fields","findHTMLInputElement","focusInput","inputRef","current","hasOwnProperty","getInput","select","_select","_input","container","getElementsByTagName","inputEl","modifiedRows","push","modified","onChange","target","htmlInput","activeElement","code","toggleEditingMode","onclick","currentInputRowIndex","currentInputTabIndex","currentInputWindowType","currentInputAHRefName","refName","history","replaceState","closest","classes","item","remove","add","cellInfo","values","col","windowType","render","LeafComponentInputChoices","getOverlay","stopPropagation","hidden_value","dataKeyHidden","fields_index_hidden","text","Dropdown","itemTemplate","originalEvent","ctrlKey","altKey","optionLabel","options","showClear","field_options","allowBlank","valueTemplate","prCalendar","DTFieldElement","isValid","Date","str2date","updateValue","fieldProps","Calendar","inputMode","isMobile","inputStyle","keepInvalid","onClearButtonClick","showButtonBar","showIcon","showOnFocus","date2str","copy","DateFieldElement","dateFormat","yearNavigator","yearRange","date","getDate","slice","getMonth","getFullYear","parts","split","TimeFieldElement","hourFormat","showTime","timeOnly","getHours","getMinutes","timeStr","regex","match","m","exec","viewDate","hours","min","setHours","setMinutes","DateFilter","parent","pushFilter"],"sourceRoot":""}