[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "web-maestro"
dynamic = ["version"]
description = "Production-ready web content extraction with multi-provider LLM support and intelligent browser automation"
readme = {file = "README.md", content-type = "text/markdown"}
license = {text = "MIT"}
requires-python = ">=3.9"
authors = [
    { name = "Maestro Team", email = "team@maestro.dev" },
]
maintainers = [
    { name = "Maestro Team", email = "team@maestro.dev" },
]
keywords = [
    "web-scraping",
    "content-extraction",
    "llm",
    "ai",
    "multi-provider",
    "playwright",
    "automation",
    "openai",
    "anthropic",
    "gpt",
    "claude",
    "browser-automation",
    "web-crawler",
    "data-extraction",
    "async",
    "streaming"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing",
]
dependencies = [
    # Core web automation
    "playwright>=1.40.0",
    "aiohttp>=3.8.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",

    # Text processing
    "tiktoken>=0.5.0",
    "chardet>=5.0.0",

    # Image and PDF processing
    "pdf2image>=1.16.0",
    "pillow>=10.0.0",

    # Utilities
    "tenacity>=8.0.0",
    "pydantic>=2.0.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.2",
]

[project.optional-dependencies]
# LLM Provider options
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.8.0"]
ollama = ["ollama>=0.1.0"]
portkey = ["portkey-ai>=1.14.0"]  # Portkey AI SDK

# PDF processing dependencies (requires poppler system dependency)
pdf = [
    "pdf2image>=1.16.0",
    "pillow>=10.0.0",
    "PyPDF2>=3.0.0",
    "pdfplumber>=0.9.0",
]

# Multimodal and advanced processing
multimodal = [
    "pdf2image>=1.16.0",
    "pillow>=10.0.0",
]

# Feature sets
all-providers = ["openai>=1.0.0", "anthropic>=0.8.0", "ollama>=0.1.0", "portkey-ai>=1.14.0"]
all-features = [
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "ollama>=0.1.0",
    "portkey-ai>=1.14.0",
    "pdf2image>=1.16.0",
    "pillow>=10.0.0",
    "PyPDF2>=3.0.0",
    "pdfplumber>=0.9.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "ruff>=0.1.6",
    "mypy>=1.0.0",
    "types-beautifulsoup4",
    "types-lxml",
    "types-pyyaml",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/fede-dash/web-maestro"
Documentation = "https://web-maestro.readthedocs.io"
Repository = "https://github.com/fede-dash/web-maestro.git"
"Bug Tracker" = "https://github.com/fede-dash/web-maestro/issues"

[tool.hatch.version]
path = "src/web_maestro/__about__.py"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/web_maestro"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "ruff",
    "mypy",
    "types-beautifulsoup4",
    "types-lxml",
]

[tool.hatch.envs.default.scripts]
# Testing commands
test = "pytest {args:tests}"
test-cov = "pytest --cov=web_maestro --cov-report=term-missing --cov-report=xml {args:tests}"
test-all = "pytest --cov=web_maestro --cov-report=term-missing tests/"

# Code quality commands
format = [
    "black .",
    "ruff check . --fix",
]
lint = [
    "ruff check .",
    "black --check .",
    "mypy src/web_maestro tests --ignore-missing-imports",
]
check = [
    "ruff check .",
    "black --check .",
    "mypy src/web_maestro tests --ignore-missing-imports",
    "pytest --cov=web_maestro --cov-report=term-missing tests/",
]

# Development helpers
clean = [
    "find . -type f -name '*.pyc' -delete",
    "find . -type d -name '__pycache__' -delete",
    "find . -type d -name '*.egg-info' -exec rm -rf {} +",
    "rm -rf build/ dist/ .coverage .pytest_cache/",
]
install-dev = "pip install -e .[dev,all-features]"
install-hooks = "pre-commit install"

# System setup scripts
setup-system = "python scripts/setup-system-deps.py"
setup-dev = [
    "python scripts/setup-system-deps.py",
    "pip install -e .[dev,all-features]",
    "pre-commit install",
    "playwright install",
]
setup-full = [
    "python scripts/setup-system-deps.py",
    "pip install -e .[all-features]",
    "playwright install",
]

# Test environment matrix
[[tool.hatch.envs.test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # For parallel testing
    "pytest-mock>=3.10.0",  # For mocking
]

[tool.hatch.envs.test.scripts]
run = "pytest {args:tests}"
run-cov = "pytest --cov=web_maestro --cov-report=term-missing --cov-report=xml --cov-report=html {args:tests}"
run-parallel = "pytest -n auto {args:tests}"
run-fast = "pytest --ff -x {args:tests}"
run-slow = "pytest -m slow {args:tests}"

# Documentation
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"

[tool.black]
target-version = ["py39"]
line-length = 88

[tool.ruff]
target-version = "py39"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert detected (allow assert in tests)
    "T201",  # print found (allow print statements)
    "T203",  # pprint found
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "PT011", "PT012"]  # Allow assert and pytest fixtures
"test_*.py" = ["S101"]
"**/test_*.py" = ["S101"]

[tool.ruff.lint.isort]
known-first-party = ["web_maestro"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
