[tool.poetry]
name = "architxt"
version = "0.3.1"
description = "ArchiTXT is a tool for structuring textual data into a valid database model. It is guided by a meta-grammar and uses an iterative process of tree rewriting."
authors = [
    "Nicolas Hiot <nicolas.hiot@univ-orleans.fr>",
    "Mirian Halfeld-Ferrari <mirian@univ-orleans.fr>",
    "Jacques Chabin <jacques.chabin@univ-orleans.fr>"
]
maintainers = [
    "Nicolas Hiot <nicolas.hiot@univ-orleans.fr>"
]
readme = "README.md"
repository = "https://github.com/neplex/ArchiTXT"
documentation = "https://neplex.github.io/ArchiTXT"
keywords = [
    "python",
    "nlp",
    "database",
    "structuration",
    "text mining",
    "text analysis",
    "data analysis"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Typing :: Typed",
]

[tool.poetry.scripts]
architxt = "architxt.cli:app"

[tool.poetry-dynamic-versioning]
enable = false
metadata = false

[build-system]
requires = [
    "poetry-core>=1.0.0",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0",
]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Optional UI dependencies
streamlit = { version = ">=1.39.0", optional = true }
streamlit-agraph = { version = "*", optional = true }
streamlit-tags = { version = "*", optional = true }

# Use a fixed version of nmslib
nmslib = { git = "https://github.com/nmslib/nmslib.git", subdirectory = "python_bindings", optional = true }

# PyTorch version compatible with macOS 13
torch = "<2.3.0"

# Core dependencies
tqdm = ">=4.60"
nltk = "^3.9"
unidecode = "*"
benepar = "*"
pandas = "^2.3.0"
numpy = "^1.16"
levenshtein = "*"
more-itertools = "*"
pybrat = "^0.1.7"
mlflow = ">=3.1,<3.2"
psutil = "^7.0.0"
typer = ">=0.15.1,<0.17.0"
click = "<8.3.0"
rich = ">=13.9.4,<15.0.0"
antlr4-python3-runtime = ">=4.13,<5"
cachetools = "^5.5.0"
googletrans = "^4.0.2"
aiostream = ">=0.7,<0.8"
sqlalchemy = "^2.0.39"
scispacy = "^0.5.5"
notebook = "^7.3.3"
plotly = "<6.0"
itables = "^2.3.0"
xmltodict = "^0.14.2"
xlrd = "^2.0.1"
neo4j = "^5.28.1"
zodb = "^6.0"
relstorage = "^4.1.1"
yfiles-jupyter-graphs-for-neo4j = "^1.7.0"
anyio = "^4.9.0"

[tool.poetry.extras]
ui = ["streamlit", "streamlit-agraph", "streamlit-tags"]
all = ["streamlit", "streamlit-agraph", "streamlit-tags"]

[tool.poetry.group.dev.dependencies]
wheel = "^0.45.0"
devtools = "^0.12.0"
py-spy = "~0.4.0"
pre-commit = "^4.0.1"
datasets = "*"
testcontainers = "^4.10.0"

# Linters
mypy = "1.15.0"
ruff = "0.12.2"
deptry = "^0.23.0"

# Documentation
sphinx = "^8.1.3"
sphinx-book-theme = "*"
sphinx-toolbox = "*"
sphinx-design = "*"
sphinx-sitemap = "*"
sphinx-copybutton = "*"
sphinxcontrib-typer = "*"
sphinxcontrib-mermaid = "*"
myst-nb = "^1.2.0"
notebook = "^7.3.3"
ipywidgets = "^8.1.7"
yfiles-jupyter-graphs = "^1.10.7"

# Typing stubs
pandas-stubs = "*"
types-tqdm = "*"
types-cachetools = "*"
types-toml = "*"

# Tools for generating grammar parsers
antlr4-tools = "^0.2.1"

# All packages in dev mode
streamlit = "*"
streamlit-agraph = "*"
streamlit-tags = "*"

[tool.poetry.group.test.dependencies]
pytest = "^8.3"
pytest-cov = "*"
pytest-xdist = "*"
pytest-mock = "*"

beartype = ">=0.19,<0.22"
pytest-beartype = "^0.2.0"

hypothesis = "^6.68.0"

# Async testing libraries
asyncio = "^3.4.0"
trio = ">=0.28,<0.31"

[tool.pytest.ini_options]
minversion = "7.0"
junit_family = "legacy"
testpaths = ["architxt", "tests"]
addopts = [
    "--doctest-modules",
    "--beartype-skip-packages=architxt/grammar"
]

[tool.coverage.run]
source = ["architxt"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:"
]

[tool.ruff]
target-version = "py310"
line-length = 120
src = ["architxt", "tests"]
exclude = ["architxt/grammar", "dev"]

[tool.ruff.lint]
select = [
    "E4", # Pycodestyle error codes that are safe to auto-fix
    "E7",
    "E9",
    "A", # builtins
    "ARG", # Unused arguments
    "C4", # Comprehensions
    "C90", # mccabe complexity
    "D", # Documentation check
    "F", # Flake8 rules
    "N", # pep8 naming
    "I", # isort rules for import ordering
    "ICN", # Import conventions
    "TID", # Tidy imports
    "UP", # pyupgrade (for safe code modernization)
    "SIM", # Code simplifications
    "LOG", # Logger usage
    "PIE", # Miscellaneous
    "RUF", # Ruff-specific auto-fixable rules
    "PD", # Pandas checks
    "NPY", # NumPy checks
    "PERF", # Performance anti-pattern checks
    "FURB", # Old Python code
    "PT", # Pytest checks
    "RET", # Returns
    "PTH", # Prefer Pathlib
    "TC", # Type checking
    "ANN", # Type annotations
    "EM", # Error messages
    "TD", # Todos format
    "FLY", # Prefer f-string
    "TRY", # Exceptions antipattern checks
    "SLOT",
    "PYI",
]
ignore = [
    "ANN401", # Any typing
    "D1", # Undocumented
    "D203", # Incorrect blank line before class
    "D212", # Multi-line summary first line
]

[tool.ruff.format]
quote-style = "preserve"

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
check_untyped_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = "architxt/grammar"
plugins = [
    "numpy.typing.mypy_plugin"
]
