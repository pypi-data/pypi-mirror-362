"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .feeenum import FeeEnum
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


UniswapBuyExactlyParamsTokenInTypedDict = TypeAliasType(
    "UniswapBuyExactlyParamsTokenInTypedDict", Union[TokenEnum, str]
)
r"""The symbol of the token to swap from."""


UniswapBuyExactlyParamsTokenIn = TypeAliasType(
    "UniswapBuyExactlyParamsTokenIn", Union[TokenEnum, str]
)
r"""The symbol of the token to swap from."""


UniswapBuyExactlyParamsTokenOutTypedDict = TypeAliasType(
    "UniswapBuyExactlyParamsTokenOutTypedDict", Union[TokenEnum, str]
)
r"""The symbol of the token to swap to."""


UniswapBuyExactlyParamsTokenOut = TypeAliasType(
    "UniswapBuyExactlyParamsTokenOut", Union[TokenEnum, str]
)
r"""The symbol of the token to swap to."""


UniswapBuyExactlyParamsAmountTypedDict = TypeAliasType(
    "UniswapBuyExactlyParamsAmountTypedDict", Union[float, str]
)
r"""The amount of the token to swap to"""


UniswapBuyExactlyParamsAmount = TypeAliasType(
    "UniswapBuyExactlyParamsAmount", Union[float, str]
)
r"""The amount of the token to swap to"""


class UniswapBuyExactlyParamsTypedDict(TypedDict):
    token_in: UniswapBuyExactlyParamsTokenInTypedDict
    r"""The symbol of the token to swap from."""
    token_out: UniswapBuyExactlyParamsTokenOutTypedDict
    r"""The symbol of the token to swap to."""
    fee: FeeEnum
    r"""The transaction fee of a Uniswap pool in bips.

    Uniswap supports 4 different fee levels.
    """
    amount: UniswapBuyExactlyParamsAmountTypedDict
    r"""The amount of the token to swap to"""
    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed."""
    action_type: Literal["UNISWAP_BUY_EXACTLY"]
    wrap_eth: NotRequired[bool]
    r"""Whether to wrap ETH to WETH, only use when swapping WETH into something"""


class UniswapBuyExactlyParams(BaseModel):
    token_in: UniswapBuyExactlyParamsTokenIn
    r"""The symbol of the token to swap from."""

    token_out: UniswapBuyExactlyParamsTokenOut
    r"""The symbol of the token to swap to."""

    fee: FeeEnum
    r"""The transaction fee of a Uniswap pool in bips.

    Uniswap supports 4 different fee levels.
    """

    amount: UniswapBuyExactlyParamsAmount
    r"""The amount of the token to swap to"""

    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["UNISWAP_BUY_EXACTLY"]],
            AfterValidator(validate_const("UNISWAP_BUY_EXACTLY")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "UNISWAP_BUY_EXACTLY"

    wrap_eth: Optional[bool] = False
    r"""Whether to wrap ETH to WETH, only use when swapping WETH into something"""
