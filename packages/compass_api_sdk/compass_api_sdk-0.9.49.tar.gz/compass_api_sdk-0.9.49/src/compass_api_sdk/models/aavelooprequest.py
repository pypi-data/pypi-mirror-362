"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from .signedauthorization import SignedAuthorization, SignedAuthorizationTypedDict
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from typing import Union
from typing_extensions import TypeAliasType, TypedDict


InitialCollateralAmountTypedDict = TypeAliasType(
    "InitialCollateralAmountTypedDict", Union[float, str]
)
r"""Amount of collateral token to supply to Aave"""


InitialCollateralAmount = TypeAliasType("InitialCollateralAmount", Union[float, str])
r"""Amount of collateral token to supply to Aave"""


MultiplierTypedDict = TypeAliasType("MultiplierTypedDict", Union[float, str])
r"""Leverage multiplier. Total loop collateral will be calculated as `multiplier` x `initial_collateral_amount`"""


Multiplier = TypeAliasType("Multiplier", Union[float, str])
r"""Leverage multiplier. Total loop collateral will be calculated as `multiplier` x `initial_collateral_amount`"""


MaxSlippagePercentTypedDict = TypeAliasType(
    "MaxSlippagePercentTypedDict", Union[float, str]
)
r"""Maximum allowed slippage for token swaps in percentage"""


MaxSlippagePercent = TypeAliasType("MaxSlippagePercent", Union[float, str])
r"""Maximum allowed slippage for token swaps in percentage"""


LoanToValueTypedDict = TypeAliasType("LoanToValueTypedDict", Union[float, str])
r"""Loan To Value percentage of the loop"""


LoanToValue = TypeAliasType("LoanToValue", Union[float, str])
r"""Loan To Value percentage of the loop"""


class AaveLoopRequestTypedDict(TypedDict):
    r"""Request model for executing an Aave loop strategy."""

    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""
    signed_authorization: SignedAuthorizationTypedDict
    collateral_token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    borrow_token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    initial_collateral_amount: InitialCollateralAmountTypedDict
    r"""Amount of collateral token to supply to Aave"""
    multiplier: MultiplierTypedDict
    r"""Leverage multiplier. Total loop collateral will be calculated as `multiplier` x `initial_collateral_amount`"""
    max_slippage_percent: MaxSlippagePercentTypedDict
    r"""Maximum allowed slippage for token swaps in percentage"""
    loan_to_value: LoanToValueTypedDict
    r"""Loan To Value percentage of the loop"""


class AaveLoopRequest(BaseModel):
    r"""Request model for executing an Aave loop strategy."""

    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    signed_authorization: SignedAuthorization

    collateral_token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    borrow_token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    initial_collateral_amount: InitialCollateralAmount
    r"""Amount of collateral token to supply to Aave"""

    multiplier: Multiplier
    r"""Leverage multiplier. Total loop collateral will be calculated as `multiplier` x `initial_collateral_amount`"""

    max_slippage_percent: MaxSlippagePercent
    r"""Maximum allowed slippage for token swaps in percentage"""

    loan_to_value: LoanToValue
    r"""Loan To Value percentage of the loop"""
