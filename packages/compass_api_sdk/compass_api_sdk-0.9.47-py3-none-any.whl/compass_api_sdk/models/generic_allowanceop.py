"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GenericAllowanceChain(str, Enum):
    r"""The chain to use."""

    BASE_MAINNET = "base:mainnet"
    ETHEREUM_MAINNET = "ethereum:mainnet"
    ARBITRUM_MAINNET = "arbitrum:mainnet"


GenericAllowanceTokenTypedDict = TypeAliasType(
    "GenericAllowanceTokenTypedDict", Union[TokenEnum, str]
)
r"""The symbol or address of the token for which the allowance is checked.."""


GenericAllowanceToken = TypeAliasType("GenericAllowanceToken", Union[TokenEnum, str])
r"""The symbol or address of the token for which the allowance is checked.."""


class GenericAllowanceContractEnum(str, Enum):
    AAVE_V3_POOL = "AaveV3Pool"
    AERODROME_BASIC_ROUTER = "AerodromeBasicRouter"
    AERODROME_SLIPSTREAM_ROUTER = "AerodromeSlipstreamRouter"
    AERODROME_SLIPSTREAM_NONFUNGIBLE_POSITION_MANAGER = (
        "AerodromeSlipstreamNonfungiblePositionManager"
    )
    UNISWAP_V3_ROUTER = "UniswapV3Router"
    UNISWAP_V3_NFT_POSITION_MANAGER = "UniswapV3NFTPositionManager"
    MORPHO = "Morpho"
    SKY_DAI_USDS_CONVERTER = "SkyDaiUsdsConverter"
    SKY_USDC_USDS_CONVERTER = "SkyUsdcUsdsConverter"
    SKY_USDS_VAULT = "SkyUsdsVault"
    PENDLE_ROUTER = "PendleRouter"


GenericAllowanceContractUnionTypedDict = TypeAliasType(
    "GenericAllowanceContractUnionTypedDict", Union[GenericAllowanceContractEnum, str]
)
r"""The name or address of the contract to check allowance for."""


GenericAllowanceContractUnion = TypeAliasType(
    "GenericAllowanceContractUnion", Union[GenericAllowanceContractEnum, str]
)
r"""The name or address of the contract to check allowance for."""


class GenericAllowanceRequestTypedDict(TypedDict):
    token: GenericAllowanceTokenTypedDict
    r"""The symbol or address of the token for which the allowance is checked.."""
    contract: GenericAllowanceContractUnionTypedDict
    r"""The name or address of the contract to check allowance for."""
    chain: GenericAllowanceChain
    r"""The chain to use."""
    user: NotRequired[str]
    r"""The user to get the ERC20 allowance of."""


class GenericAllowanceRequest(BaseModel):
    token: Annotated[
        GenericAllowanceToken,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The symbol or address of the token for which the allowance is checked.."""

    contract: Annotated[
        GenericAllowanceContractUnion,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The name or address of the contract to check allowance for."""

    chain: Annotated[
        GenericAllowanceChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GenericAllowanceChain.ARBITRUM_MAINNET
    r"""The chain to use."""

    user: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
    r"""The user to get the ERC20 allowance of."""
