"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class TokenBalanceChain(str, Enum):
    r"""The chain to use."""

    BASE_MAINNET = "base:mainnet"
    ETHEREUM_MAINNET = "ethereum:mainnet"
    ARBITRUM_MAINNET = "arbitrum:mainnet"


TokenBalanceTokenTypedDict = TypeAliasType(
    "TokenBalanceTokenTypedDict", Union[TokenEnum, str]
)
r"""The symbol of the token for which the balance is checked.."""


TokenBalanceToken = TypeAliasType("TokenBalanceToken", Union[TokenEnum, str])
r"""The symbol of the token for which the balance is checked.."""


class TokenBalanceRequestTypedDict(TypedDict):
    token: TokenBalanceTokenTypedDict
    r"""The symbol of the token for which the balance is checked.."""
    chain: TokenBalanceChain
    r"""The chain to use."""
    user: str
    r"""The user to get the ERC20 balance of."""


class TokenBalanceRequest(BaseModel):
    token: Annotated[
        TokenBalanceToken,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The symbol of the token for which the balance is checked.."""

    chain: Annotated[
        TokenBalanceChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = TokenBalanceChain.ARBITRUM_MAINNET
    r"""The chain to use."""

    user: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = "0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"
    r"""The user to get the ERC20 balance of."""
