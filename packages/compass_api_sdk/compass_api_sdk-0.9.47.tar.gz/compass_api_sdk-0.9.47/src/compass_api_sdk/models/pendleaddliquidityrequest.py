"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .chain import Chain
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


PendleAddLiquidityRequestAmountTypedDict = TypeAliasType(
    "PendleAddLiquidityRequestAmountTypedDict", Union[float, str]
)
r"""The amount of liquidity you would like to add to the market denominated in the market's Underlying Token."""


PendleAddLiquidityRequestAmount = TypeAliasType(
    "PendleAddLiquidityRequestAmount", Union[float, str]
)
r"""The amount of liquidity you would like to add to the market denominated in the market's Underlying Token."""


class PendleAddLiquidityRequestTypedDict(TypedDict):
    market_address: str
    r"""The address identifying which Pendle Market you would like to add liquidity to."""
    amount: PendleAddLiquidityRequestAmountTypedDict
    r"""The amount of liquidity you would like to add to the market denominated in the market's Underlying Token."""
    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed."""
    chain: Chain
    r"""The chain to use."""
    sender: str
    r"""The address of the transaction sender."""
    action_type: Literal["PENDLE_ADD_LIQUIDITY"]


class PendleAddLiquidityRequest(BaseModel):
    market_address: str
    r"""The address identifying which Pendle Market you would like to add liquidity to."""

    amount: PendleAddLiquidityRequestAmount
    r"""The amount of liquidity you would like to add to the market denominated in the market's Underlying Token."""

    max_slippage_percent: float
    r"""The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed."""

    chain: Chain
    r"""The chain to use."""

    sender: str
    r"""The address of the transaction sender."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["PENDLE_ADD_LIQUIDITY"]],
            AfterValidator(validate_const("PENDLE_ADD_LIQUIDITY")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "PENDLE_ADD_LIQUIDITY"
