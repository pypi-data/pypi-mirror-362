"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from pydantic import model_serializer
from typing import Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class PendleQuoteChain(str, Enum):
    r"""The chain to use."""

    BASE_MAINNET = "base:mainnet"
    ETHEREUM_MAINNET = "ethereum:mainnet"
    ARBITRUM_MAINNET = "arbitrum:mainnet"


PendleQuoteAmountTypedDict = TypeAliasType(
    "PendleQuoteAmountTypedDict", Union[float, str]
)
r"""The quantity to trade."""


PendleQuoteAmount = TypeAliasType("PendleQuoteAmount", Union[float, str])
r"""The quantity to trade."""


class TokenType(str, Enum):
    r"""Specifies the token to quote (`PT`, `YT`, or `LP`)"""

    PT = "PT"
    YT = "YT"
    LP = "LP"


class TradeType(str, Enum):
    r"""Specifies the trade direction (`BUY` or `SELL`)"""

    BUY = "BUY"
    SELL = "SELL"


class PendleQuoteRequestTypedDict(TypedDict):
    amount: PendleQuoteAmountTypedDict
    r"""The quantity to trade."""
    chain: PendleQuoteChain
    r"""The chain to use."""
    block: NotRequired[Nullable[int]]
    r"""Optional block number (defaults to latest)."""
    market_address: str
    r"""The market address of the desired position."""
    token_type: TokenType
    r"""Specifies the token to quote (`PT`, `YT`, or `LP`)"""
    trade_type: TradeType
    r"""Specifies the trade direction (`BUY` or `SELL`)"""


class PendleQuoteRequest(BaseModel):
    amount: Annotated[
        PendleQuoteAmount,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""The quantity to trade."""

    chain: Annotated[
        PendleQuoteChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = PendleQuoteChain.ARBITRUM_MAINNET
    r"""The chain to use."""

    block: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Optional block number (defaults to latest)."""

    market_address: Annotated[
        str, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = "0x46d62a8dede1bf2d0de04f2ed863245cbba5e538"
    r"""The market address of the desired position."""

    token_type: Annotated[
        TokenType, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = TokenType.PT
    r"""Specifies the token to quote (`PT`, `YT`, or `LP`)"""

    trade_type: Annotated[
        TradeType, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = TradeType.BUY
    r"""Specifies the trade direction (`BUY` or `SELL`)"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["block"]
        nullable_fields = ["block"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
